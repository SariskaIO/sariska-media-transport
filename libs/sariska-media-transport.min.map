{"version":3,"sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/./src/JitsiConferenceEvents.js","webpack://SariskaMediaTransport/./src/service/xmpp/XMPPEvents.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/index.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaType.js","webpack://SariskaMediaTransport/./src/modules/browser/index.js","webpack://SariskaMediaTransport/./src/dom/var/getProto.js","webpack://SariskaMediaTransport/./src/dom/var/slice.js","webpack://SariskaMediaTransport/./src/dom/var/flat.js","webpack://SariskaMediaTransport/./src/dom/var/hasOwn.js","webpack://SariskaMediaTransport/./src/dom/var/fnToString.js","webpack://SariskaMediaTransport/./src/dom/var/ObjectFunctionString.js","webpack://SariskaMediaTransport/./src/dom/core/DOMEval.js","webpack://SariskaMediaTransport/./src/dom/core.js","webpack://SariskaMediaTransport/./src/dom/var/isWindow.js","webpack://SariskaMediaTransport/./src/dom/var/support.js","webpack://SariskaMediaTransport/./src/modules/statistics/statistics.js","webpack://SariskaMediaTransport/./src/service/RTC/RTCEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/AnalyticsEvents.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaDirection.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./src/modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTC.js","webpack://SariskaMediaTransport/./src/service/RTC/VideoType.js","webpack://SariskaMediaTransport/./src/JitsiTrackErrors.js","webpack://SariskaMediaTransport/./src/JitsiTrackEvents.js","webpack://SariskaMediaTransport/./src/JitsiConferenceErrors.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDP.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./src/JitsiTrackError.js","webpack://SariskaMediaTransport/./src/service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./src/modules/util/Listenable.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./src/modules/detection/DetectionEvents.js","webpack://SariskaMediaTransport/./src/modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGWConstants.js","webpack://SariskaMediaTransport/./src/JitsiConnectionEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/Events.js","webpack://SariskaMediaTransport/./src/dom/var/document.js","webpack://SariskaMediaTransport/./src/dom/var/arr.js","webpack://SariskaMediaTransport/./src/modules/settings/Settings.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./src/modules/util/MathUtil.js","webpack://SariskaMediaTransport/./src/service/connectivity/ConnectionQualityEvents.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionState.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/constants.js","webpack://SariskaMediaTransport/./src/dom/core/nodeName.js","webpack://SariskaMediaTransport/./src/dom/var/documentElement.js","webpack://SariskaMediaTransport/./src/dom/var/pop.js","webpack://SariskaMediaTransport/./src/dom/selector/var/whitespace.js","webpack://SariskaMediaTransport/./src/dom/var/isIE.js","webpack://SariskaMediaTransport/./src/dom/selector/rbuggyQSA.js","webpack://SariskaMediaTransport/./src/dom/selector/contains.js","webpack://SariskaMediaTransport/./src/dom/selector/escapeSelector.js","webpack://SariskaMediaTransport/./src/dom/var/sort.js","webpack://SariskaMediaTransport/./src/dom/selector/uniqueSort.js","webpack://SariskaMediaTransport/./src/dom/selector.js","webpack://SariskaMediaTransport/./src/dom/core/access.js","webpack://SariskaMediaTransport/./src/dom/var/rnothtmlwhite.js","webpack://SariskaMediaTransport/./src/dom/attributes/attr.js","webpack://SariskaMediaTransport/./src/dom/attributes/prop.js","webpack://SariskaMediaTransport/./src/dom/core/stripAndCollapse.js","webpack://SariskaMediaTransport/./src/dom/core/var/rsingleTag.js","webpack://SariskaMediaTransport/./src/dom/traversing/var/rneedsContext.js","webpack://SariskaMediaTransport/./src/dom/traversing/findFilter.js","webpack://SariskaMediaTransport/./src/dom/core/init.js","webpack://SariskaMediaTransport/./src/dom/attributes/classes.js","webpack://SariskaMediaTransport/./src/dom/attributes/val.js","webpack://SariskaMediaTransport/./src/dom/attributes.js","webpack://SariskaMediaTransport/./src/dom/core/parseXML.js","webpack://SariskaMediaTransport/./src/dom/manipulation.js","webpack://SariskaMediaTransport/./src/dom/jquery.js","webpack://SariskaMediaTransport/./src/dom/var/push.js","webpack://SariskaMediaTransport/./src/modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./src/modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./src/JitsiConnectionErrors.js","webpack://SariskaMediaTransport/./src/modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingEvents.js","webpack://SariskaMediaTransport/(webpack)/buildin/global.js","webpack://SariskaMediaTransport/./src/modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./src/dom/var/class2type.js","webpack://SariskaMediaTransport/./src/config/index.js","webpack://SariskaMediaTransport/./src/dom/var/indexOf.js","webpack://SariskaMediaTransport/./src/modules/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./src/modules/util/Deferred.js","webpack://SariskaMediaTransport/./src/modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./src/service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevicesEvents.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./src/modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./src/modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/audio-mixer/AudioMixerEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/JitsiStreamPresenterEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./src/modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./node_modules/process/browser.js","webpack://SariskaMediaTransport/./src/SariskaMediaTransport.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./src/dom/var/toString.js","webpack://SariskaMediaTransport/./src/dom/core/toType.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./src/JitsiTranscriptionStatus.js","webpack://SariskaMediaTransport/./src/modules/xmpp/MediaSessionEvents.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./src/service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./src/modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./src/modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./src/service/e2eping/E2ePingEvents.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/index.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/index.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevices.js","webpack://SariskaMediaTransport/./src/service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./src/modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./src/modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./src/modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/rng.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/v4.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://SariskaMediaTransport/(webpack)/buildin/module.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./src/modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./src/modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./src/JitsiConnection.js","webpack://SariskaMediaTransport/./src/JitsiConference.js","webpack://SariskaMediaTransport/./src/JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./src/modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./src/modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./src/modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./src/modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./src/JitsiParticipant.js","webpack://SariskaMediaTransport/./src/authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./src/modules/util/Retry.js","webpack://SariskaMediaTransport/./src/modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./src/modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./src/modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./src/modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./src/modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./node_modules/async/lib/async.js","webpack://SariskaMediaTransport/./src/modules/util/StringUtils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./src/modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./src/modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./src/modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./src/modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./src/modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./src/modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./src/modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./src/modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./src/modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./src/modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./src/modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./src/modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./src/modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./src/modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./src/modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./src/modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./src/modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./src/modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./src/modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./src/index.js","webpack://SariskaMediaTransport/./src/dom/exports/global.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://SariskaMediaTransport/(webpack)/buildin/amd-options.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./src/service/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/timers-browserify/main.js","webpack://SariskaMediaTransport/./node_modules/setimmediate/setImmediate.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./src/modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./src/modules/transcription/word.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","SUBTITLES_RECEIVED","TRACK_UPDATED","ANALYTICS_EVENT_RECEIVED","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_FAILED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","MEETING_ID_SET","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_RECEIVED","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","AUDIO","PRESENTER","VIDEO","BrowserCapabilities","flat","array","apply","class2type","hasOwn","fnToString","preservedScriptAttributes","src","noModule","DOMEval","script","head","removeChild","rhtmlSuffix","jQuery","selector","context","fn","isArrayLike","toType","isWindow","jquery","toArray","slice","pushStack","elems","ret","merge","prevObject","each","first","eq","last","even","grep","_elem","odd","end","extend","copy","copyIsArray","clone","target","deep","isPlainObject","expando","isReady","noop","Ctor","getProto","ObjectFunctionString","isEmptyObject","globalEval","makeArray","results","inArray","isXMLDoc","namespace","namespaceURI","docElem","ownerDocument","second","invert","callbackExpect","guid","support","require","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","setSpeakerList","speakerList","values","isP2P","dispose","size","emit","callStats","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","addAnalyticsEventListener","removeAnalyticsEventListener","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","MediaDirection","INACTIVE","rtcpFb","RECVONLY","SENDONLY","SENDRECV","usesAdapter","DEFAULT_CONSTRAINTS","video","height","ideal","max","width","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","stereo","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","audio","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","RTCUtils","Listenable","super","origAttachMediaStream","audioQuality","clearInterval","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","srcObject","res","rtcUtils","isDeviceChangeAvailable","getAudioOutputDevice","catch","ex","GlobalOnErrorHandler","callUnhandledRejectionHandler","promise","pcConstraints","isChromiumBased","optional","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","supportsDeviceChangeEvent","navigator","mediaDevices","addEventListener","setInterval","then","devices","_getUserMedia","umDevices","Promise","resolve","reject","gumTimeout","timeoutExpired","JitsiTrackErrors","getUserMedia","jitsiError","_getDesktopMedia","isSupported","obtainStream","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","sourceType","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","resolution","isWebKitBased","cameraDeviceId","facingMode","CameraFacingMode","USER","autoGainControl","micDeviceId","echoCancellation","noiseSuppression","assign","channelCount","getConstraints","desktopStream","sourceId","desktopAudioTracks","desktopAudioStream","MediaStream","track","desktopVideoTracks","desktopVideoStream","videoType","VideoType","DESKTOP","avStream","audioTracks","audioStream","effects","videoTracks","videoStream","CAMERA","stopMediaStream","deviceType","mediaStream","getTracks","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","some","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","callErrorHandler","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","NONE","addListener","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","wsUrl","BridgeChannel","logError","msgType","_receiverVideoConstraints","sendNewReceiverVideoConstraintsMessage","sendSelectedEndpointsMessage","_selectedEndpoint","sendReceiverVideoConstraintMessage","sendSetLastNMessage","sendVideoTypeMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setNewReceiverVideoConstraints","isOpen","setReceiverVideoConstraint","maxFrameHeight","setVideoType","selectEndpoints","ids","eventType","createPeerConnection","signaling","iceConfig","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","usesUnifiedPlan","sdpSemantics","forceTurnRelay","iceTransportPolicy","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLocalVideoTrack","localVideo","getLocalTracks","MediaType","getLocalAudioTrack","localAudio","getLocalEndpointId","myUserId","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","setVideoMute","videoTrack","removeLocalTrack","pos","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","sendEndpointStatsMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","payloadType","__","parameter","hdrExt","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","OPUS","VP8","VP9","removeEventListener","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","FAILURE_REGEX","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","FEATURE_JIGASI","FEATURE_E2EE","XMPP","token","roomName","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","xmppPing","hosts","enableWebsocketResume","serviceUrl","shard","websocketKeepAlive","websocketKeepAliveUrl","XmppConnection","createConnection","bosh","deploymentInfo","Events","CONN_SHARD_CHANGED","shard_changed","suspend_time","ping","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","addFeature","disableRtx","isVersionLessThan","enableOpusRed","supportsAudioRed","enableRemb","enableTcc","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","_sysMessageHandler","_stropheConn","sendDiscoInfo","getStunAndTurnCredentials","_resetState","getFeaturesAndIdentities","identities","PING","_processDiscoInfoIdentities","errmsg","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","lastFailedRawMessage","getLastFailedMessage","_parseConnectionFailedMessage","identity","avModerationComponentAddress","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","processLobbyFeatures","f","fr","endsWith","_onPrivateMessage","exec","_onSystemMessage","foundIceServers","onReceiveStunAndTurnCredentials","parseDiscoInfo","attaching","anonymousdomain","configDomain","hostname","createRoom","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","pingDomain","getSessions","sessions","ev","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2p","p2pStunServers","stunServers","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","headersArr","trim","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","_callStatsUserName","_machineId","_p8","_storage","jitsiLocalStorage","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","amDid","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","argsTag","mapTag","objectTag","setTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","IE_PROTO","nativeObjectToString","reIsNative","RegExp","Buffer","Uint8Array","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isMasked","isFunction","baseKeys","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","LARGE_ARRAY_SIZE","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","rbuggyQSA","isIE","whitespace","contains","adown","bup","compareDocumentPosition","rcssescape","fcssescape","ch","asCodePoint","escapeSelector","sel","hasDuplicate","sortOrder","compare","uniqueSort","duplicates","preferredDoc","msMatchesSelector","Expr","outermostContext","documentIsHTML","dirruns","done","classCache","createCache","tokenCache","compilerCache","nonnativeSelectorCache","identifier","pseudos","rwhitespace","rtrim","rcomma","rcombinators","rdescend","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rquickExpr","rsibling","runescape","funescape","nonHex","high","unloadHandler","setDocument","inDisabledFieldset","addCombinator","disabled","dir","selectorError","seed","nid","newSelector","newContext","getElementById","getElementsByClassName","testContext","tokenize","toSelector","querySelectorAll","qsaError","tokens","compiled","relative","compile","select","cache","cacheLength","markFunction","createInputPseudo","createButtonPseudo","createDisabledPseudo","isDisabled","createPositionalPseudo","argument","matchIndexes","subWindow","defaultView","top","expr","elements","matchesSelector","createPseudo","className","preFilter","excess","unquoted","attrId","nodeNameSelector","expectedNodeName","pattern","operator","check","what","_argument","simple","forward","ofType","_context","xml","outerCache","nodeIndex","parent","useCache","diff","lastChild","pseudo","setFilters","not","input","matcher","unmatched","lang","elemLang","focus","activeElement","hasFocus","href","tabIndex","enabled","checked","selected","selectedIndex","empty","nextSibling","button","_matchIndexes","lt","gt","nth","radio","checkbox","file","image","submit","parseOnly","soFar","preFilters","cached","combinator","base","skip","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","temp","matcherOut","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","setMatchers","elementMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","matcherFromGroupMatchers","filters","access","chainable","emptyGet","bulk","_key","removeAttr","hooks","nType","prop","attrHooks","attrNames","rnothtmlwhite","val","isXML","lowercaseName","rfocusable","rclickable","removeProp","propFix","propHooks","tabindex","stripAndCollapse","winnow","qualifier","is","rneedsContext","rootjQuery","getClass","classesToArray","parseHTML","rsingleTag","ready","addClass","classes","cur","curValue","clazz","finalValue","removeClass","toggleClass","stateVal","classNames","hasClass","valueIsFunction","valHooks","option","one","optionSet","parseXML","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","getName","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","currentExecutingScript","relativeURL","loadCallback","errorCallback","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","getConnectionPluginDefinition","ConnectionPluginListenable","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","pingOptions","_usesWebsocket","_rawInputTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_status","OPEN","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_maybeStartWSKeepAlive","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","url","fetch","responseShard","timeLeft","sendIQ2","sendBeacon","schedule","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","g","randomElement","randomHexDigit","randomAlphanumStr","initSDKConfig","connectionConfig","conferenceConfig","enableAnalytics","enableLocalRecording","enableVirtualBackground","enableNoiseCancellation","rtcstatsServer","enableTalkWhileMuted","enableNoAudioDetection","enableNoisyMicDetection","openBridgeChannel","hiddenDomain","e2eping","pingInterval","SPEAKERS_AUDIO_LEVELS","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionEqualTo","DummyLocalStorage","configurable","writable","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","funcTag","genTag","reFlags","cloneableTags","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","overArg","getPrototype","objectCreate","isArrayLikeObject","assignValue","baseClone","isDeep","isFull","initCloneArray","copyArray","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","copySymbols","baseAssign","cloneFunc","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","props","arrayEach","subValue","arrayBuffer","newValue","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","SS_DEFAULT_FRAME_RATE","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","getDisplayMedia","frameRate","cursor","errorDetails","errorName","errorMsg","errorStack","ENVIRONMENT","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","1","2","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","maxMessageSize","sctpPort","sctpMapLines","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","MAIN_THREAD_FINISH","MAIN_THREAD_INIT","MAIN_THREAD_NEW_DATA_ARRIVED","WORKER_LIBFLAC_READY","WORKER_BLOB_READY","RecordingAdapter","exportRecordedData","setMuted","setMicDevice","_getAudioStream","JitsiMeetJS","createLocalTracks","ParticipantConnectionStatus","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","getFeatures","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","oldValue","isE2EEEnabled","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","AudioMixerEffect","mixAudio","_mixAudio","isEnabled","sourceLocalTrack","startEffect","_originalStream","_originalTrack","_audioMixer","SariskaMediaTransport","createAudioMixer","addMediaStream","getOriginalStream","_mixedMediaStream","_mixedMediaTrack","stopEffect","timerWorkerScript","URL","createObjectURL","Blob","JitsiStreamPresenterEffect","videoDiv","firstVideoTrack","_canvas","_ctx","getContext","_desktopElement","_videoElement","_frameRate","autoplay","play","display","_onVideoFrameTimer","_renderVideo","_desktopStream","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","jitsiLocalTrack","isVideoTrack","_videoFrameTimerWorker","Worker","postMessage","timeMs","captureStream","terminate","createPresenterEffect","MediaStreamTrack","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","_handleWorkerAction","_initScreenshotCapture","_streamWorker","desktopTrack","_streamHeight","_streamWidth","storedCanvasContext","getImageData","_storedImageData","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","createScreenshotCaptureEffect","_conferenceJoined","_enabled","_enabling","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","supportsInsertableStreams","testing","disableE2EE","initSessions","cleanup","setLocalParticipantProperty","_restartMediaSessions","_generateKey","updateKey","setKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","material","importKey","newKey","ratchet","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","supportsUnifiedPlan","enableUnifiedOnChrome","disableSimulcast","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","supportsRestartByTerminate","iceStarted","onnegotiationneeded","remoteDescription","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","owner","generateRecvonlySsrc","getConfiguredVideoCodec","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","localTrack","addTrack","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","remove","newFingerprint","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoDegradationPreference","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","removeRemoteTracks","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","active","low","scaleResolutionDownBy","standard","_findTransceiver","transceiver","getTransceivers","getTrackId","_getStreamEncodings","isSimulcastOn","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","getTrack","transceiverInit","sendEncodings","addTransceiver","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","localSSRCs","_addedStreams","setEncodings","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","every","downloadBlob","base64Url","download","click","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","nextTick","title","env","argv","versions","cwd","chdir","umask","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiConnection","ProxyConnectionService","createRnnoiseProcessor","createVirtualBackgroundEffect","constants","recording","recordingConstants","sipVideoGW","VideoSIPGWConstants","transcriptionStatus","JitsiTranscriptionStatus","detection","DetectionEvents","JitsiMediaDevicesEvents","connectionQuality","ConnectionQualityEvents","E2ePingEvents","JitsiConferenceErrors","errorTypes","logLevels","JitsiMediaDevices","Settings","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","logObject","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","emitEvent","mStream","currentlyAvailableMediaDevices","_setRealDeviceIdFromDeviceList","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","sampleRate","vadProcessor","TrackVADEmitter","AudioMixer","getActiveAudioDevice","isMultipleAudioInputSupported","isCollectingLocalStats","LocalStatsCollector","isLocalStatsSupported","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","HEAPF32","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","ImageData","onloadeddata","models","segmentationDimensions","model96","model144","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","HEAPU8","_loadModel","loadModelFiles","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","pcmSample","_convertTo16BitPCM","f32Array","_rnnoise_destroy","getSampleLength","getRequiredPCMFrequency","_destroyed","calculateAudioFrameVAD","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","rnnoiseWasmInit","mod","loadRnnoiseFile","AudioContext","webkitAudioContext","interval","intervalId","intervalMilis","suspend","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","animateLevel","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","getVideoType","isWebRTCTrackMuted","isLocalAudioTrack","getStreamId","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","procNodeSampleRate","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","_vadSampleSize","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","vadScore","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","AudioContextImpl","E2E_RTT_CHANGED","internals","firstOptions","reviver","protoAction","scan","nodes","SyntaxError","__proto__","safeParse","ignoreError","AbstractAudioContextAdapter","_sampleRate","_stream","_replaceMic","newStream","newSource","loadLocalRecordingAssets","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","u","validate","Instance","Module","WebAssembly","of","Uint32Array","Uint16Array","A","instantiateStreaming","feature","Memory","_eventEmitter","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","IDENTITY_UPDATED","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","subtle","deriveBits","encode","keyBytes","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","category","rooms","externalFeatures","_addChatRoom","_removeChatRoom","CAPS","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","removeFromPresence","children","addOrReplaceInPresence","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","_identities","_features","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","msCrypto","rnds8","rng","byteToHex","buf","bth","rnds","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","mimeType","ondataavailable","dataEvent","removeTrack","recorderToRemove","revokeObjectURL","getRecordingResults","getFileType","RECORDING_FORMATS","ControllerState","freeze","IDLE","STARTING","RECORDING","STOPPING","FAILED","RecordingController","registerEvents","getParticipantsStats","_onStartCommand","_onStopCommand","_onPingCommand","_doStartRecording","_doStopRecording","_updateStats","_switchToNewSession","_registered","_conference","addCommandListener","isModerator","sendCommandOnce","delegate","_onStateChanged","_onNotify","_onWarning","startRecording","switchFormat","removeCommand","sendCommand","sessionToken","_getRandomToken","_format","stopRecording","_currentSessionToken","downloadRecordedData","_adapters","filename","_micDeviceId","_state","_isMuted","newFormat","getLocalStats","currentSessionToken","recordedBytes","recordedLength","members","member","recordingStats","Bourne","getProperty","isSelf","localId","_changeState","sessionManager","beginSegment","endSegment","messageKey","messageParams","_createRecordingAdapter","createSession","OggAdapter","FlacAdapter","WavAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","shouldEnable","_saveMediaData","_wavBuffers","_wavLength","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","inputBuffers","sampleCount","bufferCount","setInt16","floatTo16BitPCM","lng","_onWorkerMessage","_encoder","_stopPromiseResolver","command","_loadWebWorker","_initWorkerPromiseResolver","bps","exception1","exception2","highPrecisionTime","timing","navigationStart","SessionEventType","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","_loadMetadata","dataStr","dataObject","_sessionsMetadata","_saveMetadata","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","getCurrentSegmentIndex","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","duration","currentEvent","jwt","parseJwt","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","ua","eventManager","JitsiConferenceEventManager","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","isVideoMutedByFocus","mutedVideoByFocusActor","wasStopped","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","handleSubtitles","localTracksDuration","LocalTracksDuration","resourceCreator","setupXMPPListeners","codecSettings","disabledCodec","enforcePreferredCodec","jvbCodec","p2pCodec","codecSelection","CodecSelection","_statsCurrentId","statisticsId","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","E2ePing","setupRTCListeners","receiveVideoController","ReceiveVideoController","sendVideoController","SendVideoController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","supportsVADDetection","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","vadNoiseDetection","VADNoiseDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","getPreferredCodec","replaceParticipant","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","sendPrivateTextMessage","sendPrivateMessage","setSubject","subject","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_getInitialLocalTracks","isStartAudioMuted","isStartVideoMuted","_setConference","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeTagName","getFromPresence","_addLocalTrackAsUnmute","addAsUnmutePromises","_removeLocalTrackAsMute","removeAsMutePromises","getRole","isHidden","lock","lockRoom","unlock","selectParticipant","selectParticipants","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","setAffiliation","revokeOwner","isMyself","isMembersOnly","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","muteMediaType","onMemberJoined","nick","statsID","botType","fullJid","isReplaceParticipant","JitsiParticipant","setRole","setBotType","setFeatures","setIsReplacing","_updateFeatures","_maybeStartOrStopP2P","_onMucJoined","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","getBotType","mediaSessions","removePromises","removedTracks","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","setIsReplaced","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","peerConnection","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onConferenceRestarted","restartInProgress","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","hasFeature","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setReceiverConstraints","videoConstraints","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","meetingId","perf","toggleE2EE","setEnabled","isLobbySupported","getLobby","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","isAVModerationSupported","getAVModeration","enableAVModeration","disableAVModeration","avModerationApprove","approve","getLocalUser","pastMessage","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","transcript","is_interim","stability","finalText","final","stable","unstable","finalPaylaod","startLocalRecording","recordingController","stopLocalRecording","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","setParticipantPropertyListener","recorderSession","AuthenticationEvents","txt","myJid","ts","updated","dominant","previous","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","_onByteSentStatsReceived","isEngine","RTCRtpTransceiver","isTwa","matchMedia","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","setCodecPreferences","RTCRtpReceiver","getCapabilities","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","supportsRTTStatistics","RTCRtpSender","createEncodedStreams","createEncodedVideoStreams","ReadableStream","chromium","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","92","93","versionName","94","vendor","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","localCandidateType","candidateType","remoteCandidateType","networkType","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","remoteSource","localVideoTracks","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","isReplacing","isReplaced","_jid","_id","_role","_hidden","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","newRole","newIsReplacing","newIsReplaced","newFeatures","_botType","newBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","operation","receiverStreams","createEncodedAudioStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","oldToken","retry","minDelay","LastRequestTracker","_lastSuccess","_lastFailedMessage","xmppConnection","originalRawInput","rawMessage","ConnectionPlugin","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","_addPingExecutionTimestamp","_lastServerCheck","pingIntervals","maxInterval","previousTS","currentInterval","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","onMuteVideo","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","avModeration","AVModeration","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","xns","presenceUpdateTime","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","att","phone","pin","processNode","var","focusFeatures","tagHandlers","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","grantIQ","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","addToPresence","matchingNodes","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","addVideoInfoToPresence","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","_xmpp","_mainRoom","_momderationEnabledByType","_whitelistAudio","_whitelistVideo","jidToWhitelist","newWhitelists","whitelists","fireEventApprovedJids","oldList","approved","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","startMuted","successTime","me","v2Res","v2Err","v1Res","v1Err","iceservers","dict","credential","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","idle","priorityQueue","_compareTasks","sequence","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getPeerMediaInfo","getSSRCOwner","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","_getCodecMimeType","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","selectedCodec","remoteParticipants","remote","peerMediaInfo","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","previousSpeakers","endpoint","jsonObject","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_stopStreamEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","successCallback","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","stat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","receivers","remoteTrackIds","getReceivers","_setVideoType","setMute","getSynchronizationSources","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","currentCodec","findTrackById","onaddtrack","onremovetrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","isMediaStreamInPc","findSenderByKind","getSenders","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","toUnifiedPlan","localVideoTrack","videoSender","preference","degradationPreference","planBScreenSharing","presenterEnabled","scaleFactor","layer","currentDescription","mungeRemoteDescription","newHeight","encodingsEnabledState","ldStreamIndex","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","_processLocalSSRCsMap","handleFailure","capabilities","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","localEndpointId","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","msidLine","generatedMsid","sessionDesc","audioMLine","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","kSimulcastFormats","layers","targetRN","getTarget","millisSinceStart","videoQualitySettings","simulcastFormat","targetHeight","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","reloadClient","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","_rtc","startLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","p2pSession","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","INITIAL_STATE","startedTime","camera","FINAL_STATE","calculateLocalTrackDuration","newDuration","newLocalTracksDuration","createLocalTracksDurationEvent","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","jitsiConnection","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","getTokenAuthUrl","urlPattern","roleUpgrade","createNetworkInfoEvent","_started","_streamsToMix","_streamMSSArray","_mixedMSD","createMediaStreamDestination","streamMSS","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","Timeout","clearFn","_clearFn","scope","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","enableConferenceFlag","order","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","adapter","commonShim","browserShim","adapterFactory"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAA+B,sBAAID,IAEnCD,EAA4B,sBAAIC,IARlC,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,K,+BClFrD,40GAQO,MAAMC,EAA2B,uCAK3BC,EAAsB,iCAOtBC,EAA6B,sCAK7BC,EAAmB,mBAKnBC,EAAoB,oBAMpBC,EAAoB,oBAKpBC,EAAkB,kBAKlBC,EAA2B,2BAO3BC,EAAyB,mCAOzBC,EAAyB,mCAMzBC,EAAsB,gCAKtBC,EAAsB,+BAKtBC,EAAuB,gCAKvBC,EAA2B,6BAK3BC,EAA+B,8BAK/BC,EAAuB,gCAMvBC,EAA4B,uCAK5BC,EAA0B,qCAgB1BC,EAAgB,0BAMhBC,EAAS,oBAOTC,EAAqB,gCAUrBC,EAA2B,mCAK3BC,EAAqB,gCAOrBC,EAAwB,mCAOxBC,EAAyB,mCAOzBC,EAAgC,0CAQhCC,EAAuB,gCAKvBC,EAAmB,6BAKnBC,EAAiB,4BAKjBC,EAAY,uBAKZC,EAA2B,oCAgB3BC,EACP,6CAKOC,EACP,yCAMOC,EACP,0CAOOC,EAAa,uBAKbC,EAAuB,gCAMvBC,EAAqB,+BAKrBC,EAAyB,kCAMzBC,EACP,2CAWOC,EACP,2CAKOC,EACP,wCAKOC,EAAgB,2BAKhBC,EAAkB,4BAKlBC,EAAmB,6BAKnBC,EAAmB,8BAQnBC,EAAc,wBAKdC,EAA4B,gCAO5BC,EAAqB,8BAQrBC,EAAgB,0BAQhBC,EACP,wCAMOC,EAAc,wBAKdC,GAAY,sBAKZC,GAAoB,yBAKpBC,GAAsB,2BAKtBC,GAAmB,8BAKnBC,GAAoB,8BAKpBC,GAAqB,+BAKrBC,GAAkB,4BAQlBC,GAAyB,oCAYzBC,GAAwB,mCASxBC,GAAqC,gDAIrCC,GAAqB,gCAGrBC,GAAgB,2BAGhBC,GAA2B,4B,cCrFxCtG,EAAOD,QArUY,CAIfwG,yBAA0B,gCAI1BC,qBAAsB,4BAItBC,qBAAsB,4BACtBC,wBAAyB,+BACzBC,YAAa,mBAKbC,cAAe,2BAIfC,cAAe,2BAMfC,WAAY,wBACZC,oBAAqB,2BAGrBC,8BAA+B,qCAK/BjE,uBAAwB,4BAIxBkE,kBAAmB,yBAInBjE,uBAAwB,8BAIxBC,oBAAqB,2BAIrBiE,sBAAuB,6BAIvBC,qBAAsB,0BAKtBC,0BAA2B,iCAI3BjE,qBAAsB,4BAKtBkE,gBAAiB,uBAKjBC,kBAAmB,yBACnBC,SAAU,gBACVC,mBAAoB,0BACpBC,WAAY,kBACZC,kBAAmB,yBAMnBC,eAAgB,qBAMhBC,oBAAqB,0BAWrBlE,OAAQ,cAGRmE,mBAAoB,yBAKpBC,eAAgB,sBAIhB5D,iBAAkB,wBAIlB6D,wBAAyB,+BAIzB1D,yBAA0B,gCAG1B2D,4BAA6B,mCAG7BC,cAAe,qBAGfC,WAAY,kBAGZC,kBAAmB,yBAGnBC,gBAAiB,uBAGjBC,wBAAyB,+BAGzBC,yBAA0B,gCAG1BC,sBAAuB,6BAGvBC,kBAAmB,yBAGnBC,SAAU,gBAIVC,iBAAkB,wBAGlBC,iBAAkB,wBAGlBC,yBAA0B,gCAI1BC,wBAAyB,mBAIzBC,wBAAyB,mBAMzBC,+BAAgC,kBAKhCC,6BAA8B,oCAC9BC,kBAAmB,yBAKnBvE,qBAAsB,gCACtBwE,kBAAmB,yBACnBC,gBAAiB,uBACjBC,iBAAkB,wBAGlBC,cAAe,qBAKfzE,uBAAwB,4BAIxB0E,aAAc,oBAKdC,qBAAsB,4BACtBC,kBAAmB,8BACnBC,mBAAoB,0BACpBC,+BAAgC,sCAChCC,gBAAiB,uBACjBC,gCAAiC,uCAKjCC,qBAAsB,4BAGtBC,qBAAsB,4BAItBC,6BAA8B,oCAY9BC,uBAAwB,8BAKxBC,uBAAwB,8BAKxBC,8BAA+B,qCAK/BjE,uBAAwB,8BAKxBkE,uBAAwB,8BAKxBjE,sBAAuB,6BAKvBC,mCAAoC,0CAIpCiE,uBAAwB,8BAIxBnF,gBAAiB,uBAIjBC,iBAAkB,wBAQlBM,6BAA8B,oCAK9B6E,eAAgB,4BAQhBxF,kCAAmC,qCAUnCC,mCACI,qCAIJwF,6BAA8B,oCAM9BC,sBAAuB,+B,iBClU3B,oBAIQ,WAAc,aAEV,IAAIC,OAA8B,IAAXC,EAAyBA,EACpB,oBAATC,KAAuBA,KACZ,oBAAXvK,OAAyBA,OAAS,GAErD,SAASwK,EAAQC,GAWf,OATED,EADoB,mBAAXrJ,QAAoD,iBAApBA,OAAOuJ,SACtC,SAAUD,GAClB,cAAcA,GAGN,SAAUA,GAClB,OAAOA,GAAyB,mBAAXtJ,QAAyBsJ,EAAIE,cAAgBxJ,QAAUsJ,IAAQtJ,OAAOa,UAAY,gBAAkByI,IAI9GA,GAGjB,SAASG,EAAmBC,GAC1B,OAGF,SAA4BA,GAC1B,GAAIC,MAAMC,QAAQF,GAAM,CACtB,IAAK,IAAIzK,EAAI,EAAG4K,EAAO,IAAIF,MAAMD,EAAII,QAAS7K,EAAIyK,EAAII,OAAQ7K,IAAK4K,EAAK5K,GAAKyK,EAAIzK,GAEjF,OAAO4K,GAPFE,CAAmBL,IAW5B,SAA0BM,GACxB,GAAIhK,OAAOuJ,YAAY5J,OAAOqK,IAAkD,uBAAzCrK,OAAOkB,UAAUoJ,SAAS7K,KAAK4K,GAAgC,OAAOL,MAAMO,KAAKF,GAZtFG,CAAiBT,IAerD,WACE,MAAM,IAAIU,UAAU,mDAhBuCC,GAoC7D,IAAIC,EAAW,SAAkBC,EAAGC,GAClC,IAAIC,GAAW,MAAJF,IAAmB,MAAJC,GAE1B,OADWD,GAAK,KAAOC,GAAK,KAAOC,GAAO,KAC5B,GAAW,MAANA,GAejBC,EAAW,SAAkBC,GAC/B,GAAmB,iBAARA,EACT,MAAM,IAAIC,MAAM,oCAKlB,IAFA,IAAIC,EAAM,GAED5L,EAAI,EAAGA,EAAiB,EAAb0L,EAAIb,OAAY7K,GAAK,EACvC4L,EAAI5L,GAAK,KAA+B,IAAxB0L,EAAIG,WAAW7L,EAAI,KAAaA,EAAI,GAGtD,OAAO4L,GAoCLE,EAAU,SAAiBC,EAAGC,EAAGC,EAAGX,EAAGvJ,EAAGb,GAC5C,OAAOmK,GAxDsBa,EAwDLb,EAASA,EAASW,EAAGD,GAAIV,EAASC,EAAGpK,OAxD3BiL,EAwDgCpK,GAvD9CmK,IAAQ,GAAKC,EAuDqCF,GAxD1D,IAAiBC,EAAKC,GA2DhCC,EAAS,SAAgBJ,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAGvJ,EAAGb,GAC7C,OAAO4K,EAAQG,EAAI5L,GAAK4L,EAAI3L,EAAG0L,EAAGC,EAAGX,EAAGvJ,EAAGb,IAGzCmL,EAAS,SAAgBL,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAGvJ,EAAGb,GAC7C,OAAO4K,EAAQG,EAAI3L,EAAID,GAAKC,EAAG0L,EAAGC,EAAGX,EAAGvJ,EAAGb,IAGzCoL,EAAS,SAAgBN,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAGvJ,EAAGb,GAC7C,OAAO4K,EAAQG,EAAI5L,EAAIC,EAAG0L,EAAGC,EAAGX,EAAGvJ,EAAGb,IAGpCqL,EAAS,SAAgBP,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAGvJ,EAAGb,GAC7C,OAAO4K,EAAQzL,GAAK4L,GAAK3L,GAAI0L,EAAGC,EAAGX,EAAGvJ,EAAGb,IAOvCsL,EAAW,SAAkBlB,EAAGmB,GAElCnB,EAAEmB,GAAO,IAAM,KAAQA,EAAM,GAC7BnB,EAA0B,IAAvBmB,EAAM,KAAO,GAAK,IAAWA,EAOhC,IANA,IAIIC,EAAMC,EAAMC,EAAMC,EAJlBb,EAAI,WACJC,GAAK,UACL5L,GAAK,WACLC,EAAI,UAGCN,EAAI,EAAGA,EAAIsL,EAAET,OAAQ7K,GAAK,GACjC0M,EAAOV,EACPW,EAAOV,EACPW,EAAOvM,EACPwM,EAAOvM,EACP0L,EAAII,EAAOJ,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,WACrCM,EAAI8L,EAAO9L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,IAAK,WACtCK,EAAI+L,EAAO/L,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,GAAI,WACrCiM,EAAIG,EAAOH,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,YACtCgM,EAAII,EAAOJ,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,WACrCM,EAAI8L,EAAO9L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,GAAI,YACrCK,EAAI+L,EAAO/L,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,IAAK,YACtCiM,EAAIG,EAAOH,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,UACtCgM,EAAII,EAAOJ,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,EAAG,YACpCM,EAAI8L,EAAO9L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,IAAK,YACtCK,EAAI+L,EAAO/L,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,IAAK,OACvCiM,EAAIG,EAAOH,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,IAAK,IAAK,YACvCgM,EAAII,EAAOJ,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,IAAK,EAAG,YACrCM,EAAI8L,EAAO9L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,IAAK,IAAK,UACvCK,EAAI+L,EAAO/L,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,IAAK,YACvCiM,EAAIG,EAAOH,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,IAAK,GAAI,YACtCgM,EAAIK,EAAOL,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,WACrCM,EAAI+L,EAAO/L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,GAAI,YACrCK,EAAIgM,EAAOhM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,GAAI,WACtCiM,EAAII,EAAOJ,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,WACtCgM,EAAIK,EAAOL,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,WACrCM,EAAI+L,EAAO/L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,IAAK,EAAG,UACrCK,EAAIgM,EAAOhM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,IAAK,WACvCiM,EAAII,EAAOJ,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,WACtCgM,EAAIK,EAAOL,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,EAAG,WACpCM,EAAI+L,EAAO/L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,IAAK,GAAI,YACtCK,EAAIgM,EAAOhM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,IAAK,WACtCiM,EAAII,EAAOJ,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,GAAI,YACrCgM,EAAIK,EAAOL,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,IAAK,GAAI,YACtCM,EAAI+L,EAAO/L,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,GAAI,UACrCK,EAAIgM,EAAOhM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,GAAI,YACrCiM,EAAII,EAAOJ,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,IAAK,IAAK,YACvCgM,EAAIM,EAAON,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,QACrCM,EAAIgM,EAAOhM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,IAAK,YACtCK,EAAIiM,EAAOjM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,GAAI,YACtCiM,EAAIK,EAAOL,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,IAAK,IAAK,UACvCgM,EAAIM,EAAON,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,YACrCM,EAAIgM,EAAOhM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,GAAI,YACrCK,EAAIiM,EAAOjM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,IAAK,WACtCiM,EAAIK,EAAOL,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,IAAK,IAAK,YACvCgM,EAAIM,EAAON,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,IAAK,EAAG,WACrCM,EAAIgM,EAAOhM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,IAAK,WACtCK,EAAIiM,EAAOjM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,IAAK,WACtCiM,EAAIK,EAAOL,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,GAAI,UACrCgM,EAAIM,EAAON,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,WACrCM,EAAIgM,EAAOhM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,IAAK,IAAK,WACvCK,EAAIiM,EAAOjM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,GAAI,WACtCiM,EAAIK,EAAOL,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,WACtCgM,EAAIO,EAAOP,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,WACrCM,EAAIiM,EAAOjM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,GAAI,YACrCK,EAAIkM,EAAOlM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,IAAK,YACvCiM,EAAIM,EAAON,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,UACtCgM,EAAIO,EAAOP,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,IAAK,EAAG,YACrCM,EAAIiM,EAAOjM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,GAAI,IAAK,YACtCK,EAAIkM,EAAOlM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,IAAK,IAAK,SACvCiM,EAAIM,EAAON,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,YACtCgM,EAAIO,EAAOP,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,EAAG,YACpCM,EAAIiM,EAAOjM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,IAAK,IAAK,UACvCK,EAAIkM,EAAOlM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,IAAK,YACtCiM,EAAIM,EAAON,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,IAAK,GAAI,YACtCgM,EAAIO,EAAOP,EAAGC,EAAG5L,EAAGC,EAAGgL,EAAEtL,EAAI,GAAI,GAAI,WACrCM,EAAIiM,EAAOjM,EAAG0L,EAAGC,EAAG5L,EAAGiL,EAAEtL,EAAI,IAAK,IAAK,YACvCK,EAAIkM,EAAOlM,EAAGC,EAAG0L,EAAGC,EAAGX,EAAEtL,EAAI,GAAI,GAAI,WACrCiM,EAAIM,EAAON,EAAG5L,EAAGC,EAAG0L,EAAGV,EAAEtL,EAAI,GAAI,IAAK,WACtCgM,EAAIX,EAASW,EAAGU,GAChBT,EAAIZ,EAASY,EAAGU,GAChBtM,EAAIgL,EAAShL,EAAGuM,GAChBtM,EAAI+K,EAAS/K,EAAGuM,GAGlB,MAAO,CAACb,EAAGC,EAAG5L,EAAGC,IASfwM,EAAM,CACRC,UAAW,SAAmBhL,GAC5B,OAvIW,SAAkBiL,GAI/B,IAHA,IACItB,EAAM,GAED1L,EAAI,EAAGA,EAAsB,EAAlBgN,EAASnC,OAAY7K,IACvC0L,GAJY,mBAIGuB,OAAOD,EAAShN,GAAK,IAAMA,EAAI,EAAI,EAAI,EAAI,IAJ9C,mBAI6DiN,OAAOD,EAAShN,GAAK,IAAMA,EAAI,EAAI,EAAI,IAGlH,OAAO0L,EA+HEwB,CAASV,EAASf,EAAS1J,GAAe,EAAXA,EAAE8I,UAE1CsC,KAAM,SAAcpL,GAClB,OAxJW,SAAkB6J,GAG/B,IAFA,IAAIF,EAAM,GAED1L,EAAI,EAAGA,EAAiB,GAAb4L,EAAIf,OAAa7K,GAAK,EACxC0L,GAAO0B,OAAOC,aAAazB,EAAI5L,GAAK,KAAOA,EAAI,GAAK,KAGtD,OAAO0L,EAiJE4B,CAASd,EAASf,EAAS1J,GAAe,EAAXA,EAAE8I,WAoB5C,SAAS0C,EAAUjC,EAAGmB,GAEpBnB,EAAEmB,GAAO,IAAM,KAAQ,GAAKA,EAAM,GAClCnB,EAAyB,IAAtBmB,EAAM,IAAM,GAAK,IAAWA,EAC/B,IAMIzM,EAAGwN,EAAGtM,EAAGwL,EAAMC,EAAMC,EAAMC,EAAMY,EANjCC,EAAI,IAAIhD,MAAM,IACdsB,EAAI,WACJC,GAAK,UACL5L,GAAK,WACLC,EAAI,UACJqN,GAAK,WAGT,IAAK3N,EAAI,EAAGA,EAAIsL,EAAET,OAAQ7K,GAAK,GAAI,CAOjC,IANA0M,EAAOV,EACPW,EAAOV,EACPW,EAAOvM,EACPwM,EAAOvM,EACPmN,EAAOE,EAEFH,EAAI,EAAGA,EAAI,GAAIA,IAEhBE,EAAEF,GADAA,EAAI,GACClC,EAAEtL,EAAIwN,GAENI,EAAIF,EAAEF,EAAI,GAAKE,EAAEF,EAAI,GAAKE,EAAEF,EAAI,IAAME,EAAEF,EAAI,IAAK,GAG1DtM,EAAI2M,EAAWA,EAAWD,EAAI5B,EAAG,GAAI8B,EAAQN,EAAGvB,EAAG5L,EAAGC,IAAKuN,EAAWA,EAAWF,EAAGD,EAAEF,IAAKO,EAAQP,KACnGG,EAAIrN,EACJA,EAAID,EACJA,EAAIuN,EAAI3B,EAAG,IACXA,EAAID,EACJA,EAAI9K,EAGN8K,EAAI6B,EAAW7B,EAAGU,GAClBT,EAAI4B,EAAW5B,EAAGU,GAClBtM,EAAIwN,EAAWxN,EAAGuM,GAClBtM,EAAIuN,EAAWvN,EAAGuM,GAClBc,EAAIE,EAAWF,EAAGF,GAGpB,MAAO,CAACzB,EAAGC,EAAG5L,EAAGC,EAAGqN,GAQtB,SAASG,EAAQ5M,EAAG+K,EAAG5L,EAAGC,GACxB,OAAIY,EAAI,GACC+K,EAAI5L,GAAK4L,EAAI3L,EAGlBY,EAAI,GACC+K,EAAI5L,EAAIC,EAGbY,EAAI,GACC+K,EAAI5L,EAAI4L,EAAI3L,EAAID,EAAIC,EAGtB2L,EAAI5L,EAAIC,EAOjB,SAASyN,EAAQ7M,GACf,OAAOA,EAAI,GAAK,WAAaA,EAAI,GAAK,WAAaA,EAAI,IAAM,YAAc,UAO7E,SAAS8M,EAAezM,EAAK0M,GAC3B,IAAIC,EAAOC,EAAS5M,GAEhB2M,EAAKrD,OAAS,KAChBqD,EAAOX,EAAUW,EAAmB,EAAb3M,EAAIsJ,SAM7B,IAHA,IAAIuD,EAAO,IAAI1D,MAAM,IACjB2D,EAAO,IAAI3D,MAAM,IAEZ1K,EAAI,EAAGA,EAAI,GAAIA,IACtBoO,EAAKpO,GAAe,UAAVkO,EAAKlO,GACfqO,EAAKrO,GAAe,WAAVkO,EAAKlO,GAGjB,IAAImN,EAAOI,EAAUa,EAAKE,OAAOH,EAASF,IAAQ,IAAoB,EAAdA,EAAKpD,QAC7D,OAAO0C,EAAUc,EAAKC,OAAOnB,GAAO,KAQtC,SAASU,EAAWvC,EAAGC,GACrB,IAAIC,GAAW,MAAJF,IAAmB,MAAJC,GAE1B,OADWD,GAAK,KAAOC,GAAK,KAAOC,GAAO,KAC5B,GAAW,MAANA,EAOrB,SAASoC,EAAI1B,EAAKC,GAChB,OAAOD,GAAOC,EAAMD,IAAQ,GAAKC,EAQnC,SAASgC,EAASzC,GAIhB,IAHA,IAAIE,EAAM,GAGD5L,EAAI,EAAGA,EAAiB,EAAb0L,EAAIb,OAAY7K,GAAK,EACvC4L,EAAI5L,GAAK,KAHA,IAGO0L,EAAIG,WAAW7L,EAAI,KAAc,GAAKA,EAAI,GAG5D,OAAO4L,EAOT,SAAS2C,EAASvB,GAKhB,IAJA,IAEIwB,EAAShB,EADT9B,EAAM,GAGD1L,EAAI,EAAGA,EAAsB,EAAlBgN,EAASnC,OAAY7K,GAAK,EAG5C,IAFAwO,GAAWxB,EAAShN,GAAK,IAAM,GAAK,EAAIA,EAAI,GAAK,MAAS,IAAMgN,EAAShN,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,MAAS,EAAIgN,EAAShN,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,IAExKwN,EAAI,EAAGA,EAAI,EAAGA,IACT,EAAJxN,EAAY,EAAJwN,EAA0B,GAAlBR,EAASnC,OAC3Ba,GAAO,IAEPA,GAXI,mEAWOuB,OAAOuB,GAAW,GAAK,EAAIhB,GAAK,IAKjD,OAAO9B,EAOT,SAAS+C,EAAS7C,GAIhB,IAHA,IAAIF,EAAM,GAGD1L,EAAI,EAAGA,EAAiB,GAAb4L,EAAIf,OAAa7K,GAAK,EACxC0L,GAAO0B,OAAOC,aAAazB,EAAI5L,GAAK,KAAO,GAAKA,EAAI,GAH3C,KAMX,OAAO0L,EAQT,IAAIgD,EAAO,CACTC,cAAe,SAAuBpN,EAAK0M,GACzC,OAAOM,EAASP,EAAezM,EAAK0M,KAEtCW,SAAU,SAAkB7M,GAC1B,OAAOwM,EAAShB,EAAUY,EAASpM,GAAe,EAAXA,EAAE8I,UAE3C4D,SAAUA,EACVT,eAAgBA,EAChBa,cAAe,SAAuBtN,EAAK0M,GACzC,OAAOQ,EAAST,EAAezM,EAAK0M,KAEtCa,SAAU,SAAkB/M,GAC1B,OAAO0M,EAASlB,EAAUY,EAASpM,GAAe,EAAXA,EAAE8I,WAIzCkE,EACQ,SAAkBrD,GAC1B,IAAI1L,EAAGK,EACH2O,EAAM,GACNvC,EAAMf,EAAIb,OAEd,IAAK7K,EAAI,EAAGA,EAAIyM,EAAKzM,KACnBK,EAAIqL,EAAIG,WAAW7L,KAEV,GAAUK,GAAK,IACtB2O,GAAOtD,EAAIuB,OAAOjN,GACTK,EAAI,MACb2O,GAAO5B,OAAOC,aAAa,IAAOhN,GAAK,GAAK,IAC5C2O,GAAO5B,OAAOC,aAAa,IAAOhN,GAAK,EAAI,IAC3C2O,GAAO5B,OAAOC,aAAa,IAAOhN,GAAK,EAAI,MAE3C2O,GAAO5B,OAAOC,aAAa,IAAOhN,GAAK,EAAI,IAC3C2O,GAAO5B,OAAOC,aAAa,IAAOhN,GAAK,EAAI,KAI/C,OAAO2O,GArBPD,EAuBU,SAAoBE,GAsB9B,IAAK,IAAIC,KAFTD,EAAUA,GAAW,GAGnB,GAAIvO,OAAOkB,UAAUC,eAAe1B,KAAK8O,EAASC,GAAa,CAC7D,IAAIC,EAAU,GACVC,EAAS,GACTC,EAAO,GACPC,EAAYL,EAAQC,GACpBK,EAA+B,WAAvBnF,EAAQkF,GAChBE,EAAcC,OAAOC,SAASH,EAAQD,EAAUrO,MAAQqO,IAExDC,IACFJ,EAAUG,EAAUH,QAAU,YAAcG,EAAUH,QAAU,GAChEC,EAASE,EAAUF,OAAS,WAAaE,EAAUF,OAAS,GAC5DC,EAAOC,EAAUD,KAAO,SAAWC,EAAUD,KAAO,IAGtDM,SAASC,OAASV,EAAa,IAAMM,EAAcL,EAAUC,EAASC,IAkB9E,SAASQ,EAAOtP,EAAMuP,GACpB,OAAO,IAAIC,EAAQC,QAAQzP,EAAMuP,GA2BnC,SAASG,EAAIH,GACX,OAAO,IAAIC,EAAQC,QAAQ,KAAMF,GAanC,SAASI,EAAMJ,GACb,OAAO,IAAIC,EAAQC,QAAQ,WAAYF,GAWzC,IAAIC,EAAU,CAEZI,QAAS,YAqBTC,GAAI,CACFC,SAAU,sCACVC,KAAM,iBACNC,OAAQ,gBACRC,KAAM,iBACNC,OAAQ,mBACRC,QAAS,oBACTC,WAAY,wCACZC,YAAa,yCACbC,IAAK,iCACLC,KAAM,mCACNC,OAAQ,mCACRC,QAAS,sCACTC,KAAM,mCACNC,QAAS,sCACTf,QAAS,oBACTgB,QAAS,sCACTC,SAAU,sCACVC,MAAO,gCASTA,MAAO,CACLC,KAAM,CAAC,IAAK,aAAc,KAAM,OAAQ,KAAM,MAAO,KAAM,KAAM,IAAK,OAAQ,SAAU,KAAM,QAC9FC,WAAY,CACV,EAAK,CAAC,QACN,WAAc,CAAC,SACf,GAAM,GACN,KAAQ,CAAC,SACT,GAAM,GACN,IAAO,CAAC,MAAO,MAAO,QAAS,SAAU,SACzC,GAAM,CAAC,SACP,GAAM,CAAC,SACP,EAAK,CAAC,SACN,KAAQ,CAAC,SACT,OAAU,GACV,GAAM,CAAC,SACP,KAAQ,IAEVC,IAAK,CAAC,mBAAoB,QAAS,cAAe,YAAa,aAAc,cAAe,cAAe,eAAgB,aAAc,mBASzIC,SAAU,SAAkBC,GAC1B,IAAK,IAAI1R,EAAI,EAAGA,EAAI+P,EAAQsB,MAAMC,KAAKzG,OAAQ7K,IAC7C,GAAI0R,IAAQ3B,EAAQsB,MAAMC,KAAKtR,GAC7B,OAAO,EAIX,OAAO,GAUT2R,eAAgB,SAAwBD,EAAKE,GAC3C,QAA6C,IAAlC7B,EAAQsB,MAAME,WAAWG,IAAwB3B,EAAQsB,MAAME,WAAWG,GAAK7G,OAAS,EACjG,IAAK,IAAI7K,EAAI,EAAGA,EAAI+P,EAAQsB,MAAME,WAAWG,GAAK7G,OAAQ7K,IACxD,GAAI4R,IAAc7B,EAAQsB,MAAME,WAAWG,GAAK1R,GAC9C,OAAO,EAKb,OAAO,GAET6R,SAAU,SAAkBC,GAC1B,IAAK,IAAI9R,EAAI,EAAGA,EAAI+P,EAAQsB,MAAMG,IAAI3G,OAAQ7K,IAC5C,GAAI8R,IAAU/B,EAAQsB,MAAMG,IAAIxR,GAC9B,OAAO,EAIX,OAAO,IAoBX+R,OAAQ,CACNC,MAAO,EACPC,WAAY,EACZC,SAAU,EACVC,eAAgB,EAChBC,SAAU,EACVC,UAAW,EACXC,aAAc,EACdC,cAAe,EACfC,SAAU,EACVC,SAAU,EACVC,YAAa,GACbC,aAAc,IAEhBC,eAAgB,CACdC,WAAY,aACZC,SAAU,WACVC,iBAAkB,6BAClBC,aAAc,eACdC,eAAgB,WAYlBC,SAAU,CACRC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNrB,MAAO,EACPsB,MAAO,GAUTC,YAAa,CACXC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,SAAU,IAiBZC,QAAS,IACTC,kBAAmB,GAcnBC,aAAc,SAAsBvT,EAAMU,GACxC8O,EAAQK,GAAG7P,GAAQU,GAiBrB8S,aAAc,SAAsBC,EAAMC,EAAUC,GAClD,IAAK,IAAIlU,EAAI,EAAGA,EAAIgU,EAAKG,WAAWtJ,OAAQ7K,IAAK,CAC/C,IAAIoU,EAAYJ,EAAKG,WAAWnU,GAE5BoU,EAAUC,WAAatE,EAAQwD,YAAYC,QAAYS,IAAYK,KAAKC,WAAWH,EAAWH,IAChGC,EAAKE,KAkBXG,WAAY,SAAoBC,EAAIjU,GAClC,OAAOiU,EAAGC,UAAYlU,GAOxBmU,cAAe,KAMfC,eAAgB,WACd,IAAIC,EAWJ,YAP+CC,IAA3ClF,SAASmF,eAAeC,gBAAgCpF,SAASmF,eAAeC,gBAAkBpF,SAASqF,cAAgBrF,SAASqF,aAAe,IACrJJ,EAAMN,KAAKW,gBACPC,YAAYN,EAAIO,cAAc,YAElCP,EAAMjF,SAASmF,eAAeC,eAAe,gBAAiB,UAAW,MAGpEH,GASTQ,aAAc,WAKZ,OAJKrF,EAAQ2E,gBACX3E,EAAQ2E,cAAgB3E,EAAQ4E,kBAG3B5E,EAAQ2E,eAWjBO,aAAc,WAIZ,IAHA,IAAIL,EAAM,KACNS,EAAa,CAAC,yBAA0B,yBAA0B,yBAA0B,yBAA0B,qBAAsB,oBAAqB,oBAE5J/U,EAAI,EAAGA,EAAI+U,EAAWxK,QACjB,OAAR+J,EADiCtU,IAEnC,IACEsU,EAAM,IAAIU,cAAcD,EAAW/U,IACnC,MAAOqN,GACPiH,EAAM,KAOZ,OAAOA,GAqBTW,WAAY,SAAoBhV,GAC9B,IAAKA,EACH,OAAO,KAMT,IAHA,IAAIiV,EAAOzF,EAAQqF,eAAeD,cAAc5U,GAGvCyL,EAAI,EAAGA,EAAIyJ,UAAU5K,OAAQmB,IAAK,CACzC,IAAI0J,EAAMD,UAAUzJ,GAEpB,GAAK0J,EAIL,GAAmB,iBAARA,GAAmC,iBAARA,EACpCF,EAAKN,YAAYnF,EAAQ4F,YAAYD,SAChC,GAAqB,WAAjBtL,EAAQsL,IAAyC,mBAAbA,EAAIE,KACjD,IAAK,IAAI5V,EAAI,EAAGA,EAAI0V,EAAI7K,OAAQ7K,IAAK,CACnC,IAAI6V,EAAOH,EAAI1V,GAEO,WAAlBoK,EAAQyL,IAA2C,mBAAdA,EAAKD,WAAmCf,IAAZgB,EAAK,IAAgC,OAAZA,EAAK,IACjGL,EAAKM,aAAaD,EAAK,GAAIA,EAAK,SAG/B,GAAqB,WAAjBzL,EAAQsL,GACjB,IAAK,IAAIK,KAAKL,EACRhV,OAAOkB,UAAUC,eAAe1B,KAAKuV,EAAKK,SAAiBlB,IAAXa,EAAIK,IAA+B,OAAXL,EAAIK,IAC9EP,EAAKM,aAAaC,EAAGL,EAAIK,IAMjC,OAAOP,GAYTQ,UAAW,SAAmBC,GAM5B,OADAA,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAKC,QAAQ,MAAO,UACfA,QAAQ,KAAM,SACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,WACdA,QAAQ,KAAM,WAa5BC,YAAa,SAAqBF,GAMhC,OADAA,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAKC,QAAQ,UAAW,MACnBA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MACjBA,QAAQ,UAAW,MACnBA,QAAQ,UAAW,MAejCP,YAAa,SAAqBM,GAChC,OAAOlG,EAAQqF,eAAegB,eAAeH,IAY/CI,YAAa,SAAqBC,GAChC,IAAId,EAWJ,OATIe,UAEFf,GADa,IAAIe,WACHC,gBAAgBF,EAAM,cAEpCd,EAAO,IAAIF,cAAc,qBACpBmB,MAAQ,QACbjB,EAAKkB,QAAQJ,IAGRd,GAYTmB,QAAS,SAAiB3C,GACxB,IAAKA,EACH,OAAO,KAGT,IAAItI,EAAM,GAEqB,IAA3BsI,EAAKG,WAAWtJ,QAAgBmJ,EAAKK,WAAatE,EAAQwD,YAAYE,OACxE/H,GAAOsI,EAAK4C,WAGd,IAAK,IAAI5W,EAAI,EAAGA,EAAIgU,EAAKG,WAAWtJ,OAAQ7K,IACtCgU,EAAKG,WAAWnU,GAAGqU,WAAatE,EAAQwD,YAAYE,OACtD/H,GAAOsI,EAAKG,WAAWnU,GAAG4W,WAI9B,OAAO7G,EAAQiG,UAAUtK,IAe3BmL,YAAa,SAAqB7C,GAChC,IAAIQ,EAEJ,GAAIR,EAAKK,WAAatE,EAAQwD,YAAYC,OAAQ,CAChDgB,EAAKzE,EAAQwF,WAAWvB,EAAKS,SAE7B,IAAK,IAAIzU,EAAI,EAAGA,EAAIgU,EAAKzC,WAAW1G,OAAQ7K,IAC1CwU,EAAGsB,aAAa9B,EAAKzC,WAAWvR,GAAG8W,SAAU9C,EAAKzC,WAAWvR,GAAGiB,OAGlE,IAAK,IAAI8V,EAAK,EAAGA,EAAK/C,EAAKG,WAAWtJ,OAAQkM,IAC5CvC,EAAGU,YAAYnF,EAAQ8G,YAAY7C,EAAKG,WAAW4C,UAE5C/C,EAAKK,WAAatE,EAAQwD,YAAYE,OAC/Ce,EAAKzE,EAAQqF,eAAegB,eAAepC,EAAK4C,YAGlD,OAAOpC,GAeTwC,WAAY,SAAoBhD,GAC9B,IAAIQ,EAEJ,GAAIR,EAAKK,WAAatE,EAAQwD,YAAYC,OAAQ,CAChD,IAAI9B,EAAMsC,EAAK8C,SAASG,cAExB,GAAIlH,EAAQsB,MAAMI,SAASC,GACzB,IACE8C,EAAKzE,EAAQwF,WAAW7D,GAExB,IAAK,IAAI1R,EAAI,EAAGA,EAAI+P,EAAQsB,MAAME,WAAWG,GAAK7G,OAAQ7K,IAAK,CAC7D,IAAI4R,EAAY7B,EAAQsB,MAAME,WAAWG,GAAK1R,GAC1CiB,EAAQ+S,EAAKkD,aAAatF,GAE9B,GAAI,MAAO3Q,GAAqD,KAAVA,IAA0B,IAAVA,GAA6B,IAAVA,EASzF,GALkB,UAAd2Q,GAA4C,WAAnBxH,EAAQnJ,SAAgD,IAAlBA,EAAMkW,UACvElW,EAAQA,EAAMkW,SAIE,UAAdvF,EAAuB,CAIzB,IAHA,IAAIJ,EAAM,GACN4F,EAAWnW,EAAMoW,MAAM,KAElB7J,EAAI,EAAGA,EAAI4J,EAASvM,OAAQ2C,IAAK,CACxC,IAAIqI,EAAOuB,EAAS5J,GAAG6J,MAAM,KACzBC,EAAUzB,EAAK,GAAGK,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAAIe,cAE9D,GAAIlH,EAAQsB,MAAMQ,SAASyF,GAAU,CACnC,IAAIC,EAAW1B,EAAK,GAAGK,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAC3D1E,EAAIgG,KAAKF,EAAU,KAAOC,IAI1B/F,EAAI3G,OAAS,IACf5J,EAAQuQ,EAAIiG,KAAK,MACjBjD,EAAGsB,aAAalE,EAAW3Q,SAG7BuT,EAAGsB,aAAalE,EAAW3Q,GAI/B,IAAK,IAAIyW,EAAM,EAAGA,EAAM1D,EAAKG,WAAWtJ,OAAQ6M,IAC9ClD,EAAGU,YAAYnF,EAAQiH,WAAWhD,EAAKG,WAAWuD,KAEpD,MAAO/J,GAEP6G,EAAKzE,EAAQ4F,YAAY,QAEtB,CACLnB,EAAKzE,EAAQqF,eAAeuC,yBAE5B,IAAK,IAAIC,EAAM,EAAGA,EAAM5D,EAAKG,WAAWtJ,OAAQ+M,IAC9CpD,EAAGU,YAAYnF,EAAQiH,WAAWhD,EAAKG,WAAWyD,WAGjD,GAAI5D,EAAKK,WAAatE,EAAQwD,YAAYI,SAAU,CACzDa,EAAKzE,EAAQqF,eAAeuC,yBAE5B,IAAK,IAAIE,EAAM,EAAGA,EAAM7D,EAAKG,WAAWtJ,OAAQgN,IAC9CrD,EAAGU,YAAYnF,EAAQiH,WAAWhD,EAAKG,WAAW0D,UAE3C7D,EAAKK,WAAatE,EAAQwD,YAAYE,OAC/Ce,EAAKzE,EAAQ4F,YAAY3B,EAAK4C,YAGhC,OAAOpC,GAYTsD,WAAY,SAAoBtC,GAC9B,MAAoB,iBAATA,EACFA,EAGFA,EAAKU,QAAQ,aAAc,IAAIA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,SAYjQ6B,aAAc,SAAsBvC,GAClC,MAAoB,iBAATA,EACFA,EAGFA,EAAKU,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,OAYrO8B,eAAgB,SAAwBC,GACtC,OAAIA,EAAIC,QAAQ,KAAO,EACd,KAGFD,EAAIZ,MAAM,KAAK,IAYxBc,iBAAkB,SAA0BF,GAC1C,IAAIG,EAAOrI,EAAQsI,kBAAkBJ,GAErC,GAAIG,EAAKF,QAAQ,KAAO,EACtB,OAAOE,EAEP,IAAIE,EAAQF,EAAKf,MAAM,KAEvB,OADAiB,EAAMC,OAAO,EAAG,GACTD,EAAMb,KAAK,MAatBe,mBAAoB,SAA4BP,GAC9C,IAAKA,EACH,OAAO,KAGT,IAAIlW,EAAIkW,EAAIZ,MAAM,KAElB,OAAItV,EAAE8I,OAAS,EACN,MAGT9I,EAAEwW,OAAO,EAAG,GACLxW,EAAE0V,KAAK,OAYhBY,kBAAmB,SAA2BJ,GAC5C,OAAOA,EAAMA,EAAIZ,MAAM,KAAK,GAAK,MAMnCoB,aAAc,SAAsB9K,QACX,IAAZA,EAAE+K,OACX3I,EAAQ4I,MAAMhL,EAAE+K,OAGd/K,EAAEiL,UACJ7I,EAAQ4I,MAAM,UAAYrE,KAAKuE,QAAU,IAAMlL,EAAEiL,UAAY,IAAMjL,EAAEmL,KAAO,MAAQnL,EAAEpN,KAAO,KAAOoN,EAAEoL,SAC7FpL,EAAEqL,SACXjJ,EAAQ4I,MAAM,UAAYrE,KAAKuE,QAAU,IAAMlL,EAAEqL,SAAW,IAAMrL,EAAEsL,WAAa,MAAQtL,EAAEpN,KAAO,KAAOoN,EAAEoL,SAE3GhJ,EAAQ4I,MAAM,UAAYhL,EAAEoL,UAiChCG,IAAK,SAAaC,EAAOC,GACnBD,IAAU7E,KAAKpB,SAASI,OAAqC,WAA5BlJ,EAAQxK,OAAOyZ,UAAyD,mBAAzBzZ,OAAOyZ,QAAQC,OACjG1Z,OAAOyZ,QAAQC,MAAMF,IAUzBG,MAAO,SAAeH,GACpB9E,KAAK4E,IAAI5E,KAAKpB,SAASC,MAAOiG,IAShCI,KAAM,SAAcJ,GAClB9E,KAAK4E,IAAI5E,KAAKpB,SAASE,KAAMgG,IAS/BK,KAAM,SAAcL,GAClB9E,KAAK4E,IAAI5E,KAAKpB,SAASG,KAAM+F,IAS/BE,MAAO,SAAeF,GACpB9E,KAAK4E,IAAI5E,KAAKpB,SAASlB,MAAOoH,IAShCT,MAAO,SAAeS,GACpB9E,KAAK4E,IAAI5E,KAAKpB,SAASI,MAAO8F,IAYhCM,UAAW,SAAmB1F,GAC5B,IAAKA,EACH,OAAO,KAGgB,mBAAdA,EAAK2F,OACd3F,EAAOA,EAAK2F,QAGd,IAAIC,EAAQpP,EAAmBE,MAAMsJ,EAAKzC,WAAW1G,QAAQgP,QAAQC,KAAI,SAAU9Z,GACjF,OAAOgU,EAAKzC,WAAWvR,GAAG8W,YAG5B8C,EAAMhE,OACN,IAAImE,EAASH,EAAMI,QAAO,SAAUhO,EAAGvK,GACrC,MAAO,GAAG6M,OAAOtC,EAAG,KAAKsC,OAAO7M,EAAG,MAAO6M,OAAOyB,EAAQiG,UAAUhC,EAAKzC,WAAW0I,aAAaxY,GAAGR,OAAQ,OAC1G,IAAIqN,OAAO0F,EAAK8C,WAEnB,GAAI9C,EAAKG,WAAWtJ,OAAS,EAAG,CAC9BkP,GAAU,IAEV,IAAK,IAAI/Z,EAAI,EAAGA,EAAIgU,EAAKG,WAAWtJ,OAAQ7K,IAAK,CAC/C,IAAIka,EAAQlG,EAAKG,WAAWnU,GAE5B,OAAQka,EAAM7F,UACZ,KAAKtE,EAAQwD,YAAYC,OAEvBuG,GAAUhK,EAAQ2J,UAAUQ,GAC5B,MAEF,KAAKnK,EAAQwD,YAAYE,KAEvBsG,GAAUhK,EAAQiG,UAAUkE,EAAMtD,WAClC,MAEF,KAAK7G,EAAQwD,YAAYG,MAEvBqG,GAAU,YAAcG,EAAMtD,UAAY,OAIhDmD,GAAU,KAAO/F,EAAK8C,SAAW,SAEjCiD,GAAU,KAGZ,OAAOA,GAOTI,WAAY,EAMZC,mBAAoB,GASpBC,oBAAqB,SAA6B9Z,EAAM+Z,GACtDvK,EAAQqK,mBAAmB7Z,GAAQ+Z,GA8CvC,QAAkB,SAAU/Z,EAAMuP,GAEnB,aAATvP,GAAgC,YAATA,GAA+B,OAATA,IAC3CuP,IAAUA,EAAMyK,MAClBzK,EAAMyK,MAAQxK,EAAQK,GAAGG,OACfT,IACVA,EAAQ,CACNyK,MAAOxK,EAAQK,GAAGG,UAMxB+D,KAAKkG,SAAWzK,EAAQwF,WAAWhV,EAAMuP,GAEzCwE,KAAKkB,KAAOlB,KAAKkG,WAGnBzK,EAAQC,QAAQpO,UAAY,CAU1B+X,KAAM,WACJ,OAAOrF,KAAKkG,UAadxP,SAAU,WACR,OAAO+E,EAAQ2J,UAAUpF,KAAKkG,WAahCC,GAAI,WAEF,OADAnG,KAAKkB,KAAOlB,KAAKkB,KAAKkF,WACfpG,MAaThV,KAAM,WAEJ,OADAgV,KAAKkB,KAAOlB,KAAKkG,SACVlG,MAeTxE,MAAO,SAAe6K,GACpB,IAAK,IAAI5E,KAAK4E,EACRja,OAAOkB,UAAUC,eAAe1B,KAAKwa,EAAW5E,UAC7BlB,IAAjB8F,EAAU5E,GACZzB,KAAKkB,KAAKoF,gBAAgB7E,GAE1BzB,KAAKkB,KAAKM,aAAaC,EAAG4E,EAAU5E,KAK1C,OAAOzB,MAmBTjU,EAAG,SAAWE,EAAMuP,EAAOmG,GACzB,IAAIiE,EAAQnK,EAAQwF,WAAWhV,EAAMuP,EAAOmG,GAO5C,OANA3B,KAAKkB,KAAKN,YAAYgF,GAEF,iBAATjE,GAAqC,iBAATA,IACrC3B,KAAKkB,KAAO0E,GAGP5F,MAiBTuG,MAAO,SAAe7G,GACpB,IAAI8G,EACAC,EAAShL,EAAQqF,eAErB,IACE0F,OAAgCjG,IAAtBkG,EAAOC,WACjB,MAAOrN,GACPmN,GAAU,EAGZ,IAAIG,EAAUH,EAAUC,EAAOC,WAAWhH,GAAM,GAAQjE,EAAQ8G,YAAY7C,GAG5E,OAFAM,KAAKkB,KAAKN,YAAY+F,GACtB3G,KAAKkB,KAAOyF,EACL3G,MAeTpT,EAAG,SAAW+U,GACZ,IAAIiE,EAAQnK,EAAQ4F,YAAYM,GAEhC,OADA3B,KAAKkB,KAAKN,YAAYgF,GACf5F,MAcT4G,EAAG,SAAW5E,GACZ,IAAI6E,EAAWxL,SAASwF,cAAc,QAEtCgG,EAASC,UAAY9E,EAIrB,IAFA,IAAI+E,EAAQtL,EAAQiH,WAAWmE,GAExBE,EAAMlH,WAAWtJ,OAAS,GAC/ByJ,KAAKkB,KAAKN,YAAYmG,EAAMlH,WAAW,IAGzC,OAAOG,OAiCXvE,EAAQuL,QAAU,SAAUzC,EAASxX,EAAId,EAAMgb,EAAMC,EAAIvQ,EAAMwQ,GAC7DnH,KAAKuE,QAAUA,EACfvE,KAAKjT,GAAKA,EACViT,KAAK/T,KAAOA,EACZ+T,KAAKiH,KAAOA,EACZjH,KAAKkH,GAAKA,EACVlH,KAAKmH,QAAUA,GAAW,CACxB,kBAAoB,EACpB,yBAA2B,GAGzBnH,KAAKmH,QAAQC,YACf3L,EAAQ0J,KAAK,yEACbnF,KAAKmH,QAAQE,iBAAmBrH,KAAKmH,QAAQC,iBACtCpH,KAAKmH,QAAQC,WAGlBpH,KAAKmH,QAAQE,iBACfrH,KAAKrJ,KAAOA,EAAO8E,EAAQsI,kBAAkBpN,GAAQ,KAErDqJ,KAAKrJ,KAAOA,EAIdqJ,KAAKsH,MAAO,GAGd7L,EAAQuL,QAAQ1Z,UAAY,CAY1Bia,aAAc,SAAsB7H,GAClC,IAAI8H,EAAc9H,EAAKkD,aAAa,SAMpC,OAJI4E,GAAexH,KAAKmH,QAAQM,0BAC9BD,EAAcA,EAAYzE,MAAM,KAAK,IAGhCyE,GAYTE,eAAgB,SAAwBhI,GACtC,IAAIiI,EAAQ3H,KAER4H,GAAU,EAEd,OAAK5H,KAAKjT,KAGR0O,EAAQgE,aAAaC,EAAM,MAAM,SAAUA,GACrCiI,EAAMJ,aAAa7H,KAAUiI,EAAM5a,KACrC6a,GAAU,MAGPA,GAAW5H,KAAKuH,aAAa7H,KAAUM,KAAKjT,KAavD8a,QAAS,SAAiBnI,GACxB,IAAI/I,EAAO+I,EAAKkD,aAAa,QAEzB5C,KAAKmH,QAAQE,mBACf1Q,EAAO8E,EAAQsI,kBAAkBpN,IAGnC,IAAImR,EAAYpI,EAAKkD,aAAa,QAElC,SAAI5C,KAAK0H,eAAehI,IAAWM,KAAK/T,OAAQwP,EAAQwE,WAAWP,EAAMM,KAAK/T,OAAY+T,KAAKiH,OAAS7Q,MAAMC,QAAQ2J,KAAKiH,OAA0C,IAAlCjH,KAAKiH,KAAKrD,QAAQkE,GAAoBA,IAAc9H,KAAKiH,OAAYjH,KAAKkH,IAAMxH,EAAKkD,aAAa,QAAU5C,KAAKkH,IAASlH,KAAKrJ,MAAQA,IAASqJ,KAAKrJ,OAiB1RoR,IAAK,SAAarI,GAChB,IAAI+F,EAAS,KAEb,IACEA,EAASzF,KAAKuE,QAAQ7E,GACtB,MAAOrG,GAGP,MAFAoC,EAAQ0I,aAAa9K,GAEfA,EAGR,OAAOoM,GAST/O,SAAU,WACR,MAAO,aAAesJ,KAAKuE,QAAU,IAAMvE,KAAK/T,KAAO,IAAM+T,KAAKkH,GAAK,IAAMlH,KAAKjT,GAAK,OA6B3F0O,EAAQuM,aAAe,SAAUC,EAAQ1D,GACvCvE,KAAKiI,OAASA,EACdjI,KAAKuE,QAAUA,EACfvE,KAAKkI,YAAa,IAAIC,MAAOC,UAC7BpI,KAAKsH,MAAO,GAGd7L,EAAQuM,aAAa1a,UAAY,CAQ/Bya,IAAK,WAEH,OADA/H,KAAKkI,YAAa,IAAIC,MAAOC,UACtBpI,KAAKuE,WAMd8D,MAAO,WACLrI,KAAKkI,YAAa,IAAIC,MAAOC,WAS/B1R,SAAU,WACR,MAAO,kBAAoBsJ,KAAKuE,QAAU,IAAMvE,KAAKiI,OAAS,OA4JlExM,EAAQ6M,WAAa,SAAUC,EAASpB,GACtC,IAAIqB,EAASxI,KAGbA,KAAKuI,QAAUA,EAEfvI,KAAKmH,QAAUA,GAAW,GAC1B,IAAIsB,EAAQzI,KAAKmH,QAAQuB,UAAY,GAsDrC,IAAK,IAAIjH,KApDsB,IAA3B8G,EAAQ3E,QAAQ,QAA4C,IAA5B2E,EAAQ3E,QAAQ,SAAyC,IAAxB6E,EAAM7E,QAAQ,MACjF5D,KAAK2I,OAAS,IAAIlN,EAAQmN,UAAU5I,MAEpCA,KAAK2I,OAAS,IAAIlN,EAAQoN,KAAK7I,MAKjCA,KAAK2D,IAAM,GAGX3D,KAAKlF,OAAS,KAGdkF,KAAK8I,SAAW,KAEhB9I,KAAK+I,WAAa,GAClB/I,KAAKgJ,YAAa,EAClBhJ,KAAKiJ,SAAU,EAEfjJ,KAAKkJ,cAAgB,GACrBlJ,KAAKmJ,SAAW,GAChBnJ,KAAKoJ,aAAe,GACpBpJ,KAAKqJ,eAAiB,GACtBrJ,KAAKsJ,UAAY,GACjBtJ,KAAKuJ,YAAc,GACnBvJ,KAAKwJ,sBAAwB,CAC3B,KAAQ,GACR,UAAa,IAEfxJ,KAAKyJ,aAAe,KACpBzJ,KAAK0J,mBAAqB,KAC1B1J,KAAK2J,eAAgB,EACrB3J,KAAK4J,WAAY,EACjB5J,KAAK6J,eAAgB,EACrB7J,KAAK8J,mBAAoB,EACzB9J,KAAK+J,QAAS,EACd/J,KAAKgK,UAAW,EAChBhK,KAAKiK,MAAQ,GACbjK,KAAKkK,UAAY,EACjBlK,KAAKmK,sBAAwB,KAC7BnK,KAAKoK,sBAAwB,KAC7BpK,KAAKqK,wBAA0B,KAE/BrK,KAAKsK,WAAa,EAElBtK,KAAKyJ,aAAec,YAAW,WAC7B,OAAO/B,EAAOgC,YACb,KACH/P,EAAiBuF,KAAKmH,QAAQxM,SAC9BqF,KAAKyK,uBAAuBzK,KAAKmH,QAAQuD,YAE3BjP,EAAQqK,mBACpB,GAAI1Z,OAAOkB,UAAUC,eAAe1B,KAAK4P,EAAQqK,mBAAoBrE,GAAI,CACvE,IAAIkJ,EAAI,aAERA,EAAErd,UAAYmO,EAAQqK,mBAAmBrE,GACzCzB,KAAKyB,GAAK,IAAIkJ,EACd3K,KAAKyB,GAAGmJ,KAAK5K,QAKnBvE,EAAQ6M,WAAWhb,UAAY,CAO7B+a,MAAO,WACLrI,KAAK2I,OAAOkC,SAGZ7K,KAAKgJ,YAAa,EAClBhJ,KAAKiJ,SAAU,EAEfjJ,KAAKkJ,cAAgB,GACrBlJ,KAAKmJ,SAAW,GAChBnJ,KAAKoJ,aAAe,GACpBpJ,KAAKqJ,eAAiB,GACtBrJ,KAAKsJ,UAAY,GACjBtJ,KAAKuJ,YAAc,GACnBvJ,KAAK2J,eAAgB,EACrB3J,KAAK4J,WAAY,EACjB5J,KAAK6J,eAAgB,EACrB7J,KAAKgK,UAAW,EAChBhK,KAAKiK,MAAQ,GACbjK,KAAK8K,UAAY,GACjB9K,KAAKkK,UAAY,GAYnBa,MAAO,WACL/K,KAAK+J,QAAS,GAQhBiB,OAAQ,WACNhL,KAAK+J,QAAS,GAyBhBkB,YAAa,SAAqBC,GAChC,IAAIC,EAAO,uCAAuCvJ,QAAQ,SAAS,SAAU7V,GAC3E,IAAIS,EAAoB,GAAhB4e,KAAKC,SAAgB,EAE7B,OADc,MAANtf,EAAYS,EAAQ,EAAJA,EAAU,GACzBkK,SAAS,OAGpB,MAAsB,iBAAXwU,GAAyC,iBAAXA,EAChCC,EAAO,IAAMD,EAEbC,EAAO,IA0BlBG,wBAAyB,SAAiC5C,EAAU6C,EAAaC,GAC/ExL,KAAKwJ,sBAAsBd,GAAU6C,GAAeC,GA2CtDC,QAAS,SAAiB9H,EAAK+H,EAAMF,EAAUG,EAAMC,EAAMC,EAAOC,GAChE9L,KAAK2D,IAAMA,EAKX3D,KAAK+L,QAAUtQ,EAAQsI,kBAAkB/D,KAAK2D,KAK9C3D,KAAK8L,QAAUA,GAAWrQ,EAAQiI,eAAe1D,KAAK2D,KAKtD3D,KAAK0L,KAAOA,EAKZ1L,KAAKgM,SAAW,OAChBhM,KAAKiM,iBAAmBT,EACxBxL,KAAK6J,eAAgB,EACrB7J,KAAK4J,WAAY,EACjB5J,KAAK2J,eAAgB,EACrB3J,KAAKgK,UAAW,EAEhBhK,KAAKlF,OAASW,EAAQoI,iBAAiB7D,KAAK2D,KAE5C3D,KAAKkM,qBAAqBzQ,EAAQgC,OAAOE,WAAY,MAErDqC,KAAK2I,OAAOwD,SAASR,EAAMC,EAAMC,IA2BnCO,OAAQ,SAAgBzI,EAAK0I,EAAKC,EAAKd,EAAUG,EAAMC,EAAMW,GAC3D,KAAIvM,KAAK2I,kBAAkBlN,EAAQoN,MAE5B,CACL,IAAI7D,EAAQ,IAAI3N,MAAM,gEAEtB,MADA2N,EAAM/Y,KAAO,sBACP+Y,EAJNhF,KAAK2I,OAAO6D,QAAQ7I,EAAK0I,EAAKC,EAAKd,EAAUG,EAAMC,EAAMW,IAmC7DE,QAAS,SAAiB9I,EAAK6H,EAAUG,EAAMC,EAAMW,GACnD,IAAIvM,KAAK0M,2BAEF,CACL,IAAI1H,EAAQ,IAAI3N,MAAM,iEAEtB,MADA2N,EAAM/Y,KAAO,sBACP+Y,EAJNhF,KAAK2I,OAAOgE,SAAShJ,EAAK6H,EAAUG,EAAMC,EAAMW,IAYpDG,yBAA0B,WACxB,GAAI1M,KAAK2I,kBAAkBlN,EAAQoN,KAAM,CACvC,IAAK+D,KACH,OAAO,EAGT,IACEC,eAAeC,QAAQ,YAAa,aACpCD,eAAeE,WAAW,aAC1B,MAAO1T,GACP,OAAO,EAGT,OAAO,EAGT,OAAO,GAqBT2T,SAAU,SAAkBtN,KAsB5BuN,UAAW,SAAmBvN,KAgB9BwN,SAAU,SAAkBvT,KAgB5BwT,UAAW,SAAmBxT,KAe9ByT,aAAc,SAAsBd,KAgBpCe,KAAM,SAAc3N,GAClB,GAAa,OAATA,EAAJ,CAIA,GAAyB,mBAAdA,EAAK4B,KACd,IAAK,IAAI5V,EAAI,EAAGA,EAAIgU,EAAKnJ,OAAQ7K,IAC/BsU,KAAKsN,WAAW5N,EAAKhU,QAEO,mBAAdgU,EAAK2F,KACrBrF,KAAKsN,WAAW5N,EAAK2F,QAErBrF,KAAKsN,WAAW5N,GAGlBM,KAAK2I,OAAO4E,UAWdC,MAAO,WAGLC,aAAazN,KAAKyJ,cAElBzJ,KAAKwK,WAmBPkD,aAAc,SAAsBhO,EAAM8L,EAAUmC,EAASC,GAC3D,IAAIC,EAAS7N,KAET8N,EAAiB,KAEI,mBAAdpO,EAAK2F,OACd3F,EAAOA,EAAK2F,QAGd,IAAI6B,EAAKxH,EAAKkD,aAAa,MAQ3B,GANKsE,IAEHA,EAAKlH,KAAKiL,YAAY,gBACtBvL,EAAK8B,aAAa,KAAM0F,IAGF,mBAAbsE,GAA8C,mBAAZmC,EAAwB,CACnE,IAAIpJ,EAAUvE,KAAK+N,YAAW,SAAUC,GAElCF,GACFD,EAAOI,mBAAmBH,GAGQ,UAAhCE,EAAOpL,aAAa,QAClB+K,GACFA,EAAQK,GAEDxC,GACTA,EAASwC,KAEV,KAAM,WAAY,KAAM9G,GAEvB0G,IACFE,EAAiB9N,KAAKkO,gBAAgBN,GAAS,WAS7C,OAPAC,EAAOM,cAAc5J,GAGjBoJ,GACFA,EAAQ,OAGH,MAMb,OADA3N,KAAKqN,KAAK3N,GACHwH,GAiBTkH,OAAQ,SAAgB1O,EAAM8L,EAAUmC,EAASC,GAC/C,IAAIS,EAASrO,KAET8N,EAAiB,KAEI,mBAAdpO,EAAK2F,OACd3F,EAAOA,EAAK2F,QAGd,IAAI6B,EAAKxH,EAAKkD,aAAa,MAQ3B,GANKsE,IAEHA,EAAKlH,KAAKiL,YAAY,UACtBvL,EAAK8B,aAAa,KAAM0F,IAGF,mBAAbsE,GAA8C,mBAAZmC,EAAwB,CACnE,IAAIpJ,EAAUvE,KAAK+N,YAAW,SAAUC,GAElCF,GACFO,EAAOJ,mBAAmBH,GAG5B,IAAIQ,EAASN,EAAOpL,aAAa,QAEjC,GAAe,WAAX0L,EACE9C,GACFA,EAASwC,OAEN,IAAe,UAAXM,EAIJ,CACL,IAAItJ,EAAQ,IAAI3N,MAAM,sBAAsB2C,OAAOsU,IAEnD,MADAtJ,EAAM/Y,KAAO,eACP+Y,EANF2I,GACFA,EAAQK,MAOX,KAAM,KAAM,CAAC,QAAS,UAAW9G,GAEhC0G,IACFE,EAAiB9N,KAAKkO,gBAAgBN,GAAS,WAS7C,OAPAS,EAAOF,cAAc5J,GAGjBoJ,GACFA,EAAQ,OAGH,MAMb,OADA3N,KAAKqN,KAAK3N,GACHwH,GAOToG,WAAY,SAAoBiB,GAC9B,GAAgB,OAAZA,IAAqBA,EAAQpO,UAAYoO,EAAQ1O,WAAY,CAC/D,IAAImF,EAAQ,IAAI3N,MAAM,gCAEtB,MADA2N,EAAM/Y,KAAO,eACP+Y,EAGRhF,KAAKiK,MAAM/G,KAAKqL,IAMlBC,aAAc,WACZ,IAAIC,EAASzO,KAEbA,KAAKiK,MAAM/G,KAAK,WAEhBlD,KAAK2I,OAAO6F,eAEZxO,KAAKyJ,aAAec,YAAW,WAC7B,OAAOkE,EAAOjE,YACb,MAyBL0D,gBAAiB,SAAyBjG,EAAQ1D,GAChD,IAAImK,EAAQ,IAAIjT,EAAQuM,aAAaC,EAAQ1D,GAE7C,OADAvE,KAAKsJ,UAAUpG,KAAKwL,GACbA,GAaTT,mBAAoB,SAA4BU,GAG9C3O,KAAKoJ,aAAalG,KAAKyL,IAmEzBZ,WAAY,SAAoBxJ,EAASxX,EAAId,EAAMgb,EAAMC,EAAIvQ,EAAMwQ,GACjE,IAAIyH,EAAO,IAAInT,EAAQuL,QAAQzC,EAASxX,EAAId,EAAMgb,EAAMC,EAAIvQ,EAAMwQ,GAElE,OADAnH,KAAKuJ,YAAYrG,KAAK0L,GACfA,GAaTT,cAAe,SAAuBQ,GAGpC3O,KAAKqJ,eAAenG,KAAKyL,GAGzB,IAAIjjB,EAAIsU,KAAKuJ,YAAY3F,QAAQ+K,GAE7BjjB,GAAK,GACPsU,KAAKuJ,YAAYtF,OAAOvY,EAAG,IAa/B+e,uBAAwB,SAAgCC,GACtD1K,KAAK0K,WAAa,IAClBA,EAAaA,GAAc,CAACjP,EAAQoT,cAAepT,EAAQqT,aAAcrT,EAAQsT,QAAStT,EAAQuT,gBAAiBvT,EAAQwT,YAAaxT,EAAQyT,UAAWzT,EAAQ0T,WACxJC,QAAQpP,KAAKqP,sBAAsBniB,KAAK8S,QAWrDqP,sBAAuB,SAA+BC,GACpDtP,KAAK0K,WAAW4E,EAAUhiB,UAAUrB,MAAQqjB,GAmB9CC,WAAY,SAAoBC,GAK9B,GAJAxP,KAAKkM,qBAAqBzQ,EAAQgC,OAAOQ,cAAeuR,GAExD/T,EAAQ0J,KAAK,kCAAoCqK,GAE7CxP,KAAK4J,UAAW,CAClB,IAAI6F,GAAO,EACXzP,KAAK6J,eAAgB,EAEjB7J,KAAK2J,gBACP8F,EAAO7T,EAAM,CACX,MAASH,EAAQK,GAAGG,OACpB,KAAQ,iBAKZ+D,KAAK0J,mBAAqB1J,KAAK0P,oBAAoB,IAAM1P,KAAK2P,qBAAqBziB,KAAK8S,OAExFA,KAAK2I,OAAOiH,YAAYH,QAExBhU,EAAQ0J,KAAK,gEAEbnF,KAAK2I,OAAOkH,oBAEZ7P,KAAK8P,iBAcT5D,qBAAsB,SAA8B6D,EAAQC,EAAWtQ,GAErE,IAAK,IAAI+B,KAAKhG,EAAQqK,mBACpB,GAAI1Z,OAAOkB,UAAUC,eAAe1B,KAAK4P,EAAQqK,mBAAoBrE,GAAI,CACvE,IAAIwO,EAASjQ,KAAKyB,GAElB,GAAIwO,EAAOC,cACT,IACED,EAAOC,cAAcH,EAAQC,GAC7B,MAAOG,GACP1U,EAAQuJ,MAAM,GAAGhL,OAAOyH,EAAG,iDAAiDzH,OAAOmW,KAO3F,GAAInQ,KAAKiM,iBACP,IACEjM,KAAKiM,iBAAiB8D,EAAQC,EAAWtQ,GACzC,MAAOrG,GACPoC,EAAQ0I,aAAa9K,GAErBoC,EAAQuJ,MAAM,iDAAiDhL,OAAOX,MAW5EyW,cAAe,SAAuBE,GACH,iBAAtBhQ,KAAKyJ,cACdgE,aAAazN,KAAKyJ,cAIY,OAA5BzJ,KAAK0J,qBACP1J,KAAKiO,mBAAmBjO,KAAK0J,oBAC7B1J,KAAK0J,mBAAqB,MAG5BjO,EAAQwJ,MAAM,4BAEdjF,KAAK2I,OAAOmH,gBAEZ9P,KAAK2J,eAAgB,EACrB3J,KAAK6J,eAAgB,EACrB7J,KAAKgK,UAAW,EAEhBhK,KAAKmJ,SAAW,GAChBnJ,KAAKkJ,cAAgB,GACrBlJ,KAAKoJ,aAAe,GACpBpJ,KAAKqJ,eAAiB,GACtBrJ,KAAKsJ,UAAY,GACjBtJ,KAAKuJ,YAAc,GAEnBvJ,KAAKkM,qBAAqBzQ,EAAQgC,OAAOO,aAAcgS,GAEvDhQ,KAAK4J,WAAY,GAenBwG,UAAW,SAAmBC,EAAKC,GACjC,IAAIC,EAASvQ,KAEbvE,EAAQwJ,MAAM,oBAEd,IAAIvF,EAAOM,KAAK2I,OAAO6H,WAAWH,GAElC,GAAa,OAAT3Q,EAAJ,CAqBA,IAjBIM,KAAKgN,WAAavR,EAAQ6M,WAAWhb,UAAU0f,WAC7CtN,EAAK8C,WAAaxC,KAAK2I,OAAO8H,OAAS/Q,EAAKG,WAAWtJ,OACzDyJ,KAAKgN,SAAStN,EAAKG,WAAW,IAE9BG,KAAKgN,SAAStN,IAIdM,KAAKkN,WAAazR,EAAQ6M,WAAWhb,UAAU4f,WAC7CoD,EACFtQ,KAAKkN,SAASoD,GAEdtQ,KAAKkN,SAASzR,EAAQ2J,UAAU1F,KAK7BM,KAAKqJ,eAAe9S,OAAS,GAAG,CACrC,IAAIqY,EAAO5O,KAAKqJ,eAAeqH,MAC3BhlB,EAAIsU,KAAKmJ,SAASvF,QAAQgL,GAE1BljB,GAAK,GACPsU,KAAKmJ,SAASlF,OAAOvY,EAAG,GAK5B,KAAOsU,KAAKuJ,YAAYhT,OAAS,GAC/ByJ,KAAKmJ,SAASjG,KAAKlD,KAAKuJ,YAAYmH,OAItC,GAAI1Q,KAAK6J,eAAiB7J,KAAK2I,OAAOgI,cACpC3Q,KAAK8P,oBADP,CAMA,IAAI7I,EAAOvH,EAAKkD,aAAa,QAE7B,GAAa,OAATqE,GAA0B,cAATA,EAAsB,CAEzC,GAAIjH,KAAK6J,cACP,OAIF,IAAI+G,EAAOlR,EAAKkD,aAAa,aACzBiO,EAAWnR,EAAKoR,qBAAqB,YAczC,OAZa,OAATF,GACW,wBAATA,GAAkCC,EAASta,OAAS,IACtDqa,EAAO,YAGT5Q,KAAKkM,qBAAqBzQ,EAAQgC,OAAOG,SAAUgT,IAEnD5Q,KAAKkM,qBAAqBzQ,EAAQgC,OAAOG,SAAUnC,EAAQ6C,eAAeyS,oBAG5E/Q,KAAK8P,cAAcc,GAMrBnV,EAAQgE,aAAaC,EAAM,MAAM,SAAUkG,GAEzC,IAAIoL,EAAUT,EAAOpH,SACrBoH,EAAOpH,SAAW,GAElB,IAAK,IAAI8H,EAAM,EAAGA,EAAMD,EAAQza,OAAQ0a,IAAO,CAC7C,IAAIC,EAAQF,EAAQC,GAGpB,MACMC,EAAMrJ,QAAQjC,KAAW2K,EAAO5G,eAAkBuH,EAAM5J,MACtD4J,EAAMnJ,IAAInC,KAId2K,EAAOpH,SAASjG,KAAKgO,GAEvB,MAAO7X,GAEPoC,EAAQ0J,KAAK,wDAA0D9L,EAAEoL,iBASjFiG,WAAY,GAkBZyG,YAAa,SAAqBd,EAAKe,EAAWd,GAGhD,IAAIe,EAFJ5V,EAAQwJ,MAAM,0BACdjF,KAAK4J,WAAY,EAGjB,IACEyH,EAAWrR,KAAK2I,OAAO6H,WAAWH,GAClC,MAAOhX,GACP,GAAIA,EAAEpN,OAASwP,EAAQ6C,eAAeC,WACpC,MAAMlF,EAGR2G,KAAKkM,qBAAqBzQ,EAAQgC,OAAOG,SAAUnC,EAAQ6C,eAAeC,YAE1EyB,KAAK8P,cAAcrU,EAAQ6C,eAAeC,YAG5C,GAAK8S,IAIDrR,KAAKgN,WAAavR,EAAQ6M,WAAWhb,UAAU0f,WAC7CqE,EAAS7O,WAAaxC,KAAK2I,OAAO8H,OAASY,EAASxR,WAAWtJ,OACjEyJ,KAAKgN,SAASqE,EAASxR,WAAW,IAElCG,KAAKgN,SAASqE,IAIdrR,KAAKkN,WAAazR,EAAQ6M,WAAWhb,UAAU4f,WAC7CoD,EACFtQ,KAAKkN,SAASoD,GAEdtQ,KAAKkN,SAASzR,EAAQ2J,UAAUiM,KAIpBrR,KAAK2I,OAAOwI,YAAYE,KAEtB5V,EAAQgC,OAAOG,UAajC,GANIyT,EAASC,uBACGD,EAASC,uBAAuB7V,EAAQK,GAAGW,OAAQ,YAAYlG,OAAS,EAExE8a,EAASP,qBAAqB,mBAAmBva,OAAS,GAAK8a,EAASP,qBAAqB,YAAYva,OAAS,EAGlI,CAMA,IAAIgb,EAAU,GACV7G,EAAa2G,EAASP,qBAAqB,aAE/C,GAAIpG,EAAWnU,OAAS,EACtB,IAAK,IAAI7K,EAAI,EAAGA,EAAIgf,EAAWnU,OAAQ7K,IAAK,CAC1C,IAAI8lB,EAAO/V,EAAQ4G,QAAQqI,EAAWhf,IAClCsU,KAAK0K,WAAW8G,IAAOD,EAAQrO,KAAKlD,KAAK0K,WAAW8G,IAIrC,IAAnBD,EAAQhb,QAC2C,IAAjD8a,EAASP,qBAAqB,QAAQva,QASb,IAA3ByJ,KAAK8J,mBACP9J,KAAKyR,aAAaF,GAPhBvR,KAAK2I,OAAO+I,kBAAkBN,QAnBhCpR,KAAK2I,OAAO+I,kBAAkBN,IAuClCO,yBAA0B,SAAkCjH,GAE1D,IAAK,IAAIhf,EAAI,EAAGA,EAAIgf,EAAWnU,OAAS,IAAK7K,EAAG,CAG9C,IAFA,IAAIkmB,EAASlmB,EAEJwN,EAAIxN,EAAI,EAAGwN,EAAIwR,EAAWnU,SAAU2C,EACvCwR,EAAWxR,GAAG5L,UAAUukB,SAAWnH,EAAWkH,GAAQtkB,UAAUukB,WAClED,EAAS1Y,GAIb,GAAI0Y,IAAWlmB,EAAG,CAChB,IAAIomB,EAAOpH,EAAWhf,GACtBgf,EAAWhf,GAAKgf,EAAWkH,GAC3BlH,EAAWkH,GAAUE,GAIzB,OAAOpH,GAgBT+G,aAAc,SAAsBF,GAC7BvR,KAAK+R,iBAAiBR,IACzBvR,KAAKgS,sBAiBTD,iBAAkB,SAA0BrH,GAC1CA,EAAa1K,KAAK2R,yBAAyBjH,GAAc,IAGzD,IAFA,IAAIuH,GAAkB,EAEbvmB,EAAI,EAAGA,EAAIgf,EAAWnU,SAAU7K,EACvC,GAAKgf,EAAWhf,GAAG4B,UAAU4kB,KAAKlS,MAAlC,CAIAA,KAAKmK,sBAAwBnK,KAAKmS,eAAenS,KAAKoS,iBAAiBllB,KAAK8S,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAKoK,sBAAwBpK,KAAKmS,eAAenS,KAAKqS,iBAAiBnlB,KAAK8S,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAKqK,wBAA0BrK,KAAKmS,eAAenS,KAAKsS,mBAAmBplB,KAAK8S,MAAO,KAAM,YAAa,KAAM,MAChHA,KAAKuS,gBAAkB,IAAI7H,EAAWhf,GAEtCsU,KAAKuS,gBAAgBC,QAAQxS,MAE7B,IAAIyS,EAAwBlX,EAAO,OAAQ,CACzC,MAASE,EAAQK,GAAGU,KACpB,UAAawD,KAAKuS,gBAAgBtmB,OAGpC,GAAI+T,KAAKuS,gBAAgBG,cAAe,CACtC,IAAIC,EAAW3S,KAAKuS,gBAAgBK,YAAY5S,KAAM,MAEtDyS,EAAsB7lB,EAAEimB,KAAKF,IAG/B3S,KAAKqN,KAAKoF,EAAsBpN,QAChC4M,GAAkB,EAClB,MAGF,OAAOA,GAOTK,mBAAoB,SAA4B5S,GAC9C,IAAIoT,EAAYC,KAAKtX,EAAQ4G,QAAQ3C,IAEjCiT,EAAW3S,KAAKuS,gBAAgBK,YAAY5S,KAAM8S,GAElD9E,EAASzS,EAAO,WAAY,CAC9B,MAASE,EAAQK,GAAGU,OAQtB,MALiB,KAAbmW,GACF3E,EAAOphB,EAAEimB,KAAKF,IAGhB3S,KAAKqN,KAAKW,EAAO3I,SACV,GAOT2M,mBAAoB,WACuB,OAArCvW,EAAQiI,eAAe1D,KAAK2D,MAG9B3D,KAAKkM,qBAAqBzQ,EAAQgC,OAAOG,SAAUnC,EAAQ6C,eAAeG,kBAE1EuB,KAAKuP,WAAW9T,EAAQ6C,eAAeG,oBAGvCuB,KAAKkM,qBAAqBzQ,EAAQgC,OAAOI,eAAgB,MAEzDmC,KAAKmS,eAAenS,KAAKgT,sBAAsB9lB,KAAK8S,MAAO,KAAM,KAAM,KAAM,WAE7EA,KAAKqN,KAAK1R,EAAI,CACZ,KAAQ,MACR,GAAMqE,KAAKlF,OACX,GAAM,YACL/O,EAAE,QAAS,CACZka,MAAOxK,EAAQK,GAAGI,OACjBnQ,EAAE,WAAY,IAAIa,EAAE6O,EAAQiI,eAAe1D,KAAK2D,MAAM0B,UAkB7D2N,sBAAuB,SAA+BtT,GAEpD,IAAIuT,EAAKtX,EAAI,CACXsL,KAAM,MACNC,GAAI,YACHnb,EAAE,QAAS,CACZka,MAAOxK,EAAQK,GAAGI,OACjBnQ,EAAE,WAAY,IAAIa,EAAE6O,EAAQiI,eAAe1D,KAAK2D,MAAMwC,KAAKpa,EAAE,YAAYa,EAAEoT,KAAK0L,MAcnF,OAZKjQ,EAAQyI,mBAAmBlE,KAAK2D,OAInC3D,KAAK2D,IAAMlI,EAAQsI,kBAAkB/D,KAAK2D,KAAO,YAGnDsP,EAAG9M,KAAKpa,EAAE,WAAY,IAAIa,EAAE6O,EAAQyI,mBAAmBlE,KAAK2D,MAE5D3D,KAAKmS,eAAenS,KAAKkT,UAAUhmB,KAAK8S,MAAO,KAAM,KAAM,KAAM,WAEjEA,KAAKqN,KAAK4F,EAAG5N,SACN,GAYT+M,iBAAkB,SAA0B1S,GAC1C,IAAIyT,EAASnT,KAEb,GAAIA,KAAK+I,WAAW,oBAAqB,CACvC,IAAIqK,EAGAC,EAFUN,KAAKtX,EAAQ4G,QAAQ3C,IAEb4T,MADJ,yBAOlB,GAJmB,MAAfD,EAAQ,KACVD,EAAkBC,EAAQ,IAGxBD,IAAoBpT,KAAK+I,WAAW,oBAWtC,OATA/I,KAAKmO,cAAcnO,KAAKoK,uBACxBpK,KAAKoK,sBAAwB,KAEzBpK,KAAKqK,0BACPrK,KAAKmO,cAAcnO,KAAKqK,yBACxBrK,KAAKqK,wBAA0B,MAGjCrK,KAAK+I,WAAa,GACX/I,KAAKqS,iBAAiB,MAIjC5W,EAAQyJ,KAAK,kCAETlF,KAAKuS,iBACPvS,KAAKuS,gBAAgBgB,YAIvBvT,KAAKmO,cAAcnO,KAAKoK,uBACxBpK,KAAKoK,sBAAwB,KAEzBpK,KAAKqK,0BACPrK,KAAKmO,cAAcnO,KAAKqK,yBACxBrK,KAAKqK,wBAA0B,MAGjC,IAAImJ,EAAyB,GAEzBC,EAAU,SAAiBtK,EAAUzJ,GACvC,KAAOyJ,EAAS5S,QACd4c,EAAOhF,cAAchF,EAASuH,OAKhC,OAFAyC,EAAOO,2BAA2BhU,IAE3B,GAYT,OATA8T,EAAuBtQ,KAAKlD,KAAKmS,gBAAe,SAAUzS,GACxD,OAAO+T,EAAQD,EAAwB9T,KACtC,KAAM,kBAAmB,KAAM,OAClC8T,EAAuBtQ,KAAKlD,KAAKmS,gBAAe,SAAUzS,GACxD,OAAO+T,EAAQD,EAAwB9T,KACtCjE,EAAQK,GAAGW,OAAQ,WAAY,KAAM,OAExCuD,KAAKwO,gBAEE,GAUTkF,2BAA4B,SAAoChU,GAE9DM,KAAK8I,SAAWpJ,EAEhB,IAAK,IAAIhU,EAAI,EAAGA,EAAIgU,EAAKG,WAAWtJ,OAAQ7K,IAAK,CAC/C,IAAIka,EAAQlG,EAAKG,WAAWnU,GAEL,SAAnBka,EAAMpD,WACRxC,KAAKiJ,SAAU,GAGM,YAAnBrD,EAAMpD,WACRxC,KAAKgJ,YAAa,GAItB,OAAKhJ,KAAKiJ,SAIEjJ,KAAKmH,QAAQwM,wBAGvB3T,KAAKkM,qBAAqBzQ,EAAQgC,OAAOY,aAAc,MAFvD2B,KAAK9S,QAKA,IATL8S,KAAKkM,qBAAqBzQ,EAAQgC,OAAOK,SAAU,OAE5C,IAuBX5Q,KAAM,WACJ,GAAK8S,KAAKiJ,QAAV,CAKAjJ,KAAKmS,eAAenS,KAAK4T,wBAAwB1mB,KAAK8S,MAAO,KAAM,KAAM,KAAM,gBAE/E,IAAI6T,EAAWpY,EAAQyI,mBAAmBlE,KAAK2D,KAE3CkQ,EACF7T,KAAKqN,KAAK1R,EAAI,CACZsL,KAAM,MACNC,GAAI,iBACHnb,EAAE,OAAQ,CACXka,MAAOxK,EAAQK,GAAGa,OACjB5Q,EAAE,WAAY,IAAIa,EAAEinB,GAAUxO,QAEjCrF,KAAKqN,KAAK1R,EAAI,CACZsL,KAAM,MACNC,GAAI,iBACHnb,EAAE,OAAQ,CACXka,MAAOxK,EAAQK,GAAGa,OACjB0I,aArBH5J,EAAQmJ,IAAInJ,EAAQmD,SAASE,KAAM,oEAkCvC8U,wBAAyB,SAAiClU,GAGtD,IACIsQ,EAHN,GAAkC,UAA9BtQ,EAAKkD,aAAa,QAWpB,OAVAnH,EAAQ0J,KAAK,4BACEzF,EAAKoR,qBAAqB,YAG5Bva,OAAS,IACpByZ,EAAYvU,EAAQ6C,eAAeE,UAGrCwB,KAAKkM,qBAAqBzQ,EAAQgC,OAAOK,SAAUkS,EAAWtQ,IAEvD,EAIT,IAAIxS,EAAOwS,EAAKoR,qBAAqB,QAErC,KAAI5jB,EAAKqJ,OAAS,GAmBhB,OAJAkF,EAAQ0J,KAAK,4BAEbnF,KAAKkM,qBAAqBzQ,EAAQgC,OAAOK,SAAU,KAAM4B,IAElD,EAlBP,IAAIoU,EAAU5mB,EAAK,GAAG4jB,qBAAqB,OAEvCgD,EAAQvd,OAAS,IACnByJ,KAAK2D,IAAMlI,EAAQ4G,QAAQyR,EAAQ,IAE/B9T,KAAKgJ,WACPhJ,KAAK+T,qBAEL/T,KAAK2J,eAAgB,EAErB3J,KAAKkM,qBAAqBzQ,EAAQgC,OAAOM,UAAW,SAoB5DgW,kBAAmB,WACjB,IAAK/T,KAAKgJ,WACR,MAAM,IAAI3R,MAAM,kDAAoD,yBAAyB2C,OAAOyB,EAAQK,GAAGc,QAAS,qCAG1HoD,KAAKmS,eAAenS,KAAKgU,mBAAmB9mB,KAAK8S,MAAO,KAAM,KAAM,KAAM,mBAE1EA,KAAKqN,KAAK1R,EAAI,CACZsL,KAAM,MACNC,GAAI,oBACHnb,EAAE,UAAW,CACdka,MAAOxK,EAAQK,GAAGc,UACjByI,SAqBL2O,mBAAoB,SAA4BtU,GAC9C,GAAkC,WAA9BA,EAAKkD,aAAa,QACpB5C,KAAK2J,eAAgB,EAErB3J,KAAKkM,qBAAqBzQ,EAAQgC,OAAOM,UAAW,WAC/C,GAAkC,UAA9B2B,EAAKkD,aAAa,QAK3B,OAJAnH,EAAQ0J,KAAK,4BAEbnF,KAAKkM,qBAAqBzQ,EAAQgC,OAAOK,SAAU,KAAM4B,IAElD,EAGT,OAAO,GAYT2S,iBAAkB,SAA0B3S,GAgB1C,OAdIM,KAAKmK,wBACPnK,KAAKmO,cAAcnO,KAAKmK,uBACxBnK,KAAKmK,sBAAwB,MAG3BnK,KAAKqK,0BACPrK,KAAKmO,cAAcnO,KAAKqK,yBACxBrK,KAAKqK,wBAA0B,MAG7BrK,KAAKuS,iBAAiBvS,KAAKuS,gBAAgB0B,YAE/CjU,KAAKkM,qBAAqBzQ,EAAQgC,OAAOK,SAAU,KAAM4B,IAElD,GAeTwT,UAAW,SAAmBxT,GAW5B,MAVkC,WAA9BA,EAAKkD,aAAa,SACpB5C,KAAK2J,eAAgB,EAErB3J,KAAKkM,qBAAqBzQ,EAAQgC,OAAOM,UAAW,OACb,UAA9B2B,EAAKkD,aAAa,UAC3B5C,KAAKkM,qBAAqBzQ,EAAQgC,OAAOK,SAAU,KAAM4B,GAEzDM,KAAKuP,WAAW,2BAGX,GAcTG,oBAAqB,SAA6BzH,EAAQ1D,GACxD,IAAImK,EAAQ,IAAIjT,EAAQuM,aAAaC,EAAQ1D,GAG7C,OAFAmK,EAAMpH,MAAO,EACbtH,KAAKsJ,UAAUpG,KAAKwL,GACbA,GAiBTyD,eAAgB,SAAwB5N,EAASxX,EAAId,EAAMgb,EAAMC,GAC/D,IAAI0H,EAAO,IAAInT,EAAQuL,QAAQzC,EAASxX,EAAId,EAAMgb,EAAMC,GAGxD,OAFA0H,EAAKtH,MAAO,EACZtH,KAAKuJ,YAAYrG,KAAK0L,GACfA,GAYTe,qBAAsB,WAUpB,OATAlU,EAAQwJ,MAAM,mCAEdjF,KAAKkM,qBAAqBzQ,EAAQgC,OAAOW,YAAa,MAEtD4B,KAAK2I,OAAOgH,uBAGZ3P,KAAK8P,iBAEE,GASTtF,QAAS,WAMP,IALA,IAAI0J,EAASlU,KAKNA,KAAKsJ,UAAU/S,OAAS,GAC7ByJ,KAAKkJ,cAAchG,KAAKlD,KAAKsJ,UAAUoH,OAIzC,KAAO1Q,KAAKoJ,aAAa7S,OAAS,GAAG,CACnC,IAAImY,EAAQ1O,KAAKoJ,aAAasH,MAC1BhlB,EAAIsU,KAAKkJ,cAActF,QAAQ8K,GAE/BhjB,GAAK,GACPsU,KAAKkJ,cAAcjF,OAAOvY,EAAG,GAQjC,IAHA,IAAIyoB,GAAM,IAAIhM,MAAOC,UACjB4I,EAAU,GAELoD,EAAM,EAAGA,EAAMpU,KAAKkJ,cAAc3S,OAAQ6d,IAAO,CACxD,IAAIC,EAASrU,KAAKkJ,cAAckL,IAE5BpU,KAAK2J,eAAkB0K,EAAO/M,OACpB+M,EAAOnM,WAAamM,EAAOpM,OAE3BkM,GAAO,EACbE,EAAOtM,OACTiJ,EAAQ9N,KAAKmR,GAGfrD,EAAQ9N,KAAKmR,IAKnBrU,KAAKkJ,cAAgB8H,EACrBvD,aAAazN,KAAKyJ,cAElBzJ,KAAK2I,OAAO6B,UAGRxK,KAAK4J,YACP5J,KAAKyJ,aAAec,YAAW,WAC7B,OAAO2J,EAAO1J,YACb,QAqCT/O,EAAQ6Y,cAAgB,SAAUroB,EAAMymB,EAAeb,GAIrD7R,KAAK/T,KAAOA,EAKZ+T,KAAK0S,cAAgBA,EAmBrB1S,KAAK6R,SAAWA,GAGlBpW,EAAQ6Y,cAAchnB,UAAY,CAmBhC4kB,KAAM,SAAcqC,GAClB,OAAO,GAST/B,QAAS,SAAiB+B,GACxBvU,KAAKwU,YAAcD,GAcrB3B,YAAa,SAAqB2B,EAAYzB,GAC5C,MAAM,IAAIzb,MAAM,6CAMlB4c,UAAW,WACTjU,KAAKwU,YAAc,MAMrBjB,UAAW,WACTvT,KAAKwU,YAAc,OAoBvB/Y,EAAQoT,cAAgB,aAExBpT,EAAQoT,cAAcvhB,UAAY,IAAImO,EAAQ6Y,cAAc,aAAa,EAAO,IAEhF7Y,EAAQoT,cAAcvhB,UAAU4kB,KAAO,SAAUqC,GAC/C,OAA8B,OAAvBA,EAAWzI,SAOpBrQ,EAAQyT,UAAY,aAEpBzT,EAAQyT,UAAU5hB,UAAY,IAAImO,EAAQ6Y,cAAc,SAAS,EAAM,IAEvE7Y,EAAQyT,UAAU5hB,UAAU4kB,KAAO,SAAUqC,GAC3C,OAA8B,OAAvBA,EAAWzI,SAGpBrQ,EAAQyT,UAAU5hB,UAAUslB,YAAc,SAAU2B,GAClD,IAAIE,EAAWF,EAAWxI,QAK1B,OAJA0I,GAAsB,KACtBA,GAAsBF,EAAWzI,QACjC2I,GAAsB,KACtBA,GAAsBF,EAAW7I,KAC1BjR,EAAega,IAOxBhZ,EAAQ0T,SAAW,aAEnB1T,EAAQ0T,SAAS7hB,UAAY,IAAImO,EAAQ6Y,cAAc,eAAe,EAAM,IAE5E7Y,EAAQ0T,SAAS7hB,UAAU4kB,KAAO,SAAUqC,GAC1C,OAA8B,OAAvBA,EAAWzI,SAGpBrQ,EAAQ0T,SAAS7hB,UAAUslB,YAAc,SAAU2B,EAAYzB,EAAW4B,GACxE,IAAIC,EAASD,GAAelc,EAAIC,UAAU,GAAqB,WAAhB2S,KAAKC,UAChDoJ,EAAW,KAAOha,EAAe8Z,EAAWzI,SAqEhD,OApEA2I,GAAY,MACZA,GAAYE,EACZJ,EAAWxL,WAAW4L,OAASA,EAC/BJ,EAAWxL,WAAW,6BAA+B0L,EACrDA,EAAW,MAAQA,EAEnBzU,KAAK4S,YAAc,SAAU2B,EAAYzB,GAOvC,IANA,IAAI8B,EAAOC,EAAMpe,EAAMqe,EAAIC,EAAGC,EAAOtpB,EAAG+V,EACpCwT,EAAe,UACfC,EAAc,GAAGlb,OAAOua,EAAWxL,WAAW,6BAA8B,KAAK/O,OAAO8Y,EAAW,KACnG6B,EAASJ,EAAWxL,WAAW4L,OAC/BQ,EAAc,wBAEXrC,EAAUQ,MAAM6B,IAAc,CACnC,IAAI9B,EAAUP,EAAUQ,MAAM6B,GAG9B,OAFArC,EAAYA,EAAUlR,QAAQyR,EAAQ,GAAI,IAElCA,EAAQ,IACd,IAAK,IACHuB,EAAQvB,EAAQ,GAChB,MAEF,IAAK,IACHwB,EAAOxB,EAAQ,GACf,MAEF,IAAK,IACH5c,EAAO4c,EAAQ,IAKrB,GAAIuB,EAAMQ,OAAO,EAAGT,EAAOpe,UAAYoe,EAErC,OADAJ,EAAWxL,WAAa,GACjBwL,EAAWlC,mBAIpB6C,GADAD,GAAgB,KAAOL,EAEvBC,EAAO9B,KAAK8B,GACZA,GAAQ,UACR,IAAInJ,EAAOjR,EAAe8Z,EAAW7I,MAGrC,IAFAoJ,EAAKE,EAAQ5a,EAAKV,eAAegS,EAAMmJ,GAElCnpB,EAAI,EAAGA,EAAI+K,EAAM/K,IAAK,CAGzB,IAFAqpB,EAAI3a,EAAKV,eAAegS,EAAMtR,EAAKD,SAAS6a,IAEvCvT,EAAI,EAAGA,EAAI,EAAGA,IACjBqT,EAAGrT,IAAMsT,EAAEtT,GAGbuT,EAAQD,EAGVD,EAAK1a,EAAKD,SAAS2a,GACnB,IAAIO,EAAYjb,EAAKV,eAAeob,EAAI,cACpCQ,EAAYlb,EAAKG,cAAcua,EAAI,cACnCS,EAAkBnb,EAAKV,eAAeU,EAAKI,SAASJ,EAAKD,SAASkb,IAAaH,GAGnF,IAFAX,EAAWxL,WAAW,oBAAsB3O,EAAKC,cAAcib,EAAWJ,GAErEzT,EAAI,EAAGA,EAAI,EAAGA,IACjB4T,EAAU5T,IAAM8T,EAAgB9T,GAIlC,OADAwT,GAAgB,MAAQpC,KAAKzY,EAAKD,SAASkb,KAItCZ,GAOThZ,EAAQsT,QAAU,aAElBtT,EAAQsT,QAAQzhB,UAAY,IAAImO,EAAQ6Y,cAAc,cAAc,EAAO,IAE3E7Y,EAAQsT,QAAQzhB,UAAU4kB,KAAO,SAAUqC,GACzC,OAA8B,OAAvBA,EAAWzI,SAapBrQ,EAAQsT,QAAQzhB,UAAUkoB,OAAS,SAAUpe,GAC3C,MAAO,IAAMA,EAAIwK,QAAQ,MAAO,QAAQA,QAAQ,KAAM,OAAS,KAGjEnG,EAAQsT,QAAQzhB,UAAUslB,YAAc,SAAU2B,EAAYzB,EAAW4B,GAQvE,IAPA,IAAIS,EAAc,mCACdR,EAASD,GAAelc,EAAIC,UAAU,GAAqB,WAAhB2S,KAAKC,UAChDoK,EAAQ,GACRC,EAAO,KACPd,EAAQ,GAGL9B,EAAUQ,MAAM6B,IAAc,CACnC,IAAI9B,EAAUP,EAAUQ,MAAM6B,GAI9B,OAHArC,EAAYA,EAAUlR,QAAQyR,EAAQ,GAAI,IAC1CA,EAAQ,GAAKA,EAAQ,GAAGzR,QAAQ,WAAY,MAEpCyR,EAAQ,IACd,IAAK,QACHoC,EAAQpC,EAAQ,GAChB,MAEF,IAAK,QACHuB,EAAQvB,EAAQ,GAChB,MAEF,IAAK,MACGA,EAAQ,GACd,MAEF,IAAK,OACHqC,EAAOrC,EAAQ,IAKrB,IAAIsC,EAAapB,EAAWvI,SAAW,IAAMuI,EAAWzZ,OAE3C,OAAT4a,IACFC,EAAaA,EAAa,IAAMD,GAGlC,IAAIE,EAAOnb,EAAe8Z,EAAWzI,QAAU,IAAM2J,EAAQ,IAAMzV,KAAKwU,YAAY9I,MAChFmK,EAAKrd,EAAIK,KAAK+c,GAAQ,IAAMhB,EAAQ,IAAMD,EAC1CmB,EAAK,gBAAkBH,EACvBV,EAAe,GAenB,OAdAA,GAAgB,iBAChBA,GAAgB,YAAcjV,KAAKwV,OAAO/a,EAAe8Z,EAAWzI,UAAY,IAChFmJ,GAAgB,SAAWjV,KAAKwV,OAAOC,GAAS,IAChDR,GAAgB,SAAWjV,KAAKwV,OAAOZ,GAAS,IAChDK,GAAgB,eAChBA,GAAgB,UAAYjV,KAAKwV,OAAOb,GAAU,IAClDM,GAAgB,cAAgBjV,KAAKwV,OAAOG,GAAc,IAC1DV,GAAgB,YAAczc,EAAIC,UAAUD,EAAIC,UAAUod,GAAM,IAAMjB,EAAQ,aAAeD,EAAS,SAAWnc,EAAIC,UAAUqd,IAAO,IACtIb,GAAgB,WAEhBjV,KAAK4S,YAAc,WACjB,MAAO,IAGFqC,GAOTxZ,EAAQuT,gBAAkB,aAE1BvT,EAAQuT,gBAAgB1hB,UAAY,IAAImO,EAAQ6Y,cAAc,eAAe,EAAM,IAEnF7Y,EAAQuT,gBAAgB1hB,UAAU4kB,KAAO,SAAUqC,GACjD,OAA2B,OAApBA,EAAW7I,MAGpBjQ,EAAQuT,gBAAgB1hB,UAAUslB,YAAc,SAAU2B,GACxD,IAAIE,EAAW,KAYf,OAV2B,OAAvBF,EAAWzI,UACb2I,EAAWA,EAAW,KAAOF,EAAWxI,SAG1C0I,GAAsB,IACtBA,GAAsB,IACtBA,GAAsB,eACtBA,GAAsBF,EAAW7I,KACjC+I,GAAsB,IAEfha,EADPga,GAAsB,MAaxBhZ,EAAQqT,aAAe,aAEvBrT,EAAQqT,aAAaxhB,UAAY,IAAImO,EAAQ6Y,cAAc,YAAY,EAAM,IAE7E7Y,EAAQqT,aAAaxhB,UAAUslB,YAAc,SAAU2B,GAQrD,OAAOA,EAAWzI,UAAYyI,EAAWxI,QAAU,GAAKwI,EAAWxI,SAOrEtQ,EAAQwT,YAAc,aAEtBxT,EAAQwT,YAAY3hB,UAAY,IAAImO,EAAQ6Y,cAAc,YAAY,EAAM,IAE5E7Y,EAAQwT,YAAY3hB,UAAU4kB,KAAO,SAAUqC,GAC7C,OAA2B,OAApBA,EAAW7I,MAGpBjQ,EAAQwT,YAAY3hB,UAAUslB,YAAc,SAAU2B,GACpD,IAAIE,EAAW,KAQf,OAN2B,OAAvBF,EAAWzI,UACb2I,GAAsBF,EAAWxI,SAGnC0I,GAAsB,KACtBA,GAAsBF,EAAW7I,KAC1BjR,EAAega,IAExB,IAAIsB,EAAO,CACT,QAAWta,EACX,OAAUF,EACV,IAAOI,EACP,KA/qHF,SAAcH,GACZ,OAAO,IAAIC,EAAQC,QAAQ,UAAWF,IA+qHtC,MAASI,EACT,KAAQxB,EACR,IAAO5B,EACP,cAAiB4B,EAAKC,cACtB,SAAYD,EAAKE,SACjB,cAAiBF,EAAKG,cACtB,SAAYH,EAAKI,UASfwb,EAAYD,EAAKta,QACjBwa,EAAWF,EAAKxa,OAoBpBya,EAAUE,QAAU,SAAUxW,EAAME,EAAM0M,EAAK6J,GAC7CnW,KAAKkH,KAAO8O,EAAUnQ,WACtB7F,KAAKoW,QAAU1W,EACfM,KAAKrG,KAAOqc,EAAU5Q,UAAU1F,GAGhCM,KAAKqW,SAAWzW,EAChBI,KAAKJ,KAAOA,EACZI,KAAKsM,IAAMA,EACXtM,KAAKsW,KAAOC,IACZvW,KAAKmW,MAAQA,GAAS,EACtBnW,KAAKwW,OAAQ,EACbxW,KAAKyW,KAAO,KAEZzW,KAAK0W,IAAM,WACT,OAAK1W,KAAKsW,MAIA,IAAInO,KACAnI,KAAKsW,MAAQ,IAJlB,GAOXtW,KAAK2W,SAAW,WACd,OAAK3W,KAAKyW,MAIA,IAAItO,KACAnI,KAAKyW,MAAQ,IAJlB,GAOXzW,KAAK4W,IAAM5W,KAAK6W,WAGlBb,EAAUE,QAAQ5oB,UAAY,CAc5BwpB,YAAa,WACX,IAAI5V,EAAO,KAEX,GAAIlB,KAAK4W,IAAIG,aAAe/W,KAAK4W,IAAIG,YAAYC,iBAG/C,GAAqB,iBAFrB9V,EAAOlB,KAAK4W,IAAIG,YAAYC,iBAEnB7W,QAIP,MAHA6V,EAAUhR,MAAM,6BAChBgR,EAAUhR,MAAM,iBAAmBhF,KAAK4W,IAAI3B,cAC5Ce,EAAUhR,MAAM,gBAAkBgR,EAAU5Q,UAAUpF,KAAK4W,IAAIG,cACzD,IAAI1f,MAAM,oBAEb,GAAI2I,KAAK4W,IAAI3B,aAAc,CAKhC,GAHAe,EAAU/Q,MAAM,mFAChB/D,GAAO,IAAIe,WAAYC,gBAAgBlC,KAAK4W,IAAI3B,aAAc,mBAAmB+B,iBAG/E,MAAM,IAAI3f,MAAM,8BACX,GAAI6J,EAAK+V,cAAc,eAAgB,CAC5CjB,EAAUhR,MAAM,8BAAgC9D,EAAK+V,cAAc,eAAeC,aAClFlB,EAAUhR,MAAM,iBAAmBhF,KAAK4W,IAAI3B,cAC5C,IAAIjQ,EAAQ,IAAI3N,MAEhB,MADA2N,EAAM/Y,KAAO+pB,EAAU1X,eAAeC,WAChCyG,GAIV,OAAO9D,GAWT2V,QAAS,WACP,IAAID,EAAM,KAcV,OAZItrB,OAAO6rB,gBACTP,EAAM,IAAIO,gBAEFC,kBACNR,EAAIQ,iBAAiB,2BAEd9rB,OAAO0V,gBAChB4V,EAAM,IAAI5V,cAAc,sBAI1B4V,EAAIS,mBAAqBrX,KAAKJ,KAAK1S,KAAK,KAAM8S,MACvC4W,IA4BXZ,EAAUnN,KAAO,SAAU0L,GACzBvU,KAAKsX,MAAQ/C,EAGbvU,KAAKsM,IAAMlB,KAAKmM,MAAsB,WAAhBnM,KAAKC,UAG3BrL,KAAKqM,IAAM,KAEXrM,KAAK4L,KAAO,EACZ5L,KAAK2L,KAAO,GACZ3L,KAAK1U,OAAS,EACd0U,KAAKwX,OAAS,EACdxX,KAAKyX,WAAa,KAClBzX,KAAK0X,oBAAsB,KAC3B1X,KAAK8K,UAAY,IAGnBkL,EAAUnN,KAAKvb,UAAY,CAYzBmjB,MAAO,KAQPkH,WAAY,WACV,IAAItG,EAAW4E,EAAS,OAAQ,CAC9B,IAAOjW,KAAKsM,MACZ,MAAS0J,EAAUla,GAAGC,WAaxB,OAViB,OAAbiE,KAAKqM,KACPgF,EAAS7V,MAAM,CACb,IAAOwE,KAAKqM,MAIZrM,KAAKsX,MAAMnQ,QAAQyQ,WAAa5X,KAAKsX,MAAM5K,4BAC7C1M,KAAK6X,gBAGAxG,GAQTxG,OAAQ,WACN7K,KAAKsM,IAAMlB,KAAKmM,MAAsB,WAAhBnM,KAAKC,UAC3BrL,KAAKqM,IAAM,KACXrM,KAAKwX,OAAS,EAEVxX,KAAKsX,MAAM5K,4BACbphB,OAAOuhB,eAAeE,WAAW,wBAGnC/M,KAAKsX,MAAMlK,aAAapN,KAAKsM,MAQ/BH,SAAU,SAAkBR,EAAMC,EAAMC,GACtC7L,KAAK2L,KAAOA,GAAQ3L,KAAK2L,KACzB3L,KAAK4L,KAAOA,GAAQ5L,KAAK4L,KACzB5L,KAAKwX,OAAS,EAEd,IAAIM,EAAO9X,KAAK2X,aAAanc,MAAM,CACjC,GAAMwE,KAAKsX,MAAMxc,OACjB,WAAY,KACZ,KAAQkF,KAAK2L,KACb,KAAQ3L,KAAK4L,KACb,QAAW,0BACX,IAAO,MACP,eAAgB,MAChB,aAAcoK,EAAUla,GAAGE,OAGzB6P,GACFiM,EAAKtc,MAAM,CACT,MAASqQ,IAIb,IAAIsF,EAAcnR,KAAKsX,MAAMnG,YAE7BnR,KAAK8K,UAAU5H,KAAK,IAAI8S,EAAUE,QAAQ4B,EAAKzS,OAAQrF,KAAK+X,sBAAsB7qB,KAAK8S,KAAMmR,EAAYjkB,KAAK8S,KAAKsX,QAASQ,EAAKzS,OAAOzC,aAAa,SAErJ5C,KAAKgY,4BA2BPxL,QAAS,SAAiB7I,EAAK0I,EAAKC,EAAKd,EAAUG,EAAMC,EAAMW,GAC7DvM,KAAKsX,MAAM3T,IAAMA,EACjB3D,KAAKqM,IAAMA,EACXrM,KAAKsM,IAAMA,EACXtM,KAAKsX,MAAMrL,iBAAmBT,EAC9BxL,KAAKsX,MAAMxc,OAASkb,EAAUnS,iBAAiB7D,KAAKsX,MAAM3T,KAC1D3D,KAAKsX,MAAM3N,eAAgB,EAC3B3J,KAAKsX,MAAM1N,WAAY,EACvB5J,KAAK2L,KAAOA,GAAQ3L,KAAK2L,KACzB3L,KAAK4L,KAAOA,GAAQ5L,KAAK4L,KACzB5L,KAAK1U,OAASihB,GAAQvM,KAAK1U,OAE3B0U,KAAKsX,MAAMpL,qBAAqB8J,EAAUvY,OAAOS,SAAU,OAsB7DyO,SAAU,SAAkBhJ,EAAK6H,EAAUG,EAAMC,EAAMW,GACrD,IAAI0L,EAAUrL,KAAKsL,MAAM5sB,OAAOuhB,eAAesL,QAAQ,yBAEvD,KAAI,MAAOF,GAA+CA,EAAQ3L,KAAO2L,EAAQ5L,KAAO4L,EAAQtU,MAAQ,MAAOA,GAAuCqS,EAAUjS,kBAAkBkU,EAAQtU,OAASqS,EAAUjS,kBAAkBJ,IAE7L,OAAlCqS,EAAUtS,eAAeC,IAAiBqS,EAAUnS,iBAAiBoU,EAAQtU,OAASA,IAI/E,CACL,IAAIqB,EAAQ,IAAI3N,MAAM,qCAEtB,MADA2N,EAAM/Y,KAAO,sBACP+Y,EANNhF,KAAKsX,MAAMtN,UAAW,EAEtBhK,KAAKwM,QAAQyL,EAAQtU,IAAKsU,EAAQ5L,IAAK4L,EAAQ3L,IAAKd,EAAUG,EAAMC,EAAMW,IAe9EsL,cAAe,WACT7X,KAAKsX,MAAM3N,cACT3J,KAAKsX,MAAM3T,KAAO3D,KAAKsM,KAAOtM,KAAKqM,KACrC/gB,OAAOuhB,eAAeC,QAAQ,uBAAwBF,KAAKwL,UAAU,CACnE,IAAOpY,KAAKsX,MAAM3T,IAClB,IAAO3D,KAAKsM,IACZ,IAAOtM,KAAKqM,OAIhB/gB,OAAOuhB,eAAeE,WAAW,yBAWrCoE,YAAa,SAAqBE,GAChC,IAAIgH,EAAMhH,EAASzO,aAAa,QAEhC,GAAY,OAARyV,GAAwB,cAARA,EAAqB,CAEvC,IAAIzH,EAAOS,EAASzO,aAAa,aACjCoT,EAAUhR,MAAM,2BAA6B4L,GAC7C,IAAIC,EAAWQ,EAASP,qBAAqB,YAc7C,OAZa,OAATF,GACW,wBAATA,GAAkCC,EAASta,OAAS,IACtDqa,EAAO,YAGT5Q,KAAKsX,MAAMpL,qBAAqB8J,EAAUvY,OAAOG,SAAUgT,IAE3D5Q,KAAKsX,MAAMpL,qBAAqB8J,EAAUvY,OAAOG,SAAU,WAG7DoC,KAAKsX,MAAMxH,cAAcc,GAElBoF,EAAUvY,OAAOG,SAKrBoC,KAAKqM,MACRrM,KAAKqM,IAAMgF,EAASzO,aAAa,QAGnC,IAAI2J,EAAO8E,EAASzO,aAAa,YAE7B2J,IACFvM,KAAK1U,OAASgtB,SAAS/L,EAAM,KAG/B,IAAIX,EAAOyF,EAASzO,aAAa,QAE7BgJ,IACF5L,KAAK4L,KAAO0M,SAAS1M,EAAM,KAG7B,IAAID,EAAO0F,EAASzO,aAAa,QAE7B+I,IACF3L,KAAK2L,KAAO2M,SAAS3M,EAAM,KAG7B,IAAI8L,EAAapG,EAASzO,aAAa,cAEnC6U,IACFzX,KAAKyX,WAAaa,SAASb,EAAY,MAU3C7H,YAAa,SAAqBH,GAChCzP,KAAKuY,eAAe9I,IAQtBK,cAAe,WACb9P,KAAKqM,IAAM,KACXrM,KAAKsM,IAAMlB,KAAKmM,MAAsB,WAAhBnM,KAAKC,UAEvBrL,KAAKsX,MAAM5K,4BACbphB,OAAOuhB,eAAeE,WAAW,wBAGnC/M,KAAKsX,MAAMlK,aAAapN,KAAKsM,MAS/BqE,YAAa,WACX,OAAiC,IAA1B3Q,KAAK8K,UAAUvU,QASxBiiB,2BAA4B,SAAoCnI,GAC9D,IAAIoI,EAAYzY,KAAK0Y,kBAAkBrI,GAEnCsI,EAAe3Y,KAAKsX,MAAM9N,sBAAsBoP,KAAKH,GAErDE,GACFA,EAAa9sB,KAAKmU,KAAMyY,IAc5BI,UAAW,SAAmBJ,GAC5BzY,KAAKwX,SACLxB,EAAU7Q,KAAK,4BAA8BsT,EAAY,uBAAyBzY,KAAKwX,QAEnFxX,KAAKwX,OAAS,GAChBxX,KAAKsX,MAAM3H,wBASf+B,kBAAmB,SAA2BlG,GAC5CwK,EAAU7Q,KAAK,gGAGbqG,EADEA,EACSA,EAASte,KAAK8S,KAAKsX,OAEnBtX,KAAKsX,MAAMnG,YAAYjkB,KAAK8S,KAAKsX,OAG9C,IAAIQ,EAAO9X,KAAK2X,aAEhB3X,KAAK8K,UAAU5H,KAAK,IAAI8S,EAAUE,QAAQ4B,EAAKzS,OAAQrF,KAAK+X,sBAAsB7qB,KAAK8S,KAAMwL,GAAWsM,EAAKzS,OAAOzC,aAAa,SAEjI5C,KAAKgY,4BAQPrI,qBAAsB,WACpB3P,KAAK6P,qBAMPA,kBAAmB,WACjB,KAAO7P,KAAK8K,UAAUvU,OAAS,GAAG,CAChC,IAAI8Z,EAAMrQ,KAAK8K,UAAU4F,MAEzBL,EAAImG,OAAQ,EACZnG,EAAIuG,IAAIJ,QAERnG,EAAIuG,IAAIS,mBAAqB,eASjC7M,QAAS,WACP,IAAI7Q,EAAOqG,KAAKsX,MAAMrN,MAOtB,GALIjK,KAAKsX,MAAM3N,eAA2C,IAA1B3J,KAAK8K,UAAUvU,QAAgC,IAAhBoD,EAAKpD,SAAiByJ,KAAKsX,MAAMzN,gBAC9FmM,EAAU/Q,MAAM,wDAChBtL,EAAKuJ,KAAK,QAGRlD,KAAKsX,MAAMvN,OAAf,CAIA,GAAI/J,KAAK8K,UAAUvU,OAAS,GAAKoD,EAAKpD,OAAS,EAAG,CAGhD,IAFA,IAAIuhB,EAAO9X,KAAK2X,aAEPjsB,EAAI,EAAGA,EAAIiO,EAAKpD,OAAQ7K,IACf,OAAZiO,EAAKjO,KACS,YAAZiO,EAAKjO,GACPosB,EAAKtc,MAAM,CACT,GAAMwE,KAAKsX,MAAMxc,OACjB,WAAY,KACZ,eAAgB,OAChB,aAAckb,EAAUla,GAAGE,OAG7B8b,EAAKvR,MAAM5M,EAAKjO,IAAIya,aAKnBnG,KAAKsX,MAAMrN,MAClBjK,KAAKsX,MAAMrN,MAAQ,GAEnBjK,KAAK8K,UAAU5H,KAAK,IAAI8S,EAAUE,QAAQ4B,EAAKzS,OAAQrF,KAAK+X,sBAAsB7qB,KAAK8S,KAAMA,KAAKsX,MAAMlH,UAAUljB,KAAK8S,KAAKsX,QAASQ,EAAKzS,OAAOzC,aAAa,SAE9J5C,KAAKgY,2BAGP,GAAIhY,KAAK8K,UAAUvU,OAAS,EAAG,CAC7B,IAAIuiB,EAAe9Y,KAAK8K,UAAU,GAAG4L,MAEN,OAA3B1W,KAAK8K,UAAU,GAAG2L,MAChBzW,KAAK8K,UAAU,GAAG6L,WAAavL,KAAKmM,MAAMvB,EAAUzW,kBAAoBS,KAAK2L,OAC/E3L,KAAKgY,2BAILc,EAAe1N,KAAKmM,MAAMvB,EAAU1W,QAAUU,KAAK2L,QACrDqK,EAAU7Q,KAAK,WAAanF,KAAK8K,UAAU,GAAG5D,GAAK,oBAAsBkE,KAAKmM,MAAMvB,EAAU1W,QAAUU,KAAK2L,MAAQ,gCAErH3L,KAAKgY,+BAcXU,kBAAmB,SAA2BrI,EAAK0I,GACjD,IAAIN,EAEJ,GAA2B,IAAvBpI,EAAIuG,IAAIoC,WACV,IACEP,EAAYpI,EAAIuG,IAAI7G,OACpB,MAAO1W,GAGP2c,EAAUhR,MAAM,mEAA0EyT,GAQ9F,YAJyB,IAAdA,IACTA,EAA2B,iBAARM,EAAmBA,EAAM,GAGvCN,GAeTV,sBAAuB,SAA+BnY,EAAMyQ,GAG1D,GAFA2F,EAAU/Q,MAAM,cAAgBoL,EAAInJ,GAAK,IAAMmJ,EAAI8F,MAAQ,qBAAuB9F,EAAIuG,IAAIoC,YAEtF3I,EAAImG,MACNnG,EAAImG,OAAQ,OAId,GAA2B,IAAvBnG,EAAIuG,IAAIoC,WAAZ,CAKA,IAAIP,EAAYzY,KAAK0Y,kBAAkBrI,GAIvC,GAFArQ,KAAK0X,oBAAsBrH,EAAIuG,IAAIqC,wBAE/BjZ,KAAK6J,eAAiB4O,GAAa,IAKrC,OAJAzY,KAAK6Y,UAAUJ,QAEfzY,KAAKwY,2BAA2BnI,GAKlC,IAAI6I,EAAgBT,EAAY,GAAKA,EAAY,IAC7CU,EAAmB9I,EAAI8F,MAAQnW,KAAKsX,MAAMhN,WAS9C,IAPI4O,GAAiBC,KAEnBnZ,KAAKoZ,eAAe/I,GAEpB2F,EAAU/Q,MAAM,cAAgBoL,EAAInJ,GAAK,2BAGzB,MAAduR,EAAmB,CAErB,IAAIY,EAASrZ,KAAK8K,UAAU,KAAOuF,GACtBrQ,KAAK8K,UAAU,KAAOuF,GAKrBgJ,GAAUrZ,KAAK8K,UAAUvU,OAAS,GAAKyJ,KAAK8K,UAAU,GAAG4L,MAAQtL,KAAKmM,MAAMvB,EAAUzW,kBAAoBS,KAAK2L,QAC3H3L,KAAKsZ,gBAAgB,GAGvBtZ,KAAKsX,MAAMlK,aAAamM,OAAOlJ,EAAI/D,KAAO,GAE1C0J,EAAU/Q,MAAM,cAAgBoL,EAAInJ,GAAK,IAAMmJ,EAAI8F,MAAQ,YAC3DvW,EAAKyQ,GAELrQ,KAAKwX,OAAS,OACS,IAAdiB,GAAmBA,GAAa,KAAOA,EAAY,KAAOA,GAAa,MAEhFzC,EAAUhR,MAAM,cAAgBqL,EAAInJ,GAAK,IAAMmJ,EAAI8F,MAAQ,UAAYsC,EAAY,aAEnFzY,KAAK6Y,UAAUJ,GAEfzY,KAAKwY,2BAA2BnI,GAE5BoI,GAAa,KAAOA,EAAY,MAClCzY,KAAKsX,MAAMpL,qBAAqB8J,EAAUvY,OAAOQ,cAAe,MAEhE+B,KAAKsX,MAAMxH,kBAGbkG,EAAUhR,MAAM,cAAgBqL,EAAInJ,GAAK,IAAMmJ,EAAI8F,MAAQ,UAAYsC,EAAY,aAGhFS,GAAkBC,EAEZA,IAAqBnZ,KAAKsX,MAAM1N,WACzC5J,KAAKsX,MAAMpL,qBAAqB8J,EAAUvY,OAAOG,SAAU,aAF3DoC,KAAKgY,6BAeTwB,gBAAiB,SAAyB9tB,GACxC,IAAIic,EAAQ3H,KAERqQ,EAAMrQ,KAAK8K,UAAUpf,GAErB+sB,EAAYzY,KAAK0Y,kBAAkBrI,GAAM,GAG7C,GAAIA,EAAI8F,MAAQnW,KAAKsX,MAAMhN,WACzBtK,KAAKsX,MAAM3H,2BADb,CAMA,IAAImJ,EAAezI,EAAIqG,MACnB+C,GAAmBC,MAAMZ,IAAiBA,EAAe1N,KAAKmM,MAAMvB,EAAU1W,QAAUU,KAAK2L,MAC7FgO,EAAiC,OAAbtJ,EAAIoG,MAAiBpG,EAAIsG,WAAavL,KAAKmM,MAAMvB,EAAUzW,kBAAoBS,KAAK2L,MACxGiO,EAAsC,IAAvBvJ,EAAIuG,IAAIoC,aAAqBP,EAAY,GAAKA,GAAa,KAgB9E,IAdIgB,GAAmBE,GAAqBC,KACtCD,GACF3D,EAAUhR,MAAM,WAAWhL,OAAOgG,KAAK8K,UAAUpf,GAAGwb,GAAI,uCAG1DmJ,EAAImG,OAAQ,EACZnG,EAAIuG,IAAIJ,QAERnG,EAAIuG,IAAIS,mBAAqB,aAE7BrX,KAAK8K,UAAUpf,GAAK,IAAIsqB,EAAUE,QAAQ7F,EAAI+F,QAAS/F,EAAIgG,SAAUhG,EAAI/D,IAAK+D,EAAI8F,OAClF9F,EAAMrQ,KAAK8K,UAAUpf,IAGI,IAAvB2kB,EAAIuG,IAAIoC,WAAkB,CAC5BhD,EAAU/Q,MAAM,cAAgBoL,EAAInJ,GAAK,IAAMmJ,EAAI8F,MAAQ,YAE3D,IACE,IAAI0D,EAAe7Z,KAAKsX,MAAMnQ,QAAQ2S,aAAe,0BACrDzJ,EAAIuG,IAAImD,KAAK,OAAQ/Z,KAAKsX,MAAM/O,SAASvI,KAAKsX,MAAMnQ,QAAQ6S,WAEpB,IAA7B3J,EAAIuG,IAAIqD,kBAEjB5J,EAAIuG,IAAIqD,iBAAiB,eAAgBJ,GAGvC7Z,KAAKsX,MAAMnQ,QAAQ+S,kBACrB7J,EAAIuG,IAAIsD,iBAAkB,GAE5B,MAAOC,GASP,OARAnE,EAAUhR,MAAM,oBAAsBmV,EAAGzjB,YAEpCsJ,KAAKsX,MAAM1N,WACd5J,KAAKsX,MAAMpL,qBAAqB8J,EAAUvY,OAAOG,SAAU,oBAG7DoC,KAAKsX,MAAM/H,aAOb,IAAI6K,EAAW,WAGb,GAFA/J,EAAIiG,KAAO,IAAInO,KAEXR,EAAM2P,MAAMnQ,QAAQkT,cAAe,CACrC,IAAIC,EAAU3S,EAAM2P,MAAMnQ,QAAQkT,cAElC,IAAK,IAAIE,KAAUD,EACbluB,OAAOkB,UAAUC,eAAe1B,KAAKyuB,EAASC,IAChDlK,EAAIuG,IAAIqD,iBAAiBM,EAAQD,EAAQC,IAK/ClK,EAAIuG,IAAIvJ,KAAKgD,EAAI1W,OAKnB,GAAI0W,EAAI8F,MAAQ,EAAG,CAGjB,IAAIqE,EAAwF,IAA9EpP,KAAKqP,IAAIrP,KAAKmM,MAAMvB,EAAU1W,QAAUU,KAAK2L,MAAOP,KAAKsP,IAAIrK,EAAI8F,MAAO,IACtF5L,YAAW,WAET6P,MACCI,QAEHJ,IAGF/J,EAAI8F,QAEAnW,KAAKsX,MAAMrK,YAAc+I,EAAU1N,WAAWhb,UAAU2f,YACtDoD,EAAI+F,QAAQ5T,WAAaxC,KAAKyQ,OAASJ,EAAI+F,QAAQvW,WAAWtJ,OAChEyJ,KAAKsX,MAAMrK,UAAUoD,EAAI+F,QAAQvW,WAAW,IAE5CG,KAAKsX,MAAMrK,UAAUoD,EAAI+F,UAIzBpW,KAAKsX,MAAMnK,YAAc6I,EAAU1N,WAAWhb,UAAU6f,WAC1DnN,KAAKsX,MAAMnK,UAAUkD,EAAI1W,WAG3Bqc,EAAU/Q,MAAM,qBAA6B,IAANvZ,EAAU,QAAU,UAAY,8BAAgC2kB,EAAIuG,IAAIoC,cAUnHI,eAAgB,SAAwB/I,GACtC2F,EAAU/Q,MAAM,oBAEhB,IAAK,IAAIvZ,EAAIsU,KAAK8K,UAAUvU,OAAS,EAAG7K,GAAK,EAAGA,IAC1C2kB,IAAQrQ,KAAK8K,UAAUpf,IACzBsU,KAAK8K,UAAU7G,OAAOvY,EAAG,GAK7B2kB,EAAIuG,IAAIS,mBAAqB,aAE7BrX,KAAKgY,4BASPsB,gBAAiB,SAAyB5tB,GACxC,IAAI2kB,EAAMrQ,KAAK8K,UAAUpf,GAER,OAAb2kB,EAAIoG,OACNpG,EAAIoG,KAAO,IAAItO,MAGjBnI,KAAKwZ,gBAAgB9tB,IAevB8kB,WAAY,SAAoBH,GAC9B,IACE,OAAOA,EAAIyG,cACX,MAAOzd,GACP,GAAkB,gBAAdA,EAAEoL,QACJ,MAAMpL,EAGR2G,KAAKsX,MAAM/H,WAAW,yBAW1BgJ,eAAgB,SAAwB9I,GACtCuG,EAAU/Q,MAAM,6BAEhB,IAAI6S,EAAO9X,KAAK2X,aAAanc,MAAM,CACjCyL,KAAM,cAGJwI,GACFqI,EAAKvR,MAAMkJ,EAAKpK,QAGlB,IAAIgL,EAAM,IAAI2F,EAAUE,QAAQ4B,EAAKzS,OAAQrF,KAAK+X,sBAAsB7qB,KAAK8S,KAAMA,KAAKsX,MAAMlH,UAAUljB,KAAK8S,KAAKsX,QAASQ,EAAKzS,OAAOzC,aAAa,QAEpJ5C,KAAK8K,UAAU5H,KAAKmN,GAEpBrQ,KAAKgY,4BAQPzK,MAAO,WACL,IAAI/E,EAASxI,KAEbyN,aAAazN,KAAKsX,MAAM7N,cAExBzJ,KAAKgY,2BAELhY,KAAKsX,MAAM7N,aAAec,YAAW,WACnC,OAAO/B,EAAO8O,MAAM9M,YACnB,MAOLgE,aAAc,WACZxO,KAAKgY,2BAELvK,aAAazN,KAAKsX,MAAM7N,eAU1BuO,yBAA0B,WACnBhY,KAAK8K,UAGRkL,EAAU/Q,MAAM,wCAA0CjF,KAAK8K,UAAUvU,OAAS,aAFlFyf,EAAU/Q,MAAM,2DAKbjF,KAAK8K,WAAuC,IAA1B9K,KAAK8K,UAAUvU,SAIlCyJ,KAAK8K,UAAUvU,OAAS,GAC1ByJ,KAAKwZ,gBAAgB,GAGnBxZ,KAAK8K,UAAUvU,OAAS,GAAK6U,KAAKuP,IAAI3a,KAAK8K,UAAU,GAAGwB,IAAMtM,KAAK8K,UAAU,GAAGwB,KAAOtM,KAAK1U,QAC9F0U,KAAKwZ,gBAAgB,MAW3B,IAAIoB,EAAY7E,EAAKta,QACjBof,EAAW9E,EAAKxa,OAilBpB,OAljBAqf,EAAUhS,UAAY,SAAU2L,GAC9BvU,KAAKsX,MAAQ/C,EACbvU,KAAKyQ,MAAQ,UACb,IAAIlI,EAAUgM,EAAWhM,QAEzB,GAA+B,IAA3BA,EAAQ3E,QAAQ,QAA4C,IAA5B2E,EAAQ3E,QAAQ,QAAe,CAGjE,IAAIkX,EAAc,GAEkB,OAAhCvG,EAAWpN,QAAQuB,UAAkD,WAA7Bpd,OAAOyvB,SAASrS,SAC1DoS,GAAe,KAEfA,GAAe,MAGjBA,GAAe,MAAQxvB,OAAOyvB,SAASrF,KAEV,IAAzBnN,EAAQ3E,QAAQ,KAClBkX,GAAexvB,OAAOyvB,SAASC,SAAWzS,EAE1CuS,GAAevS,EAGjBgM,EAAWhM,QAAUuS,IAIzBF,EAAUhS,UAAUtb,UAAY,CAO9B2tB,aAAc,WACZ,OAAOJ,EAAS,OAAQ,CACtB,MAASD,EAAU9e,GAAGY,QACtB,GAAMsD,KAAKsX,MAAMxc,OACjB,QAAW,SAafogB,mBAAoB,SAA4B7J,EAAU8J,GACxD,IAAI3D,EAQJ,GAAsB,KALpBA,EADEnG,EAASC,uBACFD,EAASC,uBAAuBsJ,EAAU9e,GAAGW,OAAQ,SAErD4U,EAASP,qBAAqB,iBAG9Bva,OACT,OAAO,EAQT,IALA,IAAIyO,EAAQwS,EAAO,GACfxH,EAAY,GACZrO,EAAO,GAGFjW,EAAI,EAAGA,EAAIsZ,EAAMnF,WAAWtJ,OAAQ7K,IAAK,CAChD,IAAI2N,EAAI2L,EAAMnF,WAAWnU,GAEzB,GALO,wCAKH2N,EAAEuJ,aAAa,SACjB,MAGiB,SAAfvJ,EAAEmJ,SACJb,EAAOtI,EAAE6d,YAETlH,EAAY3W,EAAEmJ,SAIlB,IAAI4Y,EAAc,2BAkBlB,OAfEA,GADEpL,GAGa,UAGbrO,IACFyZ,GAAe,MAAQzZ,GAGzBiZ,EAAU5V,MAAMoW,GAEhBpb,KAAKsX,MAAMpL,qBAAqBiP,EAAenL,GAE/ChQ,KAAKsX,MAAMxH,iBAEJ,GASTjF,OAAQ,aAURsB,SAAU,WAERnM,KAAKqb,eAGLrb,KAAKsb,OAAS,IAAIC,UAAUvb,KAAKsX,MAAM/O,QAAS,QAChDvI,KAAKsb,OAAOE,OAASxb,KAAKyb,QAAQvuB,KAAK8S,MACvCA,KAAKsb,OAAOI,QAAU1b,KAAK2b,SAASzuB,KAAK8S,MACzCA,KAAKsb,OAAOM,QAAU5b,KAAK6b,SAAS3uB,KAAK8S,MACzCA,KAAKsb,OAAOQ,UAAY9b,KAAK+b,oBAAoB7uB,KAAK8S,OAWxDmR,YAAa,SAAqBE,GAGhC,GAFYrR,KAAKkb,mBAAmB7J,EAAUuJ,EAAUnd,OAAOG,UAG7D,OAAOgd,EAAUnd,OAAOG,UAY5Boe,mBAAoB,SAA4BvX,GAC9C,IAAIO,GAAQ,EAERjY,EAAK0X,EAAQ7B,aAAa,SAEZ,iBAAP7V,EACTiY,EAAQ,4BACCjY,IAAO6tB,EAAU9e,GAAGY,UAC7BsI,EAAQ,4BAA8BjY,GAGxC,IAAIkvB,EAAMxX,EAAQ7B,aAAa,WAQ/B,MANmB,iBAARqZ,EACTjX,EAAQ,8BACS,QAARiX,IACTjX,EAAQ,8BAAgCiX,IAGtCjX,IACFhF,KAAKsX,MAAMpL,qBAAqB0O,EAAUnd,OAAOG,SAAUoH,GAE3DhF,KAAKsX,MAAMxH,iBAEJ,IAYXiM,oBAAqB,SAA6BtX,GAChD,GAAuC,IAAnCA,EAAQ9K,KAAKiK,QAAQ,WAAqD,IAAlCa,EAAQ9K,KAAKiK,QAAQ,SAAgB,CAE/E,IAAIjK,EAAO8K,EAAQ9K,KAAKiI,QAAQ,mBAAoB,IACpD,GAAa,KAATjI,EAAa,OACjB,IAAIuiB,GAAc,IAAIja,WAAYC,gBAAgBvI,EAAM,YAAYqd,gBAEpEhX,KAAKsX,MAAMtK,SAASkP,GAEpBlc,KAAKsX,MAAMpK,SAASzI,EAAQ9K,MAGxBqG,KAAKgc,mBAAmBE,IAE1Blc,KAAKmR,YAAY+K,QAEd,GAAwC,IAApCzX,EAAQ9K,KAAKiK,QAAQ,WAAkB,CAGhD,IAAIuY,GAAgB,IAAIla,WAAYC,gBAAgBuC,EAAQ9K,KAAM,YAAYqd,gBAE9EhX,KAAKsX,MAAMtK,SAASmP,GAEpBnc,KAAKsX,MAAMpK,SAASzI,EAAQ9K,MAE5B,IAAIyiB,EAAUD,EAAcvZ,aAAa,iBAEzC,GAAIwZ,EAAS,CACX,IAAI7T,EAAUvI,KAAKsX,MAAM/O,SAEFA,EAAQ3E,QAAQ,SAAW,GAAKwY,EAAQxY,QAAQ,SAAW,GAAK2E,EAAQ3E,QAAQ,QAAU,KAG/G5D,KAAKsX,MAAMpL,qBAAqB0O,EAAUnd,OAAOU,SAAU,gDAE3D6B,KAAKsX,MAAMjP,QAEXrI,KAAKsX,MAAM/O,QAAU6T,EAErBpc,KAAKmM,iBAGPnM,KAAKsX,MAAMpL,qBAAqB0O,EAAUnd,OAAOG,SAAU,2BAE3DoC,KAAKsX,MAAMxH,oBAER,CACL,IAAIuM,EAASrc,KAAKsc,YAAY7X,EAAQ9K,MAElC+F,GAAO,IAAIuC,WAAYC,gBAAgBma,EAAQ,YAAYrF,gBAC/DhX,KAAKsb,OAAOQ,UAAY9b,KAAKuc,WAAWrvB,KAAK8S,MAE7CA,KAAKsX,MAAMnG,YAAYzR,EAAM,KAAM+E,EAAQ9K,QAY/CiW,YAAa,SAAqBH,GAChC,GAAIzP,KAAKsb,QAAUtb,KAAKsb,OAAOtC,aAAeuC,UAAUiB,OAAQ,CAC1D/M,GACFzP,KAAKsX,MAAMjK,KAAKoC,GAGlB,IAAIgN,EAAQ5B,EAAS,QAAS,CAC5B,MAASD,EAAU9e,GAAGY,UAGxBsD,KAAKsX,MAAMrK,UAAUwP,EAAMpX,QAE3B,IAAIqX,EAAc9B,EAAUxV,UAAUqX,GAEtCzc,KAAKsX,MAAMnK,UAAUuP,GAErB,IACE1c,KAAKsb,OAAOjO,KAAKqP,GACjB,MAAOrjB,GACPuhB,EAAUzV,KAAK,iCAInBnF,KAAKsX,MAAMxH,iBAQbA,cAAe,WACb8K,EAAU3V,MAAM,uCAEhBjF,KAAKqb,gBAOPiB,YAAa,SAAqBtO,GAChC,MAAO,YAAcA,EAAS,cAQhCqN,aAAc,WACZ,GAAIrb,KAAKsb,OACP,IACEtb,KAAKsb,OAAOM,QAAU,KACtB5b,KAAKsb,OAAOI,QAAU,KACtB1b,KAAKsb,OAAOQ,UAAY,KACxB9b,KAAKsb,OAAOmB,QACZ,MAAOpjB,GACPuhB,EAAU3V,MAAM5L,EAAEoL,SAItBzE,KAAKsb,OAAS,MAShB3K,YAAa,WACX,OAAO,GAQTkL,SAAU,SAAkBxiB,GACtB2G,KAAKsX,MAAM1N,YAAc5J,KAAKsX,MAAMzN,eACtC+Q,EAAU5V,MAAM,iCAEhBhF,KAAKsX,MAAMxH,iBACFzW,GAAgB,OAAXA,EAAEsjB,OAAkB3c,KAAKsX,MAAM1N,WAAa5J,KAAKsb,QAK/DV,EAAU5V,MAAM,iCAEhBhF,KAAKsX,MAAMpL,qBAAqB0O,EAAUnd,OAAOG,SAAU,0EAE3DoC,KAAKsX,MAAMxH,iBAEX8K,EAAU3V,MAAM,qBASpByM,kBAAmB,SAA2BlG,GAC5CoP,EAAU5V,MAAM,6DAEhBhF,KAAKsX,MAAMpL,qBAAqB0O,EAAUnd,OAAOG,SAAUgd,EAAUtc,eAAeI,cAEhF8M,GACFA,EAAS3f,KAAKmU,KAAKsX,OAGrBtX,KAAKsX,MAAMxH,iBAQbH,qBAAsB,aAKtBE,kBAAmB,aAQnB8L,SAAU,SAAkB3W,GAC1B4V,EAAU5V,MAAM,mBAAqBA,GAErChF,KAAKsX,MAAMpL,qBAAqB0O,EAAUnd,OAAOG,SAAU,0EAE3DoC,KAAK4P,eAQPpF,QAAS,WACP,IAAI7Q,EAAOqG,KAAKsX,MAAMrN,MAEtB,GAAItQ,EAAKpD,OAAS,IAAMyJ,KAAKsX,MAAMvN,OAAQ,CACzC,IAAK,IAAIre,EAAI,EAAGA,EAAIiO,EAAKpD,OAAQ7K,IAC/B,GAAgB,OAAZiO,EAAKjO,GAAa,CACpB,IAAIsiB,OAAS,EAGXA,EADc,YAAZrU,EAAKjO,GACEsU,KAAKib,eAAe5V,OAEpB1L,EAAKjO,GAGhB,IAAIkxB,EAAYhC,EAAUxV,UAAU4I,GAEpChO,KAAKsX,MAAMrK,UAAUe,GAErBhO,KAAKsX,MAAMnK,UAAUyP,GAErB5c,KAAKsb,OAAOjO,KAAKuP,GAIrB5c,KAAKsX,MAAMrN,MAAQ,KA2BvBsS,WAAY,SAAoB9X,GAC9B,IAAI/E,EAEA+c,EAAQ,wDAEZ,GAAIhY,EAAQ9K,OAAS8iB,EASnB,OARAzc,KAAKsX,MAAMpK,SAASuP,GAEpBzc,KAAKsX,MAAMtK,SAASvI,QAEfzE,KAAKsX,MAAMzN,eACd7J,KAAKsX,MAAMxH,iBAIR,GAAsC,IAAlCrL,EAAQ9K,KAAKkjB,OAAO,WAI7B,GAFAnd,GAAO,IAAIuC,WAAYC,gBAAgBuC,EAAQ9K,KAAM,YAAYqd,iBAE5DhX,KAAKgc,mBAAmBtc,GAC3B,WAEG,CACL,IAAI/F,EAAOqG,KAAKsc,YAAY7X,EAAQ9K,MAEpC+F,GAAO,IAAIuC,WAAYC,gBAAgBvI,EAAM,YAAYqd,gBAG3D,OAAIhX,KAAKkb,mBAAmBxb,EAAMkb,EAAUnd,OAAOC,YAAnD,EAKIsC,KAAKsX,MAAMzN,eAA8C,aAA7BnK,EAAKod,WAAWta,UAAoE,gBAAzC9C,EAAKod,WAAWla,aAAa,SACtG5C,KAAKsX,MAAMtK,SAAStN,QAEpBM,KAAKsX,MAAMpK,SAAS0N,EAAUxV,UAAU1F,UAO1CM,KAAKsX,MAAMlH,UAAU1Q,EAAM+E,EAAQ9K,OAQrC8hB,QAAS,WACPb,EAAU3V,MAAM,kBAEhB,IAAI8X,EAAQ/c,KAAKib,eAEjBjb,KAAKsX,MAAMrK,UAAU8P,EAAM1X,QAE3B,IAAI2X,EAAcpC,EAAUxV,UAAU2X,GAEtC/c,KAAKsX,MAAMnK,UAAU6P,GAErBhd,KAAKsb,OAAOjO,KAAK2P,IAcnBxM,WAAY,SAAoBxC,GAC9B,OAAOA,GAQTT,MAAO,WACLvN,KAAKsX,MAAM9J,SAObgB,aAAc,WACZf,aAAazN,KAAKsX,MAAM7N,cAExBzJ,KAAKsX,MAAM9M,QAAQtd,KAAK8S,KAAKsX,MAA7BtX,KAIJrK,EAAS8F,QAAUsa,EAAKta,QACxB9F,EAAS4F,OAASwa,EAAKxa,OACvB5F,EAASgG,IAAMoa,EAAKpa,IACpBhG,EAASsnB,KAAOlH,EAAKkH,KACrBtnB,EAASiG,MAAQma,EAAKna,MAEfma,GAzwLwD5qB,EAAOD,QAAUD,M,kCCa5F,IAAIiyB,EAAS,EAAQ,KACjBC,EAAe,EAAQ,KAwBvBC,EAAY,GAKZC,EAAU,GAKVC,EAAWJ,EAAOK,OAAOC,MAG7BryB,EAAOD,QAAU,CAMbuyB,mBAAoB,SAASC,GACzBR,EAAOO,mBAAmBC,IAO9BC,sBAAuB,SAASD,GAC5BR,EAAOS,sBAAsBD,IAMjCE,iBAAkB,SAASzW,GACvB+V,EAAOU,iBAAiBzW,IAM5B0W,UAAW,SAAS3W,EAAI4W,EAAY3W,GAChC,IAAI4W,EAAS,IAAIb,EAAOI,EAAUpW,EAAI4W,EAAY3W,GAOlD,OANGD,GACCkW,EAAUlW,GAAMkW,EAAUlW,IAAO,GACjCkW,EAAUlW,GAAIhE,KAAK6a,IAEnBV,EAAQna,KAAK6a,GAEVA,GASXC,gBAAiB,SAASnZ,EAAOqC,GAE7B,IADA,IAAIvb,EAAIub,EAAKkW,EAAUlW,IAAO,GAAMmW,EAC5B3xB,EAAI,EAAGA,EAAIC,EAAE4K,OAAQ7K,IACzBC,EAAED,GAAGuyB,SAASpZ,IAOtBqZ,YAAa,SAAUrZ,GACnByY,EAAWzY,EAEX,IADA,IAAInZ,EAAI,EACFA,EAAI2xB,EAAQ9mB,OAAQ7K,IACtB2xB,EAAQ3xB,GAAGuyB,SAASpZ,GAGxB,IAAI,IAAIqC,KAAMkW,EAAW,CACrB,IAAIzxB,EAAIyxB,EAAUlW,IAAO,GACzB,IAAIxb,EAAI,EAAGA,EAAIC,EAAE4K,OAAQ7K,IACrBC,EAAED,GAAGuyB,SAASpZ,KAO1B0Y,OAAQL,EAAOK,OAIfJ,aAAcA,I,6BChIlB,sGAGO,MAAMgB,EAAQ,QAKRC,EAAY,YAKZC,EAAQ,S,6BCbrB,aAEe,QAAIC,K,yCCFJlyB,SAAf,eCEe+J,MAAf,MCEeA,MAAIooB,KAAO,SAAUC,GACnC,OAAOroB,IAAIooB,KAAK1yB,KAAM2yB,IACnB,SAAUA,GACb,OAAOroB,IAAI6D,OAAOykB,MAAO,GAAID,I,gCCLfE,MAAf,eCAeC,IAAf,SCAeC,IAAW/yB,KAAMO,Q,YCA5ByyB,EAA4B,CAC/B5X,MAAM,EACN6X,KAAK,EACLlK,OAAO,EACPmK,UAAU,GAoBIC,MAjBf,SAAkBrC,EAAMzb,EAAMZ,GAG7B,IAAI5U,EACHuzB,GAHD3e,EAAMA,GAAOjF,KAGCwF,cAAe,UAG7B,GADAoe,EAAOtd,KAAOgb,EACTzb,EACJ,IAAMxV,KAAKmzB,EACL3d,EAAMxV,KACVuzB,EAAQvzB,GAAMwV,EAAMxV,IAIvB4U,EAAI4e,KAAKte,YAAaqe,GAAS7Y,WAAW+Y,YAAaF,I,QCLpDG,EAAc,SAGdC,EAAS,SAAUC,EAAUC,GAIzB,OAAO,IAAIF,EAAOG,GAAG5U,KAAM0U,EAAUC,IAuX7C,SAASE,EAAa1pB,GAElB,IAAIQ,IAAWR,GAAOA,EAAIQ,OACtB0Q,EAAOyY,YAAQ3pB,GAEnB,MAAoB,mBAARA,ICrZD,SAAmBA,GACjC,OAAc,MAAPA,GAAeA,IAAQA,EAAIzK,ODoZGq0B,CAAU5pB,KAI5B,UAATkR,GAA+B,IAAX1Q,GACL,iBAAXA,GAAuBA,EAAS,GAAOA,EAAS,KAAOR,GA9XtEspB,EAAOG,GAAKH,EAAO/xB,UAAY,CAG3BsyB,OAfU,WAiBV3pB,YAAaopB,EAGb9oB,OAAQ,EAERspB,QAAS,WACL,OAAOC,EAAMj0B,KAAMmU,OAKvBzT,IAAK,SAAUqL,GAGX,OAAY,MAAPA,EACMkoB,EAAMj0B,KAAMmU,MAIhBpI,EAAM,EAAIoI,KAAMpI,EAAMoI,KAAKzJ,QAAWyJ,KAAMpI,IAKvDmoB,UAAW,SAAUC,GAGjB,IAAIC,EAAMZ,EAAOa,MAAOlgB,KAAK/J,cAAe+pB,GAM5C,OAHAC,EAAIE,WAAangB,KAGVigB,GAIXG,KAAM,SAAU5U,GACZ,OAAO6T,EAAOe,KAAMpgB,KAAMwL,IAG9BhG,IAAK,SAAUgG,GACX,OAAOxL,KAAK+f,UAAWV,EAAO7Z,IAAKxF,MAAM,SAAUN,EAAMhU,GACrD,OAAO8f,EAAS3f,KAAM6T,EAAMhU,EAAGgU,QAIvCogB,MAAO,WACH,OAAO9f,KAAK+f,UAAWD,EAAMrB,MAAOze,KAAMmB,aAG9Ckf,MAAO,WACH,OAAOrgB,KAAKsgB,GAAI,IAGpBC,KAAM,WACF,OAAOvgB,KAAKsgB,IAAK,IAGrBE,KAAM,WACF,OAAOxgB,KAAK+f,UAAWV,EAAOoB,KAAMzgB,MAAM,SAAU0gB,EAAOh1B,GACvD,OAASA,EAAI,GAAM,OAI3Bi1B,IAAK,WACD,OAAO3gB,KAAK+f,UAAWV,EAAOoB,KAAMzgB,MAAM,SAAU0gB,EAAOh1B,GACvD,OAAOA,EAAI,OAInB40B,GAAI,SAAU50B,GACV,IAAIyM,EAAM6H,KAAKzJ,OACX2C,GAAKxN,GAAMA,EAAI,EAAIyM,EAAM,GAC7B,OAAO6H,KAAK+f,UAAW7mB,GAAK,GAAKA,EAAIf,EAAM,CAAE6H,KAAM9G,IAAQ,KAG/D0nB,IAAK,WACD,OAAO5gB,KAAKmgB,YAAcngB,KAAK/J,gBAIvCopB,EAAOwB,OAASxB,EAAOG,GAAGqB,OAAS,WAC/B,IAAI1Z,EAASlb,EAAM6yB,EAAKgC,EAAMC,EAAaC,EACvCC,EAAS9f,UAAW,IAAO,GAC3BzV,EAAI,EACJ6K,EAAS4K,UAAU5K,OACnB2qB,GAAO,EAsBX,IAnBuB,kBAAXD,IACRC,EAAOD,EAGPA,EAAS9f,UAAWzV,IAAO,GAC3BA,KAImB,iBAAXu1B,GAAyC,mBAAXA,IACtCA,EAAS,IAIRv1B,IAAM6K,IACP0qB,EAASjhB,KACTtU,KAGIA,EAAI6K,EAAQ7K,IAGhB,GAAqC,OAA9Byb,EAAUhG,UAAWzV,IAGxB,IAAMO,KAAQkb,EACV2Z,EAAO3Z,EAASlb,GAIF,cAATA,GAAwBg1B,IAAWH,IAKnCI,GAAQJ,IAAUzB,EAAO8B,cAAeL,KACvCC,EAAc3qB,MAAMC,QAASyqB,MAC/BhC,EAAMmC,EAAQh1B,GAIV+0B,EADCD,IAAgB3qB,MAAMC,QAASyoB,GACxB,GACCiC,GAAgB1B,EAAO8B,cAAerC,GAGvCA,EAFA,GAIZiC,GAAc,EAGdE,EAAQh1B,GAASozB,EAAOwB,OAAQK,EAAMF,EAAOF,SAG5BvgB,IAATugB,IACRG,EAAQh1B,GAAS60B,IAOjC,OAAOG,GAGX5B,EAAOwB,OAAQ,CAGXO,QAAS,UA9KC,WA8KsBhW,KAAKC,UAAWzJ,QAAS,MAAO,IAGhEyf,SAAS,EAETrc,MAAO,SAAUF,GACb,MAAM,IAAIzN,MAAOyN,IAGrBwc,KAAM,aAENH,cAAe,SAAUprB,GACrB,IAAI0S,EAAO8Y,EAIX,SAAMxrB,GAAgC,oBAAzBW,IAAS7K,KAAMkK,QAI5B0S,EAAQ+Y,EAAUzrB,KASK,mBADvBwrB,EAAO5C,EAAO9yB,KAAM4c,EAAO,gBAAmBA,EAAMxS,cACf2oB,EAAW/yB,KAAM01B,KAAWE,IAGrEC,cAAe,SAAU3rB,GACrB,IAAI9J,EAEJ,IAAMA,KAAQ8J,EACV,OAAO,EAEX,OAAO,GAKX4rB,WAAY,SAAUhF,EAAMxV,EAAS7G,GACjC0e,EAASrC,EAAM,CAAE/H,MAAOzN,GAAWA,EAAQyN,OAAStU,IAGxD8f,KAAM,SAAUrqB,EAAKyV,GACjB,IAAIjV,EAAQ7K,EAAI,EAEhB,GAAK+zB,EAAa1pB,GAEd,IADAQ,EAASR,EAAIQ,OACL7K,EAAI6K,IACwC,IAA3CiV,EAAS3f,KAAMkK,EAAKrK,GAAKA,EAAGqK,EAAKrK,IADtBA,UAMpB,IAAMA,KAAKqK,EACP,IAAgD,IAA3CyV,EAAS3f,KAAMkK,EAAKrK,GAAKA,EAAGqK,EAAKrK,IAClC,MAKZ,OAAOqK,GAKX4L,KAAM,SAAUjC,GACZ,IAAIwB,EACA+e,EAAM,GACNv0B,EAAI,EACJqU,EAAWL,EAAKK,SAEpB,GAAMA,EAQC,IAAkB,IAAbA,GAA+B,IAAbA,GAA+B,KAAbA,EAC5C,OAAOL,EAAKwX,YACT,GAAkB,IAAbnX,GAA+B,IAAbA,EAC1B,OAAOL,EAAK4C,eARZ,KAAUpB,EAAOxB,EAAMhU,MAGnBu0B,GAAOZ,EAAO1d,KAAMT,GAU5B,OAAO+e,GAKX2B,UAAW,SAAUzrB,EAAK0rB,GACtB,IAAI5B,EAAM4B,GAAW,GAarB,OAXY,MAAP1rB,IACIspB,EAAarzB,OAAQ+J,IACtBkpB,EAAOa,MAAOD,EACK,iBAAR9pB,EACH,CAAEA,GAAQA,GAGlB+M,IAAKrX,KAAMo0B,EAAK9pB,IAIjB8pB,GAGX6B,QAAS,SAAUpiB,EAAMvJ,EAAKzK,GAC1B,OAAc,MAAPyK,GAAe,EAAIyN,IAAQ/X,KAAMsK,EAAKuJ,EAAMhU,IAGvDq2B,SAAU,SAAUriB,GAChB,IAAIsiB,EAAYtiB,EAAKuiB,aACjBC,GAAYxiB,EAAKyiB,eAAiBziB,GAAOsX,gBAI7C,OAAQoI,EAAYlN,KAAM8P,GAAaE,GAAWA,EAAQ1f,UAAY,SAG1E0d,MAAO,SAAUG,EAAO+B,GAKpB,IAJA,IAAIjqB,GAAOiqB,EAAO7rB,OACd2C,EAAI,EACJxN,EAAI20B,EAAM9pB,OAEN2C,EAAIf,EAAKe,IACbmnB,EAAO30B,KAAQ02B,EAAQlpB,GAK3B,OAFAmnB,EAAM9pB,OAAS7K,EAER20B,GAGXI,KAAM,SAAUT,EAAOxU,EAAU6W,GAS7B,IARA,IACIhP,EAAU,GACV3nB,EAAI,EACJ6K,EAASypB,EAAMzpB,OACf+rB,GAAkBD,EAId32B,EAAI6K,EAAQ7K,KACG8f,EAAUwU,EAAOt0B,GAAKA,KAChB42B,GACrBjP,EAAQnQ,KAAM8c,EAAOt0B,IAI7B,OAAO2nB,GAIX7N,IAAK,SAAUwa,EAAOxU,EAAUpK,GAC5B,IAAI7K,EAAQ5J,EACRjB,EAAI,EACJu0B,EAAM,GAGV,GAAKR,EAAaO,GAEd,IADAzpB,EAASypB,EAAMzpB,OACP7K,EAAI6K,EAAQ7K,IAGF,OAFdiB,EAAQ6e,EAAUwU,EAAOt0B,GAAKA,EAAG0V,KAG7B6e,EAAI/c,KAAMvW,QAMlB,IAAMjB,KAAKs0B,EAGO,OAFdrzB,EAAQ6e,EAAUwU,EAAOt0B,GAAKA,EAAG0V,KAG7B6e,EAAI/c,KAAMvW,GAMtB,OAAO4xB,EAAM0B,IAIjBsC,KAAM,EAINC,QElYW,KFqYQ,mBAAX/1B,SACR4yB,EAAOG,GAAI/yB,OAAOuJ,UAAaG,IAAK1J,OAAOuJ,WAI/CqpB,EAAOe,KAAM,uEAAuErd,MAAO,MACvF,SAAUN,EAAIxW,GACVyyB,IAAY,WAAazyB,EAAO,KAAQA,EAAK0W,iBAgBtC0c,O,8BG7Zf,4KAgBA,MAAMtB,EAAS0E,EAAQ,GAAqB5E,UAAU6E,GAMtD,IAAIC,EAKAC,GAAoB,EAkCxB,SAASC,EAAsB1b,GACvB2b,IAAUC,wBAITD,IAAUE,YAAY,CACvBC,YAAa9b,EAAQ8b,YACrBC,gBAAiB/b,EAAQ+b,gBACzBC,SAAUhc,EAAQgc,SAClBC,UAAWjc,EAAQic,UACnBC,gBAAiBlc,EAAQkc,gBACzBC,mBAAoBnc,EAAQmc,mBAC5BC,OAAQpc,EAAQoc,OAChBC,OAAQrc,EAAQqc,UAEhBzF,EAAO/Y,MAAM,+CA0EN,SAASye,EAAWC,EAAMvc,GAMrCnH,KAAK2jB,YAAc,IAAIC,IACvB5jB,KAAK6jB,aAAe,IAAIC,IACxB9jB,KAAK0jB,KAAOA,EACZ1jB,KAAKmH,QAAUA,GAAW,GAE1BnH,KAAK+jB,4BACC/jB,KAAKmH,QAAQ8b,aAAejjB,KAAKmH,QAAQ+b,iBAAmBljB,KAAKmH,QAAQ6c,kBAK1B,IAAzCP,EAAWQ,0BACnBjkB,KAAK+jB,8BACL/jB,KAAKkkB,iCACClkB,KAAKmH,QAAQ+c,iCACfC,IAAQC,gBACRvB,EAAsB7iB,KAAKmH,SAnIvC,SAA0BA,GACjByb,IACDyB,IAAWC,WACPnd,EAAQod,iBAAmBC,KACf,GACE,OACIjkB,EACC,IAAMsiB,EAAsB1b,IAEnDyb,GAAoB,GA4HhB6B,CAAiBzkB,KAAKmH,SAGrBnH,KAAKmH,QAAQoc,QACdxF,EAAO5Y,KAAK,4BAUpBnF,KAAK0kB,oBAAsB,IAAId,IAE/BH,EAAWkB,UAAUC,IAAI5kB,MA7E7ByjB,EAAW7Y,KAAO,SAASzD,GACvBsc,EAAWoB,oBAAsB1d,EAAQ2d,mBACF,iBAA5B3d,EAAQ4d,kBACftB,EAAWsB,gBAAkB5d,EAAQ4d,iBAGE,iBAAhC5d,EAAQ6d,sBACfvB,EAAWuB,oBAAsB7d,EAAQ6d,qBAGC,iBAAnC7d,EAAQ8d,yBACfxB,EAAWwB,uBAAyB9d,EAAQ8d,wBAGhDxB,EAAWQ,0BAA4B9c,EAAQ8c,2BAiEnDR,EAAWoB,oBAAqB,EAChCpB,EAAWuB,oBAAsB,IACjCvB,EAAWsB,gBAAkB,IAC7BtB,EAAWQ,2BAA4B,EACvCR,EAAWyB,UAAYA,IAEvB94B,OAAOC,eAAeo3B,EAAY,YAAa,CAM3Cl3B,IAAG,KACMo2B,IACDA,EAAa,IAAIwC,KAGdxC,KAQfc,EAAWn2B,UAAU83B,iBAAmB,SAASC,GAC7CrlB,KAAKslB,gBAAgBD,GAErB,IACI,MAAME,EACA,IAAIC,IACFH,EACA5B,EAAWuB,oBACXvB,EAAWsB,gBACX/kB,KAAK6jB,cAEb0B,EAASxI,MAAM0G,EAAWoB,oBAC1B7kB,KAAK2jB,YAAY8B,IAAIJ,EAAene,GAAIqe,GAC1C,MAAOlsB,GACL0kB,EAAO/Y,MAAO,iDAAgD3L,KAItEoqB,EAAWiC,WAAa,GAExBjC,EAAWkC,gBAAkB,SAASC,EAAQpa,GAC1C,IAAKiY,EAAWoB,mBACZ,OAEJ,MAAMa,EAAa,IAAIG,IAAWD,EAAQnC,EAAWuB,oBACjDxZ,GAEJxL,KAAK0lB,WAAWxiB,KAAKwiB,GACrBA,EAAW3I,SAGf0G,EAAWn2B,UAAUw4B,sBAAwB,SAASC,GAC7CtC,EAAWoB,oBAGhB7kB,KAAK6jB,aAAamC,GAAGC,IAA8BF,IAGvDtC,EAAWn2B,UAAU44B,yBAA2B,SAASH,GAChDtC,EAAWoB,oBAGhB7kB,KAAK6jB,aAAasC,eAAeF,IAA8BF,IAGnEtC,EAAWn2B,UAAU84B,0BAA4B,SAASL,GACtD/lB,KAAK6jB,aAAamC,GAAGC,IAAkCF,IAG3DtC,EAAWn2B,UAAU+4B,6BAA+B,SAASN,GACzD/lB,KAAK6jB,aAAasC,eACdF,IAAkCF,IAG1CtC,EAAWn2B,UAAUg5B,2BAA6B,SAASP,GACvD/lB,KAAK6jB,aAAamC,GAAGC,IAAmCF,IAG5DtC,EAAWn2B,UAAUi5B,8BAAgC,SAASR,GAC1D/lB,KAAK6jB,aAAasC,eACdF,IACAF,IAGRtC,EAAWn2B,UAAUk5B,yBAA2B,SAAST,GACrD/lB,KAAK6jB,aAAamC,GAAGC,IAAkCF,IAG3DtC,EAAWn2B,UAAUm5B,4BAA8B,SAASV,GACxD/lB,KAAK6jB,aAAasC,eAAeF,IAC7BF,IASRtC,EAAWn2B,UAAUo5B,0BAA4B,SAASX,GACtD/lB,KAAK6jB,aAAamC,GAAGC,IAAmCF,IAS5DtC,EAAWn2B,UAAUq5B,qBAAuB,SAASC,GAC5CzC,IAAQ0C,+BAMb7mB,KAAK8mB,yBAA2B,IAAIC,IAChC/mB,KAAK6jB,aACLJ,EAAWwB,wBAEf2B,EAAWZ,GACPgB,oBACA,IAAMhnB,KAAK8mB,yBAAyBG,iBACxCL,EAAWZ,GACPgB,kBACA,IAAMhnB,KAAK8mB,yBAAyBI,iBAdpCnJ,EAAO5Y,KAAK,kEAuBpBse,EAAWn2B,UAAU65B,kBAAoB,WACrC,OAAOnnB,KAAK8mB,yBACN9mB,KAAK8mB,yBAAyBK,oBAC9B,MASV1D,EAAWn2B,UAAU85B,6BAA+B,SAASrB,GACzD/lB,KAAK6jB,aAAasC,eAAeF,IAAmCF,IASxEtC,EAAWn2B,UAAU+5B,eAAiB,SAASC,GAC3C,IAAK,MAAM/B,KAAYnvB,MAAMO,KAAKqJ,KAAK2jB,YAAY4D,UAC1ChC,EAASF,eAAemC,OACzBjC,EAAS8B,eAAeC,IAKpC7D,EAAWn2B,UAAUm6B,QAAU,WAC3B,IAQSznB,KAAK0kB,oBAAoBgD,MAC1B1nB,KAAK6jB,aAAa8D,KAAK1B,KAE3B,IAAK,MAAM2B,KAAa5nB,KAAK0kB,oBAAoB6C,SAC7CvnB,KAAK6nB,cAAcD,EAAUE,KAEjC,IAAK,MAAMC,KAAS/nB,KAAK2jB,YAAYpe,OACjCvF,KAAKgoB,iBAAiBD,GAEtB/nB,KAAK6jB,cACL7jB,KAAK6jB,aAAaoE,qBAlB1B,QAqBIxE,EAAWkB,UAAUuD,OAAOloB,QAIpCyjB,EAAW0E,eAAiB,SAASvC,GACjC,GAAKnC,EAAWoB,mBAIhB,IAAK,IAAIn5B,EAAI,EAAGA,EAAI+3B,EAAWiC,WAAWnvB,OAAQ7K,IAC9C,GAAI+3B,EAAWiC,WAAWh6B,GAAGk6B,SAAWA,EAAQ,CACzBnC,EAAWiC,WAAWzhB,OAAOvY,EAAG,GAExC,GAAG08B,OACd,QAUZ3E,EAAWn2B,UAAU06B,iBAAmB,SAASD,GAC7C,MAAMxC,EAAWvlB,KAAK2jB,YAAYp3B,IAAIw7B,GAElCxC,IACAA,EAAS6C,OACTpoB,KAAK2jB,YAAYuE,OAAOH,KAQhCtE,EAAWn2B,UAAUg4B,gBAAkB,SAASwC,GAC5C9nB,KAAKgoB,iBAAiBF,EAAI5gB,KAW9Buc,EAAWn2B,UAAU+6B,eAAiB,SAASP,EAAKQ,GAChD,IAAKtoB,KAAK+jB,4BACN,OACG,GAAI/jB,KAAK0kB,oBAAoB6D,IAAIT,EAAI5gB,IAGxC,YAFA6W,EAAO/Y,MAAM,gDAKjB+Y,EAAO7Y,KAAM,0BAAyB4iB,QAEtC,MAAMU,EACA,IAAI1F,IACFgF,EACA,CACIvE,OAAQvjB,KAAKmH,QAAQoc,OACrB+E,iBAGZtoB,KAAK0kB,oBAAoBe,IAAIqC,EAAI5gB,GAAIshB,IASzC/E,EAAWgF,0BAA4B,WACnC,MAAMC,EAAc,IAAIvD,IAExB,IAAK,MAAMwD,KAAclF,EAAWkB,UAChC,IAAK,MAAMiE,KAAMD,EAAWjE,oBAAoB6C,SAC5CmB,EAAY9D,IAAIgE,GAIxB,OAAOF,GAMXjF,EAAWn2B,UAAUu6B,cAAgB,SAASC,GAC1C,MAAMe,EAAoB7oB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAEvD2hB,IAUsC,IAAlC7oB,KAAK0kB,oBAAoBgD,MACzB1nB,KAAK6jB,aAAa8D,KAAK1B,KAE3BjmB,KAAK0kB,oBAAoBwD,OAAOJ,EAAI5gB,IAGpC2hB,EAAkBC,uBAW1BrF,EAAWn2B,UAAUy7B,mBAAqB,WACtC,OAAO/oB,KAAK+jB,6BAShBN,EAAWn2B,UAAU07B,gCAAkC,SAASlB,EAAKmB,GACjE,MAAMC,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAASC,sBAAsBF,IAQvCxF,EAAWn2B,UAAU87B,6BAA+B,SAAStB,GACzD,MAAMoB,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAASE,gCAUjB3F,EAAWn2B,UAAU+7B,cAAgB,SAASvB,EAAKwB,EAAOriB,GACtD,MAAMiiB,EAAWpB,GAAO9nB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAEzD4b,IAAUuG,cAAcC,EAAOriB,EAAMiiB,IAUzCzF,EAAWn2B,UAAUi8B,uBACf,SAASxM,EAAOyM,GACd,IAAK,MAAMZ,KAAM5oB,KAAK0kB,oBAAoB6C,SACtCqB,EAAGW,uBAAuBxM,EAAOyM,IAS7C/F,EAAWn2B,UAAUm8B,yBAA2B,SAASC,GACrD,IAAK,MAAMd,KAAM5oB,KAAK0kB,oBAAoB6C,SACtCqB,EAAGa,2BAIPzpB,KAAK0jB,KAAK+F,yBAAyBC,IAQvCjG,EAAWkG,0BAA4B,SAASC,GAC5C,MAAMC,EAAYpG,EAAWgF,4BAE7B,GAAIoB,EAAUnC,KACV,IAAK,MAAMkB,KAAMiB,EACb/G,IAAU6G,0BAA0BC,EAAahB,QAGrD9F,IAAU6G,0BAA0BC,EAAa,OAmBzDnG,EAAWn2B,UAAUw8B,4BAA8B,SAC3ChC,EACA0B,EACAO,EACAC,EACAC,EACAC,GACJ,MAAMhB,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAASY,4BACLN,EACAO,EACAC,EACAC,EACAC,IAWZzG,EAAW0G,uBAAyB,SAAS9wB,GACzC,MAAM2L,EACA3L,aAAa+wB,IApiBvB,SAA2CplB,GACvC,MAAMmL,EAAM,IAAI9Y,MAkBhB,OAfA8Y,EAAI/L,MAAQY,EAAMZ,MAGlB+L,EAAIlkB,MAAQ+Y,EAAM/Y,MAAQ,kBAAoB+Y,EAAMqlB,KAAOrlB,EAAMqlB,IAAIrlB,OAC9DA,EAAMqlB,IAAIrlB,MAAM/Y,KAAQ,MAAK+Y,EAAMqlB,IAAIrlB,MAAM/Y,KAAS,IAK7DkkB,EAAIma,eAAiBtlB,EAAMqlB,KAAOrlB,EAAMqlB,IAAIE,YACtC3d,KAAKwL,UAAUpT,EAAMqlB,IAAIE,aAAe,GAG9Cpa,EAAI1L,QAAUO,EAAMP,QAEb0L,EAkhBGqa,CAAkCnxB,GAAKA,EAC3CwwB,EAAYpG,EAAWgF,4BAE7B,GAAIoB,EAAUnC,KACV,IAAK,MAAMkB,KAAMiB,EACb/G,IAAUqH,uBAAuBnlB,EAAO4jB,QAG5C9F,IAAUqH,uBAAuBnlB,EAAO,OAUhDye,EAAWn2B,UAAUm9B,sBAAwB,SAASpxB,EAAGyuB,GACrD,MAAMoB,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAASuB,sBAAsBpxB,IAUvCoqB,EAAWn2B,UAAUo9B,uBAAyB,SAASrxB,EAAGyuB,GACtD,MAAMoB,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAASwB,uBAAuBrxB,IAUxCoqB,EAAWn2B,UAAUq9B,uBAAyB,SAAStxB,EAAGyuB,GACtD,MAAMoB,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAASyB,uBAAuBtxB,IAUxCoqB,EAAWn2B,UAAUs9B,wBAA0B,SAASvxB,EAAGyuB,GACvD,MAAMoB,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAAS0B,wBAAwBvxB,IAUzCoqB,EAAWn2B,UAAUu9B,0BAA4B,SAASxxB,EAAGyuB,GACzD,MAAMoB,EAAWlpB,KAAK0kB,oBAAoBn4B,IAAIu7B,EAAI5gB,IAE9CgiB,GACAA,EAAS2B,0BAA0BxxB,IAS3CoqB,EAAWqH,QAAU,SAASh/B,GAC1B,MAAMi/B,EAAe,IAAI5F,IAMzB,IAAK,MAAM6F,KAASvH,EAAWkB,UAAW,CACtC,GAAIqG,EAAM9G,iCACN,OAGA8G,EAAMtG,oBAAoBgD,MAC1BqD,EAAanG,IAAIoG,EAAMtG,oBAAoB6C,SAAS0D,OAAOt+B,OAInE,GAAIo+B,EAAarD,KACb,IAAK,MAAMwD,KAAcH,EACrBjI,IAAUqI,mBAAmBr/B,EAAGo/B,QAGpCpI,IAAUqI,mBAAmBr/B,EAAG,OAYxC23B,EAAWn2B,UAAU89B,aAAe,SAASC,EAASC,GAUlD,OAPA7H,EAAWyB,UAAUqG,UACjBC,IACA,CACIC,OAAQJ,EACRC,YAGDxI,IAAUsI,aAAaprB,KAAKmH,QAAQoc,OAAQ8H,EAASC,IAGhE7H,EAAWiI,UAAYjJ,EAAQ,KAAsCiJ,UAOrEjI,EAAWkI,kBAAoB,SAAS3mB,GAChCA,aAAiBolB,KAAmBplB,EAAMqlB,IAC1C5G,EAAW0G,uBAAuBnlB,GAElCye,EAAWqH,QAAQ9lB,IAa3Bye,EAAWmI,oBAAsB,SAASC,EAAOC,EAAa,IAC1D,IAAKD,EAGD,YAFA9N,EAAO5Y,KAAK,iCAKhB,IAAI4mB,EAIAA,EADiB,iBAAVF,EACMA,EAEA,CACT5/B,KAAM4/B,EACNC,cAIR/N,EAAOnZ,IAAIgI,KAAKwL,UAAU2T,IAG1B/rB,KAAKklB,UAAUqG,UAAUM,EAAOC,IAWpCrI,EAAWuI,cAAgB,SAASC,EAAWH,EAAa,IACxD9rB,KAAKklB,UAAUqG,UAAUU,EAAWH,GACpC9rB,KAAK6jB,aAAa8D,KAAKX,2BAAgDiF,EAAWH,IAItFrI,EAAWn2B,UAAU4+B,0BAA4B,SAASnG,GACtD/lB,KAAK6jB,aAAamC,GAAGgB,2BAAgDjB,IAIzEtC,EAAWn2B,UAAU6+B,6BAA+B,SAASpG,GACzD/lB,KAAK6jB,aAAasC,eAAea,2BAAgDjB,M,iECrtBrF56B,EAAOD,QAlHW,CAIdkhC,qBAAsB,2BAKtBC,oBAAqB,0BACrBC,kBAAmB,wBACnBC,6BAA8B,mCAC9Bh+B,yBAA0B,+BAC1Bi+B,uBAAwB,6BAOxBC,oBAAqB,0BAErBC,iCAAkC,uCAOlCC,oBAAqB,0BAQrBC,yBAA0B,+BAK1BC,2CAA4C,iDAE5CC,eAAgB,qBAMhBC,mBAAoB,yBAIpBC,kBAAmB,wBAMnBC,qBAAsB,2BAItBC,oBAAqB,0BAKrBC,6BAA8B,mCAK9BC,8BAA+B,oCAC/BC,4BAA6B,kCAC7BC,oBAAqB,0BAKrBC,wBAAyB,8BACzBC,sBAAuB,4BAMvB9+B,0BAA2B,gCAK3BC,wBAAyB,8BASzB8+B,oBAAqB,0BASrBC,qBAAsB,6B,6yDCnFnB,MAAMC,EAAmB,cAMnBC,EAAY,OAMZC,EAAa,QAMbC,EAAU,KAOVC,EAAwB,UAOxBC,EAA2B,yBAO3BC,EAA4B,4BAQ5BC,EAA2B,2BAO3BC,EAA0B,YAO1BC,EACP,6BAOOC,EACP,4BAOOC,EAAsB,UAOtBC,EAAyB,cAMzBC,EAAoB,SAOpBC,EAA2B,gBAuB3BC,EAAmB,mBAYnBC,EAA0B,0BAS1BnD,EAAW,WAgBXoD,EAAe,eAWfC,EACP,kCAgBOC,EAAoB,oBAQpBC,EAAgB,sBAUhBC,EAAgB,gBAMhBC,EAAwB,WAGjC,MAAO,CACHC,OAHe,cAIfC,cAJe,cAKfloB,KAAM0mB,IAUDyB,EACP,SAASC,EAAWC,EAAcC,GAChC,MAAO,CACHtoB,KAAM0mB,EACNuB,OAAQ,oBACRjyB,WAAY,EAAF,CACN,WAAcoyB,EACd,cAAiBC,GACdC,KAYZ,SAASC,EAAsBN,EAAQjyB,GAC1C,MAAO,CACHiyB,SACAjyB,aACAwyB,OAAQ,aACRxoB,KAAM0mB,GAeP,MAAM+B,EAAoC,SAASC,EAAO1yB,GAC7D,MAAMiyB,EAAS,2BAEf,MAAO,CACHA,SACAC,cAAeQ,EACf1yB,aACAwyB,OAAQP,EACRjoB,KAAM0mB,IAWDiC,EAAoB,SAASC,EAAeC,EAAQC,GAO7D,MAAO,CACH9yB,WAPe,CACf,eAAkB4yB,EAClBC,SACAC,OAKA9jC,KAAM,UACNgb,KAAM0mB,IAODqC,EAAuB,WAGhC,MAAO,CACHd,OAHW,aAIXC,cAJW,aAKXloB,KAAM0mB,IAYDsC,EAA0B,SAASf,EAAQjyB,EAAa,IACjE,MAAO,CACHgK,KAAM0mB,EACN8B,OAAQ,iBACRP,SACAjyB,eAUKizB,EAAyC,SAASjzB,EAAa,IAGxE,MAAO,CACHgK,KAAM0mB,EACN8B,OAAQ,mBACRP,OALW,WAMXjyB,eASKkzB,EAAoB,SAASjB,EAAQjyB,EAAa,IAC3D,MAAO,CACHgK,KAAM0mB,EACNuB,SACAO,OAAQ,SACRxyB,eAWKmzB,EAA8B,SAASC,EAAW1jC,GAC3D,MAAO,CACHsQ,WAAY,CACR,WAAcozB,EACd1jC,SAEJuiC,OAAQ,4BACRjoB,KAAM0mB,IASD2C,EAAiB,SAASpB,EAAQjyB,EAAa,IACxD,MAAO,CACHgK,KAAM0mB,EACNuB,SACAO,OAAQ,MACRxyB,eAOKszB,EAA2B,SAASF,GAC7C,MAAO,CACHppB,KAAM0mB,EACNuB,OAAQ,iBACRmB,cA+CKG,EAAsB,SAASvzB,GACxC,MAAO,CACHgK,KAAM0mB,EACNuB,OAAQ,YACRjyB,eA0BKwzB,EAA4B,SAASxzB,GAC9C,MAAO,CACHgK,KAAM0mB,EACNuB,OAAQ,kBACRjyB,eAYD,SAASyzB,EAA8BC,EAAQC,EAAkBC,GACpE,MAAO,CACH5pB,KAAM0mB,EACNuB,OAAQ,uBACRjyB,WAAY,CACR0zB,SACAC,mBACAC,sBAYL,MAAMC,EAAiC,SAASnU,EAAMnN,GACzD,MAAO,CACHvI,KAAM0mB,EACNuB,OAAQ,uBACRjyB,WAAY,CACR0f,OACAnN,YAoBCuhB,EAAkB,SAAS9zB,GACpC,OAAOyyB,EAAkC,OAAQzyB,K,8BCrjBrD,iFACA,MAAM8gB,EAASF,oBAAU6E,GAOnBsO,EAAU,CACZC,mBAAmBtvB,GAIRA,EAAOA,EAAKC,QAAQ,iBAAkB,IAAMD,EAEvDuvB,UAAUC,EAAWC,GACjB,IACIC,EAAKC,EADL33B,EAAO,KAeX,OAZK23B,EAAQN,EAAQO,SAASJ,EAAW,eAAgBC,MAC7CC,EACEL,EAAQO,SACNJ,EACA,aACAC,MACZz3B,EAAO,CACH23B,MAAON,EAAQQ,cAAcF,GAC7BD,IAAKL,EAAQS,YAAYJ,KAI1B13B,GAEX63B,cAAchtB,GACHA,EAAKktB,UAAU,IAE1BC,cAAcC,GACF,eAAcA,EAE1BH,YAAYjtB,GACDA,EAAKktB,UAAU,IAE1BG,YAAYR,GACA,aAAYA,EAExBS,SAASttB,GACEA,EAAKktB,UAAU,GAE1BK,WAAWvtB,GACP,MAAM7K,EAAO,GACPqK,EAAQQ,EAAKktB,UAAU,GAAG3uB,MAAM,KAUtC,OARApJ,EAAKq4B,MAAQhuB,EAAMiuB,QACnBt4B,EAAKu4B,KAAOluB,EAAMiuB,QAClBt4B,EAAK8O,MAAQzE,EAAMiuB,QACa,KAA5BjuB,EAAMA,EAAMzN,OAAS,IACrByN,EAAM0M,MAEV/W,EAAKw4B,IAAMnuB,EAEJrK,GAEXy4B,WAAWC,GAEF,KAAIA,EAAML,SAASK,EAAMH,QAAQG,EAAM5pB,SACpC4pB,EAAMF,IAAIhvB,KAAK,OAE3BmvB,YAAY9tB,GACR,MAAM7K,EAAO,GACb,IAAIqK,EAAQQ,EAAKktB,UAAU,GAAG3uB,MAAM,KAQpC,OANApJ,EAAKuN,GAAKlD,EAAMiuB,QAChBjuB,EAAQA,EAAM,GAAGjB,MAAM,KACvBpJ,EAAK1N,KAAO+X,EAAMiuB,QAClBt4B,EAAK44B,UAAYvuB,EAAMiuB,QACvBt4B,EAAK64B,SAAWxuB,EAAMzN,OAASyN,EAAMiuB,QAAU,IAExCt4B,GAQX84B,aAAajuB,GACT,MAAMR,EAAQQ,EAAKktB,UAAU,IAAI3uB,MAAM,KAQvC,MAAO,CAPUiB,EAAM,GACNA,EAAM,GAGHA,EAAMzN,OAAS,EAAIyN,EAAM,GAAK,OAKtD0uB,YAAYxyB,GACR,IAAIsE,EACG,YAAWtE,EAAG0C,aAAa,SAAS1C,EAAG0C,aAAa,WACnD1C,EAAG0C,aAAa,eAOxB,OALI1C,EAAG0C,aAAa,aACmB,MAAhC1C,EAAG0C,aAAa,cACnB4B,GAAS,IAAGtE,EAAG0C,aAAa,aAGzB4B,GAEXmuB,YAAYnuB,GACR,MAAM7K,EAAO,GACPqK,EAAQQ,EAAKktB,UAAU,GAAG3uB,MAAM,KAStC,OAPApJ,EAAKyD,IAAM4G,EAAMiuB,QACjBt4B,EAAK,gBAAkBqK,EAAMiuB,QAC7Bt4B,EAAK,cAAgBqK,EAAMiuB,QACvBjuB,EAAMzN,SACNoD,EAAK,kBAAoBqK,EAAMb,KAAK,MAGjCxJ,GAEXi5B,iBAAiBpuB,GACb,MAAM7K,EAAO,GACPqK,EAAQQ,EAAKktB,UAAU,IAAI3uB,MAAM,KAMvC,OAJApJ,EAAKd,KAAOmL,EAAMiuB,QAClBt4B,EAAKk5B,YAAc7uB,EAAMiuB,QAGlBt4B,GAEXm5B,UAAUtuB,GACN,MAAM7K,EAAO,GACb,IAAIqK,EAAQQ,EAAKzB,MAAM,KAEvBiB,EAAMiuB,QACNjuB,EAAQA,EAAMb,KAAK,KAAKJ,MAAM,KAC9B,IAAK,IAAIrX,EAAI,EAAGA,EAAIsY,EAAMzN,OAAQ7K,IAAK,CACnC,IAAIuB,EAAM+W,EAAMtY,GAAGqX,MAAM,KAAK,GAE9B,KAAO9V,EAAIsJ,QAAqB,MAAXtJ,EAAI,IACrBA,EAAMA,EAAIykC,UAAU,GAExB,MAAM/kC,EAAQqX,EAAMtY,GAAGqX,MAAM,KAAK,GAE9B9V,GAAON,EACPgN,EAAKuJ,KAAK,CAAEjX,KAAMgB,EACdN,UACGM,GAEP0M,EAAKuJ,KAAK,CAAEjX,KAAM,GACdU,MAAOM,IAInB,OAAO0M,GAEXo5B,kBAAkBvuB,GACd,MAAMwuB,EAAY,GACZhT,EAAQxb,EAAKzB,MAAM,KAEzBiwB,EAAUC,WAAajT,EAAM,GAAG0R,UAAU,IAC1CsB,EAAUE,UAAYlT,EAAM,GAC5BgT,EAAUtqB,SAAWsX,EAAM,GAAGrd,cAC9BqwB,EAAUnhB,SAAWmO,EAAM,GAC3BgT,EAAUG,GAAKnT,EAAM,GACrBgT,EAAUd,KAAOlS,EAAM,GAGvBgT,EAAU/rB,KAAO+Y,EAAM,GACvBgT,EAAUI,WAAa,EACvB,IAAK,IAAI1nC,EAAI,EAAGA,EAAIs0B,EAAMzpB,OAAQ7K,GAAK,EACnC,OAAQs0B,EAAMt0B,IACd,IAAK,QACDsnC,EAAU,YAAchT,EAAMt0B,EAAI,GAClC,MACJ,IAAK,QACDsnC,EAAU,YAAchT,EAAMt0B,EAAI,GAClC,MACJ,IAAK,aACDsnC,EAAUI,WAAapT,EAAMt0B,EAAI,GACjC,MACJ,IAAK,UACDsnC,EAAUK,QAAUrT,EAAMt0B,EAAI,GAC9B,MACJ,QACIqyB,EAAOnZ,IACF,sCACGob,EAAMt0B,UAAUs0B,EAAMt0B,EAAI,OAS1C,OANAsnC,EAAUM,QAAU,IAIpBN,EAAU9rB,GAAKkE,KAAKC,SAAS3U,SAAS,IAAI0e,OAAO,EAAG,IAE7C4d,GAEXO,kBAAkBC,GACd,IAAIhvB,EAAO,CACN,eAAcgvB,EAAKP,WACpBO,EAAKN,UACLM,EAAK9qB,SACL8qB,EAAK3hB,SACL2hB,EAAKL,GACLK,EAAKtB,KACL,MACAsB,EAAKvsB,MACP9D,KAAK,KAGP,OADAqB,GAAQ,IACAgvB,EAAKvsB,MACb,IAAK,QACL,IAAK,QACL,IAAK,QACGusB,EAAKC,gBAAgB,aACdD,EAAKC,gBAAgB,cAC5BjvB,GAAQ,QACRA,GAAQ,IACRA,GAAQgvB,EAAK,YACbhvB,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQgvB,EAAK,YACbhvB,GAAQ,KAchB,OAVIgvB,EAAKC,gBAAgB,aACrBjvB,GAAQ,UACRA,GAAQ,IACRA,GAAQgvB,EAAKH,QACb7uB,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQgvB,EAAKC,gBAAgB,cAAgBD,EAAKJ,WAAa,IAExD5uB,GAEXkvB,UAAUC,GAIN,MAAMh6B,EAAO,IAAIiqB,IACXgQ,EAAQD,EAAK5wB,MAAM,QAEzB,IAAK,IAAIrX,EAAI,EAAGA,EAAIkoC,EAAMr9B,OAAQ7K,IAC9B,GAAiC,YAA7BkoC,EAAMloC,GAAGgmC,UAAU,EAAG,GAAkB,CAExC,MAAMlI,EAAOoK,EAAMloC,GAAGqX,MAAM,WAAW,GAAGA,MAAM,KAAK,GAEhDpJ,EAAKpN,IAAIi9B,IACV7vB,EAAK8rB,IAAI+D,EAAM,IAGnB7vB,EAAKpN,IAAIi9B,GAAMtmB,KAAK0wB,EAAMloC,IAIlC,OAAOiO,GAEXk6B,YAAYrvB,GACR,MAAMR,EAAQQ,EAAK4Q,OAAO,IAAIrS,MAAM,KAC9BpJ,EAAO,GAMb,OAJAA,EAAKm6B,GAAK9vB,EAAMiuB,QAChBt4B,EAAKsN,KAAOjD,EAAMiuB,QAClBt4B,EAAKo6B,OAAS/vB,EAEPrK,GAEXq6B,YAAYxvB,GACR,MAAMR,EAAQQ,EAAK4Q,OAAO,GAAGrS,MAAM,KAC7BpJ,EAAO,GAYb,OAVAA,EAAKhN,MAAQqX,EAAMiuB,SACc,IAA7Bt4B,EAAKhN,MAAMiX,QAAQ,KACnBjK,EAAKs6B,UAAY,QAEjBt6B,EAAKs6B,UAAYt6B,EAAKhN,MAAMyoB,OAAOzb,EAAKhN,MAAMiX,QAAQ,KAAO,GAC7DjK,EAAKhN,MAAQgN,EAAKhN,MAAMyoB,OAAO,EAAGzb,EAAKhN,MAAMiX,QAAQ,OAEzDjK,EAAKu6B,IAAMlwB,EAAMiuB,QACjBt4B,EAAKo6B,OAAS/vB,EAEPrK,GAEX43B,SAAS4C,EAAUC,EAAQC,GACvB,IAAIT,EAAQO,EAASpxB,MAAM,QAE3B,IAAK,IAAIrX,EAAI,EAAGA,EAAIkoC,EAAMr9B,OAAQ7K,IAC9B,GAAIkoC,EAAMloC,GAAGgmC,UAAU,EAAG0C,EAAO79B,UAAY69B,EACzC,OAAOR,EAAMloC,GAGrB,IAAK2oC,EACD,OAAO,EAIXT,EAAQS,EAAYtxB,MAAM,QAC1B,IAAK,IAAI7J,EAAI,EAAGA,EAAI06B,EAAMr9B,OAAQ2C,IAC9B,GAAI06B,EAAM16B,GAAGw4B,UAAU,EAAG0C,EAAO79B,UAAY69B,EACzC,OAAOR,EAAM16B,GAIrB,OAAO,GAEXo7B,UAAUH,EAAUC,EAAQC,GACxB,IAAIT,EAAQO,EAASpxB,MAAM,QAC3B,MAAMwxB,EAAU,GAEhB,IAAK,IAAI7oC,EAAI,EAAGA,EAAIkoC,EAAMr9B,OAAQ7K,IAC1BkoC,EAAMloC,GAAGgmC,UAAU,EAAG0C,EAAO79B,UAAY69B,GACzCG,EAAQrxB,KAAK0wB,EAAMloC,IAG3B,GAAI6oC,EAAQh+B,SAAW89B,EACnB,OAAOE,EAIXX,EAAQS,EAAYtxB,MAAM,QAC1B,IAAK,IAAI7J,EAAI,EAAGA,EAAI06B,EAAMr9B,OAAQ2C,IAC1B06B,EAAM16B,GAAGw4B,UAAU,EAAG0C,EAAO79B,UAAY69B,GACzCG,EAAQrxB,KAAK0wB,EAAM16B,IAI3B,OAAOq7B,GAEXC,kBAAkBhwB,GAKd,GAAmC,IAA/BA,EAAKZ,QAAQ,cAEbY,EAAQ,KAAIA,OACT,GAA8B,iBAA1BA,EAAKktB,UAAU,EAAG,IAMzB,OALA3T,EAAOnZ,IACH,kEAEJmZ,EAAOnZ,IAAIJ,GAEJ,KAE6B,SAApCA,EAAKktB,UAAUltB,EAAKjO,OAAS,KAE7BiO,EAAOA,EAAKktB,UAAU,EAAGltB,EAAKjO,OAAS,IAE3C,MAAMy8B,EAAY,GACZhT,EAAQxb,EAAKzB,MAAM,KAEzB,GAAiB,QAAbid,EAAM,GAIN,OAHAjC,EAAOnZ,IAAI,uCACXmZ,EAAOnZ,IAAIJ,GAEJ,KAEXwuB,EAAUC,WAAajT,EAAM,GAAG0R,UAAU,IAC1CsB,EAAUE,UAAYlT,EAAM,GAC5BgT,EAAUtqB,SAAWsX,EAAM,GAAGrd,cAC9BqwB,EAAUnhB,SAAWmO,EAAM,GAC3BgT,EAAUG,GAAKnT,EAAM,GACrBgT,EAAUd,KAAOlS,EAAM,GAGvBgT,EAAU/rB,KAAO+Y,EAAM,GAEvBgT,EAAUI,WAAa,IACvB,IAAK,IAAI1nC,EAAI,EAAGA,EAAIs0B,EAAMzpB,OAAQ7K,GAAK,EACnC,OAAQs0B,EAAMt0B,IACd,IAAK,QACDsnC,EAAU,YAAchT,EAAMt0B,EAAI,GAClC,MACJ,IAAK,QACDsnC,EAAU,YAAchT,EAAMt0B,EAAI,GAClC,MACJ,IAAK,aACDsnC,EAAUI,WAAapT,EAAMt0B,EAAI,GACjC,MACJ,IAAK,UACDsnC,EAAUK,QAAUrT,EAAMt0B,EAAI,GAC9B,MACJ,QACIqyB,EAAOnZ,IAAK,oBAAmBob,EAAMt0B,UAAUs0B,EAAMt0B,EAAI,OASjE,OANAsnC,EAAUM,QAAU,IAIpBN,EAAU9rB,GAAKkE,KAAKC,SAAS3U,SAAS,IAAI0e,OAAO,EAAG,IAE7C4d,GAEXyB,oBAAoBjB,GAChB,IAAIhvB,EAAO,eAEXA,GAAQgvB,EAAK5wB,aAAa,cAC1B4B,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,aAC1B4B,GAAQ,IAER,IAAIkE,EAAW8qB,EAAK5wB,aAAa,YAmBjC,OAfIuhB,IAAQuQ,aAA0C,WAA3BhsB,EAAS/F,gBAChC+F,EAAW,OAGflE,GAAQkE,EACRlE,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,YAC1B4B,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,MAC1B4B,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,QAC1B4B,GAAQ,IACRA,GAAQ,MACRA,GAAS,IAAGgvB,EAAK5wB,aAAa,QAC9B4B,GAAQ,IACAgvB,EAAK5wB,aAAa,SAC1B,IAAK,QACL,IAAK,QACL,IAAK,QACG4wB,EAAK5wB,aAAa,aACX4wB,EAAK5wB,aAAa,cACzB4B,GAAQ,QACRA,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,YAC1B4B,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,YAC1B4B,GAAQ,KAchB,MAV+B,QAA3BkE,EAAS/F,gBACT6B,GAAQ,UACRA,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,WAC1B4B,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQgvB,EAAK5wB,aAAa,eAAiB,IAEjC4B,EAAF,QAQZmwB,sBAAsBC,GAClB,MAAMC,EAAWD,EAAWE,MACvBtvB,IAAIuvB,GAAYA,EAAS7tB,IACzB8tB,OAAO,CAACxL,EAAMyL,EAAOzW,IAAUA,EAAM5a,QAAQ4lB,KAAUyL,GACvD1+B,OACC2+B,EACCN,EAAWO,YAAcP,EAAWO,WAAW5+B,QAAW,EAEjE,GAAIs+B,EAAW,GAAmB,IAAdK,EAEhB,OAEJ,IAAIE,EAAc,KAElB,GAAiB,IAAbP,EACAO,EAAcR,EAAWE,MAAM,GAAG5tB,QAC/B,GAAiB,IAAb2tB,EAAgB,CAEvB,MAAMQ,EACAT,EAAWO,WAAWG,KACpBC,GAA6B,QAApBA,EAAMC,WAEnBH,IACAD,EAAcC,EAASP,MAAM/xB,MAAM,KAAK,SAEzC,GAAI8xB,GAAY,EAAG,CAEtB,MAAMY,EACAb,EAAWO,WAAWG,KACpBC,GAA6B,QAApBA,EAAMC,WAEnBC,IACAL,EAAcK,EAASX,MAAM/xB,MAAM,KAAK,IAIhD,OAAOqyB,GAOXM,aAAY,IACDC,IAAWC,UAAU,EAAG,YAYnCC,iBAAiBC,EAAOtM,EAAMuM,GAC1B,IAAK,IAAIrqC,EAAI,EAAGA,EAAIoqC,EAAMhB,MAAMv+B,SAAU7K,EAAG,CACzC,MAAMsqC,EAAWF,EAAMhB,MAAMppC,GAE7B,GAAIsqC,EAAS9uB,KAAOsiB,GACbwM,EAAS14B,YAAcy4B,EAC1B,OAAOC,EAASrpC,QAa5BspC,gBAAgBC,GACLA,EACFpB,MACA/xB,MAAM,KACNyC,IAAI2wB,GAAW7d,SAAS6d,EAAS,KAS1CC,SAAQ,CAACC,EAAKpvB,IACHovB,EAAIrE,MAAMsD,KAAKxpC,GAAKA,EAAEmb,OAASA,GAO1CqvB,SAASD,GACL,MAAME,EACAF,EAAItzB,MAAM,MAAMiyB,OAAOxwB,GAAQA,EAAKgyB,WAAW,iBAErD,GAAID,EAAWhgC,OAAS,EACpB,OAAOggC,EAAW,GAAGnhB,OAAO,eAAe7e,SAWnDkgC,YAAYpE,EAAOqE,GACf,IAAKrE,IAAUqE,EACX,OAGJ,MAAMC,EAAuBtE,EAAMuE,IAC9B5B,OAAO4B,GAAOA,EAAIC,OAASD,EAAIC,MAAMl0B,gBAAkB+zB,EAAU/zB,eACjE6C,IAAIoxB,GAAOA,EAAIE,SAEpB,GAAIH,EAAsB,CAGtB,MAAMI,EACA1E,EAAM2E,SACPtgC,WACAqM,MAAM,KACNyC,IAAIhY,GAAK8qB,SAAS9qB,EAAG,KAE1B,IAAK,MAAMsmC,KAAM6C,EAAqBM,UAAW,CAC7C,MAAMC,EAAeH,EAAanzB,QAAQkwB,GAE1CiD,EAAa9yB,OAAOizB,EAAc,GAClCH,EAAaI,QAAQrD,GAEzBzB,EAAM2E,SAAWD,EAAa5zB,KAAK,OAc3Ci0B,WAAWtB,EAAOY,EAAWW,GAAc,GACvC,IAAKvB,IAAUY,EACX,OAGJ,MAAMY,EAAU,GAChB,IAAIC,EAAY,GAChB,MAAMC,EAAqBd,EAAU/zB,gBAAkB80B,IAAcC,MAAQL,EAE7E,IAAK,MAAMT,KAAOd,EAAMc,IAChBA,EAAIC,OACDD,EAAIC,MAAMl0B,gBAAkB+zB,EAAU/zB,gBACrC60B,EACAF,EAAQp0B,KAAK0zB,EAAIE,SAEjBS,EAAUr0B,KAAK0zB,EAAIE,UAY/B,GANIU,IACAD,EAAYzB,EAAM6B,KACb3C,OAAO4C,GAAQN,EAAQ1zB,QAAQg0B,EAAKd,UAAY,GAAKc,EAAKC,OAAOC,SAAS,wBAC1EtyB,IAAIoyB,GAAQA,EAAKd,UAGtBS,EAAUhhC,OAAS,EAAG,CAGtB,MAAMwhC,EAAUR,EAAU/xB,IAAIoyB,GAAS,OAAMA,GACvCI,EAASlC,EAAM6B,KAAK3C,OACtB4C,IAA0C,IAAlCG,EAAQn0B,QAAQg0B,EAAKC,SAEjCN,EAAUr0B,QAAQ80B,EAAOxyB,IAAIoyB,GAAQA,EAAKd,UAK1C,MAIMmB,EAJSnC,EAAMkB,SAChBtgC,WACAqM,MAAM,KACNyC,IAAI+T,QACcyb,OAAOlB,IAAiC,IAA3ByD,EAAU3zB,QAAQkwB,IAE/B,IAAnBmE,EAAQ1hC,QAERu/B,EAAM5D,KAAO,EACb4D,EAAM7B,UAAYiE,IAAeC,SACjCrC,EAAMkB,SAAW,KAEjBlB,EAAMkB,SAAWiB,EAAQ90B,KAAK,KAGlC2yB,EAAMc,IAAMd,EAAMc,IAAI5B,OAClB4C,IAA2C,IAAnCK,EAAQr0B,QAAQg0B,EAAKd,UACjChB,EAAM6B,KAAO7B,EAAM6B,KAAK3C,OACpB4C,IAA2C,IAAnCK,EAAQr0B,QAAQg0B,EAAKd,UAC7BhB,EAAMsC,SACNtC,EAAMsC,OAAStC,EAAMsC,OAAOpD,OACxB4C,IAA2C,IAAnCK,EAAQr0B,QAAQg0B,EAAKd,cAMlC9F,Q,uDC3oBf7lC,EAAOD,QAtBgB,CAInBitC,SAAU,WAKVE,SAAU,WAKVC,SAAU,WAKVC,SAAU,a,4lBCGd,MAAMxa,EAASF,oBAAU6E,GAKrByB,IAAQqU,eACR/V,EAAQ,KAGZ,MAAMoB,EAAe,IAAIC,IASnB2U,EAAsB,CACxBC,MAAO,CACHC,OAAQ,CACJC,MAAO,IACPC,IAAK,IACLpe,IAAK,KAETqe,MAAO,CACHF,MAAO,KACPC,IAAK,KACLpe,IAAK,OAOjB,IAAIse,EAAsB,UAEtBC,GAAqB,EAGrBC,GAAY,EAGZC,GAAa,EAGbC,GAAY,EAGZC,GAAa,EAGbC,EAAS,KAEb,MAAMC,EAA0Bj+B,SAASwF,cAAc,SACjD04B,OAC6C,IAAtCD,EAAwBE,UAErC,IACIC,EADAC,EAAmB,GAMvB,SAASC,KA0FT,SAASC,EAAyBC,EAAIjU,GAClC,MAAMkU,EACAC,QAAQnU,IAAWA,EAAOoU,iBAAiBzjC,OAAS,EACpD0jC,EACAF,QAAQnU,IAAWA,EAAOsU,iBAAiB3jC,OAAS,EACpD4jC,EAAqB,IAEE,IAAzBN,EAAGj2B,QAAQ,WACXu2B,EAAmBzB,MAAQuB,IAEF,IAAzBJ,EAAGj2B,QAAQ,WACXu2B,EAAmBC,MAAQN,GAG/BjW,EAAa8D,KAAK0S,IAAU5N,oBAAqB0N,GA4CrD,SAASG,EAA0BC,GAC/B,MAAMC,EACAD,EAAWvF,OAAOhpC,GAAgB,eAAXA,EAAEyuC,MAAuBlkC,OAChDmkC,EACAH,EAAWvF,OAAOhpC,GAAgB,gBAAXA,EAAEyuC,MAAwBlkC,OACjDokC,EACAJ,EAAWvF,OAAOhpC,GAAgB,eAAXA,EAAEyuC,MAAuBlkC,OAChDqkC,EACAL,EAAWvF,OAAOhpC,GAAgB,gBAAXA,EAAEyuC,MAAwBlkC,OAEvDgkC,EAAWnrB,QAAQyrB,IACf,MAAM59B,EAAa,CACf,yBAA4Bu9B,EAC5B,0BAA6BE,EAC7B,yBAA4BC,EAC5B,0BAA6BC,EAC7B,UAAaC,EAAOC,SACpB,gBAAmBD,EAAOE,QAC1B,YAAeF,EAAOJ,KACtB,aAAgBI,EAAOG,OAG3BvX,IAAWuI,cAAc0C,IAAkBzxB,KAenD,SAASg+B,EAAmBC,IAzE5B,SAAsCC,GAClC,OAAIA,EAAW5kC,SAAWmjC,EAAiBnjC,QAOvC4kC,EAAW31B,IAAI41B,GAAuB95B,OAAO6B,KAAK,MAC1Cu2B,EACCl0B,IAAI41B,GAAuB95B,OAAO6B,KAAK,IAQpD,SAASi4B,EAAsBl2B,GAC3B,OAAO0H,KAAKwL,UAAU,CAClBqiB,KAAMv1B,EAAKu1B,KACXK,SAAU51B,EAAK41B,SACfC,QAAS71B,EAAK61B,QACdC,MAAO91B,EAAK81B,MACZK,OAAQn2B,EAAKm2B,WAkDjBC,CAA6BJ,KAYjCxB,EAX8BwB,EAWKpb,MAAM,GACzC/B,EAAO7Y,KAAK,qCAAsCw0B,GAElDY,EAA0BZ,GAG1B7V,EAAa8D,KAAK0S,IAAU9M,wBAAyBmM,GAErD7V,EAAa8D,KAAK0S,IAAU/M,oBAAqBoM,IAMrD,MAAM6B,UAAiBC,IAInBvlC,cACIwlC,MAAM5X,GAYVjZ,KAAKzD,EAAU,IAAI,MA+kBQu0B,EA9kBW,kBAAvBv0B,EAAQ+xB,aACfA,EAAa/xB,EAAQ+xB,WACrBnb,EAAO7Y,KAAM,gBAAeg0B,IAEC,kBAAtB/xB,EAAQgyB,YACfA,EAAYhyB,EAAQgyB,UACpBpb,EAAO7Y,KAAM,eAAci0B,IAEE,kBAAtBhyB,EAAQ8xB,YACfA,EAAY9xB,EAAQ8xB,UACpBlb,EAAO7Y,KAAM,eAAc+zB,IAEG,kBAAvB9xB,EAAQiyB,aACfA,EAAajyB,EAAQiyB,WACrBrb,EAAO7Y,KAAM,gBAAek0B,IAEY,kBAAxC,UAAOjyB,EAAQw0B,oBAAf,aAAO,EAAsBtC,UAC7BA,EAASlyB,EAAQw0B,aAAatC,OAC9Btb,EAAO7Y,KAAM,WAAUm0B,IAG3B/tC,OAAOswC,cAAcnC,GACrBA,OAA4Bl5B,EAExB4jB,IAAQC,iBACRpkB,KAAK67B,sBAAwBC,kBAE7B97B,KAAK+7B,uBAAoBx7B,EAEzBP,KAAKg8B,YAAc,UAAS,GAAE90B,IAK1B,MACkB,iBAAPA,EACDA,EACA8pB,IAAQC,mBAAmB/pB,IAEzClH,KAAKi8B,WAAa,EAAG/0B,QAASA,IAE9BlH,KAAK67B,sBAAwBC,kBAE7B97B,KAAK+7B,mBAmiBcL,EAliBS,CAACntB,EAASqX,KAC1BrX,IACAA,EAAQ2tB,UAAYtW,IAiiBjC,SAASrX,EAASqX,GAErB,MAAMuW,EAAMT,EAAsBjd,MAAM2d,EAAUj7B,WA4BlD,OA1BIykB,GACOwW,EAASC,wBAAwB,WACjCzW,EAAOoU,gBACPpU,EAAOoU,iBAAiBzjC,QAGxByiC,GACPzqB,EAAQirB,UAAU4C,EAASE,wBACtBC,OAAM,SAASC,GACZ,MAAMrsB,EACA,IAAIia,IAAgBoS,EAAI,KAAM,CAAE,gBAEtCC,IAAqBC,8BAA8B,CAC/CC,QAAS38B,KACTwP,OAAQW,IAGZ4N,EAAO5Y,KACH,sGAGAoJ,EACA4B,MAITgsB,IA3jBHn8B,KAAKg8B,YAAc,EAAG90B,QAASA,EAC/BlH,KAAKi8B,WAAa,EAAG/0B,QAASA,GAGlClH,KAAK48B,cAAgBzY,IAAQ0Y,mBAAqB1Y,IAAQC,gBACpD,CAAE0Y,SAAU,CACV,CAAEC,yBAA0B,KAC5B,CAAEC,yBAAyB,KAE7B,GAENC,IAAeryB,KAAKzD,GAEhBnH,KAAKk9B,yBACLl9B,KAAKm9B,iBAAiBC,IAClB1D,EAAmB0D,EAAGtd,MAAM,GAE5B/B,EAAO9Y,MAAM,sBAAuBy0B,GACpCY,EAA0BZ,GAE1B7V,EAAa8D,KACT0S,IAAU7M,sBACVkM,GAEAvV,IAAQkZ,4BACRC,UAAUC,aAAaC,iBACnB,eACA,IAAMx9B,KAAKm9B,iBAAiBxD,IAIhCF,EAA4BnuC,OAAOmyC,YAC/B,IAAMz9B,KAAKm9B,iBAAiBxD,GA7WP,OAwXzCwD,iBAAiB3xB,GACb8xB,UAAUC,aAAaJ,mBAClBO,KAAKC,IACF1C,EAAmB0C,GACnBnyB,EAASmyB,KAEZpB,MAAMv3B,IACH+Y,EAAO5Y,KAAM,iCAAgCH,GAC7Ci2B,EAAmB,IACnBzvB,EAAS,MAarBoyB,cAAcC,EAAWtT,EAAc,GAAI3c,EAAU,GACjD,OAAO,IAAIkwB,QAAQ,CAACC,EAASC,KACzB,IAAIC,EAAYC,GAAiB,EAEV,iBAAZtwB,IAAyB8L,MAAM9L,IAAYA,EAAU,IAC5DqwB,EAAa1zB,WAAW,KACpB2zB,GAAiB,EACjBD,OAAa19B,EACby9B,EAAO,IAAI5T,IAAgB+T,aAC5BvwB,IAGP0vB,UAAUC,aAAaa,aAAa7T,GAC/BmT,KAAK9X,IACF7H,EAAOnZ,IAAI,sBACXg1B,EAAyBiE,EAAWjY,GAC/BsY,SACyB,IAAfD,GACPxwB,aAAawwB,GAEjBF,EAAQnY,MAGf2W,MAAMv3B,IACH+Y,EAAO5Y,KAAM,wCAAuCH,KAAS4H,KAAKwL,UAAUmS,MAC5E,MAAM8T,EAAa,IAAIjU,IAAgBplB,EAAOulB,EAAasT,GAEtDK,SACyB,IAAfD,GACPxwB,aAAawwB,GAEjBD,EAAOh5B,IAGPq5B,EAAWpyC,OAASkyC,qBACpBvE,EAAyBiE,OAAWt9B,OAmBxD+9B,mBACI,OAAKrB,IAAesB,cAIb,IAAIT,QAAQ,CAACC,EAASC,KACzBf,IAAeuB,aACX5Y,IACImY,EAAQnY,IAEZ5gB,IACIg5B,EAAOh5B,OATR84B,QAAQE,OAAO,IAAI3mC,MAAM,sCAyBxConC,kBAAkBC,EAAmB,GAAI9Y,GACrC,MAAM+Y,EAAiB,GAEjBC,EAAuBF,EAAiB5G,SAAS,SACjDgC,EACAlU,GAAUA,EAAOoU,iBAAiBzjC,OAAS,EAE7CqoC,IAAyB9E,GACzB6E,EAAez7B,KAAK,SAGxB,MAAM27B,EAAuBH,EAAiB5G,SAAS,SACjDmC,EACArU,GAAUA,EAAOsU,iBAAiB3jC,OAAS,EAMjD,OAJIsoC,IAAyB5E,GACzB0E,EAAez7B,KAAK,SAGjBy7B,EAqBXG,+BAA+B33B,GAC3B,MAAM,QACFyG,GAEAzG,EADG43B,EAFP,EAGI53B,EAHJ,aAKM63B,EAAuB,GAYvBC,EAA4B,WAK9B,MAFwC,KAFtBF,EAAapB,SAAW,IAE1B/5B,QAAQ,YAGpB,OAAOk6B,QAAQC,UAGnB,MAAM,2BACFmB,GACAH,EAIJ,GAAIG,EAA4B,CAC5B,MAAMC,EACAzF,GAAoBA,EAAiBpE,KAAKuF,GACxB,eAAhBA,EAAOJ,OACCI,EAAOC,WAAaoE,GACrBrE,EAAOG,QAAUkE,IAEhC,IAAKC,EACD,OAAOrB,QAAQE,OAAO,IAAI5T,IACtB,CAAEn+B,KAAM,+BACR,GACA,CAAEizC,KAIV,MAAMR,EAAmB,CAAE,SACrBnU,EAAc,CAChBmO,MAAO,CACHoC,SAAUqE,EAAerE,WAMjC,OAAO96B,KAAK49B,cAAcc,EAAkBnU,EAAa3c,GACpD8vB,KAAK9X,IACK,CACHwZ,WAAY,SACZxZ,YAKhB,OAAO5lB,KAAKs+B,oBACdpxC,KAAK8S,MAqDDq/B,EAA6B,WAC/B,MACMC,GADYP,EAAapB,SAAW,CAAE,QAAS,UACX3I,OAAO6F,GAAqB,UAAXA,GAAiC,UAAXA,GAEjF,IAAKyE,EAAwB/oC,OACzB,OAAOunC,QAAQC,UAGnB,MAAMxT,EAjkBlB,SAAwBsP,EAAK,GAAI1yB,EAAU,IAGvC,MAAMojB,EAAcgV,IAAUp4B,EAAQojB,aAAekO,GAErD,GAAIoB,EAAGj2B,QAAQ,UAAY,EAAG,CAE1B,GAAI47B,IAAYr4B,EAAQs4B,YAAa,CACjC,MAAMjzC,EAAIgzC,IAAYr4B,EAAQs4B,YAE9BlV,EAAYmO,MAAMC,OAAS,CAAEC,MAAOpsC,EAAEmsC,QACtCpO,EAAYmO,MAAMI,MAAQ,CAAEF,MAAOpsC,EAAEssC,OAuBzC,GApBKvO,EAAYmO,QACbnO,EAAYmO,MAAQ,IAOpBvU,IAAQub,kBACJnV,EAAYmO,MAAMC,QAAUpO,EAAYmO,MAAMC,OAAOC,MACrDrO,EAAYmO,MAAMC,OAAS,CAAEC,MAAOrO,EAAYmO,MAAMC,OAAOC,OAE7D7a,EAAO5Y,KAAK,8DAEZolB,EAAYmO,MAAMI,OAASvO,EAAYmO,MAAMI,MAAMF,MACnDrO,EAAYmO,MAAMI,MAAQ,CAAEF,MAAOrO,EAAYmO,MAAMI,MAAMF,OAE3D7a,EAAO5Y,KAAK,8DAGhBgC,EAAQw4B,eACRpV,EAAYmO,MAAMoC,SAAW3zB,EAAQw4B,mBAClC,CACH,MAAMC,EAAaz4B,EAAQy4B,YAAcC,IAAiBC,KAE1DvV,EAAYmO,MAAMkH,WAAaA,QAGnCrV,EAAYmO,OAAQ,EAsBxB,OAnBImB,EAAGj2B,QAAQ,UAAY,GAClB2mB,EAAY6P,OAAsC,kBAAtB7P,EAAY6P,QACzC7P,EAAY6P,MAAQ,IAGxB7P,EAAY6P,MAAQ,CAChB2F,iBAAkB3G,IAAeH,EACjC6B,SAAU3zB,EAAQ64B,YAClBC,kBAAmB/G,IAAeD,EAClCiH,kBAAmB/G,IAAcF,GAGjCI,GACAjtC,OAAO+zC,OAAO5V,EAAY6P,MAAO,CAAEgG,aAAc,KAGrD7V,EAAY6P,OAAQ,EAGjB7P,EAigBqB8V,CAAef,EAAyBP,GAI5D,OAFAhhB,EAAO7Y,KAAK,0BAA2B0H,KAAKwL,UAAUmS,IAE/CvqB,KAAK49B,cAAc0B,EAAyB/U,EAAa3c,IAClE1gB,KAAK8S,MA0CP,OAAOi/B,IACFvB,MAlGiC,SAAS4C,GAC3C,IAAKA,EACD,OAGJ,MAAM,OAAE1a,EAAF,SAAU2a,EAAV,WAAoBnB,GAAekB,EAEnCE,EAAqB5a,EAAOoU,iBAElC,GAAIwG,EAAmBjqC,OAAQ,CAC3B,MAAMkqC,EAAqB,IAAIC,YAAYF,GAE3CxB,EAAqB97B,KAAK,CACtB0iB,OAAQ6a,EACRF,WACAnB,aACAuB,MAAOF,EAAmBzG,iBAAiB,KAInD,MAAM4G,EAAqBhb,EAAOsU,iBAElC,GAAI0G,EAAmBrqC,OAAQ,CAC3B,MAAMsqC,EAAqB,IAAIH,YAAYE,GAE3C5B,EAAqB97B,KAAK,CACtB0iB,OAAQib,EACRN,WACAnB,aACAuB,MAAOE,EAAmB3G,iBAAiB,GAC3C4G,UAAWC,IAAUC,cAqE5BtD,KAAK2B,GACL3B,MAlC6B,SAASuD,GACvC,IAAKA,EACD,OAGJ,MAAMC,EAAcD,EAASjH,iBAE7B,GAAIkH,EAAY3qC,OAAQ,CACpB,MAAM4qC,EAAc,IAAIT,YAAYQ,GAEpClC,EAAqB97B,KAAK,CACtB0iB,OAAQub,EACRR,MAAOQ,EAAYnH,iBAAiB,GACpCoH,QAASrC,EAAaqC,UAI9B,MAAMC,EAAcJ,EAAS/G,iBAE7B,GAAImH,EAAY9qC,OAAQ,CACpB,MAAM+qC,EAAc,IAAIZ,YAAYW,GAEpCrC,EAAqB97B,KAAK,CACtB0iB,OAAQ0b,EACRX,MAAOW,EAAYpH,iBAAiB,GACpC4G,UAAWC,IAAUQ,OACrBH,QAASrC,EAAaqC,cAS7B1D,KAAK,IAAMsB,GACXzC,MAAMv3B,IACHg6B,EAAqB5vB,QAAQ,EAAGwW,aAC5B5lB,KAAKwhC,gBAAgB5b,KAGlBkY,QAAQE,OAAOh5B,KAUlCk4B,wBACI,OAAOnD,QACHuD,UAAUC,cACHD,UAAUC,aAAaJ,kBAUtCd,wBAAwBoF,GACpB,MAAsB,WAAfA,GAA0C,gBAAfA,GAC5BlI,EASViI,gBAAgBE,GACPA,IAILA,EAAYC,YAAYvyB,QAAQuxB,IACxBA,EAAMvY,MACNuY,EAAMvY,SAKVsZ,EAAYtZ,MACZsZ,EAAYtZ,OAMZsZ,EAAYE,SACZF,EAAYE,WAQpBC,0BACI,OAAO5E,IAAesB,cAW1BuD,qBAAqBhH,GACjB,OAAK96B,KAAKq8B,wBAAwB,UAK3B/C,EAAwBE,UAAUsB,GACpC4C,KAAK,KACF3E,EAAsB+B,EACtB9B,GAAqB,EAErBjb,EAAOnZ,IAAK,8BAA6Bk2B,GAEzCjX,EAAa8D,KAAK0S,IAAUhN,4BACxByN,KAZDgD,QAAQE,OACX,IAAI3mC,MAAM,gDAoBtBilC,uBACI,OAAOvD,EAQXgJ,oCACI,OAAOrI,EAOXsI,2CACI,OAAOtI,EAAiBuI,KAAKpH,GAAUd,QAAQc,EAAOG,QAO1DkH,4BAA4BrH,GACxB,MAAMN,EAAa,GACb4H,EAAa,CACf,SAAYtH,EAAOC,SACnB,KAAQD,EAAOJ,KACf,MAASI,EAAOG,MAChB,QAAWH,EAAOE,SAKtB,OAFAR,EAAWr3B,KAAKi/B,GAET,CAAE5H,cAWb6H,gBAAgB7X,EAAa8X,GACpB9X,EAAYuS,WACbvS,EAAYuS,SAAW,IAK3BvS,EAAYuS,SACNvS,EAAYuS,SAAS9H,OACnBjpC,IAAMA,EAAEwB,eAAe,+BAE3B80C,GACA9X,EAAYuS,SAAS55B,KAAK,CAAEo/B,2BAA4B,UAKpE,MAAMlG,EAAW,IAAIb,EA2CNa,Q,wDCv6Bf,MAAMjzB,EAAW,GAGXo5B,EAAoBj3C,OAAOowB,QAYjC,MAAM8mB,EAA0Bl3C,OAAOm3C,qBAYvCn3C,OAAOowB,QAlBP,YAAoCgnB,GAChCv5B,EAASiG,QAAQ7K,GAAWA,KAAWm+B,IACvCH,GAAqBA,KAAqBG,IAiB9Cp3C,OAAOm3C,qBAPP,SAAuC5W,GACnC1iB,EAASiG,QAAQ7K,GAAWA,EAAQ,KAAM,KAAM,KAAM,KAAMsnB,EAAMrc,SAClEgzB,GAA2BA,EAAwB3W,IAOvD,MAAM4Q,EAAuB,CAKzB1uB,WAAWxJ,GACP4E,EAASjG,KAAKqB,IAOlBo+B,iBAAiB39B,GACb,MAAM49B,EAAat3C,OAAOowB,QAErBknB,GAGLA,EAAW,KAAM,KAAM,KAAM,KAAM59B,IAOvC03B,8BAA8B13B,GAC1B,MAAM49B,EAAat3C,OAAOm3C,qBAErBG,GAGLA,EAAW59B,KAKnB7Z,EAAOD,QAAUuxC,G,8BC9EjB,0LAoBA,MAAM1e,EAASF,oBAAU6E,GAMzB,IAAImgB,EAA0B,EAO1BC,EAAoB,EAiBxB,SAASC,EAAmBC,EAAsB,IAC9C,OAAOA,EAAoBx9B,IAAIy9B,IAC3B,MAAM,SACF1C,EADE,WAEFnB,EAFE,OAGFxZ,EAHE,MAIF+a,EAJE,UAKFG,EALE,QAMFM,GACA6B,GAEE,SAAEnI,EAAF,WAAY8E,GAAee,EAAMuC,cAOvC,OAFAJ,EAAoBK,YAAqBL,GAElC,IAAIM,IAAgB,CACvBtI,WACA8E,aACAvP,UAAWsQ,EAAMlG,KACjB4I,MAAOP,EACPvC,WACAnB,aACAxZ,SACA+a,QACAG,UAAWA,GAAa,KACxBM,cAQG,MAAMkC,UAAY9H,IAM7BvlC,YAAY2wB,EAAYzf,EAAU,IAC9Bs0B,QACAz7B,KAAK4mB,WAAaA,EAMlB5mB,KAAKujC,gBAAkB,IAAI3f,IAE3B5jB,KAAKwjC,YAAc,GAEnBxjC,KAAKmH,QAAUA,EAKfnH,KAAKyjC,SAAW,KAUhBzjC,KAAK0jC,YAASnjC,EAQdP,KAAK2jC,gBAAkB,KASvB3jC,KAAK4jC,qBAAkBrjC,EAQvBP,KAAK6jC,mBAAqB,KAG1B7jC,KAAK8jC,qBAAuB9jC,KAAK+jC,gBAAgB72C,KAAK8S,MAEtDA,KAAKgkC,qBAAuBhkC,KAAKgkC,qBAAqB92C,KAAK8S,MAC3DA,KAAKikC,iCACCjkC,KAAKikC,iCAAiC/2C,KAAK8S,MAGjDA,KAAKkkC,WAAanD,IAAUoD,KAIxB5I,IAASc,wBAAwB,YACjCd,IAAS6I,YACL/J,IAAUhN,4BACVrtB,KAAKikC,kCAGT1I,IAAS6I,YACL/J,IAAU/M,oBACVttB,KAAKgkC,uBAUjBK,UACI9I,IAASpV,eAAekU,IAAUhN,4BAA6BrtB,KAAKikC,kCACpE1I,IAASpV,eAAekU,IAAU/M,oBAAqBttB,KAAKgkC,sBAExDhkC,KAAKskC,sBACLtkC,KAAKmmB,eACDkU,IAAU/N,kBACVtsB,KAAKskC,sBAYjB,yBAAyBC,GACrB,OAAOxB,EAAmBwB,GAY9B,sCAAsCp9B,GAClC,OAAOo0B,IAASuD,+BAA+B33B,GAC1Cu2B,KAAK6G,GAAcxB,EAAmBwB,IAY/CC,wBAAwBnf,EAAgBof,GACpCzkC,KAAKyjC,SAAW,IAAIiB,IAAcrf,EAAgBof,EAAOzkC,KAAK6jB,cAE9D7jB,KAAKskC,qBAAuB,KACxB,MAAMK,EAAW,CAAC3/B,EAAO4/B,EAASj4C,KAC9B8vC,IAAqBkG,iBAAiB39B,GACtC+Y,EAAO/Y,MAAO,eAAc4/B,KAAWh4B,KAAKwL,UAAUzrB,uBAA4BqY,IAKtF,GAAIhF,KAAK6kC,0BACL,IACI7kC,KAAKyjC,SAASqB,uCAAuC9kC,KAAK6kC,2BAC5D,MAAO7/B,GACL2/B,EAAS3/B,EAAO,2BAA4BhF,KAAK6kC,2BAGzD,GAAI7kC,KAAK6jC,mBACL,IACI7jC,KAAKyjC,SAASsB,6BAA6B/kC,KAAK6jC,oBAClD,MAAO7+B,GACL2/B,EAAS3/B,EAAO,gCAAiChF,KAAKglC,mBAG9D,QAAoC,IAAzBhlC,KAAK4jC,gBACZ,IACI5jC,KAAKyjC,SAASwB,mCAAmCjlC,KAAK4jC,iBACxD,MAAO5+B,GACL2/B,EAAS3/B,EAAO,0BAA2BhF,KAAK4jC,iBAGxD,QAA2B,IAAhB5jC,KAAK0jC,SAA2C,IAAjB1jC,KAAK0jC,OAC3C,IACI1jC,KAAKyjC,SAASyB,oBAAoBllC,KAAK0jC,QACzC,MAAO1+B,GACL2/B,EAAS3/B,EAAO,oBAAqBhF,KAAK0jC,QAGlD,IACI1jC,KAAKyjC,SAAS0B,qBAAqBnlC,KAAKkkC,YAC1C,MAAOl/B,GACL2/B,EAAS3/B,EAAO,mBAAoBhF,KAAKkkC,YAG7ClkC,KAAKmmB,eAAekU,IAAU/N,kBAAmBtsB,KAAKskC,sBACtDtkC,KAAKskC,qBAAuB,MAEhCtkC,KAAKokC,YAAY/J,IAAU/N,kBAAmBtsB,KAAKskC,sBAGnDtkC,KAAKokC,YAAY/J,IAAU7N,uBAAwBxsB,KAAK8jC,sBAW5DE,uBACIhkC,KAAKikC,iCAAiC1I,IAASe,wBAQnDyH,gBAAgBqB,EAAiB,IAC7B,MAAMC,EAAoBrlC,KAAK2jC,iBAAmB,GAClD,IAAI2B,EAAwB,GACxBC,EAAyB,GAE7BvlC,KAAK2jC,gBAAkByB,EAEvBE,EAAwBD,EAAkBrQ,OACtC9tB,IAAOlH,KAAKwlC,UAAUt+B,IAE1Bq+B,EAAyBH,EAAepQ,OACpC9tB,IAAyC,IAAnCm+B,EAAkBzhC,QAAQsD,IAEpClH,KAAK4mB,WAAW/C,aAAa8D,KACzBX,2BACAse,EACAC,GAORE,cACQzlC,KAAKyjC,WAODzjC,KAAKyjC,UAAmC,cAAvBzjC,KAAKyjC,SAAS52C,MAC/BmT,KAAKyjC,SAAShnB,QAGlBzc,KAAKyjC,SAAW,MAUxBiC,+BAA+Bnb,GAC3BvqB,KAAK6kC,0BAA4Bta,EAE7BvqB,KAAKyjC,UAAYzjC,KAAKyjC,SAASkC,UAC/B3lC,KAAKyjC,SAASqB,uCAAuCva,GAa7Dqb,2BAA2BC,GACvB7lC,KAAK4jC,gBAAkBiC,EAEnB7lC,KAAKyjC,UAAYzjC,KAAKyjC,SAASkC,UAC/B3lC,KAAKyjC,SAASwB,mCAAmCY,GAWzDC,aAAahF,GACL9gC,KAAKkkC,aAAepD,IACpB9gC,KAAKkkC,WAAapD,EAEd9gC,KAAKyjC,UAAYzjC,KAAKyjC,SAASkC,UAC/B3lC,KAAKyjC,SAAS0B,qBAAqBrE,IAgB/CiF,gBAAgBC,GACZhmC,KAAK6jC,mBAAqBmC,EAEtBhmC,KAAKyjC,UAAYzjC,KAAKyjC,SAASkC,UAC/B3lC,KAAKyjC,SAASsB,6BAA6BiB,GASnD,mBAAmBC,EAAWlgB,GAC1BwV,IAAS6I,YAAY6B,EAAWlgB,GAQpC,sBAAsBkgB,EAAWlgB,GAC7BwV,IAASpV,eAAe8f,EAAWlgB,GAOvC,YAAY5e,EAAU,IAGlB,OAFAnH,KAAKmH,QAAUA,EAERo0B,IAAS3wB,KAAK5K,KAAKmH,SA4B9B++B,qBAAqBC,EAAWC,EAAW5e,EAAOrgB,GAC9C,MAAMy1B,EAAgBhwB,KAAKsL,MAAMtL,KAAKwL,UAAUmjB,IAASqB,qBAEf,IAA/Bz1B,EAAQk/B,qBACf9K,IAAS6G,gBAAgBxF,EAAez1B,EAAQk/B,oBAEhD5iB,IAAWyB,UAAUohB,uBACjB,CAAED,mBAAoBl/B,EAAQk/B,sBAKlCl/B,EAAQo/B,0BACRxoB,EAAO9Y,MAAM,iDACbmhC,EAAUI,0BAA2B,EACrCJ,EAAUK,oCAAqC,EAC/CL,EAAUM,oCAAqC,IAGtBviB,IAAQC,iBAC7BD,IAAQ0Y,oBAAsB11B,EAAQw/B,mBAG1CP,EAAUQ,aAAe,UAGzBz/B,EAAQ0/B,iBACRT,EAAUU,mBAAqB,SAMnCV,EAAUW,aAAe,aAEzBlE,EAA0BM,YAAqBN,GAE/C,MAAMmE,EACA,IAAIC,IACFjnC,KACA6iC,EACAsD,EACAC,EAAWxJ,EACXpV,EAAOrgB,GAIf,OAFAnH,KAAKujC,gBAAgB9d,IAAIuhB,EAAc9/B,GAAI8/B,GAEpCA,EAYXE,sBAAsBC,GAClB,MAAMjgC,EAAKigC,EAAwBjgC,GAEnC,QAAIlH,KAAKujC,gBAAgBhb,IAAIrhB,KAEzBlH,KAAKujC,gBAAgBrb,OAAOhhB,IAErB,GAWfkgC,cAAczG,GACV,IAAKA,EACD,MAAM,IAAItpC,MAAM,wCAGpB2I,KAAKwjC,YAAYtgC,KAAKy9B,GAEtBA,EAAM/Z,WAAa5mB,KAAK4mB,WAO5BygB,qBACI,MAAMC,EAAatnC,KAAKunC,eAAeC,KAGvC,OAAOF,EAAW/wC,OAAS+wC,EAAW,QAAK/mC,EAO/CknC,qBACI,MAAMC,EAAa1nC,KAAKunC,eAAeC,KAGvC,OAAOE,EAAWnxC,OAASmxC,EAAW,QAAKnnC,EAO/ConC,qBACI,OAAO3nC,KAAK4mB,WAAWghB,WAS3BL,eAAelX,GACX,IAAIwX,EAAS7nC,KAAKwjC,YAAY1jB,QAO9B,YALkBvf,IAAd8vB,IACAwX,EAASA,EAAO7S,OACZ2L,GAASA,EAAMmH,YAAczX,IAG9BwX,EASXE,gBAAgB1X,GACZ,IAAI2X,EAAe,GAEnB,IAAK,MAAMlgB,KAAO9nB,KAAKujC,gBAAgBhc,SAAU,CAC7C,MAAM0gB,EAAiBngB,EAAIigB,qBAAgBxnC,EAAW8vB,GAElD4X,IACAD,EAAeA,EAAahuC,OAAOiuC,IAI3C,OAAOD,EAQXE,aAAav7C,GACT,MAAMw7C,EAAe,GASrB,OAPAnoC,KAAKunC,eAAeC,KAAiBp4B,QAAQg5B,IAEzCD,EAAajlC,KAAKvW,EAAQy7C,EAAWC,OAASD,EAAWE,YAKtDxK,QAAQyK,IAAIJ,GAQvBK,aAAa77C,GACT,MAAMw7C,EAAe,GAUrB,OARAnoC,KAAKunC,eAAeC,KAAiBxtC,OAAOgG,KAAKunC,eAAeC,MAC3Dp4B,QAAQq5B,IAELN,EAAajlC,KAAKvW,EAAQ87C,EAAWJ,OAASI,EAAWH,YAK1DxK,QAAQyK,IAAIJ,GAOvBO,iBAAiB/H,GACb,MAAMgI,EAAM3oC,KAAKwjC,YAAY5/B,QAAQ+8B,IAExB,IAATgI,GAIJ3oC,KAAKwjC,YAAYv/B,OAAO0kC,EAAK,GAQjC,yBAAyBC,EAAYhjB,GACjC,OAAO2V,IAASQ,kBAAkB6M,EAAYhjB,GAOlD,mBAAmBA,GACf,OAAO2V,IAASS,YAAYpW,GAOhC,kBAAkB+a,GACd,OAAOpF,IAASU,WAAW0E,GAO/B,+BACI,OAAOpF,IAAS2B,wBAUpB,+BAA+BuE,GAC3B,OAAOlG,IAASc,wBAAwBoF,GAW5C,2BACI,OAAOtd,IAAQoa,cAQnB,8BACI,OAAOhD,IAASe,uBAQpB,2CACI,OAAOf,IAASwG,oCAOpB,kDACI,OAAOxG,IAASyG,2CAOpB,mCAAmCnH,GAC/B,OAAOU,IAAS2G,4BAA4BrH,GAUhD,4BAA4BC,GACxB,OAAOS,IAASuG,qBAAqBhH,GAezC,oBAAoBlV,GAChB,OAAO0d,EAAIuF,iBAAiBtN,IAASS,YAAYpW,IAerD,wBAAwBkjB,GACpB,OAAOA,GAAyB,iBAAbA,GACC,YAAbA,EAQX,wBAAwBt9B,GACpB+vB,IAAS4B,iBAAiB3xB,GAQ9B,uBAAuBk2B,GACnBnG,IAASiG,gBAAgBE,GAO7B,iCACI,OAAOnG,IAASsG,0BAMpBkH,qBACQ/oC,KAAKyjC,WACLzjC,KAAKyjC,SAAShnB,QACdzc,KAAKyjC,SAAW,KAEhBzjC,KAAKmmB,eAAekU,IAAU7N,uBAAwBxsB,KAAK8jC,uBAYnEkF,cAAclhB,EAAK0B,EAAMyf,EAAYlf,GACjC,MAAM4W,EAAQ7Y,EAAIohB,eAAe1f,GAE5BmX,IAEOA,EAAMwI,gBAIPxI,EAAM5W,YAAcA,GAC3BhM,EAAO/Y,MACF,GAAE27B,qBAAyB5W,EAAU,KAAO,kBAGrD4W,EAAMqI,cAAcC,EAAYnhB,IAR5B/J,EAAO5Y,KAAM,6CAA4CqkB,IAmBjE4f,mBAAmBC,EAAIvS,GACnB,IAAI92B,KAAKyjC,SAGL,MAAM,IAAIpsC,MAAM,gCAFhB2I,KAAKyjC,SAAS6F,YAAYD,EAAIvS,GAWtCyS,yBAAyBzS,GACjB92B,KAAKyjC,UAAYzjC,KAAKyjC,SAASkC,UAC/B3lC,KAAKyjC,SAAS8F,yBAAyBzS,GAU/C0S,SAAS78C,GACDqT,KAAK0jC,SAAW/2C,IAChBqT,KAAK0jC,OAAS/2C,EACVqT,KAAKyjC,UAAYzjC,KAAKyjC,SAASkC,UAC/B3lC,KAAKyjC,SAASyB,oBAAoBv4C,GAEtCqT,KAAK6jB,aAAa8D,KAAK0S,IAAU1N,oBAAqBhgC,IAU9D64C,UAAUt+B,GACN,OAAQlH,KAAK2jC,iBACN3jC,KAAK2jC,gBAAgB//B,QAAQsD,IAAO,EAW/C+8B,iCAAiCnJ,GAC7B,MAAM2O,EAAoBzpC,KAAK+nC,gBAAgBP,KAE/C,IAAK,MAAM7G,KAAS8I,EAChB9I,EAAM+I,eAAe5O,O,mDCl4BjC3vC,EAAOD,QAjBW,CAIdq2C,OAAQ,SAKRP,QAAS,UAKTmD,KAAM,S,6BCnBV,4nBAQO,MAAMwF,EAAoB,wBAMpBC,EACP,oCAMOC,EACP,wCAKOC,EAAU,cAKVC,EAAY,gBAMZC,EAAoB,wBAKpBC,EACP,kCAMOC,EACP,kCAMO5qC,EAAU,cAMV6qC,EAAoB,0BAKpBC,EAAwB,wBAMxBC,EAAyB,8B,6BC1EtC,8XAGO,MAAMC,EAAsB,gBActB95C,EAA4B,2BAK5B+5C,EAA6B,2BAK7B95C,EAAqB,yBAKrB+5C,EAA0B,yBAM1BC,EAAsB,4BAMtBn7C,EAAiB,wB,6BC5C9B,y9BAOO,MAAMuC,EAA0B,oCAK1B64C,EAAa,uBAKbC,EAAuB,uBAKvBC,EAAuB,uBAKvBC,EAAmB,6BAMnBC,EAAuB,uBAMvBC,EAAoB,wCAMpBC,EAAqB,yCAMrBC,EAA2B,0CAK3Bt4C,EAAqB,+BAKrBC,EAAa,uBAKbC,EAAoB,8BAKpBq4C,EAAa,uBAMbC,EACP,0CAKOC,EAAsB,+BAKtBC,EAAyB,kCAKzBj3C,EAAoB,8BAKpBO,EAAoB,8BAKpB22C,EAA4B,sC,8BCvGzC,kFAWe,SAASC,EAAIlV,GACxB,MAAMrE,EAAQqE,EAAItzB,MAAM,UAExB,IAAK,IAAIrX,EAAI,EAAG6K,EAASy7B,EAAMz7B,OAAQ7K,EAAI6K,EAAQ7K,IAAK,CACpD,IAAI8/C,EAAU,KAAIxZ,EAAMtmC,GAEpBA,IAAM6K,EAAS,IACfi1C,GAAU,QAEdxZ,EAAMtmC,GAAK8/C,EAEf,MAAMvzB,EAAa+Z,EAAMC,QAAR,OAEjBjyB,KAAKgyB,MAAQA,EACbhyB,KAAKsQ,IAAM2H,EAAU+Z,EAAM7uB,KAAK,IAChCnD,KAAKiY,QAAUA,EASnBszB,EAAIj+C,UAAUm+C,SAAU,EAMxBF,EAAIj+C,UAAUo+C,qBAAsB,EAMpCH,EAAIj+C,UAAUq+C,qBAAsB,EAKpCJ,EAAIj+C,UAAUs+C,gBAAkB,WAC5B,MAAMC,EAAa,GAEnB,IAAK,IAAIC,EAAa,EAAGA,EAAa9rC,KAAKgyB,MAAMz7B,OAAQu1C,IAAc,CACnE,MAGM9Z,EAAQ,CACV8Z,aACAC,IAJE/a,IAAQc,SACNd,IAAQO,SAASvxB,KAAKgyB,MAAM8Z,GAAa,WAI7ChX,MAAO,GACPK,WAAY,IAGhB0W,EAAWC,GAAc9Z,EAEzBhB,IAAQsD,UAAUt0B,KAAKgyB,MAAM8Z,GAAa,WAAW18B,QAAQ5K,IACzD,MAAMwnC,EAAWxnC,EAAKktB,UAAU,GAAG3uB,MAAM,KAAK,GAIzCivB,EAAM8C,MAAMkX,KACbha,EAAM8C,MAAMkX,GAAY,CACpBxiB,KAAMwiB,EACNpY,MAAO,KAGf5B,EAAM8C,MAAMkX,GAAUpY,MAAM1wB,KAAKsB,KAErCwsB,IAAQsD,UAAUt0B,KAAKgyB,MAAM8Z,GAAa,iBAAiB18B,QAAQ5K,IAC/D,MAAMynC,EAAMznC,EAAKZ,QAAQ,KACnB4xB,EAAYhxB,EAAK4Q,OAAO,EAAG62B,GAAK72B,OAAO,IACvC0f,EAAQtwB,EAAK4Q,OAAO,GAAKogB,EAAUj/B,QAAQwM,MAAM,KAEnD+xB,EAAMv+B,QACNy7B,EAAMmD,WAAWjyB,KAAK,CAClBsyB,YACAV,YAMhB,OAAO+W,GAQXN,EAAIj+C,UAAU4+C,aAAe,SAAS1iB,GAElC,MAAM2iB,EAASnsC,KAAK4rC,kBACpB,IAAInmC,GAAS,EAWb,OATArZ,OAAOmZ,KAAK4mC,GAAQ/8B,QAAQ08B,IACpBrmC,GAGA0mC,EAAOL,GAAYhX,MAAMtL,KACzB/jB,GAAS,KAIVA,GAIX8lC,EAAIj+C,UAAU8+C,SAAW,SAAS1sC,EAAM2sC,GAEpCrb,IAAQsD,UAAUt0B,KAAKiY,QAAS,YAAY7I,QAAQ5K,IAChD,MAAMR,EAAQQ,EAAKzB,MAAM,KACnByyB,EAAYxxB,EAAMiuB,QAAQ7c,OAAO,GAEvC1V,EAAK3T,EAAE,QAAS,CAAEka,MAAO,kCACrBuvB,cACJ,IAAK,IAAIt8B,EAAI,EAAGA,EAAI8K,EAAMzN,OAAQ2C,IAC9BwG,EAAK3T,EAAE,UAAW,CAAEE,KAAM+X,EAAM9K,KAAMiN,KAE1CzG,EAAKyG,OAGT,IAAK,IAAIza,EAAI,EAAGA,EAAIsU,KAAKgyB,MAAMz7B,OAAQ7K,IAAK,CACxC,MAAM2mC,EAAQrB,IAAQe,WAAW/xB,KAAKgyB,MAAMtmC,GAAGqX,MAAM,QAAQ,IAE7D,GAAsB,UAAhBsvB,EAAML,OACa,UAAhBK,EAAML,OACU,gBAAhBK,EAAML,MACX,SAGJ,IAAIxI,EACJ,MAAM8iB,EAAYtb,IAAQO,SAASvxB,KAAKgyB,MAAMtmC,GAAI,WAG9C89B,IADA8iB,GACOA,EAAU5a,UAAU,GAAG3uB,MAAM,KAAK,GAK7CrD,EAAK3T,EAAE,UAAW,CAAEwgD,QAASF,EACzBpgD,KAAMomC,EAAML,QAChB,MAAMwa,EAAWxb,IAAQO,SAASvxB,KAAKgyB,MAAMtmC,GAAI,UAEjD,GAAI8gD,EAAU,CAEV,MAAMT,EAAM/a,IAAQc,SAAS0a,GAE7B9sC,EAAKlE,MAAM,CAAEvP,KAAM8/C,IAGvB,GAAoB,UAAhB1Z,EAAML,OAAqC,UAAhBK,EAAML,MAAmB,CACpDtyB,EAAK3T,EAAE,cACH,CAAEka,MAAO,6BACL+rB,MAAOK,EAAML,QACjBxI,GACA9pB,EAAKlE,MAAM,CAAEguB,SAEjB,IAAK,IAAItwB,EAAI,EAAGA,EAAIm5B,EAAMF,IAAI57B,OAAQ2C,IAAK,CACvC,MAAMuzC,EACAzb,IAAQO,SACNvxB,KAAKgyB,MAAMtmC,GACV,YAAW2mC,EAAMF,IAAIj5B,IAE9BwG,EAAK3T,EAAE,eAAgBilC,IAAQsB,YAAYma,IAI3C,MAAMC,EACA1b,IAAQO,SACNvxB,KAAKgyB,MAAMtmC,GACV,UAAS2mC,EAAMF,IAAIj5B,IAE5B,GAAIwzC,EAAW,CACX,MAAMC,EAAiB3b,IAAQ8B,UAAU4Z,GAGzC,IAAK,IAAIjrC,EAAI,EAAGA,EAAIkrC,EAAep2C,OAAQkL,IACvC/B,EAAK3T,EAAE,YAAa4gD,EAAelrC,IAAI0E,KAK/CnG,KAAK4sC,eAAelhD,EAAGgU,EAAM2yB,EAAMF,IAAIj5B,IAEvCwG,EAAKyG,KAGT,GAAIqjB,EAAM,CACN,MAAMqjB,EAAU7b,IAAQ0C,UAAU1zB,KAAKgyB,MAAMtmC,IAE7C,IAAK,MAAQohD,EAAeC,KAAoBF,EAC5CntC,EAAK3T,EAAE,SAAU,CACby9B,KAAMsjB,EACN7mC,MAAO,oCAGX8mC,EAAe39B,QAAQ49B,IAEnB,MAAMf,EAAMe,EAAYppC,QAAQ,KAC1BqpC,EAAKD,EAAY53B,OAAO62B,EAAM,GAGpC,GADAvsC,EAAK3T,EAAE,cACkB,IAArBkhD,EAAGrpC,QAAQ,KACXlE,EAAKlE,MAAM,CAAEvP,KAAMghD,QAChB,CACH,MAAMhhD,EAAOghD,EAAGlqC,MAAM,IAAK,GAAG,GAE9BrD,EAAKlE,MAAM,CAAEvP,SAEb,IAAIihD,EAAID,EAAGlqC,MAAM,IAAK,GAAG,GAEzBmqC,EAAIlc,IAAQC,mBAAmBic,GAC/BxtC,EAAKlE,MAAM,CAAE7O,MAAOugD,IAExBxtC,EAAKyG,OAGTzG,EAAKyG,KAKH6qB,IAAQsD,UAAUt0B,KAAKgyB,MAAMtmC,GAAI,iBAExB0jB,QAAQ5K,IACnB,MAAMynC,EAAMznC,EAAKZ,QAAQ,KACnB4xB,EAAYhxB,EAAK4Q,OAAO,EAAG62B,GAAK72B,OAAO,IACvC0f,EAAQtwB,EAAK4Q,OAAO,GAAKogB,EAAUj/B,QAAQwM,MAAM,KAEnD+xB,EAAMv+B,SACNmJ,EAAK3T,EAAE,aAAc,CAAEypC,YACnBvvB,MAAO,oCACX6uB,EAAM1lB,QAAQ3hB,GAAKiS,EAAK3T,EAAE,SAAU,CAAEy9B,KAAM/7B,IAAK0Y,MACjDzG,EAAKyG,QAKjB,MAAMgnC,EAAWnc,IAAQsD,UAAUt0B,KAAKgyB,MAAMtmC,GAAI,UAElD,GAAIyhD,EAAS52C,QAAU4tB,IAAQipB,uBAAwB,CAGnD,MAAMC,EAAOF,EACR3nC,IAAI8nC,GAAWA,EAAQvqC,MAAM,KAAK,IAClCyC,IAAI+nC,GAAWA,EAAQxqC,MAAM,KAAK,IAEvCsqC,EAAKj+B,QAAQ9C,IACT5M,EAAK3T,EAAE,SAAU,CACbugB,MACArG,MAAO,oCAEXvG,EAAKyG,OAGH6qB,IAAQO,SAASvxB,KAAKgyB,MAAMtmC,GAAI,kBAGlCgU,EAAK3T,EAAE,YAAa,CAChBypC,UAAW,MACXvvB,MAAO,oCAEXonC,EAAKj+B,QAAQ9C,IACT5M,EAAK3T,EAAE,SAAU,CAAEugB,QAAOnG,OAE9BzG,EAAKyG,MAIT6qB,IAAQO,SAASvxB,KAAKgyB,MAAMtmC,GAAI,eAChCgU,EAAK3T,EAAE,YAAYoa,KAIvBnG,KAAK4sC,eAAelhD,EAAGgU,EAAM,KAG7B,MAAM8tC,EAAcxc,IAAQsD,UAAUt0B,KAAKgyB,MAAMtmC,GAAI,aAErD,IAAK,IAAIwN,EAAI,EAAGA,EAAIs0C,EAAYj3C,OAAQ2C,IAAK,CACzC,MAAMu0C,EAASzc,IAAQgD,YAAYwZ,EAAYt0C,IAS/C,GAPAwG,EAAK3T,EAAE,aAAc,CACjBka,MAAO,wCACPiuB,IAAKuZ,EAAOvZ,IACZhtB,GAAIumC,EAAO9gD,QAIX8gD,EAAOlgD,eAAe,aAGtB,OAAQkgD,EAAOxZ,WACf,KAAKiE,IAAeI,SAChB54B,EAAKlE,MAAM,CAAEkyC,QAAS,cACtB,MACJ,KAAKxV,IAAeG,SAChB34B,EAAKlE,MAAM,CAAEkyC,QAAS,cACtB,MACJ,KAAKxV,IAAeK,SAChB74B,EAAKlE,MAAM,CAAEkyC,QAAS,SACtB,MACJ,KAAKxV,IAAeC,SAChBz4B,EAAKlE,MAAM,CAAEkyC,QAAS,SAM9BhuC,EAAKyG,KAETzG,EAAKyG,KAITnG,KAAK2tC,kBAAkBjiD,EAAGgU,GAE1B,MAAM5T,EAAIkU,KAAKgyB,MAAMtmC,GAEjBslC,IAAQO,SAASzlC,EAAI,KAAIosC,IAAeK,SAAYv4B,KAAKiY,SACzDvY,EAAKlE,MAAM,CAAEkyC,QAAS,SACf1c,IAAQO,SAASzlC,EAAI,KAAIosC,IAAeI,SAAYt4B,KAAKiY,SAChEvY,EAAKlE,MAAM,CAAEkyC,QAAS,cACf1c,IAAQO,SAASzlC,EAAI,KAAIosC,IAAeG,SAAYr4B,KAAKiY,SAChEvY,EAAKlE,MAAM,CAAEkyC,QAAS,cACf1c,IAAQO,SAASzlC,EAAI,KAAIosC,IAAeC,SAAYn4B,KAAKiY,UAChEvY,EAAKlE,MAAM,CAAEkyC,QAAS,SAKP,MAAfrb,EAAMH,MAAiBlB,IAAQO,SAASzlC,EAAG,gBAAiBkU,KAAKiY,UAEjEvY,EAAKlE,MAAM,CAAEkyC,QAAS,aAE1BhuC,EAAKyG,KAIT,OAFAzG,EAAKyG,KAEEzG,GAGX6rC,EAAIj+C,UAAUqgD,kBAAoB,SAAS7B,EAAYpsC,GACnDA,EAAK3T,EAAE,aAGP,MAAM6hD,EACA5c,IAAQO,SAASvxB,KAAKgyB,MAAM8Z,GAAa,aAAc9rC,KAAKiY,SAElE,GAAI21B,EAAS,CACT,MAAMC,EAAY7c,IAAQyB,aAAamb,GAEvCluC,EAAK3T,EAAE,UAAW,CACdka,MAAO,yCACP6nC,OAAQD,EAAU,GAClBnlC,SAAUmlC,EAAU,KAIpBA,EAAUt3C,OAAS,GACnBmJ,EAAKlE,MAAM,CAAEuyC,QAASF,EAAU,KAEpCnuC,EAAKyG,KAKH6qB,IAAQsD,UACNt0B,KAAKgyB,MAAM8Z,GACX,iBACA9rC,KAAKiY,SAEA7I,QAAQ5K,IACjB,MAAMquB,EAAc7B,IAAQ4B,iBAAiBpuB,GAE7CquB,EAAY5sB,MAAQ,8BACpBvG,EAAK3T,EAAE,eAAea,EAAEimC,EAAYA,oBAC7BA,EAAYA,YAEnB,MAAMmb,EACAhd,IAAQO,SACNvxB,KAAKgyB,MAAM8Z,GACX,WACA9rC,KAAKiY,SAET+1B,IACAnb,EAAYob,MAAQD,EAAU54B,OAAO,IAEzC1V,EAAKlE,MAAMq3B,GACXnzB,EAAKyG,OAET,MAAM+nC,EAAgBld,IAAQE,UAAUlxB,KAAKgyB,MAAM8Z,GAAa9rC,KAAKiY,SAErE,GAAIi2B,EAAe,CACfA,EAAcjoC,MAAQ,uCACtBvG,EAAKlE,MAAM0yC,GAILld,IAAQsD,UACNt0B,KAAKgyB,MAAM8Z,GACX,eACA9rC,KAAKiY,SAEE7I,QAAQ5K,IACnB,MAAMwuB,EAAYhC,IAAQwD,kBAAkBhwB,GAExCxE,KAAKyrC,UACLzY,EAAUG,GAAK,WAEnB,MAAMzqB,EACAsqB,GAA2C,iBAAvBA,EAAUtqB,SAC1BsqB,EAAUtqB,SAAS/F,cACnB,GAEL3C,KAAK0rC,sBACe,QAAbhjC,GAAmC,WAAbA,IAC1B1I,KAAK2rC,qBAAoC,QAAbjjC,GAGpChJ,EAAK3T,EAAE,YAAainC,GAAW7sB,OAGvCzG,EAAKyG,MAITolC,EAAIj+C,UAAUs/C,eAAiB,SAASd,EAAYpsC,EAAMyuC,GAEhDnd,IAAQsD,UACNt0B,KAAKgyB,MAAM8Z,GACV,aAAYqC,GAEf/+B,QAAQ5K,IACV,MAAM4pC,EAAWpd,IAAQ6C,YAAYrvB,GAEf,YAAlB4pC,EAASnnC,MACTvH,EAAK3T,EAAE,kBAAmB,CACtBka,MAAO,qCACPtZ,MAAOyhD,EAASra,OAAO,KAE3Br0B,EAAKyG,OAELzG,EAAK3T,EAAE,UAAW,CACdka,MAAO,qCACPgB,KAAMmnC,EAASnnC,OAEfmnC,EAASra,OAAOx9B,OAAS,GACzBmJ,EAAKlE,MAAM,CAAE,QAAW4yC,EAASra,OAAO,KAE5Cr0B,EAAKyG,SAKjBolC,EAAIj+C,UAAU+gD,iBAAmB,SAAS3uC,EAAMyuC,GAC5C,IAAI9X,EAAM,GACV,MAAMiY,EACA5uC,EAAK41B,KACH,gEAEJgZ,EAAsB/3C,SACtB8/B,GAAO,uBACHiY,EAAsB/sC,KAAK,SAC3B80B,GAAOiY,EAAsB/sC,KAAK,SAElC80B,GAAO,IAEXA,GAAO,QAaX,OAVyB32B,EAAK41B,KAAK,wDAElBlV,KAAK,CAACmuB,EAAGC,KACtBnY,GAAQ,aAAY8X,KAAeK,EAAG5rC,aAAa,UAC/C4rC,EAAGC,aAAa,aAChBpY,GAAQ,IAAGmY,EAAG5rC,aAAa,YAE/ByzB,GAAO,SAGJA,GAIXkV,EAAIj+C,UAAUohD,WAAa,SAASC,GAChC,MAAMC,EAAYzmC,KAAKgM,MAGvBnU,KAAKsQ,IACE,cAAMs+B,yCAMb,MAAMC,EACAC,EAAEH,GAAQrZ,KAAK,mDAEjBuZ,EAAOt4C,QACPs4C,EAAOzuB,KAAK,CAAC6rB,EAAK1W,KACd,MAAMwZ,EACAD,EAAEvZ,GACCD,KAAK,YACL9vB,IAAI,CAAC+oC,EAAGS,IAAYA,EAAQpsC,aAAa,SACzCrW,MAELwiD,EAASx4C,OAAS,IAClByJ,KAAKsQ,KACG,WACAilB,EAAM3yB,aAAa,cACZ2yB,EAAM3yB,aAAa,WAC1BmsC,EAAS5rC,KAAK,cAKlCnD,KAAKiY,QAAUjY,KAAKsQ,IACpBq+B,EAAOrZ,KAAK,YAAYlV,KAAK,CAACmuB,EAAGS,KAC7B,MAAMljD,EAAIkU,KAAKivC,aAAaH,EAAEE,IAE9BhvC,KAAKgyB,MAAM9uB,KAAKpX,KAWpBkU,KAAKsQ,IAAMtQ,KAAKiY,QAAUjY,KAAKgyB,MAAM7uB,KAAK,KAI9CooC,EAAIj+C,UAAU2hD,aAAe,SAASD,GAClC,MAAMrb,EAAOqb,EAAQ1Z,KAAK,gBACpB5X,EAAYsxB,EAAQ1Z,KAAK,4DAC/B,IAAIe,EAAM,GACV,MAAM6Y,EAAOxxB,EAAU4X,KACnB,4DAEEtD,EAAQ,CAAEA,MAAO2B,EAAKpyB,KAAK,SAEjCywB,KAAa,KAUb,GATgC,aAA5Bgd,EAAQztC,KAAK,aAEbywB,EAAME,KAAO,KAEbxU,EAAU4X,KAAK,qDAAqD/+B,OACpEy7B,EAAMvpB,MAAQymC,EAAK34C,OAAS,YAAc,YAE1Cy7B,EAAMvpB,MAAQ,WAEdymC,EAAK34C,OAAQ,CACb8/B,GAAQ,iBAAgBrE,EAAME,kBAC1Bgd,EAAK3tC,KAAK,gBACd80B,GAAQ,aAAY6Y,EAAK3tC,KAAK,aAAa2tC,EAAK3tC,KAAK,cAErD,MAAM4tC,EAAcD,EAAK3tC,KAAK,WAG1B80B,GADA8Y,EACQ,IAAGA,QAEJ,YAGXnd,EAAMG,IACAwB,EACG2B,KAAK,iBACL9vB,IAAI,CAAC+oC,EAAGa,IAAgBA,EAAYxsC,aAAa,OACjDrW,MACT8pC,GAAUrF,IAAQoB,WAAWJ,GAArB,OA6CZ,OA1CAqE,GAAO,uBACF6Y,EAAK34C,SACN8/B,GAAO,+BAIP3Y,EAAUnnB,SACNmnB,EAAUnc,KAAK,WACf80B,GAAUrF,IAAQW,cAAcjU,EAAUnc,KAAK,UAAvC,QAERmc,EAAUnc,KAAK,SACf80B,GAAUrF,IAAQa,YAAYnU,EAAUnc,KAAK,QAArC,QAEZmc,EAAU4X,KAAK,qDAAqDlV,KAAK,CAACmuB,EAAG1b,KACzEwD,GAAQ,iBAAgBxD,EAAYjwB,aAAa,QACjDyzB,GAAQ,IAAGyY,EAAEjc,GAAalxB,OAC1B00B,GAAO,OACHxD,EAAY4b,aAAa,WACzBpY,GAAQ,WAAUxD,EAAYjwB,aAAa,mBAMvD8a,EAAU4X,KAAK,cACVlV,KAAK,CAACmuB,EAAGvb,KACN,IAAItqB,EAAWsqB,EAAUpwB,aAAa,YAEtC8F,EAC0B,iBAAbA,EAAwBA,EAAS/F,cAAgB,GAEzD3C,KAAK0rC,sBACe,QAAbhjC,GAAmC,WAAbA,IAC1B1I,KAAK2rC,qBAAoC,QAAbjjC,IAEzB1I,KAAKyrC,SACZzY,EAAUxxB,aAAa,KAAM,WAGjC60B,GAAOrF,IAAQyD,oBAAoBzB,MAGnCgc,EAAQztC,KAAK,YACrB,IAAK,YACD80B,GAAQ,KAAI6B,IAAeI,eAC3B,MACJ,IAAK,YACDjC,GAAQ,KAAI6B,IAAeG,eAC3B,MACJ,IAAK,OACDhC,GAAQ,KAAI6B,IAAeC,eAC3B,MACJ,IAAK,OACD9B,GAAQ,KAAI6B,IAAeK,eAqF/B,OAlFAlC,GAAQ,SAAQ2Y,EAAQztC,KAAK,cAMzBoyB,EAAK2B,KAAK,aAAa/+B,SACvB8/B,GAAO,kBAGX1C,EAAK2B,KAAK,iBAAiBlV,KAAK,CAACmuB,EAAGa,KAChC/Y,GAAUrF,IAAQ0B,YAAY0c,GAAtB,OACJN,EAAEM,GAAa9Z,KAAK,cAAc/+B,SAClC8/B,GAAQ,UAAS+Y,EAAYxsC,aAAa,SAC1CyzB,GACOyY,EAAEM,GACA9Z,KAAK,cACL9vB,IAAI,CAAC6pC,EAAIC,KACN,MAAMrjD,EAAOqjD,EAAU1sC,aAAa,QAEpC,OACK3W,EAAUA,EAAF,IAAY,IACfqjD,EAAU1sC,aAAa,WAEpCrW,MACA4W,KAAK,MACdkzB,GAAO,QAIXA,GAAOr2B,KAAKquC,iBAAiBS,EAAEM,GAAcA,EAAYxsC,aAAa,SAI1EyzB,GAAOr2B,KAAKquC,iBAAiB1a,EAAM,KAGnCA,EACK2B,KAAK,8DACLlV,KAAK,CAACmuB,EAAGgB,KACNlZ,GACQ,YAAWkZ,EAAO3sC,aAAa,SAC/B2sC,EAAO3sC,aAAa,eAIpC+wB,EACK2B,KAAK,wDACLlV,KAAK,CAACmuB,EAAGrY,KACN,MAAMV,EAAYU,EAAUtzB,aAAa,aACnCkyB,EACAga,EAAE5Y,GACCZ,KAAK,WACL9vB,IAAI,CAAC6pC,EAAI5f,IAAWA,EAAO7sB,aAAa,SACxCrW,MAELuoC,EAAMv+B,SACN8/B,GAAQ,gBAAeb,KAAaV,EAAM3xB,KAAK,cAK3DwwB,EACK2B,KAAK,oDACLlV,KAAK,CAACmuB,EAAG9e,KACN,MAAMjG,EAAOiG,EAAO7sB,aAAa,QAEjCksC,EAAErf,GACG6F,KAAK,cACLlV,KAAK,CAACivB,EAAIC,KACP,MAAMrjD,EAAOqjD,EAAU1sC,aAAa,QACpC,IAAIjW,EAAQ2iD,EAAU1sC,aAAa,SAEnCjW,EAAQqkC,IAAQC,mBAAmBtkC,GACnC0pC,GAAQ,UAAS7M,KAAQv9B,IACrBU,GAASA,EAAM4J,SACf8/B,GAAQ,IAAG1pC,GAEf0pC,GAAO,WAIhBA,K,+CCjsBX,IAOImZ,EAPAC,EAAuB,iBAAZC,QAAuBA,QAAU,KAC5CC,EAAeF,GAAwB,mBAAZA,EAAEhxB,MAC7BgxB,EAAEhxB,MACF,SAAsBwC,EAAQ2uB,EAAUlN,GACxC,OAAOmN,SAASviD,UAAUmxB,MAAM5yB,KAAKo1B,EAAQ2uB,EAAUlN,IAKzD8M,EADEC,GAA0B,mBAAdA,EAAEK,QACCL,EAAEK,QACV1jD,OAAO2jD,sBACC,SAAwB9uB,GACvC,OAAO70B,OAAO4jD,oBAAoB/uB,GAC/BjnB,OAAO5N,OAAO2jD,sBAAsB9uB,KAGxB,SAAwBA,GACvC,OAAO70B,OAAO4jD,oBAAoB/uB,IAQtC,IAAIgvB,EAAc12B,OAAOG,OAAS,SAAqB/sB,GACrD,OAAOA,GAAUA,GAGnB,SAASm3B,IACPA,EAAalZ,KAAK/e,KAAKmU,MAEzB7U,EAAOD,QAAU44B,EAGjBA,EAAaA,aAAeA,EAE5BA,EAAax2B,UAAU4iD,aAAU3vC,EACjCujB,EAAax2B,UAAU6iD,aAAe,EACtCrsB,EAAax2B,UAAU8iD,mBAAgB7vC,EAIvC,IAAI8vC,EAAsB,GAE1B,SAASC,EAAcvqB,GACrB,GAAwB,mBAAbA,EACT,MAAM,IAAIlvB,UAAU,0EAA4EkvB,GAsCpG,SAASwqB,EAAiBC,GACxB,YAA2BjwC,IAAvBiwC,EAAKJ,cACAtsB,EAAausB,oBACfG,EAAKJ,cAmDd,SAASK,EAAaxvB,EAAQha,EAAM8e,EAAU2qB,GAC5C,IAAI5kD,EACA6kD,EACAC,EAzHsBC,EA+I1B,GApBAP,EAAcvqB,QAGCxlB,KADfowC,EAAS1vB,EAAOivB,UAEdS,EAAS1vB,EAAOivB,QAAU9jD,OAAOY,OAAO,MACxCi0B,EAAOkvB,aAAe,SAIK5vC,IAAvBowC,EAAOG,cACT7vB,EAAO0G,KAAK,cAAe1gB,EACf8e,EAASA,SAAWA,EAASA,SAAWA,GAIpD4qB,EAAS1vB,EAAOivB,SAElBU,EAAWD,EAAO1pC,SAGH1G,IAAbqwC,EAEFA,EAAWD,EAAO1pC,GAAQ8e,IACxB9E,EAAOkvB,kBAeT,GAbwB,mBAAbS,EAETA,EAAWD,EAAO1pC,GAChBypC,EAAU,CAAC3qB,EAAU6qB,GAAY,CAACA,EAAU7qB,GAErC2qB,EACTE,EAASzZ,QAAQpR,GAEjB6qB,EAAS1tC,KAAK6iB,IAIhBj6B,EAAIykD,EAAiBtvB,IACb,GAAK2vB,EAASr6C,OAASzK,IAAM8kD,EAASG,OAAQ,CACpDH,EAASG,QAAS,EAGlB,IAAI33C,EAAI,IAAI/B,MAAM,+CACEu5C,EAASr6C,OAAS,IAAMuC,OAAOmO,GADjC,qEAIlB7N,EAAEnN,KAAO,8BACTmN,EAAE43C,QAAU/vB,EACZ7nB,EAAE6N,KAAOA,EACT7N,EAAE63C,MAAQL,EAASr6C,OA5KGs6C,EA6KHz3C,EA5KnB2L,SAAWA,QAAQI,MAAMJ,QAAQI,KAAK0rC,GAgL1C,OAAO5vB,EAcT,SAASiwB,IACP,IAAKlxC,KAAKmxC,MAGR,OAFAnxC,KAAKihB,OAAOkF,eAAenmB,KAAKiH,KAAMjH,KAAKoxC,QAC3CpxC,KAAKmxC,OAAQ,EACY,IAArBhwC,UAAU5K,OACLyJ,KAAK+lB,SAASl6B,KAAKmU,KAAKihB,QAC1BjhB,KAAK+lB,SAAStH,MAAMze,KAAKihB,OAAQ9f,WAI5C,SAASkwC,EAAUpwB,EAAQha,EAAM8e,GAC/B,IAAIurB,EAAQ,CAAEH,OAAO,EAAOC,YAAQ7wC,EAAW0gB,OAAQA,EAAQha,KAAMA,EAAM8e,SAAUA,GACjFwrB,EAAUL,EAAYhkD,KAAKokD,GAG/B,OAFAC,EAAQxrB,SAAWA,EACnBurB,EAAMF,OAASG,EACRA,EA0HT,SAASC,EAAWvwB,EAAQha,EAAMwqC,GAChC,IAAId,EAAS1vB,EAAOivB,QAEpB,QAAe3vC,IAAXowC,EACF,MAAO,GAET,IAAIe,EAAaf,EAAO1pC,GACxB,YAAmB1G,IAAfmxC,EACK,GAEiB,mBAAfA,EACFD,EAAS,CAACC,EAAW3rB,UAAY2rB,GAAc,CAACA,GAElDD,EAsDT,SAAyBt7C,GAEvB,IADA,IAAI8pB,EAAM,IAAI7pB,MAAMD,EAAII,QACf7K,EAAI,EAAGA,EAAIu0B,EAAI1pB,SAAU7K,EAChCu0B,EAAIv0B,GAAKyK,EAAIzK,GAAGq6B,UAAY5vB,EAAIzK,GAElC,OAAOu0B,EA1DL0xB,CAAgBD,GAAcE,EAAWF,EAAYA,EAAWn7C,QAoBpE,SAASs7C,EAAc5qC,GACrB,IAAI0pC,EAAS3wC,KAAKkwC,QAElB,QAAe3vC,IAAXowC,EAAsB,CACxB,IAAIe,EAAaf,EAAO1pC,GAExB,GAA0B,mBAAfyqC,EACT,OAAO,EACF,QAAmBnxC,IAAfmxC,EACT,OAAOA,EAAWn7C,OAItB,OAAO,EAOT,SAASq7C,EAAWz7C,EAAKhJ,GAEvB,IADA,IAAI2zB,EAAO,IAAI1qB,MAAMjJ,GACZzB,EAAI,EAAGA,EAAIyB,IAAKzB,EACvBo1B,EAAKp1B,GAAKyK,EAAIzK,GAChB,OAAOo1B,EApWT10B,OAAOC,eAAey3B,EAAc,sBAAuB,CACzDx3B,YAAY,EACZC,IAAK,WACH,OAAO8jD,GAET5qB,IAAK,SAASrkB,GACZ,GAAmB,iBAARA,GAAoBA,EAAM,GAAK6uC,EAAY7uC,GACpD,MAAM,IAAI0wC,WAAW,kGAAoG1wC,EAAM,KAEjIivC,EAAsBjvC,KAI1B0iB,EAAalZ,KAAO,gBAEGrK,IAAjBP,KAAKkwC,SACLlwC,KAAKkwC,UAAY9jD,OAAO2lD,eAAe/xC,MAAMkwC,UAC/ClwC,KAAKkwC,QAAU9jD,OAAOY,OAAO,MAC7BgT,KAAKmwC,aAAe,GAGtBnwC,KAAKowC,cAAgBpwC,KAAKowC,oBAAiB7vC,GAK7CujB,EAAax2B,UAAU0kD,gBAAkB,SAAyB7kD,GAChE,GAAiB,iBAANA,GAAkBA,EAAI,GAAK8iD,EAAY9iD,GAChD,MAAM,IAAI2kD,WAAW,gFAAkF3kD,EAAI,KAG7G,OADA6S,KAAKowC,cAAgBjjD,EACd6S,MAST8jB,EAAax2B,UAAU2kD,gBAAkB,WACvC,OAAO1B,EAAiBvwC,OAG1B8jB,EAAax2B,UAAUq6B,KAAO,SAAc1gB,GAE1C,IADA,IAAIy7B,EAAO,GACFh3C,EAAI,EAAGA,EAAIyV,UAAU5K,OAAQ7K,IAAKg3C,EAAKx/B,KAAK/B,UAAUzV,IAC/D,IAAIwmD,EAAoB,UAATjrC,EAEX0pC,EAAS3wC,KAAKkwC,QAClB,QAAe3vC,IAAXowC,EACFuB,EAAWA,QAA4B3xC,IAAjBowC,EAAO3rC,WAC1B,IAAKktC,EACR,OAAO,EAGT,GAAIA,EAAS,CACX,IAAIC,EAGJ,GAFIzP,EAAKnsC,OAAS,IAChB47C,EAAKzP,EAAK,IACRyP,aAAc96C,MAGhB,MAAM86C,EAGR,IAAIhiC,EAAM,IAAI9Y,MAAM,oBAAsB86C,EAAK,KAAOA,EAAG1tC,QAAU,IAAM,KAEzE,MADA0L,EAAIoP,QAAU4yB,EACRhiC,EAGR,IAAI5L,EAAUosC,EAAO1pC,GAErB,QAAgB1G,IAAZgE,EACF,OAAO,EAET,GAAuB,mBAAZA,EACTorC,EAAaprC,EAASvE,KAAM0iC,OAE5B,KAAIvqC,EAAMoM,EAAQhO,OACd67C,EAAYR,EAAWrtC,EAASpM,GACpC,IAASzM,EAAI,EAAGA,EAAIyM,IAAOzM,EACzBikD,EAAayC,EAAU1mD,GAAIsU,KAAM0iC,GAGrC,OAAO,GAiET5e,EAAax2B,UAAU82C,YAAc,SAAqBn9B,EAAM8e,GAC9D,OAAO0qB,EAAazwC,KAAMiH,EAAM8e,GAAU,IAG5CjC,EAAax2B,UAAU04B,GAAKlC,EAAax2B,UAAU82C,YAEnDtgB,EAAax2B,UAAU+kD,gBACnB,SAAyBprC,EAAM8e,GAC7B,OAAO0qB,EAAazwC,KAAMiH,EAAM8e,GAAU,IAqBhDjC,EAAax2B,UAAUglD,KAAO,SAAcrrC,EAAM8e,GAGhD,OAFAuqB,EAAcvqB,GACd/lB,KAAKgmB,GAAG/e,EAAMoqC,EAAUrxC,KAAMiH,EAAM8e,IAC7B/lB,MAGT8jB,EAAax2B,UAAUilD,oBACnB,SAA6BtrC,EAAM8e,GAGjC,OAFAuqB,EAAcvqB,GACd/lB,KAAKqyC,gBAAgBprC,EAAMoqC,EAAUrxC,KAAMiH,EAAM8e,IAC1C/lB,MAIb8jB,EAAax2B,UAAU64B,eACnB,SAAwBlf,EAAM8e,GAC5B,IAAIysB,EAAM7B,EAAQ8B,EAAU/mD,EAAGgnD,EAK/B,GAHApC,EAAcvqB,QAGCxlB,KADfowC,EAAS3wC,KAAKkwC,SAEZ,OAAOlwC,KAGT,QAAaO,KADbiyC,EAAO7B,EAAO1pC,IAEZ,OAAOjH,KAET,GAAIwyC,IAASzsB,GAAYysB,EAAKzsB,WAAaA,EACb,KAAtB/lB,KAAKmwC,aACTnwC,KAAKkwC,QAAU9jD,OAAOY,OAAO,cAEtB2jD,EAAO1pC,GACV0pC,EAAOxqB,gBACTnmB,KAAK2nB,KAAK,iBAAkB1gB,EAAMurC,EAAKzsB,UAAYA,SAElD,GAAoB,mBAATysB,EAAqB,CAGrC,IAFAC,GAAY,EAEP/mD,EAAI8mD,EAAKj8C,OAAS,EAAG7K,GAAK,EAAGA,IAChC,GAAI8mD,EAAK9mD,KAAOq6B,GAAYysB,EAAK9mD,GAAGq6B,WAAaA,EAAU,CACzD2sB,EAAmBF,EAAK9mD,GAAGq6B,SAC3B0sB,EAAW/mD,EACX,MAIJ,GAAI+mD,EAAW,EACb,OAAOzyC,KAEQ,IAAbyyC,EACFD,EAAKvgB,QAiIf,SAAmBugB,EAAMvd,GACvB,KAAOA,EAAQ,EAAIud,EAAKj8C,OAAQ0+B,IAC9Bud,EAAKvd,GAASud,EAAKvd,EAAQ,GAC7Bud,EAAK9hC,MAlIGiiC,CAAUH,EAAMC,GAGE,IAAhBD,EAAKj8C,SACPo6C,EAAO1pC,GAAQurC,EAAK,SAEQjyC,IAA1BowC,EAAOxqB,gBACTnmB,KAAK2nB,KAAK,iBAAkB1gB,EAAMyrC,GAAoB3sB,GAG1D,OAAO/lB,MAGb8jB,EAAax2B,UAAUslD,IAAM9uB,EAAax2B,UAAU64B,eAEpDrC,EAAax2B,UAAU26B,mBACnB,SAA4BhhB,GAC1B,IAAImrC,EAAWzB,EAAQjlD,EAGvB,QAAe6U,KADfowC,EAAS3wC,KAAKkwC,SAEZ,OAAOlwC,KAGT,QAA8BO,IAA1BowC,EAAOxqB,eAUT,OATyB,IAArBhlB,UAAU5K,QACZyJ,KAAKkwC,QAAU9jD,OAAOY,OAAO,MAC7BgT,KAAKmwC,aAAe,QACM5vC,IAAjBowC,EAAO1pC,KACY,KAAtBjH,KAAKmwC,aACTnwC,KAAKkwC,QAAU9jD,OAAOY,OAAO,aAEtB2jD,EAAO1pC,IAEXjH,KAIT,GAAyB,IAArBmB,UAAU5K,OAAc,CAC1B,IACItJ,EADAsY,EAAOnZ,OAAOmZ,KAAKorC,GAEvB,IAAKjlD,EAAI,EAAGA,EAAI6Z,EAAKhP,SAAU7K,EAEjB,oBADZuB,EAAMsY,EAAK7Z,KAEXsU,KAAKioB,mBAAmBh7B,GAK1B,OAHA+S,KAAKioB,mBAAmB,kBACxBjoB,KAAKkwC,QAAU9jD,OAAOY,OAAO,MAC7BgT,KAAKmwC,aAAe,EACbnwC,KAKT,GAAyB,mBAFzBoyC,EAAYzB,EAAO1pC,IAGjBjH,KAAKmmB,eAAelf,EAAMmrC,QACrB,QAAkB7xC,IAAd6xC,EAET,IAAK1mD,EAAI0mD,EAAU77C,OAAS,EAAG7K,GAAK,EAAGA,IACrCsU,KAAKmmB,eAAelf,EAAMmrC,EAAU1mD,IAIxC,OAAOsU,MAoBb8jB,EAAax2B,UAAU8kD,UAAY,SAAmBnrC,GACpD,OAAOuqC,EAAWxxC,KAAMiH,GAAM,IAGhC6c,EAAax2B,UAAUulD,aAAe,SAAsB5rC,GAC1D,OAAOuqC,EAAWxxC,KAAMiH,GAAM,IAGhC6c,EAAa+tB,cAAgB,SAASb,EAAS/pC,GAC7C,MAAqC,mBAA1B+pC,EAAQa,cACVb,EAAQa,cAAc5qC,GAEtB4qC,EAAchmD,KAAKmlD,EAAS/pC,IAIvC6c,EAAax2B,UAAUukD,cAAgBA,EAiBvC/tB,EAAax2B,UAAUwlD,WAAa,WAClC,OAAO9yC,KAAKmwC,aAAe,EAAIX,EAAexvC,KAAKkwC,SAAW,K,6BCvahE,YAEA,MAAM6C,EAA6B,GA6CnC,SAAS3oB,EAAgBplB,EAAOmC,EAASw2B,GACrC,GAAqB,iBAAV34B,QAA4C,IAAfA,EAAM/Y,KAkB1C,OARA+T,KAAKqqB,IAAM,CACPrlB,QACAulB,YAAapjB,EACbw2B,QAASA,GAAWvnC,MAAMC,QAAQsnC,GAC5BA,EAAQ7d,MAAM,QACdvf,GAGFyE,EAAM/Y,MACd,IAAK,kBACL,IAAK,wBACL,IAAK,gBACD+T,KAAK/T,KAAOkyC,oBACZn+B,KAAKyE,QACCsuC,EAA2B/yC,KAAK/T,OAC3B+T,KAAKqqB,IAAIsT,SAAW,IAAIx6B,KAAK,MACxC,MACJ,IAAK,uBACL,IAAK,gBACDnD,KAAK/T,KAAOkyC,YACZn+B,KAAKyE,QACCsuC,EAA2B/yC,KAAK/T,OAC3B+T,KAAKqqB,IAAIsT,SAAW,IAAIx6B,KAAK,MACxC,MACJ,IAAK,8BACL,IAAK,uBAAwB,CACzB,MAAMmnB,EAAiBtlB,EAAMslB,gBAAkBtlB,EAAMguC,WAKjD7rC,GACOA,EAAQuxB,SACNiF,GAAWA,EAAQ/5B,QAAQ,UAAY,KACrB,aAAnB0mB,GACsB,aAAnBA,GACmB,cAAnBA,GACmB,cAAnBA,GACmB,UAAnBA,GACmB,WAAnBA,GACmB,aAAnBA,IACXtqB,KAAK/T,KAAOkyC,yBACZn+B,KAAKyE,QACCsuC,EAA2B/yC,KAAK/T,MA6CtD,SAA2CgnD,EAAsB1oB,GAC7D,GAAIA,GAAeA,EAAYmO,OAASnO,EAAYmO,MAAMwa,UACtD,OAAQD,GACR,IAAK,QACD,OAAO1oB,EAAYmO,MAAMwa,UAAUC,SACvC,IAAK,SACD,OAAO5oB,EAAYmO,MAAMwa,UAAUE,UACvC,QACI,OAAO7oB,EAAYmO,MAAMwa,UAAUD,IAAyB,GAIpE,MAAO,GAxDeI,CACE/oB,EACAnjB,KAEZnH,KAAK/T,KAAOkyC,oBACZn+B,KAAKyE,QACCsuC,EAA2B/yC,KAAK/T,MAC5B+Y,EAAMslB,gBAEpB,MAGJ,QACItqB,KAAK/T,KAAOkyC,UACZn+B,KAAKyE,QACCO,EAAMP,SAAWsuC,EAA2B/yC,KAAK/T,UAGxD,IAAqB,iBAAV+Y,EAWd,MAAM,IAAI3N,MAAM,qBAVZ07C,EAA2B/tC,IAC3BhF,KAAK/T,KAAO+Y,EACZhF,KAAKyE,QAAU0C,GAAW4rC,EAA2B/tC,IAKrDhF,KAAKyE,QAAUO,EAMvBhF,KAAKoE,MAAQY,EAAMZ,QAAU,IAAI/M,OAAS+M,MAlI9C2uC,EAA2B5U,0BACrB,sCACN4U,EAA2B5U,+BACrB,sCACN4U,EAA2B5U,+BACrB,mCACN4U,EAA2B5U,iCACrB,mCACN4U,EAA2B5U,qCACrB,kCACN4U,EAA2B5U,WACrB,6BACN4U,EAA2B5U,qBACrB,4CACN4U,EAA2B5U,aACrB,2CACN4U,EAA2B5U,qBACrB,sCACN4U,EAA2B5U,WACrB,iDACN4U,EAA2B5U,qBACrB,kCACN4U,EAA2B5U,yBACrB,iDA8GN/T,EAAgB98B,UAAYlB,OAAOY,OAAOqK,MAAM/J,WAChD88B,EAAgB98B,UAAU2I,YAAcm0B,EAuBzBA,O,cCrIfj/B,EAAOD,QAvBe,CAIlBwsC,KAAM,OAKN4b,KAAM,OAKNC,IAAK,MAKLC,IAAK,Q,6BCxBT,uDAOe,MAAMhY,EAMjBvlC,YAAY4tB,EAAe,IAAIC,KAC3B9jB,KAAK6jB,aAAeA,EAGpB7jB,KAAKw9B,iBAAmBx9B,KAAKgmB,GAAKhmB,KAAKokC,YACvCpkC,KAAKyzC,oBAAsBzzC,KAAK4yC,IAAM5yC,KAAKmmB,eAS/Cie,YAAYnY,EAAWlG,GAGnB,OAFA/lB,KAAK6jB,aAAaugB,YAAYnY,EAAWlG,GAElC,IAAM/lB,KAAKyzC,oBAAoBxnB,EAAWlG,GASrDI,eAAe8F,EAAWlG,GACtB/lB,KAAK6jB,aAAasC,eAAe8F,EAAWlG,M,gBCxCpD,IAAI2tB,EAAS,EAAQ,KACjBC,EAAS,EAAQ,KAErBzoD,EAAQ0oD,MAAQD,EAChBzoD,EAAQgtB,MAAQw7B,EAAOx7B,MACvBhtB,EAAQ2oD,gBAAkBH,EAAOG,gBACjC3oD,EAAQ4oD,YAAcJ,EAAOI,YAC7B5oD,EAAQ6oD,cAAgBL,EAAOK,cAC/B7oD,EAAQ8oD,sBAAwBN,EAAOM,sBACvC9oD,EAAQ+oD,qBAAuBP,EAAOO,qBACtC/oD,EAAQgpD,yBAA2BR,EAAOQ,0B,6BCV1C,oXAMO,MAAMC,EAAwB,wBAQxBzmD,EAA2B,4BAO3B4B,EAAiB,0BAOjB8kD,EAAmB,6BAWnBC,EAAuB,uBAYvBC,EAAsB,gCAQtBC,EAAuB,kC,8BC3DpC,yWAuBA,MAAMx2B,EAASF,oBAAU6E,GAKnB8xB,EAAgB,4DAwDf,MAAMC,EAAuB,CAChC,CAAEC,KAAM,6CASCC,EAAsB,OAMtBC,EAAiB,mCAOjBC,EAAe,8BAKb,MAAMC,UAAatZ,IAiB9BvlC,YAAYkR,EAAS4tC,EAAOC,GAAU,MAClCvZ,QACAz7B,KAAKuU,WAAa,KAClBvU,KAAKi1C,sBAAuB,EAC5Bj1C,KAAKk1C,gBAAkB,GACvBl1C,KAAKmH,QAAUA,EACfnH,KAAK+0C,MAAQA,EACb/0C,KAAKm1C,mBAAoB,EA5D7BC,cACAC,cA+DI,MAAMC,EAAWnuC,EAAQmuC,UAAY,GAGrCA,EAASx6C,OAASqM,EAAQouC,MAAMz6C,OAEhCkF,KAAKuU,WArGb,UAA0B,sBACtBihC,EADsB,WAEtBC,EAAa,aAFS,MAGtBC,EAHsB,MAItBX,EAJsB,mBAKtBY,EALsB,sBAMtBC,EANsB,SAOtBN,EAPsB,KAQtBrpD,IAOA,OAJI8oD,IAEAU,GAAe,IAA+B,IAA7BA,EAAW7xC,QAAQ,KAAc,IAAM,YAAYmxC,UAAc9oD,KAE/E,IAAI4pD,IAAe,CACtBL,wBACAC,aACAE,qBACAC,wBACAN,WACAI,QACAzpD,SA+EkB6pD,CAAiB,CAC/B7pD,KAAM+oD,EACNQ,sBAAuBruC,EAAQquC,sBAG/BC,WAAYtuC,EAAQsuC,YAActuC,EAAQ4uC,KAC1ChB,QACAY,mBAAoBxuC,EAAQwuC,mBAC5BC,sBAAuBzuC,EAAQyuC,sBAC/BN,WACAI,MAAK,UAAEvuC,EAAQ6uC,sBAAV,aAAE,EAAwBN,QAInC11C,KAAKuU,WAAWyR,GAAG6vB,IAAeI,OAAOC,mBAAoB,KAEzD,MAAM3mB,EAAU,CACZ4mB,eAAe,EACfC,aAAcp2C,KAAKuU,WAAW8hC,KAAKC,qBACnCC,wBAAyBv2C,KAAKuU,WAAWiiC,2BAI7Cx2C,KAAK6jB,aAAa8D,KACd8uB,oBACAC,mBACAn2C,OACAA,EACAgvB,KAGRvvB,KAAK22C,sBAEL32C,KAAK42C,KAAO,IAAIC,IAAK72C,KAAKuU,WAAYvU,KAAKmH,QAAQ2vC,YAGnD92C,KAAK+2C,mBAkBTA,mBAGI/2C,KAAK42C,KAAKI,WAAW,qBACrBh3C,KAAK42C,KAAKI,WAAW,8BACrBh3C,KAAK42C,KAAKI,WAAW,wCACrBh3C,KAAK42C,KAAKI,WAAW,+BACrBh3C,KAAK42C,KAAKI,WAAW,0CACrBh3C,KAAK42C,KAAKI,WAAW,kCACrBh3C,KAAK42C,KAAKI,WAAW,kCAIfh3C,KAAKmH,QAAQ8vC,YAAe9yB,IAAQuQ,aAAevQ,IAAQ+yB,kBAAkB,KAC/El3C,KAAK42C,KAAKI,WAAW,sBAEU,IAA/Bh3C,KAAKmH,QAAQgwC,eAA0BhzB,IAAQizB,oBAC/Cp3C,KAAK42C,KAAKI,WAAW,mCAGc,IAA5Bh3C,KAAKmH,QAAQkwC,YAA8Br3C,KAAKmH,QAAQkwC,aAC/Dr3C,KAAK42C,KAAKI,WAAW,yBAIpB7yB,IAAQuQ,kBAAkD,IAA3B10B,KAAKmH,QAAQmwC,YAA6Bt3C,KAAKmH,QAAQmwC,WACvFt3C,KAAK42C,KAAKI,WAAW,wBASzBh3C,KAAK42C,KAAKI,WAAW,qBACrBh3C,KAAK42C,KAAKI,WAAW,qBAKjB7yB,IAAQ0Y,oBAAoD,IAA/B78B,KAAKmH,QAAQowC,gBAC1Cx5B,EAAO7Y,KAAK,sBACZlF,KAAK42C,KAAKI,WAAW,kCAGrBh3C,KAAKuU,WAAWijC,MAChBx3C,KAAK42C,KAAKI,WAAW,0BAGrBS,IAAclZ,YAAYv+B,KAAKmH,UAC/BnH,KAAK42C,KAAKI,WAAWnC,GAAc,GAAO,GAOlD6C,gBACI,OAAO13C,KAAKuU,WAchBojC,kBAAkBC,EAAc,GAAI7nC,EAAQjL,GACxC,MAAMqP,EAAM7oB,OAAOusD,YAAY1jC,MACzB2jC,EAAYr8C,UAAQs8C,gBAAgBhoC,GAAQpN,cAQlD,GANA3C,KAAKk1C,gBAAgB4C,GAAa3jC,EAClC4J,EAAOnZ,IACF,kBAAiBkzC,IAAYhzC,EAAO,IAAGA,KAAS,QACjDqP,GAEJnU,KAAK6jB,aAAa8D,KAAKqwB,IAAWzlD,0BAA2BqlD,EAAa7nC,EAAQjL,GAC9EiL,IAAWtU,UAAQgC,OAAOM,WAAagS,IAAWtU,UAAQgC,OAAOS,SAE7D8B,KAAKi4C,qBACLj4C,KAAKuU,WAAW2jC,aAAa/pC,cAAcnO,KAAKi4C,oBAChDj4C,KAAKi4C,mBAAqB,MAG9Bj4C,KAAKm4C,eAAiBn4C,KAAKuU,WAAWo6B,OAAOyJ,4BAE7Cr6B,EAAO7Y,KAAM,iBAAgBlF,KAAKuU,WAAW5Q,KAG7C3D,KAAKq4C,cAELr4C,KAAKm4C,eAAiBn4C,KAAK42C,KAAK0B,yBAAyBt4C,KAAKmH,QAAQouC,MAAMz6C,QACvE4iC,KAAK,EAAG50B,WAAUyvC,iBACVzvC,EAASyf,IAAI9sB,UAAQK,GAAG08C,OACzBz6B,EAAO/Y,MAAO,yBACVhF,KAAKmH,QAAQouC,MAAMz6C,0DAG3BkF,KAAKy4C,4BACDF,OAAYh4C,KAEnBg8B,MAAMv3B,IACH,MAAM0zC,EAAS,0BAEfjc,IAAqBkG,iBACjB,IAAItrC,MAAO,GAAEqhD,MAAW1zC,MAC5B+Y,EAAO/Y,MAAM0zC,EAAQ1zC,KAI7BhF,KAAKm4C,eAAgB,EAEjBP,EAAYe,WACZ34C,KAAKm1C,mBAAoB,GAEzBn1C,KAAKuU,YAAcvU,KAAKuU,WAAW3K,WAChCnO,UAAQyI,mBAAmBlE,KAAKuU,WAAW5Q,MAG9C3D,KAAK6jB,aAAa8D,KACd8uB,yBACAh7C,UAAQyI,mBAAmBlE,KAAKuU,WAAW5Q,WAEhD,GAAIoM,IAAWtU,UAAQgC,OAAOG,SACrB,+BAARkH,EACA9E,KAAK44C,2BAA4B,EAEjC54C,KAAK64C,kBAAmB,EAE5B74C,KAAK84C,aAAeh0C,EACR,cAARA,GACA9E,KAAK6jB,aAAa8D,KACd8uB,oBACAC,cAAmC5xC,QAExC,GAAIiL,IAAWtU,UAAQgC,OAAOC,MACjCsC,KAAK84C,aAAeh0C,OACjB,GAAIiL,IAAWtU,UAAQgC,OAAOO,aAAc,CAE/CgC,KAAKuU,WAAW8hC,KAAK0C,eACrB,MAAMC,EAA2Bjf,QAAQ/5B,KAAKi1C,sBACxCgE,EAASn0C,GAAO9E,KAAK84C,aAE3B,GAAI94C,KAAK44C,0BAEL54C,KAAK6jB,aAAa8D,KACd8uB,oBACAC,0BACD,GAAI12C,KAAK64C,iBACZ74C,KAAK6jB,aAAa8D,KACd8uB,oBACAC,cACAuC,OACA14C,EACAP,KAAKk5C,0CACN,GAAIF,EACPh5C,KAAK6jB,aAAa8D,KACd8uB,0BAA+CwC,OAChD,CAMHl7B,EAAO/Y,MAAM,4BAIb,MAAMm0C,EAAkB19C,UAAQ29C,qBAE5BD,GAAmB,KAAOA,EAAkB,IAC5Cn5C,KAAK6jB,aAAa8D,KACd8uB,oBACAC,eACAuC,GAAU,oBACQ14C,EAClBP,KAAKk5C,qCAETl5C,KAAK6jB,aAAa8D,KACd8uB,oBACAC,2BACAuC,GAAU,gCACQ14C,EAClBP,KAAKk5C,2CAGd,GAAInpC,IAAWtU,UAAQgC,OAAOK,SAAU,CAC3C,MAAMu7C,EAAuBr5C,KAAK03C,gBAAgB4B,uBAGlDt5C,KAAK6jB,aAAa8D,KACd8uB,oBACAC,oBACA5xC,GAAO9E,KAAKu5C,8BAA8BF,GAC1CzB,IAWZa,4BAA4BF,EAAYzvC,GAEpCyvC,EAAWnpC,QAAQoqC,IAaf,GAZsB,kBAAlBA,EAASvyC,OACTjH,KAAKy5C,6BAA+BD,EAASvtD,MAG3B,iBAAlButD,EAASvyC,OACTjH,KAAK05C,6BAA+BF,EAASvtD,MAG3B,wBAAlButD,EAASvyC,OACTjH,KAAK25C,mCAAqCH,EAASvtD,MAGjC,eAAlButD,EAASvyC,KAAuB,CAChCjH,KAAK45C,gBAAiB,EACtB,MAAMC,EAAuBC,IACzBA,EAAE1qC,QAAQ2qC,IACFA,EAAGC,SAAS,0BACZh6C,KAAK6jB,aAAa8D,KAAK8uB,4BAK/B3tC,EACA+wC,EAAqB/wC,GAErB0wC,EAASvtD,MAAQ+T,KAAK42C,KAAK0B,yBAAyBkB,EAASvtD,KAAMutD,EAASvyC,MACvEy2B,KAAK,EAAG50B,SAAUgxC,KAAQD,EAAqBC,IAC/Cvd,MAAMljC,GAAK0kB,EAAO5Y,KAAK,qCAAsC9L,GAAKA,EAAEoL,cAKjFzE,KAAKy5C,8BACFz5C,KAAK05C,8BACL15C,KAAK25C,qCACR35C,KAAKuU,WAAWxG,WAAW/N,KAAKi6C,kBAAkB/sD,KAAK8S,MAAO,KAAM,UAAW,KAAM,MAU7Fu5C,8BAA8Bz0C,GAC1B,IAAKA,EACD,OAAO,KAGX,MAAMuO,EAAUmhC,EAAc0F,KAAKp1C,GAEnC,OAAOuO,EAAUA,EAAQ,GAAK,KAQlClH,SAASxI,EAAKg1C,GA4BV34C,KAAKq4C,cAGLr4C,KAAKm4C,eAAgB,EAEjBn4C,KAAKuU,WAAW2jC,cAAgBl4C,KAAKuU,WAAW2jC,aAAa/lC,eAC7DnS,KAAKi4C,mBAAqBj4C,KAAKuU,WAAW2jC,aAAa/lC,eACnDnS,KAAKm6C,iBAAiBjtD,KAAK8S,MAC3B,KACA,WAGJ+d,EAAO5Y,KAAK,gEAGhBnF,KAAKuU,WAAW9I,QACZ9H,EACAg1C,EACA34C,KAAK23C,kBAAkBzqD,KAAK8S,KAAM,CAC9B2D,MACAg1C,cAUZwB,iBAAiBr1C,GAEb,GAAwC,IAApCgqC,EAAEhqC,GAAKwwB,KAAK,aAAa/+B,QAAiD,IAAjCu4C,EAAEhqC,GAAKwwB,KAAK,UAAU/+B,OAC/D,OAGJyJ,KAAKm4C,eAAgB,EAErB,MAAMiC,EAAkBp6C,KAAKuU,WAAWo6B,OAAO0L,gCAAgCv1C,IAEzE,SAAEgE,EAAF,WAAYyvC,GAAe+B,YAAex1C,GAEhD9E,KAAKy4C,4BAA4BF,EAAYzvC,GAG7CyvC,EAAWnpC,QAAQ1jB,IACA,UAAXA,EAAEub,OACFjH,KAAKmH,QAAQ6uC,eAAeN,MAAQhqD,EAAEO,SAI1CmuD,GAAmB7B,EAAW7wB,KAAO,GAAK5e,EAAS4e,KAAO,KAC1D1nB,KAAKuU,WAAW2jC,aAAa/pC,cAAcnO,KAAKi4C,oBAChDj4C,KAAKi4C,mBAAqB,MAWlC7rC,OAAOjF,GACHnH,KAAKq4C,cAGLr4C,KAAKm4C,eAAgB,EAErB,MAAMhkC,EAAMnU,KAAKk1C,gBAAgBqF,UAAYjvD,OAAOusD,YAAY1jC,MAEhE4J,EAAOnZ,IAAI,8BAA+BuP,GAC1CnU,KAAKuU,WAAWnI,OAAOjF,EAAQxD,IAAKwD,EAAQkF,IACxCiM,SAASnR,EAAQmF,IAAK,IAAM,EAC5BtM,KAAK23C,kBAAkBzqD,KAAK8S,KAAM,CAC9B2D,IAAKwD,EAAQxD,IACbg1C,SAAUxxC,EAAQwxC,YAQ9BN,cACIr4C,KAAK44C,2BAA4B,EACjC54C,KAAK64C,kBAAmB,EACxB74C,KAAK84C,kBAAev4C,EACpBP,KAAKi1C,0BAAuB10C,EAQhCkL,QAAQ9H,EAAKg1C,GACT,IAAKh1C,EAAK,CACN,MAAM,gBAAE62C,EAAF,OAAmB1/C,GAAWkF,KAAKmH,QAAQouC,MACjD,IAAIkF,EAAeD,GAAmB1/C,EAStC,MAAM,SAAEigB,GAAazvB,OAErB,GAAIkvD,EAAiB,CACjB,MAAM39B,EAAS9B,GAAYA,EAAS8B,QAE/BA,IAA4C,IAAlCA,EAAOjZ,QAAQ,eACnB5D,KAAK+0C,SACZ0F,EAAe3/C,GAKvB6I,EAAM82C,GAAiB1/B,GAAYA,EAAS2/B,SAGhD,OAAO16C,KAAKmM,SAASxI,EAAKg1C,GAa9BgC,WAAW3F,EAAU7tC,EAASyzC,GAE1B,IAAIC,EAAW,GAAE7F,KAAY7tC,EAAQ2zC,aAC/B3zC,EAAQ2zC,aAAe96C,KAAKmH,QAAQouC,MAAMwF,IAAIp4C,iBAEpD,MAAMq4C,EAAcJ,EACdA,EAAiB56C,KAAKuU,WAAW5Q,IAAK3D,KAAKm1C,mBAC3Cxf,IAAWslB,gBAAgB,GAAGt4C,cAKpC,OAHAob,EAAO7Y,KAAM,OAAMlF,KAAKuU,WAAW5Q,0BAA0Bq3C,KAC7DH,GAAWG,EAEJh7C,KAAKuU,WAAW2mC,KAAKP,WAAWE,EAAS,KAAM1zC,GAQ1Dg0C,SACI,OAAOn7C,KAAKuU,WAAW5Q,IAO3By3C,eACI,MAAMzM,EAAS3uC,KAAKuU,WAAWo6B,OAG/B,OAAOA,EAASA,EAAO0M,SAAW,GAMtCC,aACI,OAAQt7C,KAAKuU,WAAWwJ,QAAU,IAAInZ,KAAO,KAMjD22C,QAAQ7Y,GACJ1iC,KAAKuU,WAAWijC,KAAK+D,QAAQ7Y,GASjC2T,KAAKzoC,GACD,OAAO,IAAIkwB,QAAQ,CAACC,EAASC,KACzBh+B,KAAKuU,WAAW8hC,KAAKA,KAAKr2C,KAAKuU,WAAWinC,WAAYzd,EAASC,EAAQpwB,KAO/E6tC,cACI,OAAOz7C,KAAKuU,WAAWo6B,OAAO+M,SAUlCnsC,WAAWosC,GACP,OAAI37C,KAAKi1C,qBACEj1C,KAAKi1C,qBACJj1C,KAAKuU,YAIjBvU,KAAKi1C,qBAAuB,IAAInX,QAAQC,IACpC,MAAM6d,EAAqB,CAAChE,EAAa7nC,KACjCA,IAAWtU,UAAQgC,OAAOO,eAC1B+/B,IACA/9B,KAAK6jB,aAAasC,eAAe6xB,IAAWzlD,0BAA2BqpD,KAI/E57C,KAAK6jB,aAAamC,GAAGgyB,IAAWzlD,0BAA2BqpD,KAG/D57C,KAAK67C,uBAAuBF,GAErB37C,KAAKi1C,sBAhBDnX,QAAQC,UA4BvB8d,uBAAuBF,GAWnB,IAFC37C,KAAKuU,WAAWunC,kBAAoB97C,KAAKuU,WAAW/G,SAEhDxN,KAAKuU,WAAWunC,kBAAjB,MAAqCH,EAA0C,CAC/E,MAAMI,EAASJ,EAAG10C,KAElB,IAAe,iBAAX80C,GAAwC,WAAXA,KAI7B/7C,KAAKuU,WAAWpN,QAAQ6S,MAAO,EAG3Bha,KAAKuU,WAAWynC,yBAEhB,OAKZh8C,KAAKuU,WAAWhF,cAEqB,IAAjCvP,KAAKuU,WAAWpN,QAAQ6S,MACxBha,KAAKuU,WAAW/G,QAOxBmpC,sBACI,MAAMvQ,EAAY,CACd6V,IAAK,CAAEC,WAAY,IACnBC,IAAK,CAAED,WAAY,KAGjBE,EAAkBp8C,KAAKmH,QAAQg1C,KAC9Bn8C,KAAKmH,QAAQg1C,IAAIE,aAAgB5H,EAEpCr+C,MAAMC,QAAQ+lD,KACdr+B,EAAO7Y,KAAK,qBAAsBk3C,GAClChW,EAAU+V,IAAID,WAAaE,GAG3Bp8C,KAAKmH,QAAQg1C,KAAOn8C,KAAKmH,QAAQg1C,IAAIrV,qBACrC/oB,EAAO7Y,KAAK,6BACRlF,KAAKmH,QAAQg1C,IAAIrV,oBAErBV,EAAU+V,IAAIrV,mBACR9mC,KAAKmH,QAAQg1C,IAAIrV,oBAG3B9mC,KAAKuU,WAAWxO,oBAAoB,OAAQ,IAAIu2C,IAAoBt8C,OACpEA,KAAKuU,WAAWxO,oBAAoB,SAAU,IAAIw2C,IAAuBv8C,KAAMA,KAAK6jB,aAAcuiB,IAClGpmC,KAAKuU,WAAWxO,oBAAoB,OAAQ,IAAIy2C,KASpDtD,oCACI,MAAM3pB,EAAU,GAGhB,GAAIvvB,KAAKmH,QAAQ6uC,gBACVh2C,KAAKmH,QAAQ6uC,eAAeN,OAC5B11C,KAAKuU,WAAWmD,oBAAqB,CAGxC,MAAM+kC,EAAaz8C,KAAKuU,WAAWmD,oBAC9BglC,OAAO35C,MAAM,WACZuX,EAAU,GAEhBmiC,EAAWrtC,QAAQ5K,IACf,MAAMR,EAAQQ,EAAKzB,MAAM,MACnBwX,EAASvW,EAAMiuB,QACftlC,EAAQqX,EAAMb,KAAK,MAEzBmX,EAAQC,GAAU5tB,IAItB4iC,EAAQ4mB,cACFn2C,KAAKmH,QAAQ6uC,eAAeN,QACtBp7B,EAAQ,iBAUxB,OAJAiV,EAAQ6mB,aAAep2C,KAAKuU,WAAW8hC,KAAKC,qBAC5C/mB,EAAQgnB,wBAA0Bv2C,KAAKuU,WAAWiiC,0BAG3CjnB,EAQX9F,yBAAyBC,GAErB,IAAK1pB,KAAK05C,+BAAiChwB,EACvC,OAGJ,MAAM5kB,EAAMmY,eAAK,CAAEosB,GAAIrpC,KAAK05C,+BAE5B50C,EAAI/Y,EAAE,eAAgB,CAClBka,MAAO,2BACP02C,KAAMjzB,IACLvjB,KAELnG,KAAKuU,WAAWlH,KAAKvI,GAYzB83C,sBAAsBC,GAElB,IAAKA,EACD,OAAO,EAGX,IACI,MAAMC,EAAOlwC,KAAKsL,MAAM2kC,GASxB,GAAIC,GAAwB,iBAATA,EAAmB,CAClC,MAAM71C,EAAO61C,EAAKnI,GAElB,QAAoB,IAAT1tC,EACP,OAAO61C,EAGX/+B,EAAO9Y,MAAM,yDACM,UAAWgC,IAEpC,MAAO5N,GAGL,OAFA0kB,EAAO/Y,MAAO,sBAAqB63C,EAAcxjD,IAE1C,EAGX,OAAO,EAUX4gD,kBAAkBn1C,GACd,MAAMnO,EAAOmO,EAAIlC,aAAa,QAE9B,GAAMjM,IAASqJ,KAAK05C,8BACb/iD,IAASqJ,KAAK25C,oCACdhjD,IAASqJ,KAAKy5C,6BACjB,OAAO,EAGX,MAAMsD,EAAcjO,EAAEhqC,GAAKwwB,KAAK,iBAC3B3zB,OACCq7C,EAAah9C,KAAK48C,sBAAsBG,GAE9C,OAAKC,IAImC,iBAApCA,EAAWrI,IAA2CqI,EAAWC,MACjEj9C,KAAK6jB,aAAa8D,KAAKqwB,IAAW5iD,uBAAwB4nD,EAAWC,OAC1B,wBAApCD,EAAWrI,IAAkDqI,EAAWE,kBAC/El9C,KAAK6jB,aAAa8D,KAAKqwB,IAAW3iD,8BAA+B2nD,EAAWE,mBACjC,kBAApCF,EAAWrI,IAClB30C,KAAK6jB,aAAa8D,KAAKqwB,IAAW1iD,uBAAwB0nD,IAGvD,O,0ECt7Bf,2dAIO,MAAMG,EAAmB,YAMnBC,EAAmB,YAOnBC,EAAc,OAMdC,EAAW,KAMXC,EAAY,MAMZC,EAAgB,UAOhBC,EAAiB,WAMjBC,EAAe,SAOfC,EAAsB,sBAOtBC,EAAuB,gC,6BC9DpC,0QAWO,MAAMjvB,EAA0B,oCAS1BzgC,EAAyB,mCAazBkE,EAAoB,8BAMpByrD,EAAc,wBAOdC,EAAwB,oC,6BC9CrC,0KAUO,MAAMC,EAAc,wBAOdC,EAAkB,6BAKlBC,EAAkB,6BASlBC,EAAmB,6BAKnBC,EAAmB,+B,6BCpCjB7yD,WAAf,U,6BCAe,Q,8BCAf,iDAGA,MAAMyyB,EAASF,oBAAU6E,GAIzB,IAAI07B,EAEAC,EAoHJ,SAASC,IACL,OAAUlzC,KAAKC,SAAS3U,SAAS,IAAzB,aAAwC0e,OAAO,EAAG,GAhH/C,KAKXmpC,SAAUC,IAQV5zC,KAAK6zC,GACDz+C,KAAKu+C,SAAWE,GAAmBD,KAOvC,wBASI,OARKJ,IACDA,EAAqBp+C,KAAKu+C,SAASpmC,QAAQ,qBACtCimC,IACDA,EAwDhB,WACI,MAAMM,EAAWC,IAAkBC,mBAInC,OAFA7gC,EAAOnZ,IAAI,0BAA2B85C,GAE/BA,EA7D0BG,GACrB7+C,KAAKu+C,SAASzxC,QAAQ,oBAAqBsxC,KAI5CA,GAOX,gBACI,IAAKC,EAAY,CACb,MAAMS,EAAQ9+C,KAAKu+C,SAASpmC,QAAQ,aAEpCkmC,EAAaS,GAAS9+C,KAAKu+C,SAASpmC,QAAQ,eAExC2mC,EACA9+C,KAAKu+C,SAASzxC,QAAQ,cAAegyC,GAC7BT,IACRA,EA+ChB,WACI,MAAMU,EAWCT,IAAQA,IAAQA,IAAQA,IAP/B,OAFAvgC,EAAOnZ,IAAI,eAAgBm6C,GAEpBA,EApDkBC,GACbh/C,KAAKu+C,SAASzxC,QAAQ,cAAeuxC,IAI7C,OAAOA,GAOX,gBAGI,OAAOr+C,KAAKu+C,SAASpmC,QAAQ,cAOjC,cAAcy2B,GACNA,EACA5uC,KAAKu+C,SAASzxC,QAAQ,YAAa8hC,GAEnC5uC,KAAKu+C,SAASxxC,WAAW,iB,4ECtFrC,kHAOO,SAASkyC,EAAiB1pB,GAC7B,OAAOjd,SAASid,EAAMT,MAAM/xB,MAAM,KAAK,GAAI,IAQxC,SAASm8C,EAAmB3pB,GAC/B,OAAOjd,SAASid,EAAMT,MAAM/xB,MAAM,KAAK,GAAI,IAQ/C,SAASo8C,EAAcrpB,GACnB,OAAKA,EAAMhB,MAIJgB,EAAMhB,MACRtvB,IAAIuvB,GAAYA,EAAS7tB,IACzB8tB,OAAO,CAACxL,EAAMyL,EAAOzW,IAAUA,EAAM5a,QAAQ4lB,KAAUyL,GACvD1+B,OANM,EAaf,MAAM6oD,EAOFnpD,YAAY6/B,GACR,IAAKA,EACD,MAAM,IAAIz+B,MAAM,sBAGpB2I,KAAK81B,MAAQA,EAUjB,YAKI,OAJK91B,KAAK81B,MAAMhB,QACZ90B,KAAK81B,MAAMhB,MAAQ,IAGhB90B,KAAK81B,MAAMhB,MAStB,UAAUA,GACN90B,KAAK81B,MAAMhB,MAAQA,EAOvB,gBACI,OAAO90B,KAAK81B,MAAM7B,UAOtB,cAAcA,GACVj0B,KAAK81B,MAAM7B,UAAYA,EAO3B,iBAKI,OAJKj0B,KAAK81B,MAAMX,aACZn1B,KAAK81B,MAAMX,WAAa,IAGrBn1B,KAAK81B,MAAMX,WAQtB,eAAeA,GACXn1B,KAAK81B,MAAMX,WAAaA,EAW5BkqB,iBAAiBC,EAAYC,GACzB,MAAMjiD,EAAY0C,KAAK80B,MAAMQ,KACzBkqB,GAAWA,EAAQt4C,KAAOo4C,GACvBE,EAAQliD,YAAciiD,GAG7B,OAAOjiD,GAAaA,EAAU3Q,MAQlC8yD,WAAWC,GACF1/C,KAAK81B,MAAMhB,OAAU90B,KAAK81B,MAAMhB,MAAMv+B,SAI3CyJ,KAAK81B,MAAMhB,MACL90B,KAAK81B,MAAMhB,MAAME,OAAOwqB,GAAWA,EAAQt4C,KAAOw4C,IAQ5DC,iBAAiBH,GACbx/C,KAAK80B,MAAM5xB,KAAKs8C,GAWpBI,UAAUpqB,EAAWV,GACjB,OAAO90B,KAAKm1B,WAAWG,KACnBC,GACIA,EAAMC,YAAcA,KACXV,GAASA,IAAUS,EAAMT,QAS9C+qB,WAAWrqB,GACP,OAAOx1B,KAAKm1B,WAAWH,OACnBO,GAASA,EAAMC,YAAcA,GASrCsqB,uBAAuBtqB,EAAWuqB,GAC9B,OAAO//C,KAAKm1B,WAAWG,KACnBC,GAASA,EAAMC,YAAcA,GACtBypB,EAAiB1pB,KAAWwqB,GAS3CC,eAAeC,GACX,OAAOjgD,KAAK80B,MAAMQ,KACdkqB,GAAiC,SAAtBA,EAAQliD,YACF,OAAT2iD,GAAiBT,EAAQ7yD,QAAUszD,IAOnDC,eACI,OAAOf,EAAcn/C,KAAK81B,OAQ9BqqB,wBACI,YAAiC5/C,IAA1BP,KAAK81B,MAAMX,WAQtBirB,sBACI,MAAM/vB,EAAYrwB,KAAK81B,MAAM7uB,KAE7B,GAAkB,UAAdopB,EACA,MAAM,IAAIh5B,MACL,qCAAoCg5B,MAK7C,GAAiB,IAFA8uB,EAAcn/C,KAAK81B,OAIhC,OAAO91B,KAAK81B,MAAMhB,MAAM,GAAG5tB,GAI/B,GAAIlH,KAAK81B,MAAMX,WAAY,CACvB,MAAMM,EAAWz1B,KAAK4/C,UAAU,OAEhC,GAAInqB,EACA,OAAOwpB,EAAiBxpB,GAE5B,MAAMJ,EAAWr1B,KAAK4/C,UAAU,OAEhC,GAAIvqB,EACA,OAAO4pB,EAAiB5pB,GAE5B,MAAMgrB,EAAWrgD,KAAK4/C,UAAU,UAEhC,GAAIS,EACA,OAAOpB,EAAiBoB,IAcpCC,WAAWlrB,GACP,MAAMC,EAAWr1B,KAAK8/C,uBAAuB,MAAO1qB,GAGpD,OAAOC,GAAY6pB,EAAmB7pB,GAO1CkrB,WACI,OAAOvgD,KAAK80B,MACPtvB,IAAIuvB,GAAYA,EAAS7tB,IACzB8tB,OAAO,CAACxL,EAAMyL,EAAOzW,IAAUA,EAAM5a,QAAQ4lB,KAAUyL,GAQhEurB,uBACI,MAAMnwB,EAAYrwB,KAAK81B,MAAM7uB,KAE7B,GAAkB,UAAdopB,EACA,MAAM,IAAIh5B,MACL,0CAAyCg5B,GAGlD,MAAMowB,EAAazgD,KAAKugD,WAExB,IAAK,MAAMG,KAAiB1gD,KAAKm1B,WAI7B,GAAgC,QAA5BurB,EAAclrB,WACqB,WAA5BkrB,EAAclrB,UAAwB,CAE7C,MAAMmrB,EAAgBzB,EAAmBwB,GAEzCD,EAAWx8C,OACPw8C,EAAW78C,QAAQ+8C,GAAgB,GAI/C,OAAOF,EAMXG,iBACI,OAAOh0C,KAAKwL,UAAUpY,KAAK81B,MAAMX,YAQrC0rB,qBAAqBr3B,GACZxpB,KAAK81B,MAAMX,aAIhBn1B,KAAK81B,MAAMX,WAAan1B,KAAK81B,MAAMX,WAC9BH,OAAO8rB,IAAqD,IAAxCA,EAAUhsB,MAAMlxB,QAAS,GAAE4lB,KAOxDu3B,wBAAwBvrB,GACfx1B,KAAK81B,MAAMX,aAIhBn1B,KAAK81B,MAAMX,WACLn1B,KAAK81B,MAAMX,WACRH,OAAO8rB,GAAaA,EAAUtrB,YAAcA,IAQzDwrB,YAAYC,EAASC,GACblhD,KAAK81B,MAAMhB,OACX90B,KAAK81B,MAAMhB,MAAM1lB,QAAQ2lB,IACjBA,EAAS7tB,KAAO+5C,IAChBlsB,EAAS7tB,GAAKg6C,KAW9BC,aAAa5rB,GACTv1B,KAAKm1B,WAAWjyB,KAAKqyB,IAoBtB,MAAM6rB,EAOTnrD,YAAYorD,GACRrhD,KAAKshD,UAAYC,QAAgBF,GAYrCG,YAAYnxB,GACR,MAAMoxB,EACAzhD,KAAKshD,UAAUtvB,MAAMsD,KAAKQ,GAASA,EAAM7uB,OAASopB,GAExD,OAAOoxB,EAAgB,IAAIrC,EAAUqC,GAAiB,KAQ1DC,WACI,OAAOH,QAAgBvhD,KAAKshD,c,6BCta7B,SAASne,EAAqB2K,GACjC,IAAI6T,EAAY7T,EAMhB,OAJIA,GAAUv0B,OAAOqoC,mBACjBD,EAAY,GAGTA,EAAY,EAShB,SAASE,EAAiBC,GAC7B,OAAOA,EAAWvrD,OAAS,EAAIurD,EAAWp8C,OAAO,CAAChO,EAAGC,IAAMD,EAAIC,GAAKmqD,EAAWvrD,OAAS,EA6BrF,SAASwrD,EAAqBD,GACjC,OAAOA,EAAW9sB,OAAOroC,GAASA,GAAS,GAvD/C,wIA8DO,MAAMq1D,EAIT/rD,cACI+J,KAAKiiD,QAAU,EACfjiD,KAAK7S,EAAI,EASb+0D,QAAQv1D,GACiB,iBAAVA,IAGXqT,KAAK7S,GAAK,EACV6S,KAAKiiD,QAAUjiD,KAAKiiD,SAAYt1D,EAAQqT,KAAKiiD,SAAWjiD,KAAK7S,GAOjEg1D,aACI,OAAOniD,KAAKiiD,W,6BC3FpB,gHAGO,MAAMG,EAAsB,yBAMtBC,EAAuB,2B,iBCTpC,cAUA,IAaIC,EAAU,qBAQVC,EAAS,eAGTC,EAAY,kBAIZC,EAAS,eAyBTC,EAAe,8BAGfC,EAAW,mBAGXC,EAAiB,GACrBA,EAxBiB,yBAwBYA,EAvBZ,yBAwBjBA,EAvBc,sBAuBYA,EAtBX,uBAuBfA,EAtBe,uBAsBYA,EArBZ,uBAsBfA,EArBsB,8BAqBYA,EApBlB,wBAqBhBA,EApBgB,yBAoBY,EAC5BA,EAAeN,GAAWM,EAnDX,kBAoDfA,EAhCqB,wBAgCYA,EAlDnB,oBAmDdA,EAhCkB,qBAgCYA,EAlDhB,iBAmDdA,EAlDe,kBAkDYA,EAjDb,qBAkDdA,EAAeL,GAAUK,EA/CT,mBAgDhBA,EAAeJ,GAAaI,EA3CZ,mBA4ChBA,EAAeH,GAAUG,EA1CT,mBA2ChBA,EAxCiB,qBAwCY,EAG7B,IAAIC,EAA8B,iBAAVjtD,GAAsBA,GAAUA,EAAOxJ,SAAWA,QAAUwJ,EAGhFktD,EAA0B,iBAARjtD,MAAoBA,MAAQA,KAAKzJ,SAAWA,QAAUyJ,KAGxE7K,EAAO63D,GAAcC,GAAYjT,SAAS,cAATA,GAGjCkT,EAA4C73D,IAAYA,EAAQ6U,UAAY7U,EAG5E83D,EAAaD,GAAgC,iBAAV53D,GAAsBA,IAAWA,EAAO4U,UAAY5U,EAGvF83D,EAAgBD,GAAcA,EAAW93D,UAAY63D,EAGrDG,EAAcD,GAAiBJ,EAAWM,QAG1CC,EAAY,WACd,IACE,OAAOF,GAAeA,EAAYG,SAAWH,EAAYG,QAAQ,QACjE,MAAOhqD,KAHI,GAOXiqD,EAAmBF,GAAYA,EAASG,aAuD5C,SAASC,EAAUhlC,EAAOilC,GAIxB,IAHA,IAAIxuB,GAAS,EACT1+B,EAAkB,MAATioB,EAAgB,EAAIA,EAAMjoB,SAE9B0+B,EAAQ1+B,GACf,GAAIktD,EAAUjlC,EAAMyW,GAAQA,EAAOzW,GACjC,OAAO,EAGX,OAAO,EAkET,SAASklC,EAAWl+C,GAClB,IAAIyvB,GAAS,EACTxvB,EAASrP,MAAMoP,EAAIkiB,MAKvB,OAHAliB,EAAI4J,SAAQ,SAASziB,EAAOM,GAC1BwY,IAASwvB,GAAS,CAAChoC,EAAKN,MAEnB8Y,EAwBT,SAASk+C,EAAWl+B,GAClB,IAAIwP,GAAS,EACTxvB,EAASrP,MAAMqvB,EAAIiC,MAKvB,OAHAjC,EAAIrW,SAAQ,SAASziB,GACnB8Y,IAASwvB,GAAStoC,KAEb8Y,EAIT,IAeMm+C,EAvCWhkD,EAAM2hD,EAwBnBsC,EAAaztD,MAAM9I,UACnBw2D,EAAYjU,SAASviD,UACrBy2D,EAAc33D,OAAOkB,UAGrB02D,EAAah5D,EAAK,sBAGlBi5D,EAAeH,EAAUptD,SAGzBnJ,EAAiBw2D,EAAYx2D,eAG7B22D,GACEN,EAAM,SAAS1J,KAAK8J,GAAcA,EAAWz+C,MAAQy+C,EAAWz+C,KAAK4+C,UAAY,KACvE,iBAAmBP,EAAO,GAQtCQ,EAAuBL,EAAYrtD,SAGnC2tD,EAAaC,OAAO,IACtBL,EAAap4D,KAAK0B,GAAgBqU,QA7PjB,sBA6PuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5E2iD,EAAStB,EAAgBj4D,EAAKu5D,YAAShkD,EACvC9T,EAASzB,EAAKyB,OACd+3D,EAAax5D,EAAKw5D,WAClBC,EAAuBV,EAAYU,qBACnCxgD,EAAS4/C,EAAW5/C,OACpBygD,EAAiBj4D,EAASA,EAAOC,iBAAc6T,EAG/CokD,EAAmBv4D,OAAO2jD,sBAC1B6U,EAAiBL,EAASA,EAAOM,cAAWtkD,EAC5CukD,GAnEallD,EAmEQxT,OAAOmZ,KAnETg8C,EAmEen1D,OAlE7B,SAASgV,GACd,OAAOxB,EAAK2hD,EAAUngD,MAoEtB2jD,EAAWC,GAAUh6D,EAAM,YAC3B44B,EAAMohC,GAAUh6D,EAAM,OACtB8yC,EAAUknB,GAAUh6D,EAAM,WAC1Bm6B,EAAM6/B,GAAUh6D,EAAM,OACtBi6D,EAAUD,GAAUh6D,EAAM,WAC1Bk6D,EAAeF,GAAU54D,OAAQ,UAGjC+4D,EAAqBC,GAASL,GAC9BM,EAAgBD,GAASxhC,GACzB0hC,EAAoBF,GAAStnB,GAC7BynB,EAAgBH,GAASjgC,GACzBqgC,EAAoBJ,GAASH,GAG7BQ,GAAch5D,EAASA,EAAOa,eAAYiT,EAC1CmlD,GAAgBD,GAAcA,GAAYE,aAAUplD,EASxD,SAASqlD,GAAKC,GACZ,IAAI5wB,GAAS,EACT1+B,EAAoB,MAAXsvD,EAAkB,EAAIA,EAAQtvD,OAG3C,IADAyJ,KAAK8lD,UACI7wB,EAAQ1+B,GAAQ,CACvB,IAAIwvD,EAAQF,EAAQ5wB,GACpBj1B,KAAKylB,IAAIsgC,EAAM,GAAIA,EAAM,KA+F7B,SAASC,GAAUH,GACjB,IAAI5wB,GAAS,EACT1+B,EAAoB,MAAXsvD,EAAkB,EAAIA,EAAQtvD,OAG3C,IADAyJ,KAAK8lD,UACI7wB,EAAQ1+B,GAAQ,CACvB,IAAIwvD,EAAQF,EAAQ5wB,GACpBj1B,KAAKylB,IAAIsgC,EAAM,GAAIA,EAAM,KA4G7B,SAASE,GAASJ,GAChB,IAAI5wB,GAAS,EACT1+B,EAAoB,MAAXsvD,EAAkB,EAAIA,EAAQtvD,OAG3C,IADAyJ,KAAK8lD,UACI7wB,EAAQ1+B,GAAQ,CACvB,IAAIwvD,EAAQF,EAAQ5wB,GACpBj1B,KAAKylB,IAAIsgC,EAAM,GAAIA,EAAM,KA+F7B,SAASG,GAAS3+B,GAChB,IAAI0N,GAAS,EACT1+B,EAAmB,MAAVgxB,EAAiB,EAAIA,EAAOhxB,OAGzC,IADAyJ,KAAKmmD,SAAW,IAAIF,KACXhxB,EAAQ1+B,GACfyJ,KAAK4kB,IAAI2C,EAAO0N,IA2CpB,SAASmxB,GAAMP,GACb,IAAIlsD,EAAOqG,KAAKmmD,SAAW,IAAIH,GAAUH,GACzC7lD,KAAK0nB,KAAO/tB,EAAK+tB,KAmGnB,SAAS2+B,GAAc15D,EAAO25D,GAC5B,IAAIC,EAAQlwD,GAAQ1J,GAChB65D,GAASD,GAASE,GAAY95D,GAC9B+5D,GAAUH,IAAUC,GAAS3B,GAASl4D,GACtCg6D,GAAUJ,IAAUC,IAAUE,GAAUnD,GAAa52D,GACrDi6D,EAAcL,GAASC,GAASE,GAAUC,EAC1ClhD,EAASmhD,EAloBf,SAAmBz5D,EAAG05D,GAIpB,IAHA,IAAI5xB,GAAS,EACTxvB,EAASrP,MAAMjJ,KAEV8nC,EAAQ9nC,GACfsY,EAAOwvB,GAAS4xB,EAAS5xB,GAE3B,OAAOxvB,EA2nBoBqhD,CAAUn6D,EAAM4J,OAAQuC,QAAU,GACzDvC,EAASkP,EAAOlP,OAEpB,IAAK,IAAItJ,KAAON,GACT25D,IAAa/4D,EAAe1B,KAAKc,EAAOM,IACvC25D,IAEQ,UAAP35D,GAECy5D,IAAkB,UAAPz5D,GAA0B,UAAPA,IAE9B05D,IAAkB,UAAP15D,GAA0B,cAAPA,GAA8B,cAAPA,IAEtD85D,GAAQ95D,EAAKsJ,KAElBkP,EAAOvC,KAAKjW,GAGhB,OAAOwY,EAWT,SAASuhD,GAAaxoC,EAAOvxB,GAE3B,IADA,IAAIsJ,EAASioB,EAAMjoB,OACZA,KACL,GAAI+pB,GAAG9B,EAAMjoB,GAAQ,GAAItJ,GACvB,OAAOsJ,EAGX,OAAQ,EA0BV,SAAS0wD,GAAWt6D,GAClB,OAAa,MAATA,OACe4T,IAAV5T,EAt1BQ,qBARL,gBAg2BJ+3D,GAAkBA,KAAkBt4D,OAAOO,GA0arD,SAAmBA,GACjB,IAAIu6D,EAAQ35D,EAAe1B,KAAKc,EAAO+3D,GACnCtnD,EAAMzQ,EAAM+3D,GAEhB,IACE/3D,EAAM+3D,QAAkBnkD,EACxB,IAAI4mD,GAAW,EACf,MAAO9tD,IAET,IAAIoM,EAAS2+C,EAAqBv4D,KAAKc,GACnCw6D,IACED,EACFv6D,EAAM+3D,GAAkBtnD,SAEjBzQ,EAAM+3D,IAGjB,OAAOj/C,EA1bH2hD,CAAUz6D,GA4iBhB,SAAwBA,GACtB,OAAOy3D,EAAqBv4D,KAAKc,GA5iB7B06D,CAAe16D,GAUrB,SAAS26D,GAAgB36D,GACvB,OAAO46D,GAAa56D,IAAUs6D,GAAWt6D,IAAU21D,EAiBrD,SAASkF,GAAY76D,EAAO86D,EAAOC,EAASC,EAAYvjD,GACtD,OAAIzX,IAAU86D,IAGD,MAAT96D,GAA0B,MAAT86D,IAAmBF,GAAa56D,KAAW46D,GAAaE,GACpE96D,GAAUA,GAAS86D,GAAUA,EAmBxC,SAAyBr6D,EAAQq6D,EAAOC,EAASC,EAAYC,EAAWxjD,GACtE,IAAIyjD,EAAWxxD,GAAQjJ,GACnB06D,EAAWzxD,GAAQoxD,GACnBM,EAASF,EAl6BA,iBAk6BsBG,GAAO56D,GACtC66D,EAASH,EAn6BA,iBAm6BsBE,GAAOP,GAKtCS,GAHJH,EAASA,GAAUzF,EAAUE,EAAYuF,IAGhBvF,EACrB2F,GAHJF,EAASA,GAAU3F,EAAUE,EAAYyF,IAGhBzF,EACrB4F,EAAYL,GAAUE,EAE1B,GAAIG,GAAavD,GAASz3D,GAAS,CACjC,IAAKy3D,GAAS4C,GACZ,OAAO,EAETI,GAAW,EACXK,GAAW,EAEb,GAAIE,IAAcF,EAEhB,OADA9jD,IAAUA,EAAQ,IAAIgiD,IACdyB,GAAYtE,GAAan2D,GAC7Bi7D,GAAYj7D,EAAQq6D,EAAOC,EAASC,EAAYC,EAAWxjD,GAiKnE,SAAoBhX,EAAQq6D,EAAOrqD,EAAKsqD,EAASC,EAAYC,EAAWxjD,GACtE,OAAQhH,GACN,IApkCc,oBAqkCZ,GAAKhQ,EAAOk7D,YAAcb,EAAMa,YAC3Bl7D,EAAOm7D,YAAcd,EAAMc,WAC9B,OAAO,EAETn7D,EAASA,EAAOo7D,OAChBf,EAAQA,EAAMe,OAEhB,IA7kCiB,uBA8kCf,QAAKp7D,EAAOk7D,YAAcb,EAAMa,aAC3BV,EAAU,IAAIpD,EAAWp3D,GAAS,IAAIo3D,EAAWiD,KAKxD,IAtmCU,mBAumCV,IAtmCU,gBAumCV,IAlmCY,kBAqmCV,OAAOnnC,IAAIlzB,GAASq6D,GAEtB,IA3mCW,iBA4mCT,OAAOr6D,EAAOnB,MAAQw7D,EAAMx7D,MAAQmB,EAAOqX,SAAWgjD,EAAMhjD,QAE9D,IArmCY,kBAsmCZ,IApmCY,kBAwmCV,OAAOrX,GAAWq6D,EAAQ,GAE5B,KAAKlF,EACH,IAAIkG,EAAU/E,EAEhB,KAAKjB,EACH,IAAIiG,EAroCiB,EAqoCLhB,EAGhB,GAFAe,IAAYA,EAAU9E,GAElBv2D,EAAOs6B,MAAQ+/B,EAAM//B,OAASghC,EAChC,OAAO,EAGT,IAAIC,EAAUvkD,EAAM7X,IAAIa,GACxB,GAAIu7D,EACF,OAAOA,GAAWlB,EAEpBC,GA/oCuB,EAkpCvBtjD,EAAMqhB,IAAIr4B,EAAQq6D,GAClB,IAAIhiD,EAAS4iD,GAAYI,EAAQr7D,GAASq7D,EAAQhB,GAAQC,EAASC,EAAYC,EAAWxjD,GAE1F,OADAA,EAAc,OAAEhX,GACTqY,EAET,IAhoCY,kBAioCV,GAAIigD,GACF,OAAOA,GAAc75D,KAAKuB,IAAWs4D,GAAc75D,KAAK47D,GAG9D,OAAO,EA9NDmB,CAAWx7D,EAAQq6D,EAAOM,EAAQL,EAASC,EAAYC,EAAWxjD,GAExE,KAj8ByB,EAi8BnBsjD,GAAiC,CACrC,IAAImB,EAAeX,GAAY36D,EAAe1B,KAAKuB,EAAQ,eACvD07D,EAAeX,GAAY56D,EAAe1B,KAAK47D,EAAO,eAE1D,GAAIoB,GAAgBC,EAAc,CAChC,IAAIC,EAAeF,EAAez7D,EAAOT,QAAUS,EAC/C47D,EAAeF,EAAerB,EAAM96D,QAAU86D,EAGlD,OADArjD,IAAUA,EAAQ,IAAIgiD,IACfwB,EAAUmB,EAAcC,EAActB,EAASC,EAAYvjD,IAGtE,IAAKgkD,EACH,OAAO,EAGT,OADAhkD,IAAUA,EAAQ,IAAIgiD,IA6NxB,SAAsBh5D,EAAQq6D,EAAOC,EAASC,EAAYC,EAAWxjD,GACnE,IAAIskD,EA9qCqB,EA8qCThB,EACZuB,EAAWC,GAAW97D,GACtB+7D,EAAYF,EAAS1yD,OAErB6yD,EADWF,GAAWzB,GACDlxD,OAEzB,GAAI4yD,GAAaC,IAAcV,EAC7B,OAAO,EAET,IAAIzzB,EAAQk0B,EACZ,KAAOl0B,KAAS,CACd,IAAIhoC,EAAMg8D,EAASh0B,GACnB,KAAMyzB,EAAYz7D,KAAOw6D,EAAQl6D,EAAe1B,KAAK47D,EAAOx6D,IAC1D,OAAO,EAIX,IAAI07D,EAAUvkD,EAAM7X,IAAIa,GACxB,GAAIu7D,GAAWvkD,EAAM7X,IAAIk7D,GACvB,OAAOkB,GAAWlB,EAEpB,IAAIhiD,GAAS,EACbrB,EAAMqhB,IAAIr4B,EAAQq6D,GAClBrjD,EAAMqhB,IAAIgiC,EAAOr6D,GAEjB,IAAIi8D,EAAWX,EACf,OAASzzB,EAAQk0B,GAAW,CAC1Bl8D,EAAMg8D,EAASh0B,GACf,IAAIq0B,EAAWl8D,EAAOH,GAClBs8D,EAAW9B,EAAMx6D,GAErB,GAAI06D,EACF,IAAI6B,EAAWd,EACXf,EAAW4B,EAAUD,EAAUr8D,EAAKw6D,EAAOr6D,EAAQgX,GACnDujD,EAAW2B,EAAUC,EAAUt8D,EAAKG,EAAQq6D,EAAOrjD,GAGzD,UAAmB7D,IAAbipD,EACGF,IAAaC,GAAY3B,EAAU0B,EAAUC,EAAU7B,EAASC,EAAYvjD,GAC7EolD,GACD,CACL/jD,GAAS,EACT,MAEF4jD,IAAaA,EAAkB,eAAPp8D,GAE1B,GAAIwY,IAAW4jD,EAAU,CACvB,IAAII,EAAUr8D,EAAO6I,YACjByzD,EAAUjC,EAAMxxD,YAGhBwzD,GAAWC,KACV,gBAAiBt8D,MAAU,gBAAiBq6D,IACzB,mBAAXgC,GAAyBA,aAAmBA,GACjC,mBAAXC,GAAyBA,aAAmBA,IACvDjkD,GAAS,GAKb,OAFArB,EAAc,OAAEhX,GAChBgX,EAAc,OAAEqjD,GACThiD,EAzRAkkD,CAAav8D,EAAQq6D,EAAOC,EAASC,EAAYC,EAAWxjD,GA3D5DwlD,CAAgBj9D,EAAO86D,EAAOC,EAASC,EAAYH,GAAapjD,IAsEzE,SAASylD,GAAal9D,GACpB,SAAKm9D,GAASn9D,IAwahB,SAAkBiT,GAChB,QAASskD,GAAeA,KAActkD,EAzadmqD,CAASp9D,MAGnBq9D,GAAWr9D,GAAS03D,EAAa3B,GAChCxwC,KAAKkzC,GAASz4D,IAsB/B,SAASs9D,GAAS78D,GAChB,GAyZIm0B,GADe50B,EAxZFS,IAyZGT,EAAMsJ,YACtBwS,EAAwB,mBAAR8Y,GAAsBA,EAAKj0B,WAAcy2D,EAEtDp3D,IAAU8b,EA3Zf,OAAOq8C,EAAW13D,GAuZtB,IAAqBT,EACf40B,EACA9Y,EAvZAhD,EAAS,GACb,IAAK,IAAIxY,KAAOb,OAAOgB,GACjBG,EAAe1B,KAAKuB,EAAQH,IAAe,eAAPA,GACtCwY,EAAOvC,KAAKjW,GAGhB,OAAOwY,EAgBT,SAAS4iD,GAAY7pC,EAAOipC,EAAOC,EAASC,EAAYC,EAAWxjD,GACjE,IAAIskD,EAlhCqB,EAkhCThB,EACZwC,EAAY1rC,EAAMjoB,OAClB6yD,EAAY3B,EAAMlxD,OAEtB,GAAI2zD,GAAad,KAAeV,GAAaU,EAAYc,GACvD,OAAO,EAGT,IAAIvB,EAAUvkD,EAAM7X,IAAIiyB,GACxB,GAAImqC,GAAWvkD,EAAM7X,IAAIk7D,GACvB,OAAOkB,GAAWlB,EAEpB,IAAIxyB,GAAS,EACTxvB,GAAS,EACT0kD,EA/hCuB,EA+hCfzC,EAAoC,IAAIxB,QAAW3lD,EAM/D,IAJA6D,EAAMqhB,IAAIjH,EAAOipC,GACjBrjD,EAAMqhB,IAAIgiC,EAAOjpC,KAGRyW,EAAQi1B,GAAW,CAC1B,IAAIE,EAAW5rC,EAAMyW,GACjBs0B,EAAW9B,EAAMxyB,GAErB,GAAI0yB,EACF,IAAI6B,EAAWd,EACXf,EAAW4B,EAAUa,EAAUn1B,EAAOwyB,EAAOjpC,EAAOpa,GACpDujD,EAAWyC,EAAUb,EAAUt0B,EAAOzW,EAAOipC,EAAOrjD,GAE1D,QAAiB7D,IAAbipD,EAAwB,CAC1B,GAAIA,EACF,SAEF/jD,GAAS,EACT,MAGF,GAAI0kD,GACF,IAAK3G,EAAUiE,GAAO,SAAS8B,EAAUc,GACnC,GA72Bap9D,EA62BOo9D,GAANF,EA52BX5hC,IAAIt7B,KA62BFm9D,IAAab,GAAY3B,EAAUwC,EAAUb,EAAU7B,EAASC,EAAYvjD,IAC/E,OAAO+lD,EAAKjnD,KAAKmnD,GA/2B/B,IAAyBp9D,KAi3BX,CACNwY,GAAS,EACT,YAEG,GACD2kD,IAAab,IACX3B,EAAUwC,EAAUb,EAAU7B,EAASC,EAAYvjD,GACpD,CACLqB,GAAS,EACT,OAKJ,OAFArB,EAAc,OAAEoa,GAChBpa,EAAc,OAAEqjD,GACThiD,EAyKT,SAASyjD,GAAW97D,GAClB,OApZF,SAAwBA,EAAQk9D,EAAUC,GACxC,IAAI9kD,EAAS6kD,EAASl9D,GACtB,OAAOiJ,GAAQjJ,GAAUqY,EAhuB3B,SAAmB+Y,EAAO+I,GAKxB,IAJA,IAAI0N,GAAS,EACT1+B,EAASgxB,EAAOhxB,OAChBi0D,EAAShsC,EAAMjoB,SAEV0+B,EAAQ1+B,GACfioB,EAAMgsC,EAASv1B,GAAS1N,EAAO0N,GAEjC,OAAOzW,EAwtB2BisC,CAAUhlD,EAAQ8kD,EAAYn9D,IAkZzDs9D,CAAet9D,EAAQmY,GAAMolD,IAWtC,SAASC,GAAWplD,EAAKvY,GACvB,IAsHiBN,EACbsa,EAvHAtN,EAAO6L,EAAI2gD,SACf,OAuHgB,WADZl/C,SAData,EArHAM,KAuHmB,UAARga,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVta,EACU,OAAVA,GAxHDgN,EAAmB,iBAAP1M,EAAkB,SAAW,QACzC0M,EAAK6L,IAWX,SAASw/C,GAAU53D,EAAQH,GACzB,IAAIN,EAxjCN,SAAkBS,EAAQH,GACxB,OAAiB,MAAVG,OAAiBmT,EAAYnT,EAAOH,GAujC/B49D,CAASz9D,EAAQH,GAC7B,OAAO48D,GAAal9D,GAASA,OAAQ4T,EAp2BvCqlD,GAAKt4D,UAAUw4D,MAvEf,WACE9lD,KAAKmmD,SAAWjB,EAAeA,EAAa,MAAQ,GACpDllD,KAAK0nB,KAAO,GAsEdk+B,GAAKt4D,UAAkB,OAzDvB,SAAoBL,GAClB,IAAIwY,EAASzF,KAAKuoB,IAAIt7B,WAAe+S,KAAKmmD,SAASl5D,GAEnD,OADA+S,KAAK0nB,MAAQjiB,EAAS,EAAI,EACnBA,GAuDTmgD,GAAKt4D,UAAUf,IA3Cf,SAAiBU,GACf,IAAI0M,EAAOqG,KAAKmmD,SAChB,GAAIjB,EAAc,CAChB,IAAIz/C,EAAS9L,EAAK1M,GAClB,MA3YiB,8BA2YVwY,OAA4BlF,EAAYkF,EAEjD,OAAOlY,EAAe1B,KAAK8N,EAAM1M,GAAO0M,EAAK1M,QAAOsT,GAsCtDqlD,GAAKt4D,UAAUi7B,IA1Bf,SAAiBt7B,GACf,IAAI0M,EAAOqG,KAAKmmD,SAChB,OAAOjB,OAA8B3kD,IAAd5G,EAAK1M,GAAsBM,EAAe1B,KAAK8N,EAAM1M,IAyB9E24D,GAAKt4D,UAAUm4B,IAZf,SAAiBx4B,EAAKN,GACpB,IAAIgN,EAAOqG,KAAKmmD,SAGhB,OAFAnmD,KAAK0nB,MAAQ1nB,KAAKuoB,IAAIt7B,GAAO,EAAI,EACjC0M,EAAK1M,GAAQi4D,QAA0B3kD,IAAV5T,EA3aV,4BA2akDA,EAC9DqT,MAuHTgmD,GAAU14D,UAAUw4D,MApFpB,WACE9lD,KAAKmmD,SAAW,GAChBnmD,KAAK0nB,KAAO,GAmFds+B,GAAU14D,UAAkB,OAvE5B,SAAyBL,GACvB,IAAI0M,EAAOqG,KAAKmmD,SACZlxB,EAAQ+xB,GAAartD,EAAM1M,GAE/B,QAAIgoC,EAAQ,KAIRA,GADYt7B,EAAKpD,OAAS,EAE5BoD,EAAK+W,MAELzM,EAAOpY,KAAK8N,EAAMs7B,EAAO,KAEzBj1B,KAAK0nB,MACA,IA0DTs+B,GAAU14D,UAAUf,IA9CpB,SAAsBU,GACpB,IAAI0M,EAAOqG,KAAKmmD,SACZlxB,EAAQ+xB,GAAartD,EAAM1M,GAE/B,OAAOgoC,EAAQ,OAAI10B,EAAY5G,EAAKs7B,GAAO,IA2C7C+wB,GAAU14D,UAAUi7B,IA/BpB,SAAsBt7B,GACpB,OAAO+5D,GAAahnD,KAAKmmD,SAAUl5D,IAAQ,GA+B7C+4D,GAAU14D,UAAUm4B,IAlBpB,SAAsBx4B,EAAKN,GACzB,IAAIgN,EAAOqG,KAAKmmD,SACZlxB,EAAQ+xB,GAAartD,EAAM1M,GAQ/B,OANIgoC,EAAQ,KACRj1B,KAAK0nB,KACP/tB,EAAKuJ,KAAK,CAACjW,EAAKN,KAEhBgN,EAAKs7B,GAAO,GAAKtoC,EAEZqT,MAyGTimD,GAAS34D,UAAUw4D,MAtEnB,WACE9lD,KAAK0nB,KAAO,EACZ1nB,KAAKmmD,SAAW,CACd,KAAQ,IAAIP,GACZ,IAAO,IAAKhiC,GAAOoiC,IACnB,OAAU,IAAIJ,KAkElBK,GAAS34D,UAAkB,OArD3B,SAAwBL,GACtB,IAAIwY,EAASmlD,GAAW5qD,KAAM/S,GAAa,OAAEA,GAE7C,OADA+S,KAAK0nB,MAAQjiB,EAAS,EAAI,EACnBA,GAmDTwgD,GAAS34D,UAAUf,IAvCnB,SAAqBU,GACnB,OAAO29D,GAAW5qD,KAAM/S,GAAKV,IAAIU,IAuCnCg5D,GAAS34D,UAAUi7B,IA3BnB,SAAqBt7B,GACnB,OAAO29D,GAAW5qD,KAAM/S,GAAKs7B,IAAIt7B,IA2BnCg5D,GAAS34D,UAAUm4B,IAdnB,SAAqBx4B,EAAKN,GACxB,IAAIgN,EAAOixD,GAAW5qD,KAAM/S,GACxBy6B,EAAO/tB,EAAK+tB,KAIhB,OAFA/tB,EAAK8rB,IAAIx4B,EAAKN,GACdqT,KAAK0nB,MAAQ/tB,EAAK+tB,MAAQA,EAAO,EAAI,EAC9B1nB,MAyDTkmD,GAAS54D,UAAUs3B,IAAMshC,GAAS54D,UAAU4V,KAnB5C,SAAqBvW,GAEnB,OADAqT,KAAKmmD,SAAS1gC,IAAI94B,EA3qBC,6BA4qBZqT,MAkBTkmD,GAAS54D,UAAUi7B,IANnB,SAAqB57B,GACnB,OAAOqT,KAAKmmD,SAAS59B,IAAI57B,IAqG3By5D,GAAM94D,UAAUw4D,MA3EhB,WACE9lD,KAAKmmD,SAAW,IAAIH,GACpBhmD,KAAK0nB,KAAO,GA0Ed0+B,GAAM94D,UAAkB,OA9DxB,SAAqBL,GACnB,IAAI0M,EAAOqG,KAAKmmD,SACZ1gD,EAAS9L,EAAa,OAAE1M,GAG5B,OADA+S,KAAK0nB,KAAO/tB,EAAK+tB,KACVjiB,GA0DT2gD,GAAM94D,UAAUf,IA9ChB,SAAkBU,GAChB,OAAO+S,KAAKmmD,SAAS55D,IAAIU,IA8C3Bm5D,GAAM94D,UAAUi7B,IAlChB,SAAkBt7B,GAChB,OAAO+S,KAAKmmD,SAAS59B,IAAIt7B,IAkC3Bm5D,GAAM94D,UAAUm4B,IArBhB,SAAkBx4B,EAAKN,GACrB,IAAIgN,EAAOqG,KAAKmmD,SAChB,GAAIxsD,aAAgBqsD,GAAW,CAC7B,IAAI8E,EAAQnxD,EAAKwsD,SACjB,IAAKviC,GAAQknC,EAAMv0D,OAASw0D,IAG1B,OAFAD,EAAM5nD,KAAK,CAACjW,EAAKN,IACjBqT,KAAK0nB,OAAS/tB,EAAK+tB,KACZ1nB,KAETrG,EAAOqG,KAAKmmD,SAAW,IAAIF,GAAS6E,GAItC,OAFAnxD,EAAK8rB,IAAIx4B,EAAKN,GACdqT,KAAK0nB,KAAO/tB,EAAK+tB,KACV1nB,MA+hBT,IAAI2qD,GAAchG,EAA+B,SAASv3D,GACxD,OAAc,MAAVA,EACK,IAETA,EAAShB,OAAOgB,GA9sClB,SAAqBoxB,EAAOilC,GAM1B,IALA,IAAIxuB,GAAS,EACT1+B,EAAkB,MAATioB,EAAgB,EAAIA,EAAMjoB,OACnCy0D,EAAW,EACXvlD,EAAS,KAEJwvB,EAAQ1+B,GAAQ,CACvB,IAAI5J,EAAQ6xB,EAAMyW,GACdwuB,EAAU92D,EAAOsoC,EAAOzW,KAC1B/Y,EAAOulD,KAAcr+D,GAGzB,OAAO8Y,EAmsCAwlD,CAAYtG,EAAiBv3D,IAAS,SAAS89D,GACpD,OAAOzG,EAAqB54D,KAAKuB,EAAQ89D,QAsd7C,WACE,MAAO,IA5cLlD,GAASf,GAkCb,SAASF,GAAQp6D,EAAO4J,GAEtB,SADAA,EAAmB,MAAVA,EAt2CY,iBAs2CwBA,KAE1B,iBAAT5J,GAAqBg2D,EAASzwC,KAAKvlB,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQ4J,EA4D7C,SAAS6uD,GAASxlD,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOqkD,EAAap4D,KAAK+T,GACzB,MAAOvG,IACT,IACE,OAAQuG,EAAO,GACf,MAAOvG,KAEX,MAAO,GAmCT,SAASinB,GAAG3zB,EAAO86D,GACjB,OAAO96D,IAAU86D,GAAU96D,GAAUA,GAAS86D,GAAUA,GA5IrD1C,GA7yCa,qBA6yCDiD,GAAO,IAAIjD,EAAS,IAAIoG,YAAY,MAChDvnC,GAAOokC,GAAO,IAAIpkC,IAAQ2+B,GAC1BzkB,GAzzCY,oBAyzCDkqB,GAAOlqB,EAAQC,YAC1B5Y,GAAO6iC,GAAO,IAAI7iC,IAAQs9B,GAC1BwC,GApzCY,oBAozCD+C,GAAO,IAAI/C,MACzB+C,GAAS,SAASr7D,GAChB,IAAI8Y,EAASwhD,GAAWt6D,GACpB40B,EAAO9b,GAAU+8C,EAAY71D,EAAMsJ,iBAAcsK,EACjD6qD,EAAa7pC,EAAO6jC,GAAS7jC,GAAQ,GAEzC,GAAI6pC,EACF,OAAQA,GACN,KAAKjG,EAAoB,MAzzCf,oBA0zCV,KAAKE,EAAe,OAAO9C,EAC3B,KAAK+C,EAAmB,MAr0Cf,mBAs0CT,KAAKC,EAAe,OAAO9C,EAC3B,KAAK+C,EAAmB,MAh0Cf,mBAm0Cb,OAAO//C,IA8IX,IAAIghD,GAAca,GAAgB,WAAa,OAAOnmD,UAApB,IAAsCmmD,GAAkB,SAAS36D,GACjG,OAAO46D,GAAa56D,IAAUY,EAAe1B,KAAKc,EAAO,YACtD83D,EAAqB54D,KAAKc,EAAO,WA0BlC0J,GAAUD,MAAMC,QAgDpB,IAAIwuD,GAAWD,GA4Of,WACE,OAAO,GA1LT,SAASoF,GAAWr9D,GAClB,IAAKm9D,GAASn9D,GACZ,OAAO,EAIT,IAAIyQ,EAAM6pD,GAAWt6D,GACrB,MApmDY,qBAomDLyQ,GAnmDI,8BAmmDcA,GAxmDZ,0BAwmD6BA,GA7lD7B,kBA6lDgDA,EA6B/D,SAASiuD,GAAS1+D,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GA5oDb,iBAwqDvB,SAASm9D,GAASn9D,GAChB,IAAIsa,SAActa,EAClB,OAAgB,MAATA,IAA0B,UAARsa,GAA4B,YAARA,GA2B/C,SAASsgD,GAAa56D,GACpB,OAAgB,MAATA,GAAiC,iBAATA,EAoBjC,IAAI42D,GAAeD,EAhiDnB,SAAmB1jD,GACjB,OAAO,SAASjT,GACd,OAAOiT,EAAKjT,IA8hDsB2+D,CAAUhI,GAnvBhD,SAA0B32D,GACxB,OAAO46D,GAAa56D,IAClB0+D,GAAS1+D,EAAM4J,WAAaqsD,EAAeqE,GAAWt6D,KA+wB1D,SAAS4Y,GAAKnY,GACZ,OA1NgB,OADGT,EA2NAS,IA1NKi+D,GAAS1+D,EAAM4J,UAAYyzD,GAAWr9D,GA0NjC05D,GAAcj5D,GAAU68D,GAAS78D,GA3NhE,IAAqBT,EAqQrBxB,EAAOD,QAlNP,SAAiByB,EAAO86D,GACtB,OAAOD,GAAY76D,EAAO86D,M,yDCtmD5B,sGAMO,MAAM8D,EAAU,UAQVC,EAAS,SAOTC,EAAQ,S,6BCrBrB,kCAIO,MAAMC,EAAU,CACnBC,OAAQ,iBACR9gB,iBAAkB,+BAClB+gB,SAAU,mBACVC,UAAW,oBACXr2D,eAAgB,iBAChBs2D,YAAa,gB,+CCJFtpD,MANf,SAAmB9C,EAAMzT,GAExB,OAAOyT,EAAK8C,UAAY9C,EAAK8C,SAASG,gBAAkB1W,EAAK0W,e,QCA/CtH,MAAf,gB,gBCAelF,MAAf,I,QCDe,wBCCAkF,MAAf,aCgBe0wD,EAfCC,GAAQ,IAAI1H,OAI3B,yBAMQ2H,EAAa,QAAUA,EAAa,KAC3CA,EAAa,gBCXf5sC,IAAO6sC,SAAW,SAAUx0D,EAAGC,GAC9B,IAAIw0D,EAAuB,IAAfz0D,EAAEqI,SAAiBrI,EAAEsf,gBAAkBtf,EAClD00D,EAAMz0D,GAAKA,EAAEyO,WAEd,OAAO1O,IAAM00D,MAAWA,GAAwB,IAAjBA,EAAIrsD,YAIlCosD,EAAMD,SACLC,EAAMD,SAAUE,GAChB10D,EAAE20D,yBAA8D,GAAnC30D,EAAE20D,wBAAyBD,MCT3D,IAAIE,EAAa,+CAEjB,SAASC,EAAYC,EAAIC,GACxB,OAAKA,EAGQ,OAAPD,EACG,IAIDA,EAAG1sC,MAAO,GAAI,GAAM,KAAO0sC,EAAGj1D,WAAYi1D,EAAGj2D,OAAS,GAAIG,SAAU,IAAO,IAI5E,KAAO81D,EAGfntC,IAAOqtC,eAAiB,SAAUC,GACjC,OAASA,EAAM,IAAK/qD,QAAS0qD,EAAYC,ICrB3Bp2D,UAAf,KCEA,IAAIy2D,EAGJ,SAASC,EAAUn1D,EAAGC,GAGlB,GAAID,IAAMC,EAGN,OAFAi1D,GAAe,EAER,EAIX,IAAIE,GAAWp1D,EAAE20D,yBAA2B10D,EAAE00D,wBAE9C,OAAIS,IASJA,GAAWp1D,EAAEyqB,eAAiBzqB,KAAOC,EAAEwqB,eAAiBxqB,GAClDD,EAAE20D,wBAAwB10D,GAG1B,EAGQ,EAAVm1D,EAOIp1D,GAAK2D,KAAY3D,EAAEyqB,eAAiB9mB,KAC1CgkB,IAAO6sC,SAAS7wD,IAAU3D,IACZ,EAORC,GAAK0D,KAAY1D,EAAEwqB,eAAiB9mB,KAC1CgkB,IAAO6sC,SAAS7wD,IAAU1D,GACb,EAIJ,EAGM,EAAVm1D,GAAe,EAAI,GAO9BztC,IAAO0tC,WAAa,SAASlrC,GACzB,IAAIniB,EACAstD,EAAa,GACb9zD,EAAI,EACJxN,EAAI,EAMR,GAJAkhE,GAAe,EAEftrD,EAAKzV,KAAKg2B,EAASgrC,GAEfD,EAAc,CACd,KAAOltD,EAAOmiB,EAAQn2B,MACdgU,IAASmiB,EAAQn2B,KACjBwN,EAAI8zD,EAAW9pD,KAAKxX,IAG5B,KAAOwN,KACH2oB,EAAQ5d,OAAO+oD,EAAW9zD,GAAI,GAItC,OAAO2oB,GCxEX,IAAIorC,EAAe5xD,IACfgY,EAAU2D,EAAgB3D,SAAW2D,EAAgBk2C,mBAEzD,WAEA,IAAIxhE,EACAyhE,EACAC,EAGA/xD,EACA2b,EACAq2C,EAGAjsC,EAAU/B,IAAO+B,QACjBksC,EAAU,EACVC,EAAO,EACPC,EAAaC,IACbC,EAAaD,IACbE,EAAgBF,IAChBG,EAAyBH,IAQzBI,EAAa,0BAA4B5B,EACrC,0CAGJhvD,EAAa,MAAQgvD,EAAa,KAAO4B,EAAa,OAAS5B,EAG3D,gBAAkBA,EAGlB,2DAA6D4B,EAAa,OAC1E5B,EAAa,OAEjB6B,EAAU,KAAOD,EAAP,wFAOuB5wD,EAPvB,eAcV8wD,EAAc,IAAIzJ,OAAQ2H,EAAa,IAAK,KAC5C+B,EAAQ,IAAI1J,OAAQ,IAAM2H,EAAa,8BAAgCA,EAAa,KAAM,KAE1FgC,EAAS,IAAI3J,OAAQ,IAAM2H,EAAa,KAAOA,EAAa,KAC5DiC,EAAe,IAAI5J,OAAQ,IAAM2H,EAAa,WAAaA,EAAa,IACpEA,EAAa,KACjBkC,EAAW,IAAI7J,OAAQ2H,EAAa,MAEpCmC,EAAU,IAAI9J,OAAQwJ,GACtBO,EAAc,IAAI/J,OAAQ,IAAMuJ,EAAa,KAE7CS,EAAY,CACRC,GAAI,IAAIjK,OAAQ,MAAQuJ,EAAa,KACrCW,MAAO,IAAIlK,OAAQ,QAAUuJ,EAAa,KAC1CY,IAAK,IAAInK,OAAQ,KAAOuJ,EAAa,SACrCa,KAAM,IAAIpK,OAAQ,IAAMrnD,GACxB0xD,OAAQ,IAAIrK,OAAQ,IAAMwJ,GAC1Bc,MAAO,IAAItK,OACP,yDACI2H,EAAa,+BAAiCA,EAAa,cAC3DA,EAAa,aAAeA,EAAa,SAAU,KAC3D4C,KAAM,IAAIvK,OAAQ,mIAA0B,KAI5CwK,aAAc,IAAIxK,OAAQ,IAAM2H,EAC5B,mDAAqDA,EACrD,mBAAqBA,EAAa,mBAAoB,MAG9D8C,EAAU,sCACVC,EAAU,SAGVC,EAAa,mCAEbC,EAAW,OAIXC,EAAY,IAAI7K,OAAQ,uBAAyB2H,EAC7C,uBAAwB,KAC5BmD,EAAY,SAAUj0D,EAAQk0D,GAC1B,IAAIC,EAAO,KAAOn0D,EAAO2kB,MAAO,GAAM,MAEtC,OAAKuvC,IAUEC,EAAO,EACVx2D,OAAOC,aAAcu2D,EAAO,OAC5Bx2D,OAAOC,aAAcu2D,GAAQ,GAAK,MAAe,KAAPA,EAAe,SAOjEC,EAAgB,WACZC,KAGJC,EAAqBC,IACjB,SAAUhwD,GACN,OAAyB,IAAlBA,EAAKiwD,UAAqBntD,EAAU9C,EAAM,cAErD,CAAEkwD,IAAK,aAAc3kC,KAAM,WAGnC,SAAS4kC,EAAe/qD,GACpB,MAAM,IAAIzN,MAAO,0CAA4CyN,GAGjE,SAASwwB,EAAMhW,EAAUC,EAASsC,EAASiuC,GACvC,IAAIhkE,EAAGJ,EAAGgU,EAAMqwD,EAAKz8C,EAAOu7B,EAAQmhB,EAChCC,EAAa1wC,GAAWA,EAAQ4C,cAGhCpiB,EAAWwf,EAAUA,EAAQxf,SAAW,EAK5C,GAHA8hB,EAAUA,GAAW,GAGI,iBAAbvC,IAA0BA,GACrB,IAAbvf,GAA+B,IAAbA,GAA+B,KAAbA,EAEpC,OAAO8hB,EAIX,IAAMiuC,IACFN,EAAajwC,GACbA,EAAUA,GAAWlkB,EAEhBgyD,GAAiB,CAIlB,GAAkB,KAAbttD,IAAqBuT,EAAQ27C,EAAW/U,KAAM56B,IAG/C,GAAOxzB,EAAIwnB,EAAO,GAAQ,CAGtB,GAAkB,IAAbvT,EAID,OAHOL,EAAO6f,EAAQ2wC,eAAgBpkE,KAClCoX,IAAKrX,KAAMg2B,EAASniB,GAEjBmiB,EAIP,GAAKouC,IAAgBvwD,EAAOuwD,EAAWC,eAAgBpkE,KACnDuzB,IAAO6sC,SAAU3sC,EAAS7f,GAG1B,OADAwD,IAAKrX,KAAMg2B,EAASniB,GACbmiB,MAKZ,IAAKvO,EAAO,GAEf,OADApQ,IAAKub,MAAOoD,EAAStC,EAAQzO,qBAAsBwO,IAC5CuC,EAGJ,IAAO/1B,EAAIwnB,EAAO,KAASiM,EAAQ4wC,uBAEtC,OADAjtD,IAAKub,MAAOoD,EAAStC,EAAQ4wC,uBAAwBrkE,IAC9C+1B,EAKf,KAAM+rC,EAAwBtuC,EAAW,MAClCysC,GAAcA,EAAU75C,KAAMoN,IAAe,CAYhD,GAVA0wC,EAAc1wC,EACd2wC,EAAa1wC,EASK,IAAbxf,IACCouD,EAASj8C,KAAMoN,IAAc4uC,EAAah8C,KAAMoN,IAAe,CAqBjE,MAlBA2wC,EAAaf,EAASh9C,KAAMoN,IAAc8wC,EAAa7wC,EAAQnZ,aAC3DmZ,KAIgBA,GAAWysC,MAGpB+D,EAAMxwC,EAAQ3c,aAAc,OAC/BmtD,EAAM1wC,IAAOqtC,eAAgBqD,GAE7BxwC,EAAQ/d,aAAc,KAAQuuD,EAAM3uC,IAM5C11B,GADAmjD,EAASwhB,EAAU/wC,IACR/oB,OACH7K,KACJmjD,EAAQnjD,IAAQqkE,EAAM,IAAMA,EAAM,UAAa,IAC3CO,GAAYzhB,EAAQnjD,IAE5BskE,EAAcnhB,EAAO1rC,KAAM,KAG/B,IAII,OAHAD,IAAKub,MAAOoD,EACRouC,EAAWM,iBAAkBP,IAE1BnuC,EACT,MAAQ2uC,GACN5C,EAAwBtuC,GAAU,GANtC,QAQSywC,IAAQ3uC,GACT7B,EAAQjZ,gBAAiB,QAQ7C,OAqwCJ,SAAiBgZ,EAAUC,EAASsC,EAASiuC,GACzC,IAAIpkE,EAAG+kE,EAAQ1b,EAAO9tC,EAAMquB,EACxBo7B,EAA+B,mBAAbpxC,GAA2BA,EAC7ChM,GAASw8C,GAAQO,EAAY/wC,EAAWoxC,EAASpxC,UAAYA,GAMjE,GAJAuC,EAAUA,GAAW,GAIC,IAAjBvO,EAAM/c,OAAe,CAItB,IADAk6D,EAASn9C,EAAO,GAAMA,EAAO,GAAIwM,MAAO,IAC5BvpB,OAAS,GAAsC,QAA/Bw+C,EAAQ0b,EAAQ,IAAMxpD,MACrB,IAArBsY,EAAQxf,UAAkBstD,GAAkBF,EAAKwD,SAAUF,EAAQ,GAAIxpD,MAAS,CAMpF,KAJAsY,GAAY4tC,EAAK73B,KAAKi5B,GAClBxZ,EAAM1hC,QAAS,GAAIzR,QAASutD,EAAWC,GACvC7vC,IACC,IAAM,IAEP,OAAOsC,EAGC6uC,IACRnxC,EAAUA,EAAQnZ,YAGtBkZ,EAAWA,EAASQ,MAAO2wC,EAAOx+B,QAAQtlC,MAAM4J,QAKpD,IADA7K,EAAI4iE,EAAUQ,aAAa58C,KAAMoN,GAAa,EAAImxC,EAAOl6D,OACjD7K,MACJqpD,EAAQ0b,EAAQ/kE,IAGXyhE,EAAKwD,SAAY1pD,EAAO8tC,EAAM9tC,QAGnC,IAAOquB,EAAO63B,EAAK73B,KAAMruB,MAGd6oD,EAAOx6B,EACVyf,EAAM1hC,QAAS,GAAIzR,QAASutD,EAAWC,GACvCF,EAASh9C,KAAMu+C,EAAQ,GAAIxpD,OACvBmpD,EAAa7wC,EAAQnZ,aAAgBmZ,IACvC,CAKF,GAFAkxC,EAAOxsD,OAAQvY,EAAG,KAClB4zB,EAAWwwC,EAAKv5D,QAAU+5D,GAAYG,IAGlC,OADAvtD,IAAKub,MAAOoD,EAASiuC,GACdjuC,EAGX,OAehB,OAPE6uC,GAAYE,GAAStxC,EAAUhM,IAC7Bw8C,EACAvwC,GACC8tC,EACDxrC,GACCtC,GAAW2vC,EAASh9C,KAAMoN,IAAc8wC,EAAa7wC,EAAQnZ,aAAgBmZ,GAE3EsC,EA70CAgvC,CAAQvxC,EAAS1d,QAASosD,EAAO,MAAQzuC,EAASsC,EAASiuC,GAStE,SAASrC,IACL,IAAIloD,EAAO,GAYX,OAVA,SAASurD,EAAO7jE,EAAKN,GAQjB,OALK4Y,EAAKrC,KAAMjW,EAAM,KAAQkgE,EAAK4D,oBAGxBD,EAAOvrD,EAAK0sB,SAEd6+B,EAAO7jE,EAAM,KAAQN,GAStC,SAASqkE,EAAcxxC,GAEnB,OADAA,EAAI4B,IAAY,EACT5B,EAOX,SAASyxC,EAAmBhqD,GACxB,OAAO,SAAUvH,GACb,OAAO8C,EAAU9C,EAAM,UAAaA,EAAKuH,OAASA,GAQ1D,SAASiqD,EAAoBjqD,GACzB,OAAO,SAAUvH,GACb,OAAS8C,EAAU9C,EAAM,UAAa8C,EAAU9C,EAAM,YAClDA,EAAKuH,OAASA,GAQ1B,SAASkqD,EAAsBxB,GAG3B,OAAO,SAAUjwD,GAKb,MAAK,SAAUA,EASNA,EAAK0G,aAAgC,IAAlB1G,EAAKiwD,SAGpB,UAAWjwD,EACP,UAAWA,EAAK0G,WACV1G,EAAK0G,WAAWupD,WAAaA,EAE7BjwD,EAAKiwD,WAAaA,EAM1BjwD,EAAK0xD,aAAezB,GAGvBjwD,EAAK0xD,cAAgBzB,GACjBF,EAAoB/vD,KAAWiwD,EAGpCjwD,EAAKiwD,WAAaA,EAKjB,UAAWjwD,GACZA,EAAKiwD,WAAaA,GAYrC,SAAS0B,EAAwB7xC,GAC7B,OAAOwxC,GAAc,SAAUM,GAE3B,OADAA,GAAYA,EACLN,GAAc,SAAUlB,EAAMz8C,GAMjC,IALA,IAAIna,EACAq4D,EAAe/xC,EAAI,GAAIswC,EAAKv5D,OAAQ+6D,GACpC5lE,EAAI6lE,EAAah7D,OAGb7K,KACCokE,EAAQ52D,EAAIq4D,EAAc7lE,MAC3BokE,EAAM52D,KAASma,EAASna,GAAM42D,EAAM52D,WAYxD,SAASk3D,EAAa7wC,GAClB,OAAOA,QAAmD,IAAjCA,EAAQzO,sBAAwCyO,EAO7E,SAASiwC,EAAatuD,GAClB,IAAIswD,EACAlxD,EAAMY,EAAOA,EAAKihB,eAAiBjhB,EAAO+rD,EAOzC3sD,GAAOjF,GAA6B,IAAjBiF,EAAIP,WAM5BiX,GADA3b,EAAWiF,GACgB0W,gBAC3Bq2C,GAAkBhuC,IAAO0C,SAAU1mB,GAQ9B2wD,GAAQiB,GAAgB5xD,IACvBm2D,EAAYn2D,EAASo2D,cAAiBD,EAAUE,MAAQF,GAC1DA,EAAUh0B,iBAAkB,SAAU+xB,IA8kB9C,IAAM7jE,KA1kBN4pC,EAAKjiB,QAAU,SAAUs+C,EAAMC,GAC3B,OAAOt8B,EAAMq8B,EAAM,KAAM,KAAMC,IAGnCt8B,EAAKu8B,gBAAkB,SAAUnyD,EAAMiyD,GAGnC,GAFAnC,EAAa9vD,GAER2tD,IACAO,EAAwB+D,EAAO,QAC7B5F,IAAcA,EAAU75C,KAAMy/C,IAEjC,IACI,OAAOt+C,EAAQxnB,KAAM6T,EAAMiyD,GAC7B,MAAQt4D,GACNu0D,EAAwB+D,GAAM,GAItC,OAAOr8B,EAAMq8B,EAAMt2D,EAAU,KAAM,CAAEqE,IAASnJ,OAAS,IAG3D42D,EAAO9tC,IAAOsyC,KAAO,CAGjBZ,YAAa,GAEbe,aAAcd,EAEd19C,MAAOg7C,EAEPh5B,KAAM,CACFi5B,GAAI,SAAUrnD,EAAIqY,GACd,QAAuC,IAA3BA,EAAQ2wC,gBAAkC7C,EAAiB,CACnE,IAAI3tD,EAAO6f,EAAQ2wC,eAAgBhpD,GACnC,OAAOxH,EAAO,CAAEA,GAAS,KAIjC+uD,IAAK,SAAUrxD,EAAKmiB,GAChB,YAA6C,IAAjCA,EAAQzO,qBACTyO,EAAQzO,qBAAsB1T,GAI9BmiB,EAAQgxC,iBAAkBnzD,IAIzCoxD,MAAO,SAAUuD,EAAWxyC,GACxB,QAA+C,IAAnCA,EAAQ4wC,wBAA0C9C,EAC1D,OAAO9tC,EAAQ4wC,uBAAwB4B,KAKnDpB,SAAU,CACN,IAAK,CAAEf,IAAK,aAAcvvC,OAAO,GACjC,IAAK,CAAEuvC,IAAK,cACZ,IAAK,CAAEA,IAAK,kBAAmBvvC,OAAO,GACtC,IAAK,CAAEuvC,IAAK,oBAGhBoC,UAAW,CACPtD,KAAM,SAAUp7C,GAWZ,OAVAA,EAAO,GAAMA,EAAO,GAAI1R,QAASutD,EAAWC,GAG5C97C,EAAO,IAAQA,EAAO,IAAOA,EAAO,IAAOA,EAAO,IAAO,IACpD1R,QAASutD,EAAWC,GAEL,OAAf97C,EAAO,KACRA,EAAO,GAAM,IAAMA,EAAO,GAAM,KAG7BA,EAAMwM,MAAO,EAAG,IAG3B8uC,MAAO,SAAUt7C,GAkCb,OAtBAA,EAAO,GAAMA,EAAO,GAAI3Q,cAEU,QAA7B2Q,EAAO,GAAIwM,MAAO,EAAG,IAGhBxM,EAAO,IACTu8C,EAAev8C,EAAO,IAK1BA,EAAO,KAASA,EAAO,GACnBA,EAAO,IAAQA,EAAO,IAAO,GAC7B,GAAqB,SAAfA,EAAO,IAAiC,QAAfA,EAAO,KAE1CA,EAAO,KAAWA,EAAO,GAAMA,EAAO,IAAwB,QAAfA,EAAO,KAG9CA,EAAO,IACfu8C,EAAev8C,EAAO,IAGnBA,GAGXq7C,OAAQ,SAAUr7C,GACd,IAAI2+C,EACAC,GAAY5+C,EAAO,IAAOA,EAAO,GAErC,OAAKg7C,EAAUM,MAAM18C,KAAMoB,EAAO,IACvB,MAINA,EAAO,GACRA,EAAO,GAAMA,EAAO,IAAOA,EAAO,IAAO,GAGjC4+C,GAAY9D,EAAQl8C,KAAMggD,KAGhCD,EAAS5B,EAAU6B,GAAU,MAG7BD,EAASC,EAAStuD,QAAS,IAAKsuD,EAAS37D,OAAS07D,GAAWC,EAAS37D,UAGxE+c,EAAO,GAAMA,EAAO,GAAIwM,MAAO,EAAGmyC,GAClC3+C,EAAO,GAAM4+C,EAASpyC,MAAO,EAAGmyC,IAI7B3+C,EAAMwM,MAAO,EAAG,MAI/BkV,OAAQ,CACJu5B,GAAI,SAAUrnD,GACV,IAAIirD,EAASjrD,EAAGtF,QAASutD,EAAWC,GACpC,OAAO,SAAU1vD,GACb,OAAOA,EAAKkD,aAAc,QAAWuvD,IAI7C1D,IAAK,SAAU2D,GACX,IAAIC,EAAmBD,EAAiBxwD,QAASutD,EAAWC,GAAYzsD,cACxE,MAA4B,MAArByvD,EAEH,WACI,OAAO,GAGX,SAAU1yD,GACN,OAAO8C,EAAU9C,EAAM2yD,KAInC7D,MAAO,SAAUuD,GACb,IAAIO,EAAU9E,EAAYuE,EAAY,KAEtC,OAAOO,IACDA,EAAU,IAAIhO,OAAQ,MAAQ2H,EAAa,IAAM8F,EAC/C,IAAM9F,EAAa,SACvBuB,EAAYuE,GAAW,SAAUryD,GAC7B,OAAO4yD,EAAQpgD,KACe,iBAAnBxS,EAAKqyD,WAA0BryD,EAAKqyD,gBACV,IAAtBryD,EAAKkD,cACRlD,EAAKkD,aAAc,UACvB,QAKpB8rD,KAAM,SAAUziE,EAAMsmE,EAAUC,GAC5B,OAAO,SAAU9yD,GACb,IAAI+F,EAAS4Z,IAAO9d,KAAM7B,EAAMzT,GAEhC,OAAe,MAAVwZ,EACmB,OAAb8sD,GAELA,IAIN9sD,GAAU,GAEQ,MAAb8sD,EACM9sD,IAAW+sD,EAEJ,OAAbD,EACM9sD,IAAW+sD,EAEJ,OAAbD,EACMC,GAAqC,IAA5B/sD,EAAO7B,QAAS4uD,GAElB,OAAbD,EACMC,GAAS/sD,EAAO7B,QAAS4uD,IAAW,EAE7B,OAAbD,EACMC,GAAS/sD,EAAOqa,OAAQ0yC,EAAMj8D,UAAai8D,EAEpC,OAAbD,GACQ,IAAM9sD,EAAO7D,QAASmsD,EAAa,KAAQ,KAC/CnqD,QAAS4uD,IAAW,EAEX,OAAbD,IACM9sD,IAAW+sD,GAAS/sD,EAAOqa,MAAO,EAAG0yC,EAAMj8D,OAAS,KAAQi8D,EAAQ,QAOvF5D,MAAO,SAAU3nD,EAAMwrD,EAAMC,EAAWryC,EAAOE,GAC3C,IAAIoyC,EAAgC,QAAvB1rD,EAAK6Y,MAAO,EAAG,GACxB8yC,EAA+B,SAArB3rD,EAAK6Y,OAAQ,GACvB+yC,EAAkB,YAATJ,EAEb,OAAiB,IAAVpyC,GAAwB,IAATE,EAGlB,SAAU7gB,GACN,QAASA,EAAK0G,YAGlB,SAAU1G,EAAMozD,EAAUC,GACtB,IAAIjC,EAAOkC,EAAY9xD,EAAM+xD,EAAWl2C,EACpC6yC,EAAM+C,IAAWC,EAAU,cAAgB,kBAC3CM,EAASxzD,EAAK0G,WACdna,EAAO4mE,GAAUnzD,EAAK8C,SAASG,cAC/BwwD,GAAYJ,IAAQF,EACpBO,GAAO,EAEX,GAAKF,EAAS,CAGV,GAAKP,EAAS,CACV,KAAQ/C,GAAM,CAEV,IADA1uD,EAAOxB,EACGwB,EAAOA,EAAM0uD,IACnB,GAAKiD,EACDrwD,EAAUtB,EAAMjV,GACE,IAAlBiV,EAAKnB,SAEL,OAAO,EAKfgd,EAAQ6yC,EAAe,SAAT3oD,IAAoB8V,GAAS,cAE/C,OAAO,EAMX,GAHAA,EAAQ,CAAE61C,EAAUM,EAAOp2C,WAAao2C,EAAOG,WAG1CT,GAAWO,GASZ,IAHAC,GADAH,GADAnC,GADAkC,EAAaE,EAAQ9xC,KAAe8xC,EAAQ9xC,GAAY,KACpCna,IAAU,IACX,KAAQqmD,GAAWwD,EAAO,KACzBA,EAAO,GAC3B5vD,EAAO+xD,GAAaC,EAAOrzD,WAAYozD,GAE7B/xD,IAAS+xD,GAAa/xD,GAAQA,EAAM0uD,KAGxCwD,EAAOH,EAAY,IAAOl2C,EAAMrM,OAGlC,GAAuB,IAAlBxP,EAAKnB,YAAoBqzD,GAAQlyD,IAASxB,EAAO,CAClDszD,EAAY/rD,GAAS,CAAEqmD,EAAS2F,EAAWG,GAC3C,YAgBR,GATKD,IAIDC,EADAH,GADAnC,GADAkC,EAAatzD,EAAM0hB,KAAe1hB,EAAM0hB,GAAY,KAChCna,IAAU,IACX,KAAQqmD,GAAWwD,EAAO,KAMnC,IAATsC,EAGD,MAAUlyD,IAAS+xD,GAAa/xD,GAAQA,EAAM0uD,KACxCwD,EAAOH,EAAY,IAAOl2C,EAAMrM,WAE3BmiD,EACHrwD,EAAUtB,EAAMjV,GACE,IAAlBiV,EAAKnB,cACHqzD,IAGGD,KACDH,EAAa9xD,EAAMkgB,KACblgB,EAAMkgB,GAAY,KACZna,GAAS,CAAEqmD,EAAS8F,IAG/BlyD,IAASxB,MAU9B,OADA0zD,GAAQ7yC,KACQF,GAAW+yC,EAAO/yC,GAAU,GAAK+yC,EAAO/yC,GAAS,KAKjFsuC,OAAQ,SAAU2E,EAAQhC,GAMtB,IAAI5uB,EACAljB,EAAK2tC,EAAKW,QAASwF,IAAYnG,EAAKoG,WAAYD,EAAO3wD,gBACnDktD,EAAe,uBAAyByD,GAKhD,OAAK9zC,EAAI4B,GACE5B,EAAI8xC,GAIV9xC,EAAGjpB,OAAS,GACbmsC,EAAO,CAAE4wB,EAAQA,EAAQ,GAAIhC,GACtBnE,EAAKoG,WAAWhmE,eAAgB+lE,EAAO3wD,eAC1CquD,GAAc,SAAUlB,EAAMz8C,GAI1B,IAHA,IAAI44B,EACA16B,EAAUiO,EAAIswC,EAAMwB,GACpB5lE,EAAI6lB,EAAQhb,OACR7K,KAEJokE,EADA7jB,EAAMroC,IAAQ/X,KAAMikE,EAAMv+C,EAAS7lB,OAClB2nB,EAAS44B,GAAQ16B,EAAS7lB,OAGnD,SAAUgU,GACN,OAAO8f,EAAI9f,EAAM,EAAGgjC,KAIzBljB,IAIfsuC,QAAS,CAGL0F,IAAKxC,GAAc,SAAU1xC,GAKzB,IAAIm0C,EAAQ,GACR5xC,EAAU,GACV6xC,EAAU9C,GAAStxC,EAAS1d,QAASosD,EAAO,OAEhD,OAAO0F,EAAStyC,GACZ4vC,GAAc,SAAUlB,EAAMz8C,EAASy/C,EAAUC,GAM7C,IALA,IAAIrzD,EACAi0D,EAAYD,EAAS5D,EAAM,KAAMiD,EAAK,IACtCrnE,EAAIokE,EAAKv5D,OAGL7K,MACGgU,EAAOi0D,EAAWjoE,MACrBokE,EAAMpkE,KAAS2nB,EAAS3nB,GAAMgU,OAI1C,SAAUA,EAAMozD,EAAUC,GAMtB,OALAU,EAAO,GAAM/zD,EACbg0D,EAASD,EAAO,KAAMV,EAAKlxC,GAG3B4xC,EAAO,GAAM,MACL5xC,EAAQnR,UAI5B6X,IAAKyoC,GAAc,SAAU1xC,GACzB,OAAO,SAAU5f,GACb,OAAO41B,EAAMhW,EAAU5f,GAAOnJ,OAAS,MAI/C21D,SAAU8E,GAAc,SAAUrvD,GAE9B,OADAA,EAAOA,EAAKC,QAASutD,EAAWC,GACzB,SAAU1vD,GACb,OAASA,EAAKwX,aAAemI,IAAO1d,KAAMjC,IAASkE,QAASjC,IAAU,MAW9EiyD,KAAM5C,GAAc,SAAU4C,GAO1B,OAJMvF,EAAYn8C,KAAM0hD,GAAQ,KAC5B/D,EAAe,qBAAuB+D,GAE1CA,EAAOA,EAAKhyD,QAASutD,EAAWC,GAAYzsD,cACrC,SAAUjD,GACb,IAAIm0D,EACJ,GACI,GAAOA,EAAWxG,EACd3tD,EAAKk0D,KACLl0D,EAAKkD,aAAc,aAAgBlD,EAAKkD,aAAc,QAGtD,OADAixD,EAAWA,EAASlxD,iBACAixD,GAA2C,IAAnCC,EAASjwD,QAASgwD,EAAO,YAEjDl0D,EAAOA,EAAK0G,aAAkC,IAAlB1G,EAAKK,UAC7C,OAAO,MAKfkhB,OAAQ,SAAUvhB,GACd,IAAI7G,EAAOvN,OAAOyvB,UAAYzvB,OAAOyvB,SAASliB,KAC9C,OAAOA,GAAQA,EAAKinB,MAAO,KAAQpgB,EAAKwH,IAG5Clc,KAAM,SAAU0U,GACZ,OAAOA,IAASsX,GAGpB88C,MAAO,SAAUp0D,GACb,OAAOA,IAASrE,EAAS04D,eACrB14D,EAAS24D,eACLt0D,EAAKuH,MAAQvH,EAAKu0D,OAASv0D,EAAKw0D,WAI5CC,QAAShD,GAAsB,GAC/BxB,SAAUwB,GAAsB,GAEhCiD,QAAS,SAAU10D,GAIf,OAAS8C,EAAU9C,EAAM,YAAeA,EAAK00D,SACvC5xD,EAAU9C,EAAM,aAAgBA,EAAK20D,UAG/CA,SAAU,SAAU30D,GAWhB,OALKssD,GAAQtsD,EAAK0G,YAEd1G,EAAK0G,WAAWkuD,eAGK,IAAlB50D,EAAK20D,UAIhBE,MAAO,SAAU70D,GAMb,IAAMA,EAAOA,EAAKod,WAAYpd,EAAMA,EAAOA,EAAK80D,YAC5C,GAAK90D,EAAKK,SAAW,EACjB,OAAO,EAGf,OAAO,GAGXmzD,OAAQ,SAAUxzD,GACd,OAAQytD,EAAKW,QAAQyG,MAAO70D,IAIhC6a,OAAQ,SAAU7a,GACd,OAAOsvD,EAAQ98C,KAAMxS,EAAK8C,WAG9BixD,MAAO,SAAU/zD,GACb,OAAOqvD,EAAQ78C,KAAMxS,EAAK8C,WAG9BiyD,OAAQ,SAAU/0D,GACd,OAAO8C,EAAU9C,EAAM,UAA2B,WAAdA,EAAKuH,MACrCzE,EAAU9C,EAAM,WAGxBiC,KAAM,SAAUjC,GACZ,OAAO8C,EAAU9C,EAAM,UAA2B,SAAdA,EAAKuH,MAI7CoZ,MAAOgxC,GAAwB,WAC3B,MAAO,CAAE,MAGb9wC,KAAM8wC,GAAwB,SAAUqD,EAAen+D,GACnD,MAAO,CAAEA,EAAS,MAGtB+pB,GAAI+wC,GAAwB,SAAUqD,EAAen+D,EAAQ+6D,GACzD,MAAO,CAAEA,EAAW,EAAIA,EAAW/6D,EAAS+6D,MAGhD9wC,KAAM6wC,GAAwB,SAAUE,EAAch7D,GAElD,IADA,IAAI7K,EAAI,EACAA,EAAI6K,EAAQ7K,GAAK,EACrB6lE,EAAaruD,KAAMxX,GAEvB,OAAO6lE,KAGX5wC,IAAK0wC,GAAwB,SAAUE,EAAch7D,GAEjD,IADA,IAAI7K,EAAI,EACAA,EAAI6K,EAAQ7K,GAAK,EACrB6lE,EAAaruD,KAAMxX,GAEvB,OAAO6lE,KAGXoD,GAAItD,GAAwB,SAAUE,EAAch7D,EAAQ+6D,GACxD,IAAI5lE,EAUJ,IAPIA,EADC4lE,EAAW,EACRA,EAAW/6D,EACP+6D,EAAW/6D,EACfA,EAEA+6D,IAGE5lE,GAAK,GACX6lE,EAAaruD,KAAMxX,GAEvB,OAAO6lE,KAGXqD,GAAIvD,GAAwB,SAAUE,EAAch7D,EAAQ+6D,GAExD,IADA,IAAI5lE,EAAI4lE,EAAW,EAAIA,EAAW/6D,EAAS+6D,IACjC5lE,EAAI6K,GACVg7D,EAAaruD,KAAMxX,GAEvB,OAAO6lE,QAKdzD,QAAQ+G,IAAM1H,EAAKW,QAAQxtC,GAGrB,CAAEw0C,OAAO,EAAMC,UAAU,EAAMC,MAAM,EAAMrc,UAAU,EAAMsc,OAAO,GACzE9H,EAAKW,QAASpiE,GAAMulE,EAAmBvlE,GAE3C,IAAMA,IAAK,CAAEwpE,QAAQ,EAAM7sD,OAAO,GAC9B8kD,EAAKW,QAASpiE,GAAMwlE,EAAoBxlE,GAI5C,SAAS6nE,KAIT,SAASlD,EAAU/wC,EAAU61C,GACzB,IAAI5jD,EAAS+B,EAAOm9C,EAAQxpD,EACxBmuD,EAAOvmB,EAAQwmB,EACfC,EAAS5H,EAAYpuC,EAAW,KAEpC,GAAKg2C,EACD,OAAOH,EAAY,EAAIG,EAAOx1C,MAAO,GAOzC,IAJAs1C,EAAQ91C,EACRuvB,EAAS,GACTwmB,EAAalI,EAAK6E,UAEVoD,GAAQ,CA2BZ,IAAMnuD,KAxBAsK,KAAa+B,EAAQ26C,EAAO/T,KAAMkb,MAC/B9hD,IAGD8hD,EAAQA,EAAMt1C,MAAOxM,EAAO,GAAI/c,SAAY6+D,GAEhDvmB,EAAO3rC,KAAQutD,EAAS,KAG5Bl/C,GAAU,GAGH+B,EAAQ46C,EAAahU,KAAMkb,MAC9B7jD,EAAU+B,EAAM2e,QAChBw+B,EAAOvtD,KAAM,CACTvW,MAAO4kB,EAGPtK,KAAMqM,EAAO,GAAI1R,QAASosD,EAAO,OAErCoH,EAAQA,EAAMt1C,MAAOvO,EAAQhb,SAInB42D,EAAKn4B,SACR1hB,EAAQg7C,EAAWrnD,GAAOizC,KAAMkb,KAAgBC,EAAYpuD,MAC7DqM,EAAQ+hD,EAAYpuD,GAAQqM,MAC9B/B,EAAU+B,EAAM2e,QAChBw+B,EAAOvtD,KAAM,CACTvW,MAAO4kB,EACPtK,KAAMA,EACNoM,QAASC,IAEb8hD,EAAQA,EAAMt1C,MAAOvO,EAAQhb,SAIrC,IAAMgb,EACF,MAOR,OAAK4jD,EACMC,EAAM7+D,OAGV6+D,EACHvF,EAAevwC,GAGfouC,EAAYpuC,EAAUuvB,GAAS/uB,MAAO,GAG9C,SAASwwC,GAAYG,GAIjB,IAHA,IAAI/kE,EAAI,EACJyM,EAAMs4D,EAAOl6D,OACb+oB,EAAW,GACP5zB,EAAIyM,EAAKzM,IACb4zB,GAAYmxC,EAAQ/kE,GAAIiB,MAE5B,OAAO2yB,EAGX,SAASowC,GAAegE,EAAS6B,EAAYC,GACzC,IAAI5F,EAAM2F,EAAW3F,IACjB6F,EAAOF,EAAWtqC,KAClBh+B,EAAMwoE,GAAQ7F,EACd8F,EAAmBF,GAAgB,eAARvoE,EAC3B0oE,EAAWpI,IAEf,OAAOgI,EAAWl1C,MAGd,SAAU3gB,EAAM6f,EAASwzC,GACrB,KAAUrzD,EAAOA,EAAMkwD,IACnB,GAAuB,IAAlBlwD,EAAKK,UAAkB21D,EACxB,OAAOhC,EAASh0D,EAAM6f,EAASwzC,GAGvC,OAAO,GAIX,SAAUrzD,EAAM6f,EAASwzC,GACrB,IAAI6C,EAAU5C,EACV6C,EAAW,CAAEvI,EAASqI,GAG1B,GAAK5C,GACD,KAAUrzD,EAAOA,EAAMkwD,IACnB,IAAuB,IAAlBlwD,EAAKK,UAAkB21D,IACnBhC,EAASh0D,EAAM6f,EAASwzC,GACzB,OAAO,OAKnB,KAAUrzD,EAAOA,EAAMkwD,IACnB,GAAuB,IAAlBlwD,EAAKK,UAAkB21D,EAGxB,GAFA1C,EAAatzD,EAAM0hB,KAAe1hB,EAAM0hB,GAAY,IAE/Cq0C,GAAQjzD,EAAU9C,EAAM+1D,GACzB/1D,EAAOA,EAAMkwD,IAASlwD,MACnB,KAAOk2D,EAAW5C,EAAY/lE,KACjC2oE,EAAU,KAAQtI,GAAWsI,EAAU,KAAQD,EAG/C,OAASE,EAAU,GAAMD,EAAU,GAOnC,GAHA5C,EAAY/lE,GAAQ4oE,EAGbA,EAAU,GAAMnC,EAASh0D,EAAM6f,EAASwzC,GAC3C,OAAO,EAM3B,OAAO,GAInB,SAAS+C,GAAgBC,GACrB,OAAOA,EAASx/D,OAAS,EACrB,SAAUmJ,EAAM6f,EAASwzC,GAErB,IADA,IAAIrnE,EAAIqqE,EAASx/D,OACT7K,KACJ,IAAMqqE,EAAUrqE,GAAKgU,EAAM6f,EAASwzC,GAChC,OAAO,EAGf,OAAO,GAEXgD,EAAU,GAYlB,SAASC,GAAUrC,EAAWnuD,EAAKwvB,EAAQzV,EAASwzC,GAOhD,IANA,IAAIrzD,EACAu2D,EAAe,GACfvqE,EAAI,EACJyM,EAAMw7D,EAAUp9D,OAChB2/D,EAAgB,MAAP1wD,EAEL9Z,EAAIyM,EAAKzM,KACNgU,EAAOi0D,EAAWjoE,MACfspC,IAAUA,EAAQt1B,EAAM6f,EAASwzC,KACnCkD,EAAa/yD,KAAMxD,GACdw2D,GACD1wD,EAAItC,KAAMxX,KAM1B,OAAOuqE,EAGX,SAASE,GAAYnE,EAAW1yC,EAAUo0C,EAAS0C,EAAYC,EAAYC,GAOvE,OANKF,IAAeA,EAAYh1C,KAC5Bg1C,EAAaD,GAAYC,IAExBC,IAAeA,EAAYj1C,KAC5Bi1C,EAAaF,GAAYE,EAAYC,IAElCtF,GAAc,SAAUlB,EAAMjuC,EAAStC,EAASwzC,GACnD,IAAIwD,EAAM7qE,EAAGgU,EAAM82D,EACfC,EAAS,GACTC,EAAU,GACVC,EAAc90C,EAAQtrB,OAGtBypB,EAAQ8vC,GA5CpB,SAA2BxwC,EAAUs3C,EAAU/0C,GAG3C,IAFA,IAAIn2B,EAAI,EACJyM,EAAMy+D,EAASrgE,OACX7K,EAAIyM,EAAKzM,IACb4pC,EAAMhW,EAAUs3C,EAAUlrE,GAAKm2B,GAEnC,OAAOA,EAuCKg1C,CAAkBv3C,GAAY,IAC1BC,EAAQxf,SAAW,CAAEwf,GAAYA,EAAS,IAGlDu3C,GAAY9E,IAAelC,GAASxwC,EAEhCU,EADAg2C,GAAUh2C,EAAOy2C,EAAQzE,EAAWzyC,EAASwzC,GAsBrD,GAnBKW,EAaDA,EAASoD,EATTN,EAAaH,IAAgBvG,EAAOkC,EAAY2E,GAAeP,GAG3D,GAGAv0C,EAG4BtC,EAASwzC,GAEzCyD,EAAaM,EAIZV,EAMD,IALAG,EAAOP,GAAUQ,EAAYE,GAC7BN,EAAYG,EAAM,GAAIh3C,EAASwzC,GAG/BrnE,EAAI6qE,EAAKhgE,OACD7K,MACGgU,EAAO62D,EAAM7qE,MAChB8qE,EAAYE,EAAShrE,MAAWorE,EAAWJ,EAAShrE,IAAQgU,IAKxE,GAAKowD,GACD,GAAKuG,GAAcrE,EAAY,CAC3B,GAAKqE,EAAa,CAKd,IAFAE,EAAO,GACP7qE,EAAI8qE,EAAWjgE,OACP7K,MACGgU,EAAO82D,EAAY9qE,KAGtB6qE,EAAKrzD,KAAQ4zD,EAAWprE,GAAMgU,GAGtC22D,EAAY,KAAQG,EAAa,GAAMD,EAAMxD,GAKjD,IADArnE,EAAI8qE,EAAWjgE,OACP7K,MACGgU,EAAO82D,EAAY9qE,MACpB6qE,EAAOF,EAAazyD,IAAQ/X,KAAMikE,EAAMpwD,GAAS+2D,EAAQ/qE,KAAS,IAEpEokE,EAAMyG,KAAY10C,EAAS00C,GAAS72D,UAOhD82D,EAAaR,GACTQ,IAAe30C,EACX20C,EAAWvyD,OAAQ0yD,EAAaH,EAAWjgE,QAC3CigE,GAEHH,EACDA,EAAY,KAAMx0C,EAAS20C,EAAYzD,GAEvC7vD,IAAKub,MAAOoD,EAAS20C,MAMrC,SAASO,GAAmBtG,GAyBxB,IAxBA,IAAIuG,EAActD,EAASx6D,EACvBf,EAAMs4D,EAAOl6D,OACb0gE,EAAkB9J,EAAKwD,SAAUF,EAAQ,GAAIxpD,MAC7CiwD,EAAmBD,GAAmB9J,EAAKwD,SAAU,KACrDjlE,EAAIurE,EAAkB,EAAI,EAG1BE,EAAezH,IAAe,SAAUhwD,GACpC,OAAOA,IAASs3D,IACjBE,GAAkB,GACrBE,EAAkB1H,IAAe,SAAUhwD,GACvC,OAAOkE,IAAQ/X,KAAMmrE,EAAct3D,IAAU,IAC9Cw3D,GAAkB,GACrBnB,EAAW,CAAE,SAAUr2D,EAAM6f,EAASwzC,GAClC,IAAI9yC,GAASg3C,IAAqBlE,GAAOxzC,IAAY6tC,MAC/C4J,EAAez3C,GAAUxf,SACvBo3D,EAAcz3D,EAAM6f,EAASwzC,GAC7BqE,EAAiB13D,EAAM6f,EAASwzC,IAIxC,OADAiE,EAAe,KACR/2C,IAGPv0B,EAAIyM,EAAKzM,IACb,GAAOgoE,EAAUvG,EAAKwD,SAAUF,EAAQ/kE,GAAIub,MACxC8uD,EAAW,CAAErG,GAAeoG,GAAgBC,GAAYrC,QACrD,CAIH,IAHAA,EAAUvG,EAAKn4B,OAAQy7B,EAAQ/kE,GAAIub,MAAOwX,MAAO,KAAMgyC,EAAQ/kE,GAAI2nB,UAGrD+N,GAAY,CAItB,IADAloB,IAAMxN,EACEwN,EAAIf,IACHg1D,EAAKwD,SAAUF,EAAQv3D,GAAI+N,MADnB/N,KAKjB,OAAOi9D,GACHzqE,EAAI,GAAKoqE,GAAgBC,GACzBrqE,EAAI,GAAK4kE,GAGLG,EAAO3wC,MAAO,EAAGp0B,EAAI,GAChBsO,OAAQ,CAAErN,MAAgC,MAAzB8jE,EAAQ/kE,EAAI,GAAIub,KAAe,IAAM,MAC7DrF,QAASosD,EAAO,MAClB0F,EACAhoE,EAAIwN,GAAK69D,GAAmBtG,EAAO3wC,MAAOp0B,EAAGwN,IAC7CA,EAAIf,GAAO4+D,GAAqBtG,EAASA,EAAO3wC,MAAO5mB,IACvDA,EAAIf,GAAOm4D,GAAYG,IAG/BsF,EAAS7yD,KAAMwwD,GAIvB,OAAOoC,GAAgBC,GA6H3B,SAASnF,GAAStxC,EAAUhM,GACxB,IAAI5nB,EACA2rE,EAAc,GACdC,EAAkB,GAClBhC,EAAS3H,EAAeruC,EAAW,KAEvC,IAAMg2C,EAAS,CAOX,IAJMhiD,IACFA,EAAQ+8C,EAAU/wC,IAEtB5zB,EAAI4nB,EAAM/c,OACF7K,MACJ4pE,EAASyB,GAAmBzjD,EAAO5nB,KACtB01B,GACTi2C,EAAYn0D,KAAMoyD,GAElBgC,EAAgBp0D,KAAMoyD,IAK9BA,EAAS3H,EAAeruC,EAjJhC,SAAmCg4C,EAAiBD,GAChD,IAAIE,EAAQF,EAAY9gE,OAAS,EAC7BihE,EAAYF,EAAgB/gE,OAAS,EACrCkhE,EAAe,SAAU3H,EAAMvwC,EAASwzC,EAAKlxC,EAAS61C,GAClD,IAAIh4D,EAAMxG,EAAGw6D,EACTiE,EAAe,EACfjsE,EAAI,IACJioE,EAAY7D,GAAQ,GACpB8H,EAAa,GACbC,EAAgBzK,EAGhBptC,EAAQ8vC,GAAQ0H,GAAarK,EAAK73B,KAAKm5B,IAAK,IAAKiJ,GAGjDI,EAAkBxK,GAA4B,MAAjBuK,EAAwB,EAAIzsD,KAAKC,UAAY,GAY9E,IAVKqsD,IAMDtK,EAAmB7tC,GAAWlkB,GAAYkkB,GAAWm4C,GAIxB,OAAvBh4D,EAAOsgB,EAAOt0B,IAAeA,IAAM,CACzC,GAAK8rE,GAAa93D,EAAO,CAWrB,IAVAxG,EAAI,EAMEqmB,GAAW7f,EAAKyiB,eAAiB9mB,IACnCm0D,EAAa9vD,GACbqzD,GAAO1F,GAEDqG,EAAU4D,EAAiBp+D,MACjC,GAAKw6D,EAASh0D,EAAM6f,GAAWlkB,EAAU03D,GAAQ,CAC7C7vD,IAAKrX,KAAMg2B,EAASniB,GACpB,MAGHg4D,IACDpK,EAAUwK,GAKbP,KAGM73D,GAAQg0D,GAAWh0D,IACtBi4D,IAIC7H,GACD6D,EAAUzwD,KAAMxD,IAgB5B,GATAi4D,GAAgBjsE,EASX6rE,GAAS7rE,IAAMisE,EAAe,CAE/B,IADAz+D,EAAI,EACMw6D,EAAU2D,EAAan+D,MAC7Bw6D,EAASC,EAAWiE,EAAYr4C,EAASwzC,GAG7C,GAAKjD,EAAO,CAGR,GAAK6H,EAAe,EAChB,KAAQjsE,KACIioE,EAAWjoE,IAAOksE,EAAYlsE,KAClCksE,EAAYlsE,GAAMglB,EAAI7kB,KAAMg2B,IAMxC+1C,EAAa5B,GAAU4B,GAI3B10D,IAAKub,MAAOoD,EAAS+1C,GAGhBF,IAAc5H,GAAQ8H,EAAWrhE,OAAS,GACzCohE,EAAeN,EAAY9gE,OAAW,GAExC8oB,IAAO0tC,WAAYlrC,GAU3B,OALK61C,IACDpK,EAAUwK,EACV1K,EAAmByK,GAGhBlE,GAGf,OAAO4D,EACHvG,EAAcyG,GACdA,EA2BIM,CAA0BT,EAAiBD,KAGxC/3C,SAAWA,EAEtB,OAAOg2C,EAvfX/B,EAAWjmE,UAAY6/D,EAAK6K,QAAU7K,EAAKW,QAC3CX,EAAKoG,WAAa,IAAIA,EA8kBtB/D,IAEAnwC,IAAOiW,KAAOA,EA9kDd,G,YCdI2iC,EAAS,SAASj4C,EAAOR,EAAIvyB,EAAKN,EAAOurE,EAAWC,EAAU7nD,GAC9D,IAAI5kB,EAAI,EACJyM,EAAM6nB,EAAMzpB,OACZ6hE,EAAc,MAAPnrE,EAGX,GAAoB,WAAhByyB,YAAOzyB,GAEP,IAAKvB,KADLwsE,GAAY,EACFjrE,EACNgrE,EAAOj4C,EAAOR,EAAI9zB,EAAGuB,EAAIvB,IAAI,EAAMysE,EAAU7nD,QAI9C,QAAc/P,IAAV5T,IACPurE,GAAY,EAES,mBAAVvrE,IACP2jB,GAAM,GAGN8nD,IAGI9nD,GACAkP,EAAG3zB,KAAKm0B,EAAOrzB,GACf6yB,EAAK,OAIL44C,EAAO54C,EACPA,EAAK,SAAS9f,EAAM24D,EAAM1rE,GACtB,OAAOyrE,EAAKvsE,KAAKwzB,YAAO3f,GAAO/S,MAKvC6yB,GACA,KAAO9zB,EAAIyM,EAAKzM,IACZ8zB,EACXQ,EAAMt0B,GAAIuB,EAAKqjB,EACT3jB,EACAA,EAAMd,KAAKm0B,EAAMt0B,GAAIA,EAAG8zB,EAAGQ,EAAMt0B,GAAIuB,KAM5C,OAAIirE,EACOl4C,EAIPo4C,EACO54C,EAAG3zB,KAAKm0B,GAGZ7nB,EAAMqnB,EAAGQ,EAAM,GAAI/yB,GAAOkrE,GAGtBF,IC7DE,sBCKjB54C,IAAOG,GAAGqB,OAAQ,CACjBtf,KAAM,SAAUtV,EAAMU,GACrB,OAAOsrE,EAAQj4D,KAAMqf,IAAO9d,KAAMtV,EAAMU,EAAOwU,UAAU5K,OAAS,IAGnE+hE,WAAY,SAAUrsE,GACrB,OAAO+T,KAAKogB,MAAM,WACjBf,IAAOi5C,WAAYt4D,KAAM/T,SAK5BozB,IAAOwB,OAAQ,CACdtf,KAAM,SAAU7B,EAAMzT,EAAMU,GAC3B,IAAIszB,EAAKs4C,EACRC,EAAQ94D,EAAKK,SAGd,GAAe,IAAVy4D,GAAyB,IAAVA,GAAyB,IAAVA,EAKnC,YAAkC,IAAtB94D,EAAKkD,aACTyc,IAAOo5C,KAAM/4D,EAAMzT,EAAMU,IAKlB,IAAV6rE,GAAgBn5C,IAAO0C,SAAUriB,KACrC64D,EAAQl5C,IAAOq5C,UAAWzsE,EAAK0W,qBAGjBpC,IAAV5T,EACW,OAAVA,OACJ0yB,IAAOi5C,WAAY54D,EAAMzT,GAIrBssE,GAAS,QAASA,QACuBh4D,KAA3C0f,EAAMs4C,EAAM9yC,IAAK/lB,EAAM/S,EAAOV,IACzBg0B,GAGRvgB,EAAK8B,aAAcvV,EAAMU,EAAQ,IAC1BA,GAGH4rE,GAAS,QAASA,GAA+C,QAApCt4C,EAAMs4C,EAAMhsE,IAAKmT,EAAMzT,IACjDg0B,EAMM,OAHdA,EAAMvgB,EAAKkD,aAAc3W,SAGJsU,EAAY0f,IAGlCy4C,UAAW,GAEXJ,WAAY,SAAU54D,EAAM/S,GAC3B,IAAIV,EACHP,EAAI,EAIJitE,EAAYhsE,GAASA,EAAM2mB,MAAOslD,GAEnC,GAAKD,GAA+B,IAAlBj5D,EAAKK,SACtB,KAAU9T,EAAO0sE,EAAWjtE,MAC3BgU,EAAK4G,gBAAiBra,MAQrB+/D,IACJ3sC,IAAOq5C,UAAUzxD,KAAO,CACvBwe,IAAK,SAAU/lB,EAAM/S,GACpB,GAAe,UAAVA,GAAqB6V,EAAU9C,EAAM,SAAY,CACrD,IAAIm5D,EAAMn5D,EAAK/S,MAKf,OAJA+S,EAAK8B,aAAc,OAAQ7U,GACtBksE,IACJn5D,EAAK/S,MAAQksE,GAEPlsE,MAMX0yB,IAAOe,KAAMf,IAAOsyC,KAAKr+C,MAAMu7C,KAAKp/B,OAAOnc,MAAO,SAAU,SAAU7Q,EAAIxW,GACzEozB,IAAOq5C,UAAWzsE,GAAS,CAC1BM,IAAK,SAAUmT,GACd,IAAIugB,EACH64C,EAAQz5C,IAAO0C,SAAUriB,GACzBq5D,EAAgB9sE,EAAK0W,cAOtB,OALMm2D,IACL74C,EAAmC,MAA7BvgB,EAAKkD,aAAc3W,GACxB8sE,EACA,MAEK94C,GAGRwF,IAAK,SAAU/lB,EAAM/S,EAAOV,GAQ3B,OAPe,IAAVU,EAGJ0yB,IAAOi5C,WAAY54D,EAAMzT,GAEzByT,EAAK8B,aAAcvV,EAAMA,GAEnBA,OCtHV,IAAI+sE,EAAa,sCAChBC,EAAa,gBAEd55C,IAAOG,GAAGqB,OAAQ,CACjB43C,KAAM,SAAUxsE,EAAMU,GACrB,OAAOsrE,EAAQj4D,KAAMqf,IAAOo5C,KAAMxsE,EAAMU,EAAOwU,UAAU5K,OAAS,IAGnE2iE,WAAY,SAAUjtE,GACrB,OAAO+T,KAAKogB,MAAM,kBACVpgB,KAAMqf,IAAO85C,QAASltE,IAAUA,SAK1CozB,IAAOwB,OAAQ,CACd43C,KAAM,SAAU/4D,EAAMzT,EAAMU,GAC3B,IAAIszB,EAAKs4C,EACRC,EAAQ94D,EAAKK,SAGd,GAAe,IAAVy4D,GAAyB,IAAVA,GAAyB,IAAVA,EAWnC,OAPe,IAAVA,GAAgBn5C,IAAO0C,SAAUriB,KAGrCzT,EAAOozB,IAAO85C,QAASltE,IAAUA,EACjCssE,EAAQl5C,IAAO+5C,UAAWntE,SAGZsU,IAAV5T,EACC4rE,GAAS,QAASA,QACuBh4D,KAA3C0f,EAAMs4C,EAAM9yC,IAAK/lB,EAAM/S,EAAOV,IACzBg0B,EAGCvgB,EAAMzT,GAASU,EAGpB4rE,GAAS,QAASA,GAA+C,QAApCt4C,EAAMs4C,EAAMhsE,IAAKmT,EAAMzT,IACjDg0B,EAGDvgB,EAAMzT,IAGdmtE,UAAW,CACVlF,SAAU,CACT3nE,IAAK,SAAUmT,GAOd,IAAI25D,EAAW35D,EAAKkD,aAAc,YAElC,OAAKy2D,EACG/gD,SAAU+gD,EAAU,IAI3BL,EAAW9mD,KAAMxS,EAAK8C,WAItBy2D,EAAW/mD,KAAMxS,EAAK8C,WAAc9C,EAAKu0D,KAElC,GAGA,KAKXkF,QAAS,CACR,IAAO,UACP,MAAS,eASNnN,IACJ3sC,IAAO+5C,UAAU/E,SAAW,CAC3B9nE,IAAK,SAAUmT,GAEd,IAAIwzD,EAASxzD,EAAK0G,WAKlB,OAJK8sD,GAAUA,EAAO9sD,YAErB8sD,EAAO9sD,WAAWkuD,cAEZ,MAER7uC,IAAK,SAAU/lB,GAGd,IAAIwzD,EAASxzD,EAAK0G,WACb8sD,IAEJA,EAAOoB,cAEFpB,EAAO9sD,YAEX8sD,EAAO9sD,WAAWkuD,kBAOvBj1C,IAAOe,KAAM,CACZ,WACA,WACA,YACA,cACA,cACA,UACA,UACA,SACA,cACA,oBACE,WACFf,IAAO85C,QAASn5D,KAAK2C,eAAkB3C,QC9HzBs5D,MALf,SAA2B3sE,GAE1B,OADaA,EAAM2mB,MAAOslD,IAAmB,IAC/Bz1D,KAAM,MCJJ,oECEFkc,MAAOsyC,KAAKr+C,MAA3B,aCGA,SAASimD,EAAQ3H,EAAU4H,EAAWhG,GACrC,MAA0B,mBAAdgG,EACJn6C,IAAOoB,KAAMmxC,GAAU,SAAUlyD,EAAMhU,GAC7C,QAAS8tE,EAAU3tE,KAAM6T,EAAMhU,EAAGgU,KAAW8zD,KAK1CgG,EAAUz5D,SACPsf,IAAOoB,KAAMmxC,GAAU,SAAUlyD,GACvC,OAASA,IAAS85D,IAAgBhG,KAKV,iBAAdgG,EACJn6C,IAAOoB,KAAMmxC,GAAU,SAAUlyD,GACvC,OAASkE,IAAQ/X,KAAM2tE,EAAW95D,IAAU,IAAQ8zD,KAK/Cn0C,IAAO2V,OAAQwkC,EAAW5H,EAAU4B,GAG5Cn0C,IAAO2V,OAAS,SAAU28B,EAAM3xC,EAAOwzC,GACtC,IAAI9zD,EAAOsgB,EAAO,GAMlB,OAJKwzC,IACJ7B,EAAO,QAAUA,EAAO,KAGH,IAAjB3xC,EAAMzpB,QAAkC,IAAlBmJ,EAAKK,SACxBsf,IAAOiW,KAAKu8B,gBAAiBnyD,EAAMiyD,GAAS,CAAEjyD,GAAS,GAGxD2f,IAAOiW,KAAKjiB,QAASs+C,EAAMtyC,IAAOoB,KAAMT,GAAO,SAAUtgB,GAC/D,OAAyB,IAAlBA,EAAKK,cAIdsf,IAAOG,GAAGqB,OAAQ,CACjByU,KAAM,SAAUhW,GACf,IAAI5zB,EAAGu0B,EACN9nB,EAAM6H,KAAKzJ,OACXV,EAAOmK,KAER,GAAyB,iBAAbsf,EACX,OAAOtf,KAAK+f,UAAWV,YAAQC,GAAW0V,QAAQ,WACjD,IAAMtpC,EAAI,EAAGA,EAAIyM,EAAKzM,IACrB,GAAK2zB,IAAO6sC,SAAUr2D,EAAMnK,GAAKsU,MAChC,OAAO,MAQX,IAFAigB,EAAMjgB,KAAK+f,UAAW,IAEhBr0B,EAAI,EAAGA,EAAIyM,EAAKzM,IACrB2zB,IAAOiW,KAAMhW,EAAUzpB,EAAMnK,GAAKu0B,GAGnC,OAAO9nB,EAAM,EAAIknB,IAAO0tC,WAAY9sC,GAAQA,GAE7C+U,OAAQ,SAAU1V,GACjB,OAAOtf,KAAK+f,UAAWw5C,EAAQv5D,KAAMsf,GAAY,IAAI,KAEtDk0C,IAAK,SAAUl0C,GACd,OAAOtf,KAAK+f,UAAWw5C,EAAQv5D,KAAMsf,GAAY,IAAI,KAEtDm6C,GAAI,SAAUn6C,GACb,QAASi6C,EACRv5D,KAIoB,iBAAbsf,GAAyBo6C,EAAcxnD,KAAMoN,GACnDD,YAAQC,GACRA,GAAY,IACb,GACC/oB,UC/EJ,IAAIojE,EAMA1K,EAAa,sCCTjB,SAAS2K,EAAUl6D,GAClB,OAAOA,EAAKkD,cAAgBlD,EAAKkD,aAAc,UAAa,GAG7D,SAASi3D,EAAgBltE,GACxB,OAAKyJ,MAAMC,QAAS1J,GACZA,EAEc,iBAAVA,GACJA,EAAM2mB,MAAOslD,IAEd,IDAGv5C,IAAOG,GAAG5U,KAAO,SAAS0U,EAAUC,EAASv0B,GAChD,IAAI0U,EAAM4T,EAGV,IAAKgM,EACD,OAAOtf,KAQX,GAHAhV,EAAOA,GAAQ2uE,EAGS,iBAAbr6C,EAAuB,CAa9B,GAPIhM,EALgB,MAAhBgM,EAAS,IACgB,MAAlCA,EAASA,EAAS/oB,OAAS,IAC3B+oB,EAAS/oB,QAAU,EAGF,CAAE,KAAM+oB,EAAU,MAGlB2vC,EAAW/U,KAAK56B,GAIxBhM,IAAUA,EAAM,KAAOiM,GAAU,CAGjC,GAAIjM,EAAM,GAAI,CAYV,GAXAiM,EAAUA,aAAmBF,IAASE,EAAQ,GAAKA,EAInDF,IAAOa,MAAMlgB,KAAMqf,IAAOy6C,UACxCxmD,EAAM,GACNiM,GAAWA,EAAQxf,SAAWwf,EAAQ4C,eAAiB5C,EAAUlkB,KACjE,IAIkB0+D,EAAW7nD,KAAKoB,EAAM,KAAO+L,IAAO8B,cAAc5B,GAClD,IAAKjM,KAASiM,EAGiB,mBAAhBvf,KAAKsT,GACZtT,KAAKsT,GAAOiM,EAAQjM,IAIpBtT,KAAKuB,KAAK+R,EAAOiM,EAAQjM,IAKrC,OAAOtT,KAaX,OATAN,EAAOrE,IAAS60D,eAAe58C,EAAM,IAEjC5T,IAGAM,KAAK,GAAKN,EACVM,KAAKzJ,OAAS,GAGXyJ,KAIJ,OAAKuf,GAAWA,EAAQK,QACnBL,GAAWv0B,GAAMsqC,KAAKhW,GAM3Btf,KAAK/J,YAAYspB,GAAS+V,KAAKhW,GAInC,OAAIA,EAASvf,UAChBC,KAAK,GAAKsf,EACVtf,KAAKzJ,OAAS,EAEPyJ,MAIoB,mBAAbsf,OACQ/e,IAAfvV,EAAKgvE,MACNhvE,EAAKgvE,MAAM16C,GAGXA,EAASD,KAGZA,IAAOuC,UAAUtC,EAAUtf,QAIrC1S,UAAY+xB,IAAOG,GAGxBm6C,EAAat6C,YAAOhkB,KCvGpBgkB,IAAOG,GAAGqB,OAAQ,CACjBo5C,SAAU,SAAUttE,GACnB,IAAIutE,EAASx6D,EAAMy6D,EAAKC,EAAUC,EAAOnhE,EAAGohE,EAC3C5uE,EAAI,EAEL,GAAsB,mBAAViB,EACX,OAAOqT,KAAKogB,MAAM,SAAUlnB,GAC3BmmB,YAAQrf,MAAOi6D,SAAUttE,EAAMd,KAAMmU,KAAM9G,EAAG0gE,EAAU55D,WAM1D,IAFAk6D,EAAUL,EAAgBltE,IAEb4J,OACZ,KAAUmJ,EAAOM,KAAMtU,MAItB,GAHA0uE,EAAWR,EAAUl6D,GACrBy6D,EAAwB,IAAlBz6D,EAAKK,UAAoB,IAAMu5D,EAAkBc,GAAa,IAEzD,CAEV,IADAlhE,EAAI,EACMmhE,EAAQH,EAAShhE,MACrBihE,EAAIv2D,QAAS,IAAMy2D,EAAQ,KAAQ,IACvCF,GAAOE,EAAQ,KAMZD,KADLE,EAAahB,EAAkBa,KAE9Bz6D,EAAK8B,aAAc,QAAS84D,GAMhC,OAAOt6D,MAGRu6D,YAAa,SAAU5tE,GACtB,IAAIutE,EAASx6D,EAAMy6D,EAAKC,EAAUC,EAAOnhE,EAAGohE,EAC3C5uE,EAAI,EAEL,GAAsB,mBAAViB,EACX,OAAOqT,KAAKogB,MAAM,SAAUlnB,GAC3BmmB,YAAQrf,MAAOu6D,YAAa5tE,EAAMd,KAAMmU,KAAM9G,EAAG0gE,EAAU55D,WAI7D,IAAMmB,UAAU5K,OACf,OAAOyJ,KAAKuB,KAAM,QAAS,IAK5B,IAFA24D,EAAUL,EAAgBltE,IAEb4J,OACZ,KAAUmJ,EAAOM,KAAMtU,MAMtB,GALA0uE,EAAWR,EAAUl6D,GAGrBy6D,EAAwB,IAAlBz6D,EAAKK,UAAoB,IAAMu5D,EAAkBc,GAAa,IAEzD,CAEV,IADAlhE,EAAI,EACMmhE,EAAQH,EAAShhE,MAG1B,KAAQihE,EAAIv2D,QAAS,IAAMy2D,EAAQ,MAAS,GAC3CF,EAAMA,EAAIv4D,QAAS,IAAMy4D,EAAQ,IAAK,KAMnCD,KADLE,EAAahB,EAAkBa,KAE9Bz6D,EAAK8B,aAAc,QAAS84D,GAMhC,OAAOt6D,MAGRw6D,YAAa,SAAU7tE,EAAO8tE,GAC7B,MAAsB,mBAAV9tE,EACJqT,KAAKogB,MAAM,SAAU10B,GAC3B2zB,YAAQrf,MAAOw6D,YACd7tE,EAAMd,KAAMmU,KAAMtU,EAAGkuE,EAAU55D,MAAQy6D,GACvCA,MAKsB,kBAAbA,EACJA,EAAWz6D,KAAKi6D,SAAUttE,GAAUqT,KAAKu6D,YAAa5tE,GAGvDqT,KAAKogB,MAAM,WACjB,IAAI2xC,EAAWrmE,EAAGmK,EAAM6kE,EAOxB,IAJAhvE,EAAI,EACJmK,EAAOwpB,YAAQrf,MACf06D,EAAab,EAAgBltE,GAEnBolE,EAAY2I,EAAYhvE,MAG5BmK,EAAK8kE,SAAU5I,GACnBl8D,EAAK0kE,YAAaxI,GAElBl8D,EAAKokE,SAAUlI,OAMnB4I,SAAU,SAAUr7C,GACnB,IAAIyyC,EAAWryD,EACdhU,EAAI,EAGL,IADAqmE,EAAY,IAAMzyC,EAAW,IACnB5f,EAAOM,KAAMtU,MACtB,GAAuB,IAAlBgU,EAAKK,WACP,IAAMu5D,EAAkBM,EAAUl6D,IAAW,KAAMkE,QAASmuD,IAAe,EAC7E,OAAO,EAIT,OAAO,KC9IT1yC,IAAOG,GAAGqB,OAAQ,CACjBg4C,IAAK,SAAUlsE,GACd,IAAI4rE,EAAOt4C,EAAK26C,EACfl7D,EAAOM,KAAM,GAEd,OAAMmB,UAAU5K,QAqBhBqkE,EAAmC,mBAAVjuE,EAElBqT,KAAKogB,MAAM,SAAU10B,GAC3B,IAAImtE,EAEmB,IAAlB74D,KAAKD,WAWE,OANX84D,EADI+B,EACEjuE,EAAMd,KAAMmU,KAAMtU,EAAG2zB,YAAQrf,MAAO64D,OAEpClsE,GAKNksE,EAAM,GAEoB,iBAARA,EAClBA,GAAO,GAEIziE,MAAMC,QAASwiE,KAC1BA,EAAMx5C,IAAO7Z,IAAKqzD,GAAK,SAAUlsE,GAChC,OAAgB,MAATA,EAAgB,GAAKA,EAAQ,QAItC4rE,EAAQl5C,IAAOw7C,SAAU76D,KAAKiH,OAAUoY,IAAOw7C,SAAU76D,KAAKwC,SAASG,iBAGrD,QAAS41D,QAA+Ch4D,IAApCg4D,EAAM9yC,IAAKzlB,KAAM64D,EAAK,WAC3D74D,KAAKrT,MAAQksE,QApDTn5D,GACJ64D,EAAQl5C,IAAOw7C,SAAUn7D,EAAKuH,OAC7BoY,IAAOw7C,SAAUn7D,EAAK8C,SAASG,iBAG/B,QAAS41D,QACgCh4D,KAAvC0f,EAAMs4C,EAAMhsE,IAAKmT,EAAM,UAElBugB,EAMM,OAHdA,EAAMvgB,EAAK/S,OAGU,GAAKszB,OAG3B,KAyCHZ,IAAOwB,OAAQ,CACdg6C,SAAU,CACThK,OAAQ,CACPtkE,IAAK,SAAUmT,GACd,IAAI/S,EAAOmuE,EAAQpvE,EAClByb,EAAUzH,EAAKyH,QACf8tB,EAAQv1B,EAAK40D,cACbyG,EAAoB,eAAdr7D,EAAKuH,KACXsgB,EAASwzC,EAAM,KAAO,GACtBliC,EAAMkiC,EAAM9lC,EAAQ,EAAI9tB,EAAQ5Q,OAUjC,IAPC7K,EADIupC,EAAQ,EACR4D,EAGAkiC,EAAM9lC,EAAQ,EAIXvpC,EAAImtC,EAAKntC,IAGhB,IAFAovE,EAAS3zD,EAASzb,IAEN2oE,WAGTyG,EAAOnL,YACLmL,EAAO10D,WAAWupD,WACnBntD,EAAUs4D,EAAO10D,WAAY,aAAiB,CAMjD,GAHAzZ,EAAQ0yB,YAAQy7C,GAASjC,MAGpBkC,EACJ,OAAOpuE,EAIR46B,EAAOrkB,KAAMvW,GAIf,OAAO46B,GAGR9B,IAAK,SAAU/lB,EAAM/S,GAMpB,IALA,IAAIquE,EAAWF,EACd3zD,EAAUzH,EAAKyH,QACfogB,EAASlI,IAAOuC,UAAWj1B,GAC3BjB,EAAIyb,EAAQ5Q,OAEL7K,OACPovE,EAAS3zD,EAASzb,IAEJ2oE,SACbh1C,IAAOyC,QAASzC,YAAQy7C,GAASjC,MAAOtxC,IAAY,KAEpDyzC,GAAY,GAQd,OAHMA,IACLt7D,EAAK40D,eAAiB,GAEhB/sC,OAMNykC,IACJ3sC,IAAOw7C,SAASC,OAAS,CACxBvuE,IAAK,SAAUmT,GAEd,IAAIm5D,EAAMn5D,EAAKkD,aAAc,SAC7B,OAAc,MAAPi2D,EACNA,EAMAS,EAAkBj6C,IAAO1d,KAAMjC,OAMnC2f,IAAOe,KAAM,CAAE,QAAS,aAAc,WACrCf,IAAOw7C,SAAU76D,MAAS,CACzBylB,IAAK,SAAU/lB,EAAM/S,GACpB,GAAKyJ,MAAMC,QAAS1J,GACnB,OAAS+S,EAAK00D,QAAU/0C,IAAOyC,QAASzC,YAAQ3f,GAAOm5D,MAAOlsE,IAAW,OC5J9D0yB,EAAf,ECLAA,IAAO47C,SAAW,SAAUthE,GAC3B,IAAIo5D,EACJ,IAAMp5D,GAAwB,iBAATA,EACpB,OAAO,KAKR,IACCo5D,GAAQ,IAAIznE,OAAO2W,WAAcC,gBAAiBvI,EAAM,YACvD,MAAQN,GACT05D,OAAMxyD,EAMP,OAHMwyD,IAAOA,EAAIjiD,qBAAsB,eAAgBva,QACtD8oB,IAAOra,MAAO,gBAAkBrL,GAE1Bo5D,G,OCfR1zC,IAAOG,GAAGqB,OAAQ,CAEjBlf,KAAM,SAAUhV,GACf,OAAOsrE,EAAQj4D,MAAM,SAAUrT,GAC9B,YAAiB4T,IAAV5T,EACN0yB,IAAO1d,KAAM3B,MACbA,KAAKu0D,QAAQn0C,MAAM,WACK,IAAlBpgB,KAAKD,UAAoC,KAAlBC,KAAKD,UAAqC,IAAlBC,KAAKD,WACxDC,KAAKkX,YAAcvqB,QAGpB,KAAMA,EAAOwU,UAAU5K,WAMb8oB,EAAf,ECbeA,YAAf,G,6BCTA,YAEelpB,QAAf,M,8BCFA,0EAKA,MAAM4nB,EAAS0E,EAAQ,GAAqB5E,UAAU6E,GAQhDw4C,EACW,cADXA,EAEY,eAFZA,EAGmB,sBAHnBA,EAIoB,uBAJpBA,EAKe,kBALfA,EAMY,eANZA,EAOoB,uBAPpBA,EASc,iBASdC,EACU,aADVA,EAEY,eAFZA,EAGS,YAHTA,EAIW,cAJXA,EAKU,aALVA,EAMW,cANXA,EAUgB,mBAVhBA,EAWe,kBAXfA,EAYe,kBAZfA,EAagB,mBAahBC,EACK,QADLA,EAEK,QAFLA,EAGe,gBAOrB,IAAIC,EAcW,MAAMv4C,EAOjB,6BAA6B9d,EAAOF,GAC5Bge,EAAUw4C,SAAqB,YAAVt2D,GACrB+Y,EAAO/Y,MAAO,sBAAqBA,UAAcF,KAUzD,qBAAqBE,EAAOF,GAIxB,GAHAiZ,EAAOnZ,IAAK,yBAAwBI,SAAaF,KAGnC,YAAVE,EACA,OAGJ8d,EAAUy4C,oBAAqB,EAG/B,IAAIC,GAAmB,EACnBC,EAAkB,KAEtB,IAAK,MAAM5yC,KAAqB/F,EAAU44C,QAAQn0C,SACzCsB,EAAkB8yC,YACnB59C,EAAO9Y,MAAM,+BACT4jB,EAAkB+yC,kBAClBJ,GAAmB,EACdC,IACDA,EAAkB5yC,KAM7B2yC,GAIL14C,EAAU+4C,kBAAkBJ,GAShC,yBAAyBK,GAIrB,MAAMC,EAAgBD,EAAWv4C,OAC3By4C,EAAYF,EAAWz2C,eAG7B,IAAK,MAAM42C,KAAUn5C,EAAUo5C,aAC3B,GAAID,EAAOh1D,OAASm0D,EAAkB,CAClC,MAAMe,EAAYF,EAAOtiE,KAEzBmpB,EAAUs5C,aACNN,EACAK,EAAUl1D,KACVk1D,EAAUn3D,MACVm3D,EAAUE,IAAML,QACjB,GAAIC,EAAOh1D,OAASm0D,EAAkB,CAIzC,MAAMkB,EAAYL,EAAOtiE,KAEzBmpB,EAAUw4C,QAAQiB,gBACdN,EAAOI,IAAML,EACbM,EAAUzwC,MACVkwC,EACAO,EAAUA,gBACX,GAAIL,EAAOh1D,OAASm0D,EAA4B,CACnD,MAAMzhE,EAAOsiE,EAAOtiE,KAEpBmpB,EAAUw4C,QAAQkB,uBACdP,EAAOI,IAAML,EACbriE,EAAK8iE,YACLV,EACApiE,EAAK6vB,KACL7vB,EAAKswB,WACLtwB,EAAKuwB,aAIjBpH,EAAUo5C,aAAa3lE,OAAS,EAapC,oBAAoBqyB,EAAI3hB,EAAMjC,EAAOq3D,GACjC,IAAIK,EAAS13D,EAER03D,IACD3+C,EAAO5Y,KAAK,uBACZu3D,EAAS,IAAIrlE,MAAM,kBAEnByrB,EAAUy4C,oBAAsB3yC,EAChC9F,EAAUw4C,QAAQqB,YAAYN,EAAIzzC,EAAGrF,OAAQtc,EAAMy1D,GAEnD55C,EAAUo5C,aAAah5D,KAAK,CACxB+D,KAAMm0D,EACNzhE,KAAM,CACFqL,MAAO03D,EACPL,KACAp1D,UAkBhB,oBAAoB2hB,EAAIiD,EAAOywC,GAC3B,MAAMD,EAAKzzC,GAAMA,EAAGvD,eACd9B,EAASqF,GAAMA,EAAGrF,OAEpBT,EAAUy4C,oBAAsB3yC,EAChC9F,EAAUw4C,QAAQiB,gBAAgBF,EAAIxwC,EAAOtI,EAAQ+4C,GAErDx5C,EAAUo5C,aAAah5D,KAAK,CACxBqgB,SACA84C,KACAp1D,KAAMm0D,EACNzhE,KAAM,CAAEkyB,QACJywC,eAahB,kCAAkCM,GAC9B,MAAMC,EAAkB,CACpB,yBACA,kBACA,oBAKJ,IAAK,MAAMC,KAAcD,EAAiB,CACtC,MAAME,EAAiBH,EAAWE,GAElCF,EAAWE,GAAc,YAAYE,GACjC,IACI,OAAOD,EAAet+C,MAAMm+C,EAAYI,GAC1C,MAAO3jE,GACLojC,IAAqBkG,iBAAiBtpC,KAIlD,MAAM4jE,EAAe,CACjB,yBACA,kBACA,oBAKJ,IAAK,MAAMH,KAAcG,EAAc,CACnC,MAAMF,EAAiBH,EAAWE,GAElCF,EAAWE,GAAc,YAAYE,GACjCj/C,EAAO9Y,MAAM63D,EAAYE,GACzBD,EAAet+C,MAAMm+C,EAAYI,IAGzC,MAAME,EAAsBN,EAAWD,YAGvCC,EAAWD,YAAc,SAASN,EAAIzzC,EAAI3hB,KAASy7B,GAI3Cz7B,IAASi0D,EAQJ/2C,IAAQC,iBACTrf,SAAWA,QAAQE,MAAM,cAAeo3D,EAAIzzC,EAAI3hB,GAGpD8W,EAAO9Y,MAAM,cAAeo3D,EAAIzzC,EAAI3hB,KAASy7B,GAEjD,IACIw6B,EAAoBrxE,KAAK+wE,EAAYP,EAAIzzC,EAAI3hB,KAASy7B,GACxD,MAAOy6B,GACDl2D,IAASi0D,EACTn2D,SAAWA,QAAQC,MAAM,cAAem4D,GAExC1gC,IAAqBkG,iBAAiBw6B,KAatD,qBAKI,OAJK9B,IACDA,EAAW,IAAIl2C,KAGZk2C,EAeX,mBAAmBl0D,GACf,GAAI2b,EAAUw4C,QACV,MAAM,IAAIjkE,MAAM,mDAEpB,IACI,MAAM+lE,EAAmBC,UAWzB,IAAIC,EAUJ,GAnBAx6C,EAAUw4C,QAAU,IAAI8B,EACxBt6C,EAAUy6C,2BAA2Bz6C,EAAUw4C,SAC/Cx4C,EAAU6N,OAAS,CACfvN,UAAWjc,EAAQic,UACnBD,SAAUhc,EAAQgc,UAEtBL,EAAUG,YAAc9b,EAAQ8b,YAChCH,EAAUI,gBAAkB/b,EAAQ+b,gBAIhC/b,EAAQkc,kBACRi6C,EAAe,CACXE,mBACK,GAAEr2D,EAAQkc,oBACPc,IAAQs5C,eAIpBt2D,EAAQoc,OAAQ,CAEhB,MAAMjQ,EAAQnM,EAAQoc,OAAOjQ,MAAM,gBAGnCgqD,EAAa95C,OAASrc,EAAQqc,QAAWlQ,GAASA,EAAM,IAAO,IAInEwP,EAAUw4C,QAAQoC,WACd56C,EAAUG,YACVH,EAAUI,gBACVJ,EAAU6N,OACV7N,EAAU66C,mBACVp9D,EACA+8D,GAEJ,MAAMh6C,EAAqBnc,EAAQmc,mBAcnC,OAZIA,IACAR,EAAUw4C,QAAQsC,uBAAuBt6C,GAEzCA,IAAqBoa,KAAKj4B,IAClBA,GACAsY,EAAO7Y,KAAK,2BACN0H,KAAKsL,MAAMzS,GAAQo4D,aAGhCthC,MAAM,UAGJ,EACT,MAAOljC,GAQL,OAJAojC,IAAqBkG,iBAAiBtpC,GACtCypB,EAAUw4C,QAAU,KACpBv9C,EAAO/Y,MAAM3L,IAEN,GAWf,8BACI,OAAO0gC,QAAQjX,EAAUw4C,SAS7B,iCAAiC1xC,EAAahB,GAC1C9F,EAAUg7C,aAAal1C,EAAIuyC,EAA8BvxC,GAS7D,0BAA0BvwB,EAAGuvB,GACzB,IACI9F,EAAUs5C,aACNxzC,EACAsyC,EACA7hE,EACAuvB,GAAMA,EAAGvD,gBACf,MAAOrgB,GAIDD,SAAqC,mBAAlBA,QAAQC,OAE3BD,QAAQC,MAAM,4BAA6BA,IAcvD,oBAAoB+4D,EAAc1yC,EAASC,GACvC,OAAO,IAAIwS,QAAQ,CAACC,EAASC,KACzB,GAAIlb,EAAUw4C,QACVx4C,EAAUw4C,QAAQ0C,iBACdD,EACA,CACIptC,OAAQ7N,EAAU6N,OAClBtF,UACAC,WAEJ,CAACvb,EAAQtL,KACU,YAAXsL,EACAguB,EAAQt5B,GAERu5B,EAAOv5B,SAGhB,CACH,MAAM+K,EAAS,sDAEfuO,EAAO/Y,MAAMwK,GACbwuB,EAAOxuB,MAWnB,8BAA8BnW,EAAGuvB,GAC7B9F,EAAUs5C,aAAaxzC,EAAIsyC,EAA4B7hE,EAAG,MAS9D,qBAAqBgvC,EAAMphC,EAAM2hB,GAC7B,IAAIiD,EAGAA,EADS,UAAT5kB,EACQohC,EAAO8yB,EAAyBA,EAEhC9yB,EAAO8yB,EAAwBA,EAG3Cr4C,EAAUg7C,aAAal1C,EAAIiD,GAe/B51B,YAAY6xB,EAAK3gB,GACbnH,KAAKujB,OAASpc,EAAQoc,OACtBvjB,KAAK8nB,IAAMA,EACX9nB,KAAKqlB,eAAiByC,EAAIzC,eAC1BrlB,KAAKsoB,aAAenhB,EAAQmhB,cA1eR,QA2epBtoB,KAAK27D,WAAY,EAEjB74C,EAAU44C,QAAQ92C,IAAI5kB,MAElB8iB,EAAUy4C,qBACVv7D,KAAK47D,gBAK0B,IAA3B94C,EAAU44C,QAAQh0C,MAClB5E,EAAU+4C,kBAAkB77D,OAUxC47D,gBACI79C,EAAO7Y,KAAK,eAAgBlF,KAAKsoB,cACjC,IACI,MAAM21C,EAAmB,CACrBC,mBACIl+D,KAAK8nB,IAAIN,MACH1E,EAAUw4C,QAAQ6C,aAAaC,KAC/Bt7C,EAAUw4C,QAAQ6C,aAAaE,QAEvCp+C,EACA6C,EAAUw4C,QAAQgD,aAChBt+D,KAAKqlB,eACLrlB,KAAKsoB,aACLxF,EAAUw4C,QAAQiD,YAAYC,UAC9Bx+D,KAAKujB,OACL06C,EACAn7C,EAAU27C,uBAElBz+D,KAAK27D,WAAY,EAEjB,MAAM+C,EAAyB,YAAfz+C,EAAIlQ,OAMpB,OAJK2uD,GACD3gD,EAAO/Y,MAAM,kCAAmCib,EAAIxb,SAGjDi6D,EAET,MAAO15D,GAGL,OAFAy3B,IAAqBkG,iBAAiB39B,IAE/B,GAoBf8kB,4BACQN,EACAO,EACA40C,EACA10C,EACAC,GACJ,IAAKpH,EAAUw4C,QACX,OAGJ,MAAMmB,EAAc1yC,EAAUjH,EAAU6N,OAASguC,EAE7C77C,EAAUy4C,mBACVz4C,EAAUw4C,QAAQkB,uBACdx8D,KAAKqlB,eACLo3C,EACAz8D,KAAKujB,OACLiG,EACAS,EACAC,GAEJpH,EAAUo5C,aAAah5D,KAAK,CACxB+D,KAAMm0D,EACNiB,GAAIr8D,KAAKqlB,eACT1rB,KAAM,CACF8iE,cACAvyC,cACAV,OACAS,gBAYhBR,2BACI3G,EAAUg7C,aAAa99D,KAAMm7D,GAOjCryC,qBACQhG,EAAUy4C,oBACVz4C,EAAUw4C,QAAQiB,gBACdv8D,KAAKqlB,eACLvC,EAAUw4C,QAAQH,YAAYyD,iBAC9B5+D,KAAKujB,QAEbT,EAAU44C,QAAQxzC,OAAOloB,MAM7BopB,+BACItG,EAAUs5C,aACNp8D,KACAk7D,EACA,KACAl7D,KAAKqlB,gBAQboF,sBAAsBpxB,GAClBypB,EAAUs5C,aACNp8D,KAAMk7D,EAA2B7hE,EAAG2G,KAAKqlB,gBAQjDqF,uBAAuBrxB,GACnBypB,EAAUs5C,aACNp8D,KAAMk7D,EAA4B7hE,EAAG2G,KAAKqlB,gBAQlD8D,sBAAsBF,GAClBnG,EAAUg7C,aACN99D,KACAipB,EAAWkyC,EAA2BA,GAU9C5xC,uBAAuBxM,EAAOyM,GAC1B,IAAI8yC,EAEA9yC,IACA8yC,EAAY,CAAE9yC,SAGlB1G,EAAUg7C,aACN99D,KACA+c,EAAQo+C,EAA+BA,EACvCmB,GAQR3xC,uBAAuBtxB,GACnBypB,EAAUs5C,aACNp8D,KAAMk7D,EAAmC7hE,EAAG2G,KAAKqlB,gBAQzDuF,wBAAwBvxB,GACpBypB,EAAUs5C,aACNp8D,KAAMk7D,EAAoC7hE,EAAG2G,KAAKqlB,gBAQ1DwF,0BAA0BxxB,GACtBypB,EAAUs5C,aACNp8D,KAAMk7D,EAA+B7hE,EAAG2G,KAAKqlB,iBAQzDvC,EAAUw4C,QAAU,KAKpBx4C,EAAUo5C,aAAe,GAOzBp5C,EAAUy4C,oBAAqB,EAM/Bz4C,EAAUG,YAAc,KAMxBH,EAAUI,gBAAkB,KAS5BJ,EAAU6N,OAAS,O,kEClyBnB,MAAMkuC,EAAyBp8C,EAAQ,KAQjC4B,EAAa,CAgBfC,WACQxF,EACA3c,EACAuuC,EACAouB,EACAC,EACAC,GACJ,MAAMhzE,EAAIqP,SAEJ4jB,EAASjzB,EAAE6U,cADD,UAEVo+D,EAAgBjzE,EAAE8kB,qBAFR,UAEsC,GAItD,GAFAmO,EAAO9c,MAAQA,EAEX28D,EAAa,CAGb,MAAMI,EAAWL,IAEjB,GAAIK,EAAU,CACV,MAAMC,EAAYD,EAASpgD,IACrBsgD,EACAD,EAAUztC,UAAU,EAAGytC,EAAUE,YAAY,KAAO,GAEtDF,GAAaC,IAEbtgD,EAAMsgD,EAAgBtgD,IAK9BigD,IACA9/C,EAAOqgD,OAASP,GAEhBC,IACA//C,EAAOvD,QAAUsjD,GAGrB//C,EAAOH,IAAMA,EACT4xB,EACAuuB,EAAc74D,WAAWm5D,aAAatgD,EAAQggD,GAE9CA,EAAc74D,WAAWxF,YAAYqe,KAOjD9zB,EAAOD,QAAUm5B,G,6BCzEjB,8CAOA,SAASm7C,EAA8BhK,EAAO,SAI1C,OAAO,cAAcA,EAIjBv/D,eAAeysC,GACXjH,SAASiH,GACT1iC,KAAKuU,WAAa,KAOtB3J,KAAK2J,GACDvU,KAAKuU,WAAaA,IAQfirD,QAKR,MAAMC,EACPD,EAA8BhkC,M,6BCvCpC,2MAeO,MAAMkkC,EAA2B,0BAK3BC,EAAc,wBAKdvrE,EAAoB,8BAMpBwrE,EAAe,0B,8BC/B5B,4GAUA,MAAM7hD,EAASF,oBAAU6E,GAKV,MAAMmzB,UAAuBra,IAMxC,oBACI,MAAO,CACHqkC,oBAAqB,sBACrB3pB,mBAAoB,sBAS5B,oBACI,OAAOz6C,UAAQgC,OAmBnBxH,aAAY,sBAAEu/C,EAAF,mBAAyBG,EAAzB,sBAA6CC,EAA7C,WAAoEH,EAApE,MAAgFC,EAAhF,SAAuFJ,IAC/F7Z,QACAz7B,KAAK8/D,SAAW,CACZtqB,2BAAwD,IAA1BA,GAA+CA,EAC7EuqB,YAAazqB,EACbI,QACAC,wBAAkD,IAAvBA,EAAqC,IAAYp8B,OAAOo8B,GACnFC,yBAGJ51C,KAAKk4C,aAAe,IAAIz8C,UAAQ6M,WAAWmtC,GAC3Cz1C,KAAKggE,eAAiBvqB,EAAWjf,WAAW,QAAUif,EAAWjf,WAAW,QAG5Ex2B,KAAKk4C,aAAa5tC,WAAa,EAE/BtK,KAAKigE,iBAAmB,IAAIC,IAC5BlgE,KAAKigE,iBAAiBE,cAAcngE,KAAMA,KAAKk4C,cAE/Cl4C,KAAKogE,YAAc,IAAIC,IAAWrgE,KAAKk4C,cAcvCl4C,KAAKsgE,aAAe,GAIpBtgE,KAAK+F,oBACD,OACA,IAAIw6D,IAAqB,CACrBC,+BAAgC,IAAMxgE,KAAKw2C,0BAC3CiqB,wBAAyB,IAAMzgE,KAAK0gE,gCACpCX,YAAazqB,KAIrBt1C,KAAK2gE,uBAAwB,EAQjC,gBACI,MAAMC,EAAY5gE,KAAKk4C,cAAgBl4C,KAAKk4C,aAAavvC,QAAU3I,KAAKk4C,aAAavvC,OAAO2S,OAE5F,OAAQtb,KAAK6gE,UAAYplE,UAAQgC,OAAOM,WAAaiC,KAAK6gE,UAAYplE,UAAQgC,OAAOS,aAC5E8B,KAAK87C,kBAAqB8kB,GAAaA,EAAU5nD,aAAeuC,UAAUulD,MAQvF,YACI,OAAO9gE,KAAKk4C,aAAa6oB,MAQ7B,oBACI,OAA2C,IAApC/gE,KAAKk4C,aAAaruC,cAQ7B,aACI,OAAO7J,KAAKk4C,aAAap9C,OAQ7B,uBACI,OAAOkF,KAAKggE,eAQhB,UACI,OAAOhgE,KAAKk4C,aAAav0C,IAQ7B,0BACI,OAAO3D,KAAKk4C,aAAavvC,QAAU3I,KAAKk4C,aAAavvC,OAAO+O,oBAQhE,aACI,OAAO1X,KAAKk4C,aAAan6B,OAQ7B,cACI,OAAO/d,KAAKk4C,aAAa/wC,QAM7B,iBAAiB,MACb,OAAO,UAAAnH,KAAK8/D,SAASC,mBAAd,eAA2BjlE,SAAUkF,KAAKlF,OAQrD,cACI,OAAOkF,KAAKk4C,aAAa3vC,QAQ7B,aACI,OAAOvI,KAAK6gE,QAUhB96D,oBAAoB9Z,EAAMgkB,GACtBjQ,KAAK/T,GAAQgkB,EACbA,EAAOrF,KAAK5K,MAQhB+N,cAAc20B,GACV1iC,KAAKk4C,aAAanqC,cAAc20B,GAUpCt2B,OAAOzI,EAAK0I,EAAKC,EAAKd,KAAak3B,GAC/B1iC,KAAKk4C,aAAa9rC,OAAOzI,EAAK0I,EAAKC,EAAKtM,KAAKghE,qBAAqB9zE,KAAK8S,KAAMwL,MAAck3B,GAS/Fj3B,QAAQ9H,EAAK+H,EAAMF,KAAak3B,GAC5B1iC,KAAKk4C,aAAazsC,QAAQ9H,EAAK+H,EAAM1L,KAAKghE,qBAAqB9zE,KAAK8S,KAAMwL,MAAck3B,GAc5Fs+B,qBAAqBC,EAAgBlxD,KAAW2yB,GAC5C1iC,KAAK6gE,QAAU9wD,EAEf,IAAImxD,GAAgB,EAE2D,MAA3EnxD,IAAWtU,UAAQgC,OAAOM,WAAagS,IAAWtU,UAAQgC,OAAOS,UACjE8B,KAAKmhE,2BAIDnhE,KAAKggE,gBAAkBhgE,KAAK2gE,uBAC5B3gE,KAAKohE,0BAETphE,KAAK2gE,uBAAwB,EAE7B3gE,KAAKqhE,yBACLrhE,KAAKshE,sBACLthE,KAAKogE,YAAYmB,SACjBvhE,KAAKq2C,KAAKmrB,eAAc,UAAAxhE,KAAK8/D,SAASC,mBAAd,eAA2BjlE,SAAUkF,KAAKlF,SAC3DiV,IAAWtU,UAAQgC,OAAOO,eACjCgC,KAAKq2C,KAAK0C,eAGVmoB,EAAgBlhE,KAAKyhE,yBAChBP,GACDzzD,aAAazN,KAAK0hE,eAIrBR,IACDD,EAAelxD,KAAW2yB,GAC1B1iC,KAAK6jB,aAAa8D,KAAKkuB,EAAeI,OAAO4pB,oBAAqB9vD,IAS1E4xD,oBACI,IAAK,MAAMC,KAAY5hE,KAAKsgE,aACxBsB,EAAS5jC,OAAO,IAAI3mC,MAAM,eAE9B2I,KAAKsgE,aAAe,GAQxBuB,iBACQ7hE,KAAKk4C,cAAgBl4C,KAAKk4C,aAAavvC,SACvC3I,KAAKk4C,aAAavvC,OAAO0S,eACzBrb,KAAKk4C,aAAavvC,OAAOkT,SAAS,OAS1CtM,cAAcmzB,GACV1iC,KAAKogE,YAAYmB,SACjB9zD,aAAazN,KAAK0hE,cAClB1hE,KAAK2hE,oBACL3hE,KAAKk4C,aAAa3oC,cAAcmzB,GAQpCl1B,SAASk1B,GACL1iC,KAAKk4C,aAAa1qC,SAASk1B,GAQ/B8T,0BACI,OAAOx2C,KAAKigE,iBAAiBzpB,0BAQjC8C,uBACI,OAAOt5C,KAAKigE,iBAAiB3mB,uBAQjC6nB,2BACI,IAAKnhE,KAAK8/D,SAAStqB,sBAEf,OAGJ,MAAM,iBAAEssB,GAAqB9hE,KAAKk4C,aAE7Bl4C,KAAK87C,iBAEEgmB,EAEAA,EAAiBvjC,cAEjBujC,EAAiBC,mBACzBhkD,EAAO7Y,KAAK,uCACZ48D,EAAiBz/B,QAAoB,IAHrCtkB,EAAO5Y,KAAK,sEAFZ4Y,EAAO5Y,KAAK,+EAFZ4Y,EAAO5Y,KAAK,yDAiBpBk8D,yBACI,MAAM,mBAAE1rB,GAAuB31C,KAAK8/D,SAEpC,GAAI9/D,KAAKggE,gBAAkBrqB,EAAqB,EAAG,CAC/C31C,KAAK0hE,cAAgB3jD,EAAO7Y,KAAM,kCAAiCywC,OACnEloC,aAAazN,KAAK0hE,cAElB,MAAMM,EAAgCrsB,EAAmD,GAAhBvqC,KAAKC,SAAgB,IAE9F0S,EAAO9Y,MAAO,2CAA0C+8D,OAExDhiE,KAAK0hE,aAAen3D,WAChB,IAAMvK,KAAKohE,0BACN1jC,KAAK,IAAM19B,KAAKqhE,0BACrBW,IAUZZ,0BACI,MAAM,MAAE1rB,EAAF,sBAASE,GAA0B51C,KAAK8/D,SACxCmC,EAAMrsB,GACN51C,KAAKuI,QAAQ3G,QAAQ,SAAU,YAAYA,QAAQ,QAAS,WAElE,OAAOsgE,MAAMD,GACRvkC,KAAK/qB,IAGF,IAAK+iC,EACD,OAGJ,MAAMysB,EAAgBxvD,EAAS2H,QAAQ/tB,IAAI,iBAEvC41E,IAAkBzsB,IAClB33B,EAAO/Y,MACF,oCAAmC0wC,QAAYysB,KACpDniE,KAAK6jB,aAAa8D,KAAKkuB,EAAeI,OAAOC,uBAGpD3Z,MAAMv3B,IACH+Y,EAAO/Y,MAAO,wCAAuCi9D,EAAO,CAAEj9D,YAU1Es8D,sBACI,IAAK,MAAMM,KAAY5hE,KAAKsgE,aACxB,GAAIsB,EAAS3uD,GAAI,CACbxF,aAAam0D,EAASh0D,SAEtB,MAAMw0D,EAAWj6D,KAAKgM,MAAQytD,EAAS7kD,MAEvC/c,KAAKoO,OACDwzD,EAAS3uD,GACTxN,GAAUm8D,EAAS7jC,QAAQt4B,GAC3BT,GAAS48D,EAAS5jC,OAAOh5B,GACzBo9D,GAIZpiE,KAAKsgE,aAAe,GASxBjzD,KAAKW,GACD,IAAKhO,KAAK4J,UACN,MAAM,IAAIvS,MAAM,iBAEpB2I,KAAKk4C,aAAa7qC,KAAKW,GAa3BI,OAAO1O,EAAM8L,EAAUmC,EAASC,GAC5B,GAAK5N,KAAK4J,UAMV,OAAO5J,KAAKk4C,aAAa9pC,OAAO1O,EAAM8L,EAAUmC,EAASC,GALrDD,EAAQ,iBAgBhB00D,QAAQpvD,GAAI,QAAErF,IACV,OAAO,IAAIkwB,QAAQ,CAACC,EAASC,KACzB,GAAIh+B,KAAK4J,UACL5J,KAAKoO,OACD6E,EACAxN,GAAUs4B,EAAQt4B,GAClBT,GAASg5B,EAAOh5B,GAChB4I,OACD,CACH,MAAMg0D,EAAW,CACb3uD,KACA8qB,UACAC,SACAjhB,MAAO5U,KAAKgM,MACZvG,QAASrD,WAAW,KAEhBq3D,EAAS3uD,QAAK1S,EAGdy9B,OAAOz9B,IACRqN,IAGP5N,KAAKsgE,aAAap9D,KAAK0+D,MAUnClB,gCACQ1gE,KAAK87C,mBACL/9B,EAAO5Y,KAAK,yDACZnF,KAAK6hE,kBAebn0D,aAAahO,EAAM8L,EAAUmC,EAASC,GAC7B5N,KAAK4J,UAKV5J,KAAKk4C,aAAaxqC,aAAahO,EAAM8L,EAAUmC,EAASC,GAJpDD,EAAQ,iBAYhBquC,wBACI,IAAK1e,UAAUglC,YAActiE,KAAKk4C,aAAaruC,gBAAkB7J,KAAKk4C,aAAatuC,UAC/E,OAAO,EAGX5J,KAAKk4C,aAAahsC,qBAAqBzQ,UAAQgC,OAAOQ,eACtD+B,KAAKk4C,aAAaruC,eAAgB,EAElC,MAAMiO,EAAO9X,KAAKk4C,aAAavvC,OAAOgP,aACjCnc,MAAM,CACHyL,KAAM,cAERwI,EAAO7T,gBAAM,CACfqK,MAAOxK,UAAQK,GAAGG,OAClBgL,KAAM,gBAGV6Q,EAAKvR,MAAMkJ,EAAKpK,QAEhB,MAAM82B,EAAMmB,UAAUglC,YACoB,IAAtCtiE,KAAKuI,QAAQ3E,QAAQ,YAAsB,SAAQ5D,KAAKuI,QAAYvI,KAAKuI,QACzE9M,UAAQ2J,UAAU0S,EAAKzS,SAO3B,OALA0Y,EAAO7Y,KAAM,wCAAuCi3B,GAEpDn8B,KAAKk4C,aAAavvC,OAAOkH,oBACzB7P,KAAKk4C,aAAapoC,iBAEX,EAWX2xD,yBACI,MAAM,iBAAEK,GAAqB9hE,KAAKk4C,aAGlC,SAFoB4pB,IAAoBA,EAAiBC,oBAGrD/hE,KAAKogE,YAAYmC,YAEV,O,8EC3mBnB,oEAMO,MAAMC,EAAqB,sBAOrBC,EAA0B,2B,cCbvC,IAAIC,EAGJA,EAAI,WACH,OAAO1iE,KADJ,GAIJ,IAEC0iE,EAAIA,GAAK,IAAI7yB,SAAS,cAAb,GACR,MAAOx2C,GAEc,iBAAX/N,SAAqBo3E,EAAIp3E,QAOrCH,EAAOD,QAAUw3E,G,cCDjB,SAAS9sC,EAAUnb,EAAKoe,GACpB,OAAOztB,KAAKmM,MAAMnM,KAAKC,UAAYwtB,EAAMpe,EAAM,IAAMA,EAQzD,SAASkoD,EAAcxsE,GACnB,OAAOA,EAAIy/B,EAAU,EAAGz/B,EAAII,OAAS,IAqBzC,MAAMo/B,EAAa,CAKfitC,eAAc,IACHD,EA7CI,oBAoDf1nB,gBAAgB9iD,GACZ,IAAI8nB,EAAM,GAEV,KAAO9nB,KACH8nB,GAAOjgB,KAAK4iE,iBAGhB,OAAO3iD,GAEX0iD,gBACAE,kBApCJ,SAA2BtsE,GACvB,IAAIkP,EAAS,GAEb,IAAK,IAAI/Z,EAAI,EAAGA,EAAI6K,EAAQ7K,GAAK,EAC7B+Z,GAAUk9D,EApCZ,kEAuCF,OAAOl9D,GA8BPmwB,aAGJzqC,EAAOD,QAAUyqC,G,6BC3EF,Q,6BCDf,sGACO,MAAMmtC,EAAgB,CACzBh+C,oBAAoB,GAaXi+C,EAAmB,CAC5BxtB,MAAO,CACHz6C,OAAQ,aACRigD,IAAK,kBAETtF,WAAY,8CACZqB,WAAY,0BAIHksB,EAAmB,CAC5BC,iBAAiB,EACjBC,sBAAsB,EACtBC,yBAAyB,EACzBC,yBAAyB,EACzBC,eAAgB,GAChBC,sBAAsB,EACtBC,wBAAwB,EACxBC,yBAAyB,EACzBC,kBAAmB,YAqBlBC,aAAc,sBAafC,QAAQ,CACJC,cAAe,GAYnBznB,IAAK,CAODgY,SAAS,K,6BCxFjB,YAEeh+D,QAAf,S,6BCFA,oEAAO,MAAMquB,EAAuB,sDAOvBq/C,EAAwB,G,8HCJ9B,MCIDC,EAAwB,CAC5B,ODLoB,SCMpB,SDNoB,SCOpB,MDNmB,QCOnB,QDNqB,UCOrB,oBDN+B,YCO/B,ODNoB,UCkDtB,SAASC,IACP,MAAMC,EAAY1mC,UAAU0mC,UAE5B,GAAIA,EAAU1wD,MAAM,YAAa,CAE/B,MAAO,CACLrnB,KDtDkB,WCuDlBg4E,QAHcD,EAAU1wD,MAAM,6BAA6B,KAcjE,SAAS4wD,IACP,MAAMF,EAAY1mC,UAAU0mC,UAE5B,GAAIA,EAAU1wD,MAAM,eAAgB,CAElC,MAAO,CACLrnB,KDzEc,OC0Edg4E,QAHcD,EAAU1wD,MAAM,yBAAyB,KAa7D,SAAS6wD,IACP,MAAM7wD,EAAQgqB,UAAU0mC,UAAU1wD,MAAM,wCACxC,IAAI2wD,EAIJ,GAAI3wD,GAA+B,gBAAtBgqB,UAAU8mC,QAA2B,CAChD,IAAIn4E,EASJ,OAPIqnB,GAASA,EAAM/c,OAAS,IAC1BtK,EAAOqnB,EAAM,GACb2wD,EAAU3wD,EAAM,IAGlBrnB,IAASA,EAAO,gBAChBg4E,IAAYA,EAAU,WACf,CACLh4E,KDnGsB,eCoGtBg4E,YAWN,SAASI,EAAQC,GACf,IAAIC,EACJ,MAAMC,EAAY,CAACL,EAAoBJ,EAAiBG,GAExD,IAAK,IAAIx4E,EAAI,EAAGA,EAAI84E,EAAUjuE,OAAQ7K,IAGpC,GAFA64E,EAAcC,EAAU94E,KAEpB64E,EACF,OAAOA,EAIX,MAAMt4E,EAAOq4E,EAAOG,iBAEpB,OAAIx4E,KAAQ63E,EACH,CACL73E,KAAM63E,EAAsB73E,GAC5Bg4E,QAASK,EAAOI,sBAKpBH,EAtHF,WACE,MAAMP,EAAY1mC,UAAU0mC,UACtBO,EAAc,CAClBt4E,KDjBmB,UCkBnBg4E,aAAS1jE,GAGX,GAAIyjE,EAAU1wD,MAAM,YAAc0wD,EAAU1wD,MAAM,QAEhD,GAAI0wD,EAAU1wD,MAAM,WAAY,CAE9B,MAAM2wD,EAAUD,EAAU1wD,MAAM,oBAAoB,GAEhDiG,OAAOjB,SAAS2rD,EAAS,IAAM,KACjCM,EAAYt4E,KDpCE,SCqCds4E,EAAYN,QAAUA,QAGxBM,EAAYt4E,KDxCI,SCyChBs4E,EAAYN,QAAUD,EAAU1wD,MAAM,oBAAoB,GAI9D,OAAOixD,EA+FOI,GAEVJ,GAIG,CACLt4E,KD3ImB,UC4InBg4E,aAAS1jE,IAQE,MAAMqkE,EAQnB3uE,YAAYsuE,GACV,IAAIt4E,EAAMg4E,EAGV,GAFAjkE,KAAK6kE,QAAUC,IAAOC,UAAUznC,UAAU0mC,gBAEf,IAAhBO,EAA6B,CACtC,MAAMS,EAAsBX,EAAQrkE,KAAK6kE,SAEzC54E,EAAO+4E,EAAoB/4E,KAC3Bg4E,EAAUe,EAAoBf,aACrBM,EAAYt4E,QAAQ63E,GAC7B73E,EAAO63E,EAAsBS,EAAYt4E,MACzCg4E,EAAUM,EAAYN,UAEtBh4E,EDzKiB,UC0KjBg4E,OAAU1jE,GAGZP,KAAKilE,MAAQh5E,EACb+T,KAAKklE,SAAWjB,EAQlBxG,UACE,OAAOz9D,KAAKilE,MAQdE,WACE,MDxMkB,WCwMXnlE,KAAKilE,MAQdG,UACE,MDhNiB,UCgNVplE,KAAKilE,MAQdvwC,YACE,MDxNmB,YCwNZ10B,KAAKilE,MAQdI,cACE,MDhO6B,cCgOtBrlE,KAAKilE,MAQdK,WACE,MDxOkB,WCwOXtlE,KAAKilE,MAQdM,SACE,MDhPgB,SCgPTvlE,KAAKilE,MAQdO,aACE,MDxPoB,aCwPbxlE,KAAKilE,MAQd7gD,gBACE,MDhQwB,iBCgQjBpkB,KAAKilE,MAQdQ,aACE,OAAOzlE,KAAKklE,SAiBdQ,gBAAgBC,GACd,GAAI3lE,KAAKklE,SACP,OAAOllE,KAAK6kE,QAAQe,UAAUD,GAclCE,qBAAqB5B,GACnB,OAAOjkE,KAAK0lE,gBAAgB,CAC1B,CAAC1lE,KAAKilE,OAAS,IAAGhB,IActB/sB,kBAAkB+sB,GAChB,OAAOjkE,KAAK0lE,gBAAgB,CAC1B,CAAC1lE,KAAKilE,OAAS,IAAGhB,IAetB6B,iBAAiB7B,GACf,OAAOjkE,KAAK0lE,gBAAgB,CAC1B,CAAC1lE,KAAKilE,OAAS,IAAGhB,K,qBChVxB,MAAM8B,UAA0BjiD,IAC9B7tB,eAAeysC,GARjB,IAAyB3sC,EAAK9I,EAAKN,EAS/B8uC,SAASiH,GATsB/1C,EAWG,IAXRM,EAWJ,cAXD8I,EAWLiK,MAX0C5T,OAAOC,eAAe0J,EAAK9I,EAAK,CAAEN,MAAOA,EAAOL,YAAY,EAAM05E,cAAc,EAAMC,UAAU,IAAkBlwE,EAAI9I,GAAON,EAmBzLm5D,QACE9lD,KAAKu+C,SAAW,GASlB,aACE,OAAOnyD,OAAOmZ,KAAKvF,KAAKu+C,UAAUhoD,OAUpC4hB,QAAQ+tD,GACN,OAAOlmE,KAAKu+C,SAAS2nB,GAYvBp5D,QAAQo5D,EAASC,GACfnmE,KAAKu+C,SAAS2nB,GAAWC,EAU3Bp5D,WAAWm5D,UACFlmE,KAAKu+C,SAAS2nB,GAUvBj5E,IAAIE,GACF,MAAMoY,EAAOnZ,OAAOmZ,KAAKvF,KAAKu+C,UAE9B,KAAIh5C,EAAKhP,QAAUpJ,GAInB,OAAOoY,EAAKpY,GASdiY,YACE,OAAOwH,KAAKwL,UAAUpY,KAAKu+C,WAS/B,MAAM6nB,UAA0BtiD,IAK9B7tB,cACEwlC,QAEA,IACEz7B,KAAKu+C,SAAWjzD,OAAO+6E,aACvBrmE,KAAKsmE,uBAAwB,EAC7B,MAAOC,IAGJvmE,KAAKu+C,WAERx5C,QAAQI,KAAK,8BACbnF,KAAKu+C,SAAW,IAAIwnB,EACpB/lE,KAAKsmE,uBAAwB,GAUjCE,yBACE,OAAOxmE,KAAKsmE,sBASdxgB,QACE9lD,KAAKu+C,SAASuH,QAEd9lD,KAAK2nB,KAAK,WASZ,aACE,OAAO3nB,KAAKu+C,SAAShoD,OAWvB4hB,QAAQ+tD,GACN,OAAOlmE,KAAKu+C,SAASpmC,QAAQ+tD,GAW/Bp5D,QAAQo5D,EAASC,EAAUM,GAAuB,GAChDzmE,KAAKu+C,SAASzxC,QAAQo5D,EAASC,GAE1BM,GACHzmE,KAAK2nB,KAAK,WASd5a,WAAWm5D,GACTlmE,KAAKu+C,SAASxxC,WAAWm5D,GAEzBlmE,KAAK2nB,KAAK,WAWZ16B,IAAIvB,GACF,OAAOsU,KAAKu+C,SAAStxD,IAAIvB,GAS3B0Z,YACE,GAAIpF,KAAKwmE,yBACP,OAAOxmE,KAAKu+C,SAASn5C,YAGvB,MAAM7O,EAASyJ,KAAKu+C,SAAShoD,OACvBmwE,EAAsB,GAE5B,IAAK,IAAIh7E,EAAI,EAAGA,EAAI6K,EAAQ7K,IAAK,CAC/B,MAAMuB,EAAM+S,KAAKu+C,SAAStxD,IAAIvB,GAE9Bg7E,EAAoBz5E,GAAO+S,KAAKu+C,SAASpmC,QAAQlrB,GAGnD,OAAO2f,KAAKwL,UAAUsuD,IAKnB,MAAMloB,EAAoB,IAAI4nB,G,iBCvOrC,cAUA,IASI9jB,EAAU,qBAKVqkB,EAAU,oBACVC,EAAS,6BACTrkB,EAAS,eAKTE,EAAS,eAwBTokB,EAAU,OAGVnkB,EAAe,8BAGfC,EAAW,mBAGXmkB,EAAgB,GACpBA,EAAcxkB,GAAWwkB,EA7CV,kBA8CfA,EA9BqB,wBA8BWA,EA7Bd,qBA8BlBA,EA9Cc,oBA8CWA,EA7CX,iBA8CdA,EA9BiB,yBA8BWA,EA7BX,yBA8BjBA,EA7Bc,sBA6BWA,EA5BV,uBA6BfA,EA5Be,uBA4BWA,EAAcvkB,GACxCukB,EA5CgB,mBA4CWA,EA3CX,mBA4ChBA,EA1CgB,mBA0CWA,EAAcrkB,GACzCqkB,EAzCgB,mBAyCWA,EAxCX,mBAyChBA,EA/Be,uBA+BWA,EA9BJ,8BA+BtBA,EA9BgB,wBA8BWA,EA7BX,yBA6BsC,EACtDA,EArDe,kBAqDWA,EAAcH,GACxCG,EA3CiB,qBA2CW,EAG5B,IAAIjkB,EAA8B,iBAAVjtD,GAAsBA,GAAUA,EAAOxJ,SAAWA,QAAUwJ,EAGhFktD,EAA0B,iBAARjtD,MAAoBA,MAAQA,KAAKzJ,SAAWA,QAAUyJ,KAGxE7K,EAAO63D,GAAcC,GAAYjT,SAAS,cAATA,GAGjCkT,EAA4C73D,IAAYA,EAAQ6U,UAAY7U,EAG5E83D,EAAaD,GAAgC,iBAAV53D,GAAsBA,IAAWA,EAAO4U,UAAY5U,EAGvF83D,EAAgBD,GAAcA,EAAW93D,UAAY63D,EAUzD,SAASgkB,EAAYvhE,EAAKwhE,GAGxB,OADAxhE,EAAIigB,IAAIuhD,EAAK,GAAIA,EAAK,IACfxhE,EAWT,SAASyhE,EAAYxhD,EAAK94B,GAGxB,OADA84B,EAAIb,IAAIj4B,GACD84B,EAuDT,SAASyhD,EAAY1oD,EAAOqoC,EAAUsgB,EAAaC,GACjD,IAAInyC,GAAS,EACT1+B,EAASioB,EAAQA,EAAMjoB,OAAS,EAKpC,IAHI6wE,GAAa7wE,IACf4wE,EAAc3oD,IAAQyW,MAEfA,EAAQ1+B,GACf4wE,EAActgB,EAASsgB,EAAa3oD,EAAMyW,GAAQA,EAAOzW,GAE3D,OAAO2oD,EAyCT,SAASE,EAAa16E,GAGpB,IAAI8Y,GAAS,EACb,GAAa,MAAT9Y,GAA0C,mBAAlBA,EAAM+J,SAChC,IACE+O,KAAY9Y,EAAQ,IACpB,MAAO0M,IAEX,OAAOoM,EAUT,SAASi+C,EAAWl+C,GAClB,IAAIyvB,GAAS,EACTxvB,EAASrP,MAAMoP,EAAIkiB,MAKvB,OAHAliB,EAAI4J,SAAQ,SAASziB,EAAOM,GAC1BwY,IAASwvB,GAAS,CAAChoC,EAAKN,MAEnB8Y,EAWT,SAAS6hE,EAAQ1nE,EAAM2hD,GACrB,OAAO,SAASngD,GACd,OAAOxB,EAAK2hD,EAAUngD,KAW1B,SAASuiD,EAAWl+B,GAClB,IAAIwP,GAAS,EACTxvB,EAASrP,MAAMqvB,EAAIiC,MAKvB,OAHAjC,EAAIrW,SAAQ,SAASziB,GACnB8Y,IAASwvB,GAAStoC,KAEb8Y,EAIT,IASMm+C,EATFC,EAAaztD,MAAM9I,UACnBw2D,EAAYjU,SAASviD,UACrBy2D,EAAc33D,OAAOkB,UAGrB02D,EAAah5D,EAAK,sBAGlBk5D,GACEN,EAAM,SAAS1J,KAAK8J,GAAcA,EAAWz+C,MAAQy+C,EAAWz+C,KAAK4+C,UAAY,KACvE,iBAAmBP,EAAO,GAItCK,EAAeH,EAAUptD,SAGzBnJ,EAAiBw2D,EAAYx2D,eAO7B85D,EAAiBtD,EAAYrtD,SAG7B2tD,EAAaC,OAAO,IACtBL,EAAap4D,KAAK0B,GAAgBqU,QAzQjB,sBAyQuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5E2iD,EAAStB,EAAgBj4D,EAAKu5D,YAAShkD,EACvC9T,EAASzB,EAAKyB,OACd+3D,EAAax5D,EAAKw5D,WAClB+iB,EAAeD,EAAQl7E,OAAO2lD,eAAgB3lD,QAC9Co7E,EAAep7E,OAAOY,OACtBy3D,EAAuBV,EAAYU,qBACnCxgD,EAAS4/C,EAAW5/C,OAGpB0gD,EAAmBv4D,OAAO2jD,sBAC1B6U,EAAiBL,EAASA,EAAOM,cAAWtkD,EAC5CukD,EAAawiB,EAAQl7E,OAAOmZ,KAAMnZ,QAGlC24D,EAAWC,GAAUh6D,EAAM,YAC3B44B,EAAMohC,GAAUh6D,EAAM,OACtB8yC,EAAUknB,GAAUh6D,EAAM,WAC1Bm6B,EAAM6/B,GAAUh6D,EAAM,OACtBi6D,EAAUD,GAAUh6D,EAAM,WAC1Bk6D,EAAeF,GAAU54D,OAAQ,UAGjC+4D,EAAqBC,GAASL,GAC9BM,EAAgBD,GAASxhC,GACzB0hC,EAAoBF,GAAStnB,GAC7BynB,GAAgBH,GAASjgC,GACzBqgC,GAAoBJ,GAASH,GAG7BQ,GAAch5D,EAASA,EAAOa,eAAYiT,EAC1CmlD,GAAgBD,GAAcA,GAAYE,aAAUplD,EASxD,SAASqlD,GAAKC,GACZ,IAAI5wB,GAAS,EACT1+B,EAASsvD,EAAUA,EAAQtvD,OAAS,EAGxC,IADAyJ,KAAK8lD,UACI7wB,EAAQ1+B,GAAQ,CACvB,IAAIwvD,EAAQF,EAAQ5wB,GACpBj1B,KAAKylB,IAAIsgC,EAAM,GAAIA,EAAM,KA2F7B,SAASC,GAAUH,GACjB,IAAI5wB,GAAS,EACT1+B,EAASsvD,EAAUA,EAAQtvD,OAAS,EAGxC,IADAyJ,KAAK8lD,UACI7wB,EAAQ1+B,GAAQ,CACvB,IAAIwvD,EAAQF,EAAQ5wB,GACpBj1B,KAAKylB,IAAIsgC,EAAM,GAAIA,EAAM,KAyG7B,SAASE,GAASJ,GAChB,IAAI5wB,GAAS,EACT1+B,EAASsvD,EAAUA,EAAQtvD,OAAS,EAGxC,IADAyJ,KAAK8lD,UACI7wB,EAAQ1+B,GAAQ,CACvB,IAAIwvD,EAAQF,EAAQ5wB,GACpBj1B,KAAKylB,IAAIsgC,EAAM,GAAIA,EAAM,KAuF7B,SAASK,GAAMP,GACb7lD,KAAKmmD,SAAW,IAAIH,GAAUH,GA4FhC,SAASQ,GAAc15D,EAAO25D,GAG5B,IAAI7gD,EAAUpP,GAAQ1J,IAsrBxB,SAAqBA,GAEnB,OAmFF,SAA2BA,GACzB,OAmIF,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,EApIlB46D,CAAa56D,IAAU8yB,GAAY9yB,GApFnC86E,CAAkB96E,IAAUY,EAAe1B,KAAKc,EAAO,aAC1D83D,EAAqB54D,KAAKc,EAAO,WAAa06D,EAAex7D,KAAKc,IAAU21D,GAzrBhDmE,CAAY95D,GAljB9C,SAAmBQ,EAAG05D,GAIpB,IAHA,IAAI5xB,GAAS,EACTxvB,EAASrP,MAAMjJ,KAEV8nC,EAAQ9nC,GACfsY,EAAOwvB,GAAS4xB,EAAS5xB,GAE3B,OAAOxvB,EA4iBHqhD,CAAUn6D,EAAM4J,OAAQuC,QACxB,GAEAvC,EAASkP,EAAOlP,OAChBqwD,IAAgBrwD,EAEpB,IAAK,IAAItJ,KAAON,GACT25D,IAAa/4D,EAAe1B,KAAKc,EAAOM,IACvC25D,IAAuB,UAAP35D,GAAmB85D,GAAQ95D,EAAKsJ,KACpDkP,EAAOvC,KAAKjW,GAGhB,OAAOwY,EAaT,SAASiiE,GAAYt6E,EAAQH,EAAKN,GAChC,IAAI28D,EAAWl8D,EAAOH,GAChBM,EAAe1B,KAAKuB,EAAQH,IAAQqzB,GAAGgpC,EAAU38D,UACxC4T,IAAV5T,GAAyBM,KAAOG,KACnCA,EAAOH,GAAON,GAYlB,SAASq6D,GAAaxoC,EAAOvxB,GAE3B,IADA,IAAIsJ,EAASioB,EAAMjoB,OACZA,KACL,GAAI+pB,GAAG9B,EAAMjoB,GAAQ,GAAItJ,GACvB,OAAOsJ,EAGX,OAAQ,EA8BV,SAASoxE,GAAUh7E,EAAOi7E,EAAQC,EAAQlgB,EAAY16D,EAAKG,EAAQgX,GACjE,IAAIqB,EAIJ,GAHIkiD,IACFliD,EAASrY,EAASu6D,EAAWh7D,EAAOM,EAAKG,EAAQgX,GAASujD,EAAWh7D,SAExD4T,IAAXkF,EACF,OAAOA,EAET,IAAKqkD,GAASn9D,GACZ,OAAOA,EAET,IAAI45D,EAAQlwD,GAAQ1J,GACpB,GAAI45D,GAEF,GADA9gD,EA2XJ,SAAwB+Y,GACtB,IAAIjoB,EAASioB,EAAMjoB,OACfkP,EAAS+Y,EAAMvoB,YAAYM,GAG3BA,GAA6B,iBAAZioB,EAAM,IAAkBjxB,EAAe1B,KAAK2yB,EAAO,WACtE/Y,EAAOwvB,MAAQzW,EAAMyW,MACrBxvB,EAAOguD,MAAQj1C,EAAMi1C,OAEvB,OAAOhuD,EApYIqiE,CAAen7E,IACnBi7E,EACH,OA6ON,SAAmBn4C,EAAQjR,GACzB,IAAIyW,GAAS,EACT1+B,EAASk5B,EAAOl5B,OAEpBioB,IAAUA,EAAQpoB,MAAMG,IACxB,OAAS0+B,EAAQ1+B,GACfioB,EAAMyW,GAASxF,EAAOwF,GAExB,OAAOzW,EArPIupD,CAAUp7E,EAAO8Y,OAErB,CACL,IAAIrI,EAAM4qD,GAAOr7D,GACbq7E,EAAS5qE,GAAOupE,GAAWvpE,GAAOwpE,EAEtC,GAAI/hB,GAASl4D,GACX,OA0HN,SAAqB67D,EAAQof,GAC3B,GAAIA,EACF,OAAOpf,EAAO1oC,QAEhB,IAAIra,EAAS,IAAI+iD,EAAOvyD,YAAYuyD,EAAOjyD,QAE3C,OADAiyD,EAAO1nC,KAAKrb,GACLA,EAhIIwiE,CAAYt7E,EAAOi7E,GAE5B,GAp0BY,mBAo0BRxqE,GAAoBA,GAAOklD,GAAY0lB,IAAW56E,EAAS,CAC7D,GAAIi6E,EAAa16E,GACf,OAAOS,EAAST,EAAQ,GAG1B,GADA8Y,EA+XN,SAAyBrY,GACvB,MAAqC,mBAAtBA,EAAO6I,aAA8BiyE,GAAY96E,GAE5D,IAzVcqb,EAwVH8+D,EAAan6E,GAvVrB08D,GAASrhD,GAAS++D,EAAa/+D,GAAS,IADjD,IAAoBA,EAzCL0/D,CAAgBH,EAAS,GAAKr7E,IAClCi7E,EACH,OA6QR,SAAqBn4C,EAAQriC,GAC3B,OAAOg7E,GAAW34C,EAAQk7B,GAAWl7B,GAASriC,GA9QjCi7E,CAAY17E,EAhD3B,SAAoBS,EAAQqiC,GAC1B,OAAOriC,GAAUg7E,GAAW34C,EAAQlqB,GAAKkqB,GAASriC,GA+ClBk7E,CAAW7iE,EAAQ9Y,QAE1C,CACL,IAAKm6E,EAAc1pE,GACjB,OAAOhQ,EAAST,EAAQ,GAE1B8Y,EA0YN,SAAwBrY,EAAQgQ,EAAKmrE,EAAWX,GAC9C,IAAIrmD,EAAOn0B,EAAO6I,YAClB,OAAQmH,GACN,IArtCiB,uBAstCf,OAAOorE,GAAiBp7E,GAE1B,IAvuCU,mBAwuCV,IAvuCU,gBAwuCR,OAAO,IAAIm0B,GAAMn0B,GAEnB,IA3tCc,oBA4tCZ,OA3QN,SAAuBq7E,EAAUb,GAC/B,IAAIpf,EAASof,EAASY,GAAiBC,EAASjgB,QAAUigB,EAASjgB,OACnE,OAAO,IAAIigB,EAASxyE,YAAYuyD,EAAQigB,EAASlgB,WAAYkgB,EAASngB,YAyQ3DogB,CAAct7E,EAAQw6E,GAE/B,IA7tCa,wBA6tCI,IA5tCJ,wBA6tCb,IA5tCU,qBA4tCI,IA3tCH,sBA2tCkB,IA1tClB,sBA2tCX,IA1tCW,sBA0tCI,IAztCG,6BAytCmB,IAxtCzB,uBAwtCyC,IAvtCzC,uBAwtCV,OA/MN,SAAyBe,EAAYf,GACnC,IAAIpf,EAASof,EAASY,GAAiBG,EAAWngB,QAAUmgB,EAAWngB,OACvE,OAAO,IAAImgB,EAAW1yE,YAAYuyD,EAAQmgB,EAAWpgB,WAAYogB,EAAWpyE,QA6MjEqyE,CAAgBx7E,EAAQw6E,GAEjC,KAAKrlB,EACH,OArQN,SAAkB/8C,EAAKoiE,EAAQW,GAE7B,OAAOrB,EADKU,EAASW,EAAU7kB,EAAWl+C,IAAM,GAAQk+C,EAAWl+C,GACzCuhE,EAAa,IAAIvhE,EAAIvP,aAmQpC4yE,CAASz7E,EAAQw6E,EAAQW,GAElC,IAhvCY,kBAivCZ,IA5uCY,kBA6uCV,OAAO,IAAIhnD,EAAKn0B,GAElB,IAjvCY,kBAkvCV,OAhQN,SAAqB07E,GACnB,IAAIrjE,EAAS,IAAIqjE,EAAO7yE,YAAY6yE,EAAOr5C,OAAQo3C,EAAQ3sB,KAAK4uB,IAEhE,OADArjE,EAAOsjE,UAAYD,EAAOC,UACnBtjE,EA6PIujE,CAAY57E,GAErB,KAAKq1D,EACH,OApPN,SAAkBh9B,EAAKmiD,EAAQW,GAE7B,OAAOrB,EADKU,EAASW,EAAU5kB,EAAWl+B,IAAM,GAAQk+B,EAAWl+B,GACzCwhD,EAAa,IAAIxhD,EAAIxvB,aAkPpCgzE,CAAS77E,EAAQw6E,EAAQW,GAElC,IApvCY,kBAqvCV,OA3Oerd,EA2OI99D,EA1OhBs4D,GAAgBt5D,OAAOs5D,GAAc75D,KAAKq/D,IAAW,GAD9D,IAAqBA,EA/LNge,CAAev8E,EAAOyQ,EAAKuqE,GAAWC,IAInDxjE,IAAUA,EAAQ,IAAIgiD,IACtB,IAAIuC,EAAUvkD,EAAM7X,IAAII,GACxB,GAAIg8D,EACF,OAAOA,EAIT,GAFAvkD,EAAMqhB,IAAI94B,EAAO8Y,IAEZ8gD,EACH,IAAI4iB,EAAQtB,EAsQhB,SAAoBz6E,GAClB,OAnOF,SAAwBA,EAAQk9D,EAAUC,GACxC,IAAI9kD,EAAS6kD,EAASl9D,GACtB,OAAOiJ,GAAQjJ,GAAUqY,EApwB3B,SAAmB+Y,EAAO+I,GAKxB,IAJA,IAAI0N,GAAS,EACT1+B,EAASgxB,EAAOhxB,OAChBi0D,EAAShsC,EAAMjoB,SAEV0+B,EAAQ1+B,GACfioB,EAAMgsC,EAASv1B,GAAS1N,EAAO0N,GAEjC,OAAOzW,EA4vB2BisC,CAAUhlD,EAAQ8kD,EAAYn9D,IAiOzDs9D,CAAet9D,EAAQmY,GAAMolD,IAvQbzB,CAAWv8D,GAAS4Y,GAAK5Y,GAUhD,OA5vBF,SAAmB6xB,EAAOqoC,GAIxB,IAHA,IAAI5xB,GAAS,EACT1+B,EAASioB,EAAQA,EAAMjoB,OAAS,IAE3B0+B,EAAQ1+B,IAC8B,IAAzCswD,EAASroC,EAAMyW,GAAQA,EAAOzW,MA+uBpC4qD,CAAUD,GAASx8E,GAAO,SAAS08E,EAAUp8E,GACvCk8E,IAEFE,EAAW18E,EADXM,EAAMo8E,IAIR3B,GAAYjiE,EAAQxY,EAAK06E,GAAU0B,EAAUzB,EAAQC,EAAQlgB,EAAY16D,EAAKN,EAAOyX,OAEhFqB,EAkDT,SAASokD,GAAal9D,GACpB,SAAKm9D,GAASn9D,KAyYEiT,EAzYiBjT,EA0YxBu3D,GAAeA,KAActkD,MAvYvBoqD,GAAWr9D,IAAU06E,EAAa16E,GAAU03D,EAAa3B,GACzDxwC,KAAKkzC,GAASz4D,IAqY/B,IAAkBiT,EAtVlB,SAAS4oE,GAAiBc,GACxB,IAAI7jE,EAAS,IAAI6jE,EAAYrzE,YAAYqzE,EAAYhhB,YAErD,OADA,IAAI9D,EAAW/+C,GAAQggB,IAAI,IAAI++B,EAAW8kB,IACnC7jE,EA8GT,SAAS2iE,GAAW34C,EAAQ05C,EAAO/7E,EAAQu6D,GACzCv6D,IAAWA,EAAS,IAKpB,IAHA,IAAI6nC,GAAS,EACT1+B,EAAS4yE,EAAM5yE,SAEV0+B,EAAQ1+B,GAAQ,CACvB,IAAItJ,EAAMk8E,EAAMl0C,GAEZs0C,EAAW5hB,EACXA,EAAWv6D,EAAOH,GAAMwiC,EAAOxiC,GAAMA,EAAKG,EAAQqiC,QAClDlvB,EAEJmnE,GAAYt6E,EAAQH,OAAkBsT,IAAbgpE,EAAyB95C,EAAOxiC,GAAOs8E,GAElE,OAAOn8E,EAkCT,SAASw9D,GAAWplD,EAAKvY,GACvB,IAqKiBN,EACbsa,EAtKAtN,EAAO6L,EAAI2gD,SACf,OAsKgB,WADZl/C,SAData,EApKAM,KAsKmB,UAARga,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVta,EACU,OAAVA,GAvKDgN,EAAmB,iBAAP1M,EAAkB,SAAW,QACzC0M,EAAK6L,IAWX,SAASw/C,GAAU53D,EAAQH,GACzB,IAAIN,EAj8BN,SAAkBS,EAAQH,GACxB,OAAiB,MAAVG,OAAiBmT,EAAYnT,EAAOH,GAg8B/B49D,CAASz9D,EAAQH,GAC7B,OAAO48D,GAAal9D,GAASA,OAAQ4T,EA7tBvCqlD,GAAKt4D,UAAUw4D,MAnEf,WACE9lD,KAAKmmD,SAAWjB,EAAeA,EAAa,MAAQ,IAmEtDU,GAAKt4D,UAAkB,OAtDvB,SAAoBL,GAClB,OAAO+S,KAAKuoB,IAAIt7B,WAAe+S,KAAKmmD,SAASl5D,IAsD/C24D,GAAKt4D,UAAUf,IA1Cf,SAAiBU,GACf,IAAI0M,EAAOqG,KAAKmmD,SAChB,GAAIjB,EAAc,CAChB,IAAIz/C,EAAS9L,EAAK1M,GAClB,MA7YiB,8BA6YVwY,OAA4BlF,EAAYkF,EAEjD,OAAOlY,EAAe1B,KAAK8N,EAAM1M,GAAO0M,EAAK1M,QAAOsT,GAqCtDqlD,GAAKt4D,UAAUi7B,IAzBf,SAAiBt7B,GACf,IAAI0M,EAAOqG,KAAKmmD,SAChB,OAAOjB,OAA6B3kD,IAAd5G,EAAK1M,GAAqBM,EAAe1B,KAAK8N,EAAM1M,IAwB5E24D,GAAKt4D,UAAUm4B,IAXf,SAAiBx4B,EAAKN,GAGpB,OAFWqT,KAAKmmD,SACXl5D,GAAQi4D,QAA0B3kD,IAAV5T,EA5aV,4BA4akDA,EAC9DqT,MAoHTgmD,GAAU14D,UAAUw4D,MAjFpB,WACE9lD,KAAKmmD,SAAW,IAiFlBH,GAAU14D,UAAkB,OArE5B,SAAyBL,GACvB,IAAI0M,EAAOqG,KAAKmmD,SACZlxB,EAAQ+xB,GAAartD,EAAM1M,GAE/B,QAAIgoC,EAAQ,KAIRA,GADYt7B,EAAKpD,OAAS,EAE5BoD,EAAK+W,MAELzM,EAAOpY,KAAK8N,EAAMs7B,EAAO,IAEpB,IAyDT+wB,GAAU14D,UAAUf,IA7CpB,SAAsBU,GACpB,IAAI0M,EAAOqG,KAAKmmD,SACZlxB,EAAQ+xB,GAAartD,EAAM1M,GAE/B,OAAOgoC,EAAQ,OAAI10B,EAAY5G,EAAKs7B,GAAO,IA0C7C+wB,GAAU14D,UAAUi7B,IA9BpB,SAAsBt7B,GACpB,OAAO+5D,GAAahnD,KAAKmmD,SAAUl5D,IAAQ,GA8B7C+4D,GAAU14D,UAAUm4B,IAjBpB,SAAsBx4B,EAAKN,GACzB,IAAIgN,EAAOqG,KAAKmmD,SACZlxB,EAAQ+xB,GAAartD,EAAM1M,GAO/B,OALIgoC,EAAQ,EACVt7B,EAAKuJ,KAAK,CAACjW,EAAKN,IAEhBgN,EAAKs7B,GAAO,GAAKtoC,EAEZqT,MAkGTimD,GAAS34D,UAAUw4D,MA/DnB,WACE9lD,KAAKmmD,SAAW,CACd,KAAQ,IAAIP,GACZ,IAAO,IAAKhiC,GAAOoiC,IACnB,OAAU,IAAIJ,KA4DlBK,GAAS34D,UAAkB,OA/C3B,SAAwBL,GACtB,OAAO29D,GAAW5qD,KAAM/S,GAAa,OAAEA,IA+CzCg5D,GAAS34D,UAAUf,IAnCnB,SAAqBU,GACnB,OAAO29D,GAAW5qD,KAAM/S,GAAKV,IAAIU,IAmCnCg5D,GAAS34D,UAAUi7B,IAvBnB,SAAqBt7B,GACnB,OAAO29D,GAAW5qD,KAAM/S,GAAKs7B,IAAIt7B,IAuBnCg5D,GAAS34D,UAAUm4B,IAVnB,SAAqBx4B,EAAKN,GAExB,OADAi+D,GAAW5qD,KAAM/S,GAAKw4B,IAAIx4B,EAAKN,GACxBqT,MAgGTomD,GAAM94D,UAAUw4D,MApEhB,WACE9lD,KAAKmmD,SAAW,IAAIH,IAoEtBI,GAAM94D,UAAkB,OAxDxB,SAAqBL,GACnB,OAAO+S,KAAKmmD,SAAiB,OAAEl5D,IAwDjCm5D,GAAM94D,UAAUf,IA5ChB,SAAkBU,GAChB,OAAO+S,KAAKmmD,SAAS55D,IAAIU,IA4C3Bm5D,GAAM94D,UAAUi7B,IAhChB,SAAkBt7B,GAChB,OAAO+S,KAAKmmD,SAAS59B,IAAIt7B,IAgC3Bm5D,GAAM94D,UAAUm4B,IAnBhB,SAAkBx4B,EAAKN,GACrB,IAAImkE,EAAQ9wD,KAAKmmD,SACjB,GAAI2K,aAAiB9K,GAAW,CAC9B,IAAI8E,EAAQgG,EAAM3K,SAClB,IAAKviC,GAAQknC,EAAMv0D,OAASw0D,IAE1B,OADAD,EAAM5nD,KAAK,CAACjW,EAAKN,IACVqT,KAET8wD,EAAQ9wD,KAAKmmD,SAAW,IAAIF,GAAS6E,GAGvC,OADAgG,EAAMrrC,IAAIx4B,EAAKN,GACRqT,MAicT,IAAI2qD,GAAahG,EAAmB2iB,EAAQ3iB,EAAkBv4D,QAyhB9D,WACE,MAAO,IAjhBL47D,GAtQJ,SAAoBr7D,GAClB,OAAO06D,EAAex7D,KAAKc,IAyX7B,SAASo6D,GAAQp6D,EAAO4J,GAEtB,SADAA,EAAmB,MAAVA,EAnxCY,iBAmxCwBA,KAE1B,iBAAT5J,GAAqBg2D,EAASzwC,KAAKvlB,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQ4J,EAmC7C,SAAS2xE,GAAYv7E,GACnB,IAAI40B,EAAO50B,GAASA,EAAMsJ,YAG1B,OAAOtJ,KAFqB,mBAAR40B,GAAsBA,EAAKj0B,WAAcy2D,GAY/D,SAASqB,GAASxlD,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOqkD,EAAap4D,KAAK+T,GACzB,MAAOvG,IACT,IACE,OAAQuG,EAAO,GACf,MAAOvG,KAEX,MAAO,GAyDT,SAASinB,GAAG3zB,EAAO86D,GACjB,OAAO96D,IAAU86D,GAAU96D,GAAUA,GAAS86D,GAAUA,GAxOrD1C,GA7oCa,qBA6oCDiD,GAAO,IAAIjD,EAAS,IAAIoG,YAAY,MAChDvnC,GAAOokC,GAAO,IAAIpkC,IAAQ2+B,GAC1BzkB,GAvpCY,oBAupCDkqB,GAAOlqB,EAAQC,YAC1B5Y,GAAO6iC,GAAO,IAAI7iC,IAAQs9B,GAC1BwC,GAppCY,oBAopCD+C,GAAO,IAAI/C,MACzB+C,GAAS,SAASr7D,GAChB,IAAI8Y,EAAS4hD,EAAex7D,KAAKc,GAC7B40B,EA7pCQ,mBA6pCD9b,EAAsB9Y,EAAMsJ,iBAAcsK,EACjD6qD,EAAa7pC,EAAO6jC,GAAS7jC,QAAQhhB,EAEzC,GAAI6qD,EACF,OAAQA,GACN,KAAKjG,EAAoB,MAzpCf,oBA0pCV,KAAKE,EAAe,OAAO9C,EAC3B,KAAK+C,EAAmB,MAnqCf,mBAoqCT,KAAKC,GAAe,OAAO9C,EAC3B,KAAK+C,GAAmB,MAhqCf,mBAmqCb,OAAO//C,IAuQX,IAAIpP,GAAUD,MAAMC,QA2BpB,SAASopB,GAAY9yB,GACnB,OAAgB,MAATA,GAqGT,SAAkBA,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GA/jDb,iBAw9CG0+D,CAAS1+D,EAAM4J,UAAYyzD,GAAWr9D,GAiDhE,IAAIk4D,GAAWD,GAsLf,WACE,OAAO,GApKT,SAASoF,GAAWr9D,GAGlB,IAAIyQ,EAAM0sD,GAASn9D,GAAS06D,EAAex7D,KAAKc,GAAS,GACzD,OAAOyQ,GAAOupE,GAAWvpE,GAAOwpE,EA2DlC,SAAS9c,GAASn9D,GAChB,IAAIsa,SAActa,EAClB,QAASA,IAAkB,UAARsa,GAA4B,YAARA,GA2DzC,SAAS1B,GAAKnY,GACZ,OAAOqyB,GAAYryB,GAAUi5D,GAAcj5D,GAtuB7C,SAAkBA,GAChB,IAAK86E,GAAY96E,GACf,OAAO03D,EAAW13D,GAEpB,IAAIqY,EAAS,GACb,IAAK,IAAIxY,KAAOb,OAAOgB,GACjBG,EAAe1B,KAAKuB,EAAQH,IAAe,eAAPA,GACtCwY,EAAOvC,KAAKjW,GAGhB,OAAOwY,EA4tB8CwkD,CAAS78D,GA0ChEjC,EAAOD,QA9VP,SAAmByB,GACjB,OAAOg7E,GAAUh7E,GAAO,GAAM,M,yDCr3ChC,kCAOe,MAAM68E,EAIjBvzE,cACI+J,KAAK28B,QAAU,IAAImB,QAAQ,CAACC,EAASC,KACjCh+B,KAAK+9B,QAAU,IAAI2E,KACf1iC,KAAKypE,qBACL1rC,KAAW2E,IAEf1iC,KAAKg+B,OAAS,IAAI0E,KACd1iC,KAAKypE,qBACLzrC,KAAU0E,MAGlB1iC,KAAK09B,KAAO19B,KAAK28B,QAAQe,KAAKxwC,KAAK8S,KAAK28B,SACxC38B,KAAKu8B,MAAQv8B,KAAK28B,QAAQJ,MAAMrvC,KAAK8S,KAAK28B,SAM9C8sC,qBACIh8D,aAAazN,KAAK0pE,UAMtBC,iBAAiBC,GACb5pE,KAAK0pE,SAAWn/D,WAAW,KACvBvK,KAAKg+B,OAAO,IAAI3mC,MAAM,aACvBuyE,M,8BCvCX,yEAIA,MAAM7rD,EAAS0E,EAAQ,GAAqB5E,UAAU6E,GAKzCmnD,EAAwB,EAK/BC,EAAiB,CAQnBtrC,aAAc,KAQd5zB,KAAKzD,EAAU,IACXnH,KAAKmH,QAAUA,EACfnH,KAAKw+B,aAAex+B,KAAK+pE,4BAEpB/pE,KAAKw+B,cACNzgB,EAAO7Y,KAAK,6BAWpB6kE,4BACI,OAAI5lD,IAAQohD,SACD,CAAChyD,EAAWU,KACf3oB,OAAO0+E,YAAYC,oBACf12D,EACA,CAACvO,EAAOulB,KACJ,IAAI8T,EAmBAA,EADAr5B,GAAwB,sBAAfA,EAAM/Y,KACF,IAAIm+B,IACb+T,+BAGS,IAAI/T,IACbplB,EAAOulB,EAAa,CAAE,YAER,mBAAdtW,GACDA,EAAUoqB,MAGtBla,IAAQqhD,aACRxlE,KAAKkqE,uBACL/lD,IAAQC,iBAAmBD,IAAQgmD,0BACnCnqE,KAAKoqE,kCACLjmD,IAAQgmD,0BACRnqE,KAAKqqE,iCAEhBtsD,EAAOnZ,IAAI,mCAAoCuf,IAAQs5C,WAEhD,OAQX6M,uBACI,MAAM,aAAE3uC,GAAiB37B,KAAKmH,QAQ9B,QAPcw0B,aAAA,EAAAA,EAActC,SAAS,CACjC0G,iBAAiB,EACjBK,aAAc,EACdH,kBAAkB,EAClBC,kBAAkB,IAW1B3B,cACI,OAA6B,OAAtBv+B,KAAKw+B,cAShB0rC,uBAAuB32D,EAAWU,GAC9B,GAAI3oB,OAAOi/E,yBAA2Bj/E,OAAOi/E,wBAAwBC,kBAAmB,CACpF,MAAM,wBAAEC,EAAF,sBAA2BC,GAA0B1qE,KAAKmH,QAEhE7b,OAAOi/E,wBAAwBC,kBAC3B,CACIE,sBAAuBA,GAAyB,CAAE,SAAU,WAEhE,CAAC5hC,EAAU6hC,EAAYC,GAAmB,KACtC,GAAI9hC,EAAU,SACV,IAAI+hC,GAAmB,EAEvB,GAAID,EAAkB,CAClBC,EAAmB,GACnB,MAAMC,EAAsB9qE,KAAKsqE,uBAEE,kBAAxBQ,IACPD,EAAmB,CACf/tC,SAAUguC,IAUC,WAAfH,IACAE,EAAiB33B,UAAY,CACzB63B,kBAAmB,YAK/B,MAAMxgD,EAAc,CAChB6P,MAAOywC,EACPnyC,MAAO,CACHwa,UAAW,CACP63B,kBAAmB,UACnBC,oBAAqBliC,EACrBmiC,aAAY,UAAER,aAAF,EAAEA,EAAyBhwD,WAA3B,QAAkCovD,EAC9CqB,aAAY,UAAET,aAAF,EAAEA,EAAyB5xC,WAA3B,QAAkCgxC,EAC9CsB,SAAU7/E,OAAO8/E,OAAOtyC,MACxBuyC,UAAW//E,OAAO8/E,OAAOzyC,UAMrC2E,UAAUC,aAAaa,aAAa7T,GAC/BmT,KAAK9X,GAAUrS,EAAU,CACtBqS,SACA2a,SAAUuI,EACV1J,WAAYurC,IACZ12D,QAKRA,EAAU,IAAImW,IAAgB+T,iCAGtChuB,GAAO8D,EAAU,IAAImW,IACjB+T,gCACAhuB,UAIR8D,EAAU,IAAImW,IAAgB+T,uCAUtCksC,gCAAgC7+D,EAAUwzD,GACtC,IAAIsM,EAGAA,EADAhuC,UAAUguC,gBACQhuC,UAAUguC,gBAAgBp+E,KAAKowC,WAG/BA,UAAUC,aAAa+tC,gBAAgBp+E,KAAKowC,UAAUC,cAG5E,MAAM,wBAAEktC,GAA4BzqE,KAAKmH,QACnCuxB,EAA2C,iBAA5B+xC,GAAuC,CAAEc,UAAWd,GACnErwC,EAAQp6B,KAAKsqE,uBAGnB5xC,EAAM6yC,kBAAoB7yC,EAAM6yC,UAAU9wD,IAE1C,MAAM8P,EAAc,CAChBmO,QACA0B,QACAoxC,OAAQ,UAGZztD,EAAO7Y,KAAK,2CAA4CqlB,GAExD+gD,EAAgB/gD,GACXmT,KAAK9X,IACFpa,EAAS,CACLoa,SACA2a,SAAU3a,EAAO1e,OAGxBq1B,MAAMv3B,IACH,MAAMymE,EAAe,CACjBC,UAAW1mE,GAASA,EAAM/Y,KAC1B0/E,SAAU3mE,GAASA,EAAMP,QACzBmnE,WAAY5mE,GAASA,EAAMZ,OAG/B2Z,EAAO/Y,MAAM,wBAAyBulB,EAAakhD,GAE/CA,EAAaE,WAAmE,IAAvDF,EAAaE,SAAS/nE,QAAQ,oBAGvDo7D,EAAc,IAAI50C,IAAgB+T,sBAKtC6gC,EAAc,IAAI50C,IAAgB+T,mCAU9CisC,kCAAkC5+D,EAAUwzD,GACxCjhD,EAAO7Y,KAAK,4CAEZo4B,UAAUC,aAAa+tC,gBAAgB,CAAE5yC,OAAO,IAC3CgF,KAAK9X,IACFpa,EAAS,CACLoa,SACA2a,SAAU3a,EAAO1e,OAExBq1B,MAAM,KACHyiC,EAAc,IAAI50C,IAAgB+T,oCAMnC2rC,Q,8DCpQf3+E,EAAOD,QAZkB,CAIrB2gF,YAAa,cAKb/rC,KAAM,S,6BCdV,MAAMgsC,EAAW,CAIjB,mBAA8B,WAC5B,OAAO1gE,KAAKC,SAAS3U,SAAS,IAAI0e,OAAO,EAAG,MAI9C02D,EAASC,WAAaD,EAASE,qBAG/BF,EAASG,WAAa,SAASC,GAC7B,OAAOA,EAAKxvB,OAAO35C,MAAM,MAAMyC,IAAIhB,GAAQA,EAAKk4C,SAGlDovB,EAASK,cAAgB,SAASD,GAEhC,OADcA,EAAKnpE,MAAM,QACZyC,IAAI,CAAC4mE,EAAMn3C,KAAWA,EAAQ,EACzC,KAAOm3C,EAAOA,GAAM1vB,OAAS,SAIjCovB,EAASO,eAAiB,SAASH,GACjC,MAAMI,EAAWR,EAASK,cAAcD,GACxC,OAAOI,GAAYA,EAAS,IAI9BR,EAASS,iBAAmB,SAASL,GACnC,MAAMI,EAAWR,EAASK,cAAcD,GAExC,OADAI,EAASr6C,QACFq6C,GAITR,EAASU,YAAc,SAASN,EAAMO,GACpC,OAAOX,EAASG,WAAWC,GAAMl3C,OAAOxwB,GAAiC,IAAzBA,EAAKZ,QAAQ6oE,KAM/DX,EAASY,eAAiB,SAASloE,GACjC,IAAIR,EAGFA,EADmC,IAAjCQ,EAAKZ,QAAQ,gBACPY,EAAKktB,UAAU,IAAI3uB,MAAM,KAEzByB,EAAKktB,UAAU,IAAI3uB,MAAM,KAGnC,MAAMiwB,EAAY,CAChBC,WAAYjvB,EAAM,GAClBkvB,UAAW,CAACy5C,EAAG,MAAOC,EAAG,QAAQ5oE,EAAM,IACvC0E,SAAU1E,EAAM,GAAGrB,cACnBkP,SAAUyG,SAAStU,EAAM,GAAI,IAC7BmvB,GAAInvB,EAAM,GACV6oE,QAAS7oE,EAAM,GACfkuB,KAAM5Z,SAAStU,EAAM,GAAI,IAEzBiD,KAAMjD,EAAM,IAGd,IAAK,IAAItY,EAAI,EAAGA,EAAIsY,EAAMzN,OAAQ7K,GAAK,EACrC,OAAQsY,EAAMtY,IACZ,IAAK,QACHsnC,EAAU85C,eAAiB9oE,EAAMtY,EAAI,GACrC,MACF,IAAK,QACHsnC,EAAU+5C,YAAcz0D,SAAStU,EAAMtY,EAAI,GAAI,IAC/C,MACF,IAAK,UACHsnC,EAAUg6C,QAAUhpE,EAAMtY,EAAI,GAC9B,MACF,IAAK,QACHsnC,EAAU1B,MAAQttB,EAAMtY,EAAI,GAC5BsnC,EAAUi6C,iBAAmBjpE,EAAMtY,EAAI,GACvC,MACF,aAC8B6U,IAAxByyB,EAAUhvB,EAAMtY,MAClBsnC,EAAUhvB,EAAMtY,IAAMsY,EAAMtY,EAAI,IAKxC,OAAOsnC,GAIT84C,EAASoB,eAAiB,SAASl6C,GACjC,MAAMqD,EAAM,GACZA,EAAInzB,KAAK8vB,EAAUC,YAEnB,MAAMC,EAAYF,EAAUE,UACV,QAAdA,EACFmD,EAAInzB,KAAK,GACc,SAAdgwB,EACTmD,EAAInzB,KAAK,GAETmzB,EAAInzB,KAAKgwB,GAEXmD,EAAInzB,KAAK8vB,EAAUtqB,SAASykE,eAC5B92C,EAAInzB,KAAK8vB,EAAUnhB,UACnBwkB,EAAInzB,KAAK8vB,EAAU65C,SAAW75C,EAAUG,IACxCkD,EAAInzB,KAAK8vB,EAAUd,MAEnB,MAAMjrB,EAAO+rB,EAAU/rB,KAkBvB,OAjBAovB,EAAInzB,KAAK,OACTmzB,EAAInzB,KAAK+D,GACI,SAATA,GAAmB+rB,EAAU85C,gBAC7B95C,EAAU+5C,cACZ12C,EAAInzB,KAAK,SACTmzB,EAAInzB,KAAK8vB,EAAU85C,gBACnBz2C,EAAInzB,KAAK,SACTmzB,EAAInzB,KAAK8vB,EAAU+5C,cAEjB/5C,EAAUg6C,SAAgD,QAArCh6C,EAAUtqB,SAAS/F,gBAC1C0zB,EAAInzB,KAAK,WACTmzB,EAAInzB,KAAK8vB,EAAUg6C,WAEjBh6C,EAAUi6C,kBAAoBj6C,EAAU1B,SAC1C+E,EAAInzB,KAAK,SACTmzB,EAAInzB,KAAK8vB,EAAUi6C,kBAAoBj6C,EAAU1B,QAE5C,aAAe+E,EAAIlzB,KAAK,MAKjC2oE,EAASsB,gBAAkB,SAAS5oE,GAClC,OAAOA,EAAK4Q,OAAO,IAAIrS,MAAM,MAK/B+oE,EAASuB,YAAc,SAAS7oE,GAC9B,IAAIR,EAAQQ,EAAK4Q,OAAO,GAAGrS,MAAM,KACjC,MAAMuqE,EAAS,CACbl+B,YAAa92B,SAAStU,EAAMiuB,QAAS,KAUvC,OAPAjuB,EAAQA,EAAM,GAAGjB,MAAM,KAEvBuqE,EAAOrhF,KAAO+X,EAAM,GACpBspE,EAAOC,UAAYj1D,SAAStU,EAAM,GAAI,IACtCspE,EAAO96C,SAA4B,IAAjBxuB,EAAMzN,OAAe+hB,SAAStU,EAAM,GAAI,IAAM,EAEhEspE,EAAOE,YAAcF,EAAO96C,SACrB86C,GAKTxB,EAAS2B,YAAc,SAAS52C,GAC9B,IAAI/C,EAAK+C,EAAMuY,iBACoB7uC,IAA/Bs2B,EAAM62C,uBACR55C,EAAK+C,EAAM62C,sBAEb,MAAMl7C,EAAWqE,EAAMrE,UAAYqE,EAAM22C,aAAe,EACxD,MAAO,YAAc15C,EAAK,IAAM+C,EAAM5qC,KAAO,IAAM4qC,EAAM02C,WACvC,IAAb/6C,EAAiB,IAAMA,EAAW,IAAM,QAM/Cs5C,EAAS93C,YAAc,SAASxvB,GAC9B,MAAMR,EAAQQ,EAAK4Q,OAAO,GAAGrS,MAAM,KACnC,MAAO,CACLmE,GAAIoR,SAAStU,EAAM,GAAI,IACvBiwB,UAAWjwB,EAAM,GAAGJ,QAAQ,KAAO,EAAII,EAAM,GAAGjB,MAAM,KAAK,GAAK,WAChEmxB,IAAKlwB,EAAM,KAMf8nE,EAAS6B,YAAc,SAASC,GAC9B,MAAO,aAAeA,EAAgB1mE,IAAM0mE,EAAgBC,cACvDD,EAAgB35C,WAA2C,aAA9B25C,EAAgB35C,UAC1C,IAAM25C,EAAgB35C,UACtB,IACJ,IAAM25C,EAAgB15C,IAAM,QAMlC43C,EAASh5C,UAAY,SAAStuB,GAC5B,MAAM8oE,EAAS,GACf,IAAIrgC,EACJ,MAAMjpC,EAAQQ,EAAK4Q,OAAO5Q,EAAKZ,QAAQ,KAAO,GAAGb,MAAM,KACvD,IAAK,IAAI7J,EAAI,EAAGA,EAAI8K,EAAMzN,OAAQ2C,IAChC+zC,EAAKjpC,EAAM9K,GAAGwjD,OAAO35C,MAAM,KAC3BuqE,EAAOrgC,EAAG,GAAGyP,QAAUzP,EAAG,GAE5B,OAAOqgC,GAITxB,EAASgC,UAAY,SAASj3C,GAC5B,IAAIryB,EAAO,GACPsvB,EAAK+C,EAAMuY,YAIf,QAHmC7uC,IAA/Bs2B,EAAM62C,uBACR55C,EAAK+C,EAAM62C,sBAET72C,EAAMk3C,YAAc3hF,OAAOmZ,KAAKsxB,EAAMk3C,YAAYx3E,OAAQ,CAC5D,MAAMw9B,EAAS,GACf3nC,OAAOmZ,KAAKsxB,EAAMk3C,YAAY3+D,QAAQ4+D,IAChCn3C,EAAMk3C,WAAWC,GACnBj6C,EAAO7wB,KAAK8qE,EAAQ,IAAMn3C,EAAMk3C,WAAWC,IAE3Cj6C,EAAO7wB,KAAK8qE,KAGhBxpE,GAAQ,UAAYsvB,EAAK,IAAMC,EAAO5wB,KAAK,KAAO,OAEpD,OAAOqB,GAKTsnE,EAASmC,YAAc,SAASzpE,GAC9B,MAAMR,EAAQQ,EAAK4Q,OAAO5Q,EAAKZ,QAAQ,KAAO,GAAGb,MAAM,KACvD,MAAO,CACLkE,KAAMjD,EAAMiuB,QACZqd,UAAWtrC,EAAMb,KAAK,OAI1B2oE,EAASoC,YAAc,SAASr3C,GAC9B,IAAIjD,EAAQ,GACRE,EAAK+C,EAAMuY,YAYf,YAXmC7uC,IAA/Bs2B,EAAM62C,uBACR55C,EAAK+C,EAAM62C,sBAET72C,EAAMs3C,cAAgBt3C,EAAMs3C,aAAa53E,QAE3CsgC,EAAMs3C,aAAa/+D,QAAQo/B,IACzB5a,GAAS,aAAeE,EAAK,IAAM0a,EAAGvnC,MACrCunC,EAAGc,WAAad,EAAGc,UAAU/4C,OAAS,IAAMi4C,EAAGc,UAAY,IACxD,SAGD1b,GAKTk4C,EAASsC,eAAiB,SAAS5pE,GACjC,MAAM6pE,EAAK7pE,EAAKZ,QAAQ,KAClBI,EAAQ,CACZwlB,KAAMlR,SAAS9T,EAAK4Q,OAAO,EAAGi5D,EAAK,GAAI,KAEnCC,EAAQ9pE,EAAKZ,QAAQ,IAAKyqE,GAOhC,OANIC,GAAS,GACXtqE,EAAM1G,UAAYkH,EAAK4Q,OAAOi5D,EAAK,EAAGC,EAAQD,EAAK,GACnDrqE,EAAMrX,MAAQ6X,EAAK4Q,OAAOk5D,EAAQ,IAElCtqE,EAAM1G,UAAYkH,EAAK4Q,OAAOi5D,EAAK,GAE9BrqE,GAGT8nE,EAASyC,eAAiB,SAAS/pE,GACjC,MAAMR,EAAQQ,EAAK4Q,OAAO,IAAIrS,MAAM,KACpC,MAAO,CACLyyB,UAAWxxB,EAAMiuB,QACjB6C,MAAO9wB,EAAMwB,IAAIgkB,GAAQlR,SAASkR,EAAM,OAM5CsiD,EAAS0C,OAAS,SAASC,GACzB,MAAM1iC,EAAM+/B,EAASU,YAAYiC,EAAc,UAAU,GACzD,GAAI1iC,EACF,OAAOA,EAAI32B,OAAO,IAItB02D,EAASl5C,iBAAmB,SAASpuB,GACnC,MAAMR,EAAQQ,EAAK4Q,OAAO,IAAIrS,MAAM,KACpC,MAAO,CACL2rE,UAAW1qE,EAAM,GAAGrB,cACpBhW,MAAOqX,EAAM,KAOjB8nE,EAAS6C,kBAAoB,SAASF,EAAcp6C,GAKlD,MAAO,CACLu6C,KAAM,OACNC,aANY/C,EAASU,YAAYiC,EAAep6C,EAChD,kBAKoB7uB,IAAIsmE,EAASl5C,oBAKrCk5C,EAASgD,oBAAsB,SAAS/6C,EAAQg7C,GAC9C,IAAI14C,EAAM,WAAa04C,EAAY,OAInC,OAHAh7C,EAAO86C,aAAaz/D,QAAQ4/D,IAC1B34C,GAAO,iBAAmB24C,EAAGN,UAAY,IAAMM,EAAGriF,MAAQ,SAErD0pC,GAKTy1C,EAASmD,gBAAkB,SAASzqE,GAClC,MAAMR,EAAQQ,EAAK4Q,OAAO,GAAGrS,MAAM,KACnC,MAAO,CACL3F,IAAKkb,SAAStU,EAAM,GAAI,IACxBkrE,YAAalrE,EAAM,GACnBmrE,UAAWnrE,EAAM,GACjBorE,cAAeprE,EAAM8b,MAAM,KAI/BgsD,EAASuD,gBAAkB,SAAStB,GAClC,MAAO,YAAcA,EAAW3wE,IAAM,IACpC2wE,EAAWmB,YAAc,KACQ,iBAAzBnB,EAAWoB,UACfrD,EAASwD,qBAAqBvB,EAAWoB,WACzCpB,EAAWoB,YACdpB,EAAWqB,cAAgB,IAAMrB,EAAWqB,cAAcjsE,KAAK,KAAO,IACvE,QAKJ2oE,EAASyD,qBAAuB,SAASJ,GACvC,GAAqC,IAAjCA,EAAUvrE,QAAQ,WACpB,OAAO,KAET,MAAMI,EAAQmrE,EAAU/5D,OAAO,GAAGrS,MAAM,KACxC,MAAO,CACLysE,UAAW,SACXC,QAASzrE,EAAM,GACf0rE,SAAU1rE,EAAM,GAChB2rE,SAAU3rE,EAAM,GAAKA,EAAM,GAAGjB,MAAM,KAAK,QAAKxC,EAC9CqvE,UAAW5rE,EAAM,GAAKA,EAAM,GAAGjB,MAAM,KAAK,QAAKxC,IAInDurE,EAASwD,qBAAuB,SAASH,GACvC,OAAOA,EAAUK,UAAY,IACzBL,EAAUM,SACXN,EAAUO,SAAW,IAAMP,EAAUO,SAAW,KAChDP,EAAUQ,UAAYR,EAAUS,UAC7B,IAAMT,EAAUQ,SAAW,IAAMR,EAAUS,UAC3C,KAIR9D,EAAS+D,oBAAsB,SAASpB,EAAcp6C,GAGpD,OAFcy3C,EAASU,YAAYiC,EAAep6C,EAChD,aACW7uB,IAAIsmE,EAASmD,kBAM5BnD,EAASgE,iBAAmB,SAASrB,EAAcp6C,GACjD,MAAM/C,EAAQw6C,EAASU,YAAYiC,EAAep6C,EAChD,gBAAgB,GACZhD,EAAMy6C,EAASU,YAAYiC,EAAep6C,EAC9C,cAAc,GAChB,OAAM/C,GAASD,EAGR,CACL47C,iBAAkB37C,EAAMlc,OAAO,IAC/BujC,SAAUtnB,EAAIjc,OAAO,KAJd,MASX02D,EAASiE,mBAAqB,SAASh8C,GACrC,IAAIsC,EAAM,eAAiBtC,EAAOk5C,iBAAxB,iBACSl5C,EAAO4kB,SAAW,OAIrC,OAHI5kB,EAAOi8C,UACT35C,GAAO,kBAEFA,GAITy1C,EAASmE,mBAAqB,SAASxB,GACrC,MAAMyB,EAAc,CAClBC,OAAQ,GACRC,iBAAkB,GAClBC,cAAe,GACfC,KAAM,IAGFj+C,EADQy5C,EAASG,WAAWwC,GACd,GAAG1rE,MAAM,KAC7B,IAAK,IAAIrX,EAAI,EAAGA,EAAI2mC,EAAM97B,OAAQ7K,IAAK,CACrC,MAAMooC,EAAKzB,EAAM3mC,GACX6kF,EAAazE,EAASU,YAC1BiC,EAAc,YAAc36C,EAAK,KAAK,GACxC,GAAIy8C,EAAY,CACd,MAAM15C,EAAQi1C,EAASuB,YAAYkD,GAC7BC,EAAQ1E,EAASU,YACrBiC,EAAc,UAAY36C,EAAK,KAQjC,OANA+C,EAAMk3C,WAAayC,EAAMj6E,OAASu1E,EAASh5C,UAAU09C,EAAM,IAAM,GACjE35C,EAAMs3C,aAAerC,EAASU,YAC5BiC,EAAc,aAAe36C,EAAK,KACjCtuB,IAAIsmE,EAASmC,aAChBiC,EAAYC,OAAOjtE,KAAK2zB,GAEhBA,EAAM5qC,KAAKkhF,eACjB,IAAK,MACL,IAAK,SACH+C,EAAYG,cAAcntE,KAAK2zB,EAAM5qC,KAAKkhF,iBAWlD,OAJArB,EAASU,YAAYiC,EAAc,aAAar/D,QAAQ5K,IACtD0rE,EAAYE,iBAAiBltE,KAAK4oE,EAAS93C,YAAYxvB,MAGlD0rE,GAKTpE,EAAS2E,oBAAsB,SAASh2C,EAAMmc,GAC5C,IAAIvgB,EAAM,GAGVA,GAAO,KAAOoE,EAAO,IACrBpE,GAAOugB,EAAKu5B,OAAO55E,OAAS,EAAI,IAAM,IACtC8/B,GAAO,sBACPA,GAAOugB,EAAKu5B,OAAO3qE,IAAIqxB,QACct2B,IAA/Bs2B,EAAM62C,qBACD72C,EAAM62C,qBAER72C,EAAMuY,aACZjsC,KAAK,KAAO,OAEfkzB,GAAO,uBACPA,GAAO,8BAGPugB,EAAKu5B,OAAO/gE,QAAQynB,IAClBR,GAAOy1C,EAAS2B,YAAY52C,GAC5BR,GAAOy1C,EAASgC,UAAUj3C,GAC1BR,GAAOy1C,EAASoC,YAAYr3C,KAE9B,IAAI65C,EAAW,EAgBf,OAfA95B,EAAKu5B,OAAO/gE,QAAQynB,IACdA,EAAM65C,SAAWA,IACnBA,EAAW75C,EAAM65C,YAGjBA,EAAW,IACbr6C,GAAO,cAAgBq6C,EAAW,QAGhC95B,EAAKw5B,kBACPx5B,EAAKw5B,iBAAiBhhE,QAAQuhE,IAC5Bt6C,GAAOy1C,EAAS6B,YAAYgD,KAIzBt6C,GAKTy1C,EAAS8E,2BAA6B,SAASnC,GAC7C,MAAMoC,EAAqB,GACrBX,EAAcpE,EAASmE,mBAAmBxB,GAC1CqC,GAAuD,IAA9CZ,EAAYG,cAAczsE,QAAQ,OAC3CmtE,GAA6D,IAAjDb,EAAYG,cAAczsE,QAAQ,UAG9CkxB,EAAQg3C,EAASU,YAAYiC,EAAc,WAC9CjpE,IAAIhB,GAAQsnE,EAASsC,eAAe5pE,IACpCwwB,OAAOhxB,GAA6B,UAApBA,EAAM1G,WACnB83B,EAAcN,EAAMv+B,OAAS,GAAKu+B,EAAM,GAAGtL,KACjD,IAAIm3B,EAEJ,MAAMqwB,EAAQlF,EAASU,YAAYiC,EAAc,oBAC9CjpE,IAAIhB,GACWA,EAAK4Q,OAAO,IAAIrS,MAAM,KACvByC,IAAI4mE,GAAQ9zD,SAAS8zD,EAAM,MAExC4E,EAAMz6E,OAAS,GAAKy6E,EAAM,GAAGz6E,OAAS,GAAKy6E,EAAM,GAAG,KAAO57C,IAC7DurB,EAAgBqwB,EAAM,GAAG,IAG3Bd,EAAYC,OAAO/gE,QAAQynB,IACzB,GAAiC,QAA7BA,EAAM5qC,KAAKkhF,eAA2Bt2C,EAAMk3C,WAAWkD,IAAK,CAC9D,IAAIC,EAAW,CACb1nD,KAAM4L,EACN+7C,iBAAkB74D,SAASue,EAAMk3C,WAAWkD,IAAK,KAE/C77C,GAAeurB,IACjBuwB,EAASE,IAAM,CAAC5nD,KAAMm3B,IAExBkwB,EAAmB3tE,KAAKguE,GACpBJ,IACFI,EAAWtkE,KAAKsL,MAAMtL,KAAKwL,UAAU84D,IACrCA,EAASG,IAAM,CACb7nD,KAAM4L,EACN9lB,UAAWyhE,EAAY,aAAe,OAExCF,EAAmB3tE,KAAKguE,OAII,IAA9BL,EAAmBt6E,QAAgB6+B,GACrCy7C,EAAmB3tE,KAAK,CACtBsmB,KAAM4L,IAKV,IAAIk8C,EAAYxF,EAASU,YAAYiC,EAAc,MAenD,OAdI6C,EAAU/6E,SAEV+6E,EADsC,IAApCA,EAAU,GAAG1tE,QAAQ,WACX0U,SAASg5D,EAAU,GAAGl8D,OAAO,GAAI,IACF,IAAlCk8D,EAAU,GAAG1tE,QAAQ,SAEqB,IAAvC0U,SAASg5D,EAAU,GAAGl8D,OAAO,GAAI,IAAa,IACpD,UAEM7U,EAEdswE,EAAmBzhE,QAAQ2kB,IACzBA,EAAOw9C,WAAaD,KAGjBT,GAIT/E,EAAS0F,oBAAsB,SAAS/C,GACtC,MAAMgD,EAAiB,GAIjBC,EAAa5F,EAASU,YAAYiC,EAAc,WACnDjpE,IAAIhB,GAAQsnE,EAASsC,eAAe5pE,IACpCwwB,OAAOj/B,GAAyB,UAAlBA,EAAIuH,WAAuB,GACxCo0E,IACFD,EAAeE,MAAQD,EAAW/kF,MAClC8kF,EAAejoD,KAAOkoD,EAAWloD,MAKnC,MAAMooD,EAAQ9F,EAASU,YAAYiC,EAAc,gBACjDgD,EAAeI,YAAcD,EAAMr7E,OAAS,EAC5Ck7E,EAAeK,SAA4B,IAAjBF,EAAMr7E,OAIhC,MAAMw7E,EAAMjG,EAASU,YAAYiC,EAAc,cAG/C,OAFAgD,EAAeM,IAAMA,EAAIx7E,OAAS,EAE3Bk7E,GAGT3F,EAASkG,oBAAsB,SAASP,GACtC,IAAIp7C,EAAM,GAWV,OAVIo7C,EAAeI,cACjBx7C,GAAO,oBAELo7C,EAAeM,MACjB17C,GAAO,uBAEmB91B,IAAxBkxE,EAAejoD,MAAsBioD,EAAeE,QACtDt7C,GAAO,UAAYo7C,EAAejoD,KAChC,UAAYioD,EAAeE,MAAQ,QAEhCt7C,GAMTy1C,EAASmG,UAAY,SAASxD,GAC5B,IAAIzqE,EACJ,MAAMkuE,EAAOpG,EAASU,YAAYiC,EAAc,WAChD,GAAoB,IAAhByD,EAAK37E,OAEP,OADAyN,EAAQkuE,EAAK,GAAG98D,OAAO,GAAGrS,MAAM,KACzB,CAAC6iB,OAAQ5hB,EAAM,GAAI28B,MAAO38B,EAAM,IAEzC,MAAMmuE,EAAQrG,EAASU,YAAYiC,EAAc,WAC9CjpE,IAAIhB,GAAQsnE,EAASsC,eAAe5pE,IACpCwwB,OAAOo9C,GAAqC,SAAxBA,EAAU90E,WACjC,OAAI60E,EAAM57E,OAAS,GACjByN,EAAQmuE,EAAM,GAAGxlF,MAAMoW,MAAM,KACtB,CAAC6iB,OAAQ5hB,EAAM,GAAI28B,MAAO38B,EAAM,UAFzC,GASF8nE,EAASuG,qBAAuB,SAAS5D,GACvC,MAAMp8C,EAAQy5C,EAAS/5C,WAAW08C,GAC5B6D,EAAcxG,EAASU,YAAYiC,EAAc,uBACvD,IAAI8D,EACAD,EAAY/7E,OAAS,IACvBg8E,EAAiBj6D,SAASg6D,EAAY,GAAGl9D,OAAO,IAAK,KAEnDsE,MAAM64D,KACRA,EAAiB,OAEnB,MAAMC,EAAW1G,EAASU,YAAYiC,EAAc,gBACpD,GAAI+D,EAASj8E,OAAS,EACpB,MAAO,CACL27B,KAAM5Z,SAASk6D,EAAS,GAAGp9D,OAAO,IAAK,IACvC1M,SAAU2pB,EAAMF,IAChBogD,kBAGJ,MAAME,EAAe3G,EAASU,YAAYiC,EAAc,cACxD,GAAIgE,EAAal8E,OAAS,EAAG,CAC3B,MAAMyN,EAAQyuE,EAAa,GACxBr9D,OAAO,IACPrS,MAAM,KACT,MAAO,CACLmvB,KAAM5Z,SAAStU,EAAM,GAAI,IACzB0E,SAAU1E,EAAM,GAChBuuE,oBAUNzG,EAAS4G,qBAAuB,SAAS1gD,EAAOkd,GAC9C,IAAIyjC,EAAS,GAiBb,OAfEA,EADqB,cAAnB3gD,EAAMtpB,SACC,CACP,KAAOspB,EAAMyI,KAAO,MAAQzI,EAAMtpB,SAAW,IAAMwmC,EAAKxmC,SAAW,OACnE,uBACA,eAAiBwmC,EAAKhd,KAAO,QAGtB,CACP,KAAOF,EAAMyI,KAAO,MAAQzI,EAAMtpB,SAAW,IAAMwmC,EAAKhd,KAAO,OAC/D,uBACA,aAAegd,EAAKhd,KAAO,IAAMgd,EAAKxmC,SAAW,mBAGzBnI,IAAxB2uC,EAAKqjC,gBACPI,EAAOzvE,KAAK,sBAAwBgsC,EAAKqjC,eAAiB,QAErDI,EAAOxvE,KAAK,KAOrB2oE,EAAS8G,kBAAoB,WAC3B,OAAOxnE,KAAKC,SAAS3U,WAAW0e,OAAO,EAAG,KAQ5C02D,EAAS+G,wBAA0B,SAASC,EAAQC,EAASC,GAC3D,IAAIpkC,EACJ,MAAMq1B,OAAsB1jE,IAAZwyE,EAAwBA,EAAU,EAEhDnkC,EADEkkC,GAGUhH,EAAS8G,oBAIvB,MAAO,aAFMI,GAAY,qBAGP,IAAMpkC,EAAY,IAAMq1B,EADnC,yCAQT6H,EAASmH,aAAe,SAASxE,EAAcp6C,GAE7C,MAAMT,EAAQk4C,EAASG,WAAWwC,GAClC,IAAK,IAAI/iF,EAAI,EAAGA,EAAIkoC,EAAMr9B,OAAQ7K,IAChC,OAAQkoC,EAAMloC,IACZ,IAAK,aACL,IAAK,aACL,IAAK,aACL,IAAK,aACH,OAAOkoC,EAAMloC,GAAG0pB,OAAO,GAK7B,OAAIif,EACKy3C,EAASmH,aAAa5+C,GAExB,YAGTy3C,EAASoH,QAAU,SAASzE,GAG1B,OAFc3C,EAASG,WAAWwC,GACd,GAAG1rE,MAAM,KAChB,GAAGqS,OAAO,IAGzB02D,EAASqH,WAAa,SAAS1E,GAC7B,MAAyC,MAAlCA,EAAa1rE,MAAM,IAAK,GAAG,IAGpC+oE,EAAS/5C,WAAa,SAAS08C,GAC7B,MACMzqE,EADQ8nE,EAASG,WAAWwC,GACd,GAAGr5D,OAAO,GAAGrS,MAAM,KACvC,MAAO,CACL03B,KAAMz2B,EAAM,GACZkuB,KAAM5Z,SAAStU,EAAM,GAAI,IACzB0E,SAAU1E,EAAM,GAChBmuB,IAAKnuB,EAAM8b,MAAM,GAAG3c,KAAK,OAI7B2oE,EAASsH,WAAa,SAAS3E,GAC7B,MACMzqE,EADO8nE,EAASU,YAAYiC,EAAc,MAAM,GACnCr5D,OAAO,GAAGrS,MAAM,KACnC,MAAO,CACL27C,SAAU16C,EAAM,GAChB4qC,UAAW5qC,EAAM,GACjBqvE,eAAgB/6D,SAAStU,EAAM,GAAI,IACnCsvE,QAAStvE,EAAM,GACfuvE,YAAavvE,EAAM,GACnB6oE,QAAS7oE,EAAM,KAKnB8nE,EAAS0H,WAAa,SAAStH,GAC7B,GAAoB,iBAATA,GAAqC,IAAhBA,EAAK31E,OACnC,OAAO,EAET,MAAMq9B,EAAQk4C,EAASG,WAAWC,GAClC,IAAK,IAAIxgF,EAAI,EAAGA,EAAIkoC,EAAMr9B,OAAQ7K,IAChC,GAAIkoC,EAAMloC,GAAG6K,OAAS,GAA4B,MAAvBq9B,EAAMloC,GAAGiN,OAAO,GACzC,OAAO,EAIX,OAAO,GAKPxN,EAAOD,QAAU4gF,G,6BCzwBnB,8NAYO,MAAMx+C,EAAsB,4BAOtBb,EAAsB,0BAWtBgnD,EACP,uCAEOC,EAAsB,iC,6BCjCnC,4MAYO,MAAMC,EAAqB,qBAMrBC,EAAmB,mBAMnBC,EAA+B,+BAO/BC,EAAuB,uBAKvBC,EAAoB,oBAOpBl1E,EAAQ,S,6BC3CrB,wCAKO,MAAMm1E,EAQTj3D,MACQijB,GACJ,MAAM,IAAI3oC,MAAM,mBAQpB+wB,OACI,MAAM,IAAI/wB,MAAM,mBAQpB48E,qBACI,MAAM,IAAI58E,MAAM,mBASpB68E,SACQ5qD,GACJ,MAAM,IAAIjyB,MAAM,mBASpB88E,aACQn0C,GACJ,MAAM,IAAI3oC,MAAM,mBAWpB+8E,gBAAgBp0C,GACZ,OAAOq0C,YAAYC,kBAAkB,CACjC32C,QAAS,CAAE,SACXqC,gBACDtC,KAAKj4B,IACJ,GAAsB,IAAlBA,EAAOlP,OACP,MAAM,IAAIc,MAAM,wDAGpB,MAAMqqC,EAAcj8B,EAAO,GAAGmgB,OAE9B,QAAoBrlB,IAAhBmhC,EACA,MAAM,IAAIrqC,MAAM,iCAGpB,OAAOqqC,O,onBCtEnB,MAAM3jB,EAASF,oBAAU6E,GAsCZ6xD,EAA8B,CAIvC/oB,OAAQ,SAQRrzB,SAAU,WAKVq8C,YAAa,cAKbC,UAAW,aAOA,MAAMC,EAwBjB,8BACQC,EACAnvC,EACAovC,EACAC,EACAC,GACJ,OAAKH,EAKME,EAIAN,EAA4B/oB,OAInCrnC,IAAQ4wD,qCACHD,EAGMtvC,EACAovC,EACDL,EAA4BC,YAC5BD,EAA4BE,UAG/BF,EAA4Bp8C,SAPxBo8C,EAA4B/oB,OAYpChmB,EACD+uC,EAA4B/oB,OAC5B+oB,EAA4Bp8C,SA1BvBo8C,EAA4BC,YAyC3C,8BAA8BK,EAAcC,GACxC,OAAK3wD,IAAQ4wD,qCAMNF,IAAiBC,EAClBP,EAA4B/oB,OAC5B+oB,EAA4BC,YALvBD,EAA4B/oB,OAoB3Cv1D,YAAY++E,EAAKpuD,EAAYzf,GACzBnH,KAAKg1E,IAAMA,EACXh1E,KAAK4mB,WAAaA,EAQlB5mB,KAAKi1E,YAAc,GAQnBj1E,KAAKk1E,kBAAoB,GAazBl1E,KAAKm1E,kBACsC,iBAA9BhuE,EAAQguE,kBACXhuE,EAAQguE,kBA/LY,IAyM9Bn1E,KAAKo1E,eACmC,iBAA3BjuE,EAAQiuE,eACXjuE,EAAQiuE,eAnMO,IA0NzBp1E,KAAKq1E,kBAAoB,GACzBt3D,EAAO7Y,KAAM,0BAAyBlF,KAAKo1E,gBAY3Cp1E,KAAKs1E,sBAAwB,IAAI1xD,IASjC5jB,KAAKu1E,gBAAkB,IAAI3xD,IAQ3B5jB,KAAKw1E,oBAAsB,IAAI5xD,IAUnC6xD,uBAAuBvuE,GACnB,OAAOlH,KAAKg1E,IAAIxvC,UAAUt+B,GACpBlH,KAAKo1E,eAAiBp1E,KAAKm1E,kBAOrCvqE,OAEI5K,KAAK01E,6BACC11E,KAAK21E,4BAA4BzoF,KAAK8S,MAE5CA,KAAKg1E,IAAI5wC,YACL/J,IAAU9N,6BACVvsB,KAAK01E,8BAGT11E,KAAK41E,aAAe51E,KAAK61E,8BAA8B3oF,KAAK8S,MAC5DA,KAAK4mB,WAAWZ,GAAGgB,aAAkChnB,KAAK41E,cAG1D51E,KAAK81E,YAAc91E,KAAK+1E,WAAW7oF,KAAK8S,MACxCA,KAAK4mB,WAAWZ,GAAGgB,YAAiChnB,KAAK81E,aAKrD3xD,IAAQ4wD,uCAER/0E,KAAKg2E,iBAAmBh2E,KAAKi2E,gBAAgB/oF,KAAK8S,MAClDA,KAAKg1E,IAAI5wC,YACL/J,IAAUrN,kBAAmBhtB,KAAKg2E,kBAEtCh2E,KAAKk2E,mBAAqBl2E,KAAKm2E,kBAAkBjpF,KAAK8S,MACtDA,KAAKg1E,IAAI5wC,YACL/J,IAAUnN,oBAAqBltB,KAAKk2E,oBAIxCl2E,KAAKo2E,oBAAsBp2E,KAAKq2E,mBAAmBnpF,KAAK8S,MACxDA,KAAK4mB,WAAWZ,GACZgB,cACAhnB,KAAKo2E,qBAETp2E,KAAKs2E,sBAAwBt2E,KAAKu2E,qBAAqBrpF,KAAK8S,MAC5DA,KAAK4mB,WAAWZ,GACZgB,gBACAhnB,KAAKs2E,uBAITt2E,KAAKw2E,yBACCx2E,KAAKy2E,wBAAwBvpF,KAAK8S,MAGxCA,KAAK02E,yBACC12E,KAAK22E,wBAAwBzpF,KAAK8S,OAG5CA,KAAK+jC,gBAAkB/jC,KAAK+jC,gBAAgB72C,KAAK8S,MACjDA,KAAK4mB,WAAWZ,GACZgB,2BACAhnB,KAAK+jC,iBAET/jC,KAAK42E,qBACC52E,KAAK61E,8BAA8B3oF,KAAK8S,MAC9CA,KAAKg1E,IAAIhvD,GACLqU,IAAU1N,oBAAqB3sB,KAAK42E,sBAO5CnvD,UAEIznB,KAAKg1E,IAAI7uD,eACLkU,IAAU9N,6BACVvsB,KAAK01E,8BAELvxD,IAAQ4wD,uCACR/0E,KAAKg1E,IAAI7uD,eACLkU,IAAUrN,kBACVhtB,KAAKg2E,kBACTh2E,KAAKg1E,IAAI7uD,eACLkU,IAAUnN,oBACVltB,KAAKk2E,oBAETl2E,KAAK4mB,WAAWgsB,IACZ5rB,cACAhnB,KAAKo2E,qBACTp2E,KAAK4mB,WAAWgsB,IACZ5rB,gBACAhnB,KAAKs2E,wBAGbt2E,KAAK4mB,WAAWgsB,IACZ5rB,2BACAhnB,KAAK+jC,iBAET/jC,KAAKg1E,IAAI7uD,eACLkU,IAAU1N,oBAAqB3sB,KAAK42E,sBAExC52E,KAAK4mB,WAAWgsB,IACZ5rB,aAAkChnB,KAAK41E,cAE3C51E,KAAK4mB,WAAWgsB,IACZ5rB,YAAiChnB,KAAK81E,aAE1C,MAAMe,EAAiBzqF,OAAOmZ,KAAKvF,KAAKi1E,aAExC,IAAK,MAAMplD,KAAiBgnD,EACxB72E,KAAKyN,aAAaoiB,GAClB7vB,KAAK82E,uBAAuBjnD,GAGhC,IAAK,MAAM3oB,KAAMlH,KAAKw1E,oBACdx1E,KAAKw1E,oBAAoBjoF,eAAe2Z,IACxClH,KAAK+1E,WAAW7uE,GAKxBlH,KAAKk1E,kBAAoB,GAU7BS,4BAA4BoB,EAAYC,GAEpCj5D,EAAO9Y,MACF,mDAAkDkD,KAAKgM,WACpD4iE,MAAeC,KAGnBD,IAAe/2E,KAAK4mB,WAAWghB,aAE/B5nC,KAAKk1E,kBAAkB6B,GAAcC,EACrCh3E,KAAKi3E,0BAA0BF,IASvCG,wBAAwBC,EAAaC,GACjC,GAAID,EAAYE,wBAA0BD,EAAW,CAEjD,MAAML,EAAaI,EAAYG,QAE/BH,EAAYI,qBAAqBH,GAEjCr5D,EAAO9Y,MACF,6BAA4BkD,KAAKgM,UAAU4iE,MACxCK,KAGR3zD,IAAWqH,QACPle,KAAKwL,UAAU,CACXlR,GAAI,mBACJiwE,YAAaJ,EACbhnE,OAAQqnE,KAIhBp3E,KAAK4mB,WAAW/C,aAAa8D,KACzBX,kCACA+vD,EAAYK,IAWxB3pE,aAAaoiB,GACL7vB,KAAKi1E,YAAYplD,KACjBvkC,OAAOmiB,aAAazN,KAAKi1E,YAAYplD,IACrC7vB,KAAKi1E,YAAYplD,GAAiB,MAU1CinD,uBAAuBjnD,GACnB7vB,KAAKq1E,kBAAkBxlD,GAAiB,KAU5CwmD,mBAAmBmB,GACVA,EAAYztD,WACNytD,EAAY1vC,YAAcN,MAEjCzpB,EAAO9Y,MACF,uCACGuyE,EAAYC,oBAEpBD,EAAYxxD,GACR0xD,qBACA13E,KAAKw2E,0BACTgB,EAAYxxD,GACR0xD,0BACA52C,GAAa9gC,KAAK02E,yBAAyBc,EAAa12C,KAWpEy1C,qBAAqBiB,GACjB,IAAKA,EAAYztD,WACNytD,EAAY1vC,YAAcN,IAAiB,CAElD,MAAMuvC,EAAaS,EAAYC,mBAE/B15D,EAAO9Y,MAAO,qCAAoC8xE,GAElDS,EAAY5kC,IACR8kC,qBACA13E,KAAKw2E,0BAETx2E,KAAKyN,aAAaspE,GAClB/2E,KAAK82E,uBAAuBC,GAE5B/2E,KAAKi3E,0BAA0BF,IAiBvCjC,mBAAmBqC,GACf,IAAKhzD,IAAQ4wD,qCACT,OAAO,EAGX,MAAM7tE,EAAKiwE,EAAYG,QACjBK,EAAsBR,EAAYS,8BAClCvC,EAAoBr1E,KAAKq1E,kBAAkBnuE,GAC3C0G,EAAU5N,KAAKy1E,uBAAuBvuE,GAE5C,OAAOywE,GAC6B,iBAAtBtC,GACNltE,KAAKgM,MAAQkhE,GAAsBznE,EAQ/CioE,gCACI,MAAMgC,EAAe73E,KAAK4mB,WAAWkxD,kBAErC,IAAK,MAAMX,KAAeU,EACtB73E,KAAKi3E,0BAA0BE,EAAYG,SAUnDL,0BAA0B/vE,GACtB,MAAMiwE,EAAcn3E,KAAK4mB,WAAWmxD,mBAAmB7wE,GAEvD,IAAKiwE,EAQD,YAFAp5D,EAAO9Y,MAAO,gDAA+CiC,GAKjE,MAAM8wE,EAAYh4E,KAAK4mB,WAAWqxD,cAC5BC,EAAsBl4E,KAAKm4E,qBAAqBjxE,GAChDkxE,EAA+C,IAA/Bp4E,KAAK4mB,WAAWyxD,WAIhCxD,EAAesC,EAAYtC,gBAAkBuD,EAC7CtD,EAAqB90E,KAAK80E,mBAAmBqC,GAC7C3xC,EAAYxlC,KAAKg1E,IAAIxvC,UAAUt+B,GACrC,IAAIoxE,EAAoBt4E,KAAKk1E,kBAAkBhuE,GAEd,kBAAtBoxE,IAGPA,GAAoB,GAGxB,MAAMC,EACAP,EACItD,EAAmC8D,uBACjC3D,EACAC,GACFJ,EAAmC+D,uBACjCH,EACA9yC,EACA0yC,EACArD,EACAC,GAIRyD,IAAahE,EAA4BE,WACzCz0E,KAAK04E,qBAAqBxxE,GAG9B6W,EAAO9Y,MACF,8BAA6BiC,sBAC1B2tE,qBACAyD,yBACAxD,eACAkD,mBACAxyC,iCACA2xC,EAAYE,4BAA4BkB,KAEhD,MAAMI,EAAsB34E,KAAKw1E,oBAAoBtuE,IAAO,GAI5D,KAAM,QAASyxE,MACN,qBAAsBA,IACxBA,EAAoBx8B,MAAQ67B,GAC5BW,EAAoBC,mBAAqBL,EAAU,CAEtD,MAAMM,EAAQ1wE,KAAKgM,MAanB,GAXAnU,KAAK84E,0CAA0C5xE,EAAI2xE,GAEnD74E,KAAKw1E,oBAAoBtuE,GAAzB,KACOyxE,EADP,CAEIC,iBAAkBL,EAClBp8B,IAAK67B,EACLe,UAAWF,MAKT,cAAe74E,KAAKw1E,oBAAoBtuE,IAAM,CAChD,MAAMm6B,EAAc81C,EAAY6B,qBAAqBxxC,KAEjDpxC,MAAMC,QAAQgrC,IAAuC,IAAvBA,EAAY9qC,SAC1CyJ,KAAKw1E,oBAAoBtuE,GAAI45B,UAAYO,EAAY,GAAGP,YAIpE9gC,KAAKk3E,wBAAwBC,EAAaoB,GAU9CO,0CAA0C5xE,EAAI2xE,GAC1C,MAAMI,EAA8Bj5E,KAAKw1E,oBAAoBtuE,GAEzD+xE,GACG,cAAeA,GACf,cAAeA,GACf,qBAAsBA,GACtB,QAASA,IACZA,EAA4BtsF,MAAQksF,EAAQI,EAA4BF,UACxEt1D,IAAWuI,cACPkE,YAAuC+oD,KAYnDl1C,gBAAgBm1C,EAAe,GAAIC,EAAgB,IAC/C,MAAMhlE,EAAMhM,KAAKgM,MAEjB4J,EAAO9Y,MAAO,mCAAkCi0E,eAA0BC,QAAoBhlE,KAKzFgQ,IAAQ4wD,sCACT/0E,KAAK61E,gCAGT,IAAK,MAAM3uE,KAAMgyE,EACbl5E,KAAKs1E,sBAAsBptD,OAAOhhB,GAClClH,KAAK04E,qBAAqBxxE,GAC1Bid,IAAQ4wD,sCAAwC/0E,KAAKi3E,0BAA0B/vE,GAEnF,IAAK,MAAMA,KAAMiyE,EAEbn5E,KAAKs1E,sBAAsB7vD,IAAIve,EAAIiN,GACnCgQ,IAAQ4wD,sCAAwC/0E,KAAKi3E,0BAA0B/vE,GAYvFwxE,qBAAqB7oD,GACjB,MAAMupD,EAASp5E,KAAKu1E,gBAAgBhpF,IAAIsjC,GAEpCupD,IACA3rE,aAAa2rE,GACbp5E,KAAKu1E,gBAAgBrtD,OAAO2H,IAkBpCsoD,qBAAqBtoD,GACjB,MAAMylD,EACAt1E,KAAKs1E,sBAAsB/oF,IAAIsjC,GAErC,GAAIylD,GACIntE,KAAKgM,MAAQmhE,GAztBK,IA2tBtB,OAAO,EAcX,OARet1E,KAAKu1E,gBAAgBhpF,IAAIsjC,IAGpC7vB,KAAKu1E,gBAAgB9vD,IAAIoK,EAAetlB,WACpC,IAAMvK,KAAKi3E,0BAA0BpnD,GAruBnB,OAyuBnB,EAQXkmD,WAAW7uE,GACPlH,KAAK84E,0CAA0C5xE,EAAIiB,KAAKgM,cACjDnU,KAAKw1E,oBAAoBtuE,GASpC+uE,gBAAgBt1C,GACZ,MAAM9Q,EAAgB8Q,EAAM82C,mBACtBN,EAAcn3E,KAAK4mB,WAAWmxD,mBAAmBloD,GAGvD,GADA9R,EAAO9Y,MAAO,6BAA4B4qB,EAAiB1nB,KAAKgM,OAC3DgjE,GAML,GADAn3E,KAAKq1E,kBAAkBxlD,GAAiB1nB,KAAKgM,OACxCgjE,EAAYtC,eAAgB,CAI7B70E,KAAKyN,aAAaoiB,GAGlB,MAAMjiB,EAAU5N,KAAKy1E,uBAAuB5lD,GAE5C7vB,KAAKi1E,YAAYplD,GAAiBvkC,OAAOif,WAAW,KAChDwT,EAAO9Y,MACF,6BAA4B4qB,4BACvBjiB,QACV5N,KAAKyN,aAAaoiB,GAClB7vB,KAAKi3E,0BAA0BpnD,IAChCjiB,SApBHmQ,EAAO/Y,MAAO,0BAAyB6qB,GA8B/CsmD,kBAAkBx1C,GACd,MAAM9Q,EAAgB8Q,EAAM82C,mBAE5B15D,EAAO9Y,MACF,+BAA8B4qB,EAAiB1nB,KAAKgM,OAEzDnU,KAAKyN,aAAaoiB,GAClB7vB,KAAK82E,uBAAuBjnD,GAE5B7vB,KAAKi3E,0BAA0BpnD,GASnC4mD,wBAAwB91C,GACpB,MAAM9Q,EAAgB8Q,EAAM82C,mBAE5B15D,EAAO9Y,MACF,8CAA6C4qB,EAC9C8Q,EAAM04C,WAEVr5E,KAAKi3E,0BAA0BpnD,GAUnC8mD,wBAAwBh2C,EAAO15B,GAC3B,MAAMC,EAAKy5B,EAAM82C,mBACXoB,EAAQ1wE,KAAKgM,MAEnBnU,KAAK84E,0CAA0C5xE,EAAI2xE,GAEnD74E,KAAKw1E,oBAAoBtuE,GAAzB,KACOlH,KAAKw1E,oBAAoBtuE,IAAO,GADvC,CAEI45B,UAAW75B,EACX8xE,UAAWF,Q,oGCj3BvB,iEAIO,MAAMS,EAAqB,uBAE5Bv7D,EAASF,oBAAU6E,GASlB,MAAM62D,UAAoB/9C,IAI7BvlC,cACIwlC,QACAz7B,KAAKw5E,SAAW,CACZC,UAAU,GAQlBC,mBAAkB,SAAED,IAChB17D,EAAO9Y,MAAM,oBAAqB,CAAEw0E,aACpCz5E,KAAKw5E,SAAW,CACZC,UAAuB,IAAbA,GAEdz5E,KAAK6jB,aAAa8D,KAAK2xD,EAAoBt5E,KAAKw5E,UAUpDC,WACI,OAAkC,IAA3Bz5E,KAAKw5E,SAASC,UAI7B,MAAME,EAAc,IAAIJ,EAETI,Q,mFChDA,KAQXC,wBAAwBC,GACpB,MAAMC,EAAcD,GACbA,EAAS/oE,qBAAqB,0BAA0B,GAE/D,GAAKgpE,EAIL,MAAO,CACH90E,MAAO80E,EAAYl3E,aAAa,kBAChCm3E,UAAWD,EAAYl3E,aAAa,aACpCo3E,cAAeF,EAAYl3E,aAAa,kBACxCq3E,UAAWH,EAAYl3E,aAAa,cACpCmN,OAAQ+pE,EAAYl3E,aAAa,YAWzCs3E,sBAAsBL,GAClB,MAAMM,EACAN,EAAS/oE,qBAAqB,wBAAwB,GACtDspE,EAAoBD,GACnBA,EAA2BjjE,YAC5BmjE,EACAR,EAAS/oE,qBAAqB,QAAQ,GACtCjkB,EAAOwtF,GACNA,EAAcnjE,aACdmjE,EAAcnjE,YAAYvU,cAC3B23E,EACAT,EAAS/oE,qBAAqB,cAAc,GAIlD,MAAO,CACHspE,oBACAvtF,OACAotF,UALEK,GAAsBA,EAAmBpjE,cAenDqjE,mBAAmB5nE,GACf,MAAM6nE,EAAQ7nE,GAAYA,EAAS7B,qBAAqB,SAAS,GAEjE,OAAO0pE,GAASA,EAAM53E,aAAa,eASvC63E,aAAaZ,GACT,MAAMa,EACAb,EAAS/oE,qBAAqB,cAAc,GAGlD,OAFkB4pE,GAAsBA,EAAmBxjE,aAW/DyjE,YAAYd,GACDA,EAASj3E,aAAa,QAAQk1B,SAAS,W,8BC3FtD,mIAYA,MAAM/Z,EAASF,oBAAU6E,GAInBk4D,EACK,QADLA,EAEQ,WAFRA,EAGY,eAHZA,EAIW,cAJXA,EAKY,eAGZC,EAAWpuF,OAAO,WAElBquF,EAAmB,CACrBC,iBAAkB,mBAClBC,+BAAgC,qCAChCC,wBAAyB,+BAuBtB,MAAMC,UAAmB1/C,IAI5BvlC,YAAY2wB,GACR6U,QAEAz7B,KAAKm7E,MAAQv0D,EACb5mB,KAAKo7E,MAAQ,IAAI5R,IACjBxpE,KAAKq4D,UAAO93D,EACZP,KAAKq7E,WAAa,EAClBr7E,KAAKs7E,MAAQ,IAAI13D,IACjB5jB,KAAKu7E,4BAAyBh7E,EAE1B26E,EAAW38C,eACXv+B,KAAKw7E,gBAELx7E,KAAKm7E,MAAMn1D,GAAGgB,4BAAiDhnB,KAAKy7E,2BAA2BvuF,KAAK8S,OACpGA,KAAKm7E,MAAMn1D,GAAGgB,kBAAuChnB,KAAK07E,kBAAkBxuF,KAAK8S,OACjFA,KAAKm7E,MAAMn1D,GAAGgB,YAAiChnB,KAAK27E,mBAAmBzuF,KAAK8S,OAC5EA,KAAKm7E,MAAMn1D,GAAGgB,+BACVhnB,KAAK47E,8BAA8B1uF,KAAK8S,QAE5CA,KAAKo7E,MAAMp9C,OAAO,IAAI3mC,MAAM,sBAOpC,qBACI,GAAI2I,KAAKu7E,uBACL,MAAM,IAAIlkF,MAAM,iDACb,CACH2I,KAAKu7E,uBAAyB,IAAI/R,UAE5BxpE,KAAKo7E,MAEX,MAAMS,EAAW,GACXC,EAAqB97E,KAAKm7E,MAAMvzC,WAEtC,IAAK,MAAMuvC,KAAen3E,KAAKm7E,MAAMrD,kBAAmB,QAClBX,EAAY4E,eAEtBxzD,IAAIssB,MAAiBinC,EAAqB3E,EAAYG,SAC1EuE,EAAS34E,KAAKlD,KAAKg8E,iBAAiB7E,UAItCr5C,QAAQm+C,WAAWJ,GAIzB77E,KAAKu7E,uBAAuBx9C,UAC5B/9B,KAAKu7E,4BAAyBh7E,GAStC,qBACI,YAA6B,IAAfjV,OAAO4wF,IAUzB,gBAAgBjvF,GAEZ+S,KAAKq4D,KAAOprE,EACZ+S,KAAKq7E,YAGL,MAAMQ,EAAW,GAEjB,IAAK,MAAM1E,KAAen3E,KAAKm7E,MAAMrD,kBAAmB,CACpD,MAAMqE,EAAMhF,EAAYG,QAClB8E,EAAUp8E,KAAKq8E,uBAAuBlF,GAG5C,IAAKiF,EAAQnkE,QAAS,CAClB8F,EAAO5Y,KAAM,oCAAmCg3E,4BAGhD,SAGJ,MAAMhxE,EAAOmxE,cACP3iF,EAAO,CACT,CAACg7C,KArIQ,MAsIT4nC,IAAK,CACDt1E,KAAM2zE,EACNjhF,KAAM,CACF6iF,WAAYx8E,KAAKy8E,gBAAgBL,EAAQnkE,SACzC9M,UAINnf,EAAI,IAAIw9E,IAEdx9E,EAAE29E,iBAjJM,KAkJR39E,EAAEuwC,MAAM,KACJv8B,KAAKs7E,MAAMpzD,OAAO/c,KAEtBnL,KAAKs7E,MAAM71D,IAAIta,EAAMnf,GACrB6vF,EAAS34E,KAAKlX,GAEdgU,KAAK08E,aAAa/iF,EAAMwiF,GAO5B,aAJMr+C,QAAQm+C,WAAWJ,GAIlB77E,KAAKq7E,UAQhBsB,iBAAiB1vF,GAGb,OAFA+S,KAAKq4D,KAAOprE,EAEL+S,KAAKq7E,UAOhBuB,wBAAwBzF,GACpB,MAAMiF,EAAUp8E,KAAKq8E,uBAAuBlF,GAExCiF,EAAQnkE,UACRmkE,EAAQnkE,QAAQ4kE,OAChBT,EAAQnkE,aAAU1X,GAS1Bu8E,+BACI,IAAK,MAAM3F,KAAen3E,KAAKm7E,MAAMrD,kBACjC93E,KAAK48E,wBAAwBzF,GAUrC,sBACIp5D,EAAO9Y,MAAM,uBAEb,UACUi3E,IAAItxE,OAEV5K,KAAK+8E,YAAc,IAAIb,IAAIc,QAC3Bh9E,KAAK+8E,YAAY/vF,SAEjB,MAAMiwF,EAASrwE,KAAKsL,MAAMlY,KAAK+8E,YAAYG,iBAE3Cl9E,KAAKm9E,OAASF,EAAOG,WAErBr/D,EAAO9Y,MAAO,OAAMi3E,IAAImB,sBAAsBl6E,KAAK,oBACnDnD,KAAKo7E,MAAMr9C,UACX/9B,KAAK6jB,aAAa8D,KAAKmzD,EAAiBC,iBAAkB/6E,KAAKm9E,QACjE,MAAO9jF,GACL0kB,EAAO/Y,MAAM,2BAA4B3L,GACzC2G,KAAKo7E,MAAMp9C,OAAO3kC,IAY1BojF,gBAAgBxkE,GACZ,MAAMqlE,EAAU,GAOhB,YALkB/8E,IAAdP,KAAKq4D,OACLilB,EAAQrwF,MAAM+S,KAAKq4D,MAAOklB,IAASC,cAAcx9E,KAAKq4D,MACtDilB,EAAQG,SAAWz9E,KAAKq7E,WAGrBpjE,EAAQylE,QAAQ9wE,KAAKwL,UAAUklE,IAU1CjB,uBAAuBlF,GAGnB,OAFAA,EAAY0D,GAAY1D,EAAY0D,IAAa,GAE1C1D,EAAY0D,GAQvB,0BACI98D,EAAO9Y,MAAM,yBAEPjF,KAAKo7E,MAEX,IAAK,MAAMjE,KAAen3E,KAAKm7E,MAAMrD,kBACjC93E,KAAK27E,mBAAmBxE,EAAYG,QAASH,GAG7Cn3E,KAAK+8E,cACL/8E,KAAK+8E,YAAYF,OACjB78E,KAAK+8E,iBAAcx8E,GAU3B,iCAAiC42E,EAAargD,GAC1C,GA3RiB,QA2RbA,EAAQ6d,KACR,OAGJ,IAAK7d,EAAQylD,IAGT,YAFAx+D,EAAO5Y,KAAK,uCAKVnF,KAAKo7E,MAEX,MAAMt2E,EAAMgyB,EAAQylD,IACdJ,EAAMhF,EAAYG,QAClB8E,EAAUp8E,KAAKq8E,uBAAuBlF,GAE5C,OAAQryE,EAAImC,MACZ,KAAK2zE,EACD,GAAIwB,EAAQnkE,QACR8F,EAAO5Y,KAAM,eAAcg3E,2BAE3Bn8E,KAAK29E,WAAWxG,EAAa,mCAC1B,CAGH,MAAMl/D,EAAU,IAAIikE,IAAI0B,QAExB3lE,EAAQ4lE,gBAAgB79E,KAAK+8E,YAAaj4E,EAAInL,KAAKmkF,MAAOh5E,EAAInL,KAAKokF,OACnE3B,EAAQnkE,QAAUA,EAGlB,MAAM+lE,EAAM,CACR,CAACrpC,KA3TI,MA4TL4nC,IAAK,CACDt1E,KAAM2zE,EACNjhF,KAAM,CACF6iF,WAAYx8E,KAAKy8E,gBAAgBxkE,GACjC9M,KAAMrG,EAAInL,KAAKwR,QAK3BnL,KAAK08E,aAAasB,EAAK7B,GACvBn8E,KAAK6jB,aAAa8D,KAAKmzD,EAAiBE,+BAAgCmB,GAE5E,MAEJ,KAAKvB,EACD,GAAIwB,EAAQnkE,QACR8F,EAAO5Y,KAAM,eAAcg3E,2BAE3Bn8E,KAAK29E,WAAWxG,EAAa,yBAC1B,GAAIryE,EAAInL,KAAKwR,OAASixE,EAAQ6B,mBAAoB,CACrD,MAAM,WAAEzB,GAAe13E,EAAInL,KACrB3N,EAAIgU,KAAKs7E,MAAM/uF,IAAIuY,EAAInL,KAAKwR,MAC5B8M,EAAU,IAAIikE,IAAI0B,QAExB3lE,EAAQimE,eAAel+E,KAAK+8E,YAAaP,EAAW1kE,MAGpD9X,KAAK+8E,YAAYoB,qBAAqBlmE,GAGtC,MAAMte,EAAOse,EAAQmmE,QAAQ5B,EAAWv1E,KAAMu1E,EAAW1kE,MAEzDskE,EAAQnkE,QAAUA,EAClBmkE,EAAQ6B,wBAAqB19E,EAE7BP,KAAK6jB,aAAa8D,KAAKmzD,EAAiBE,+BAAgCmB,GAExEn8E,KAAKs7E,MAAMpzD,OAAOpjB,EAAInL,KAAKwR,MAC3Bnf,EAAE+xC,UAEF,MAAM+e,EAAOuhC,EAAc1kF,GAE3B,GAAImjD,EAAK7vD,IAAK,CACV,MAAMA,EAAMswF,IAASe,YAAYxhC,EAAK7vD,KAChCwwF,EAAW3gC,EAAK2gC,SAEtBrB,EAAQmC,QAAUtxF,EAClB+S,KAAK6jB,aAAa8D,KAAKmzD,EAAiBG,wBAAyBkB,EAAKlvF,EAAKwwF,SAG/E1/D,EAAO5Y,KAAK,oCAEZnF,KAAK29E,WAAWxG,EAAa,gBAEjC,MAEJ,KAAKyD,EACD78D,EAAO/Y,MAAMF,EAAInL,KAAKqL,OAEtB,MAEJ,KAAK41E,EACD,GAAIwB,EAAQnkE,QAAS,CACjB,MAAM,WAAEukE,GAAe13E,EAAInL,KAErBmjD,EAAOuhC,EADAjC,EAAQnkE,QAAQmmE,QAAQ5B,EAAWv1E,KAAMu1E,EAAW1kE,OAGjE,QAAiBvX,IAAbu8C,EAAK7vD,UAAuCsT,IAAlBu8C,EAAK2gC,SAAwB,CACvD,MAAMxwF,IAAM6vD,EAAK7vD,KAAMswF,IAASe,YAAYxhC,EAAK7vD,KAC3CwwF,EAAW3gC,EAAK2gC,SAEjBe,IAAQpC,EAAQmC,QAAStxF,KAC1BmvF,EAAQmC,QAAUtxF,EAClB+S,KAAK6jB,aAAa8D,KAAKmzD,EAAiBG,wBAAyBkB,EAAKlvF,EAAKwwF,IAI/E,MAAMO,EAAM,CACR,CAACrpC,KA1YA,MA2YD4nC,IAAK,CACDt1E,KAAM2zE,EACNjhF,KAAM,CACF6iF,WAAYx8E,KAAKy8E,gBAAgBL,EAAQnkE,SACzC9M,KAAMrG,EAAInL,KAAKwR,QAK3BnL,KAAK08E,aAAasB,EAAK7B,SAG3Bp+D,EAAO9Y,MAAO,kCAAiCk3E,sCAE/Cn8E,KAAK29E,WAAWxG,EAAa,8CAEjC,MAEJ,KAAKyD,EACD,GAAIwB,EAAQnkE,QAAS,CACjB,MAAM,WAAEukE,GAAe13E,EAAInL,KAErBmjD,EAAOuhC,EADAjC,EAAQnkE,QAAQmmE,QAAQ5B,EAAWv1E,KAAMu1E,EAAW1kE,OAGjE,QAAiBvX,IAAbu8C,EAAK7vD,UAAuCsT,IAAlBu8C,EAAK2gC,SAAwB,CACvD,MAAMxwF,IAAM6vD,EAAK7vD,KAAMswF,IAASe,YAAYxhC,EAAK7vD,KAC3CwwF,EAAW3gC,EAAK2gC,SAEjBe,IAAQpC,EAAQmC,QAAStxF,KAC1BmvF,EAAQmC,QAAUtxF,EAClB+S,KAAK6jB,aAAa8D,KAAKmzD,EAAiBG,wBAAyBkB,EAAKlvF,EAAKwwF,IAInF,MAAMzxF,EAAIgU,KAAKs7E,MAAM/uF,IAAIuY,EAAInL,KAAKwR,MAElCnL,KAAKs7E,MAAMpzD,OAAOpjB,EAAInL,KAAKwR,MAC3Bnf,EAAE+xC,eAEFhgB,EAAO9Y,MAAO,sCAAqCk3E,sCAEnDn8E,KAAK29E,WAAWxG,EAAa,mDAYzCwE,mBAAmBz0E,EAAIiwE,GACnBp5D,EAAO9Y,MAAO,eAAciC,UAE5BlH,KAAK48E,wBAAwBzF,GAYjC,oCAAoCA,EAAalrF,EAAMwyF,EAAUlV,GAC7D,OAAQt9E,GACR,IAAK,eACD,GAAIs9E,GAAYvpE,KAAKm7E,MAAMuD,gBAAiB,CACxC,MAAM5C,EAAqB97E,KAAKm7E,MAAMvzC,WAChC/X,EAAgBsnD,EAAYG,QAGlC,UAFkCH,EAAY4E,eAEtBxzD,IAAIssB,MAAiBinC,EAAqBjsD,EAAe,CACzE7vB,KAAKu7E,8BACCv7E,KAAKu7E,6BAETv7E,KAAKg8E,iBAAiB7E,GAE5B,MAAMiF,EAAUp8E,KAAKq8E,uBAAuBlF,GACtChsE,EAAOmxE,cACP3iF,EAAO,CACT,CAACg7C,KAheA,MAieD4nC,IAAK,CACDt1E,KAAM2zE,EACNjhF,KAAM,CACF6iF,WAAYx8E,KAAKy8E,gBAAgBL,EAAQnkE,SACzC9M,UAKZnL,KAAK08E,aAAa/iF,EAAMk2B,MAcxC8tD,WAAWxG,EAAanyE,GACpB,MAAMm3E,EAAMhF,EAAYG,QAClBnnE,EAAM,CACR,CAACwkC,KA3fY,MA4fb4nC,IAAK,CACDt1E,KAAM2zE,EACNjhF,KAAM,CACFqL,WAKZhF,KAAK08E,aAAavsE,EAAKgsE,GAW3BO,aAAa/iF,EAAMk2B,GACf7vB,KAAKm7E,MAAM7xC,YAAY3vC,EAAMk2B,GAUjCmsD,iBAAiB7E,GACb,MAAMgF,EAAMhF,EAAYG,QAClB8E,EAAUp8E,KAAKq8E,uBAAuBlF,GAE5C,GAAIiF,EAAQnkE,QAGR,OAFA8F,EAAO5Y,KAAM,iCAAgCg3E,mCAEtCr+C,QAAQE,SAGnB,QAAmCz9B,IAA/B67E,EAAQ6B,mBAGR,OAFAlgE,EAAO5Y,KAAM,iCAAgCg3E,2CAEtCr+C,QAAQE,SAInBh+B,KAAK+8E,YAAY4B,uBAAuB,GAExC,MAAMC,EAAShyE,KAAKsL,MAAMlY,KAAK+8E,YAAY8B,iBACrCd,EAAQ3xF,OAAOm7B,OAAOq3D,EAAOxB,YAAY,GAE/C,IAAKW,EACD,OAAOjgD,QAAQE,OAAO,IAAI3mC,MAAM,+BAIpC2I,KAAK+8E,YAAY+B,yBAEjB,MAAM3zE,EAAOmxE,cACP1xE,EAAO,CACT,CAAC+pC,KAzjBY,MA0jBb4nC,IAAK,CACDt1E,KAAM2zE,EACNjhF,KAAM,CACFmkF,MAAO99E,KAAKm9E,OACZY,QACA5yE,UAKNnf,EAAI,IAAIw9E,IAcd,OAZAx9E,EAAE29E,iBAvkBU,KAwkBZ39E,EAAEuwC,MAAM,KACJv8B,KAAKs7E,MAAMpzD,OAAO/c,GAClBixE,EAAQ6B,wBAAqB19E,IAEjCP,KAAKs7E,MAAM71D,IAAIta,EAAMnf,GAErBgU,KAAK08E,aAAa9xE,EAAMuxE,GAGxBC,EAAQ6B,mBAAqB9yE,EAEtBnf,GAYf,SAASqyF,EAAc1kF,GACnB,IACI,OAAOiT,KAAKsL,MAAMve,GACpB,MAAON,GACL,MAAO,IAZf6hF,EAAWvqC,OAASmqC,I,oQC7lBb,MAAMiE,EAoCT9oF,YAAY+oF,GACR,GAA2B,UAAvBA,EAASl3C,UACT,MAAM,IAAIzwC,MAAM,gFAGpB2I,KAAKi/E,UAAYD,EASrBE,UAAUC,GAEN,OAAOA,EAAiBh2C,gBAAkBnpC,KAAKi/E,UAAU91C,eAU7Di2C,YAAYj+C,GAeR,OAdAnhC,KAAKq/E,gBAAkBl+C,EACvBnhC,KAAKs/E,eAAiBn+C,EAAYQ,YAAY,GAE9C3hC,KAAKu/E,YAAcC,UAAsBC,mBACzCz/E,KAAKu/E,YAAYG,eAAe1/E,KAAKi/E,UAAUU,qBAC/C3/E,KAAKu/E,YAAYG,eAAe1/E,KAAKq/E,iBAErCr/E,KAAK4/E,kBAAoB5/E,KAAKu/E,YAAYxiE,QAC1C/c,KAAK6/E,iBAAmB7/E,KAAK4/E,kBAAkBj+C,YAAY,GAG3D3hC,KAAKk0E,UAAUl0E,KAAKs/E,eAAenrB,SACnCn0D,KAAKs/E,eAAenrB,SAAU,EAEvBn0D,KAAK4/E,kBAQhBE,aAGI9/E,KAAKs/E,eAAenrB,QAAUn0D,KAAK6/E,iBAAiB1rB,QACpDn0D,KAAKu/E,YAAYl3E,QASrB6rE,SAAS5qD,GACLtpB,KAAK6/E,iBAAiB1rB,SAAW7qC,EAQrC+vD,UACI,OAAQr5E,KAAK6/E,iBAAiB1rB,SCxG/B,MAgDM4rB,EACPC,IAAIC,gBAAgB,IAAIC,KAAK,CAtBrB,gaAsB+B,CAAEj5E,KAAM,4BC/CtC,MAAMk5E,EAwBjBlqF,YAAYqrC,GAA0B,MAClC,MAAM8+C,EAAW/kF,SAASwF,cAAc,OAClCw/E,EAAkB/+C,EAAYpH,iBAAiB,IAC/C,OAAEvB,EAAF,MAAUG,EAAV,UAAiByyC,GAAjB,UAA+B8U,EAAgBn9C,qBAA/C,QAAgEm9C,EAAgBhgD,iBAEtFrgC,KAAKsgF,QAAUjlF,SAASwF,cAAc,UACtCb,KAAKugF,KAAOvgF,KAAKsgF,QAAQE,WAAW,MAEpCxgF,KAAKygF,gBAAkBplF,SAASwF,cAAc,SAC9Cb,KAAK0gF,cAAgBrlF,SAASwF,cAAc,SAC5Cu/E,EAASx/E,YAAYZ,KAAK0gF,eAC1BN,EAASx/E,YAAYZ,KAAKygF,iBACJ,OAAlBplF,SAASyc,MACTzc,SAASyc,KAAKlX,YAAYw/E,GAI9BpgF,KAAK2gF,WAAaroE,SAASizD,EAAW,IACtCvrE,KAAK0gF,cAAc5nD,MAAQxgB,SAASwgB,EAAO,IAC3C94B,KAAK0gF,cAAc/nD,OAASrgB,SAASqgB,EAAQ,IAC7C34B,KAAK0gF,cAAcE,UAAW,EAC9B5gF,KAAK0gF,cAAcxkD,UAAYoF,EAG/BthC,KAAK0gF,cAAcG,OAGnBT,EAAS5iF,MAAMsjF,QAAU,OAGzB9gF,KAAK+gF,mBAAqB/gF,KAAK+gF,mBAAmB7zF,KAAK8S,MAU3D+gF,mBAAmBpuE,GD9CS,IC+CpBA,EAAShZ,KAAKuN,IACdlH,KAAKghF,eAUbA,eAAe,MAEX,MAAQrgD,GAAU3gC,KAAKihF,eAAe/mD,kBAChC,OAAEvB,EAAF,MAAUG,GAAV,UAAoB6H,EAAMuC,qBAA1B,QAA2CvC,EAAMN,iBAEvDrgC,KAAKsgF,QAAQxnD,MAAQxgB,SAASwgB,EAAO,IACrC94B,KAAKsgF,QAAQ3nD,OAASrgB,SAASqgB,EAAQ,IACvC34B,KAAKugF,KAAKW,UAAUlhF,KAAKygF,gBAAiB,EAAG,EAAGzgF,KAAKsgF,QAAQxnD,MAAO94B,KAAKsgF,QAAQ3nD,QACjF34B,KAAKugF,KAAKW,UAAUlhF,KAAK0gF,cAAe1gF,KAAKsgF,QAAQxnD,MAAQ94B,KAAK0gF,cAAc5nD,MAAO94B,KAAKsgF,QAAQ3nD,OAC9F34B,KAAK0gF,cAAc/nD,OAAQ34B,KAAK0gF,cAAc5nD,MAAO94B,KAAK0gF,cAAc/nD,QAG9E34B,KAAKugF,KAAKY,YACVnhF,KAAKugF,KAAKa,UAAY,EACtBphF,KAAKugF,KAAKc,YAAc,UACxBrhF,KAAKugF,KAAKe,KAAKthF,KAAKsgF,QAAQxnD,MAAQ94B,KAAK0gF,cAAc5nD,MAAO94B,KAAKsgF,QAAQ3nD,OAAS34B,KAAK0gF,cAAc/nD,OACnG34B,KAAK0gF,cAAc5nD,MAAO94B,KAAK0gF,cAAc/nD,QACjD34B,KAAKugF,KAAKgB,SAUdrC,UAAUsC,GACN,OAAOA,EAAgBC,gBAAgD,YAA9BD,EAAgB1gD,UAS7Ds+C,YAAY9+C,GAA4B,MACpC,MAAM+/C,EAAkB//C,EAAcpG,iBAAiB,IACjD,OAAEvB,EAAF,MAAUG,GAAV,UAAoBunD,EAAgBn9C,qBAApC,QAAqDm9C,EAAgBhgD,iBAqB3E,OAlBArgC,KAAKihF,eAAiB3gD,EACtBtgC,KAAKygF,gBAAgB3nD,MAAQxgB,SAASwgB,EAAO,IAC7C94B,KAAKygF,gBAAgB9nD,OAASrgB,SAASqgB,EAAQ,IAC/C34B,KAAKygF,gBAAgBG,UAAW,EAChC5gF,KAAKygF,gBAAgBvkD,UAAYoE,EAGjCtgC,KAAKygF,gBAAgBI,OAErB7gF,KAAKsgF,QAAQxnD,MAAQxgB,SAASwgB,EAAO,IACrC94B,KAAKsgF,QAAQ3nD,OAASrgB,SAASqgB,EAAQ,IACvC34B,KAAK0hF,uBAAyB,IAAIC,OAAO5B,EAAmB,CAAE9zF,KAAM,4BACpE+T,KAAK0hF,uBAAuB5lE,UAAY9b,KAAK+gF,mBAC7C/gF,KAAK0hF,uBAAuBE,YAAY,CACpC16E,GDtIgB,ECuIhB26E,OAAQ,IAAO7hF,KAAK2gF,aAGjB3gF,KAAKsgF,QAAQwB,cAAc9hF,KAAK2gF,YAQ3Cb,aACI9/E,KAAK0hF,uBAAuBE,YAAY,CACpC16E,GD1IkB,IC4ItBlH,KAAK0hF,uBAAuBK,aCvJ7B,SAASC,EAAsBp8D,GAClC,OAAKq8D,iBAAiB30F,UAAU41C,aACxB++C,iBAAiB30F,UAAU+yC,eAI5BvC,QAAQC,QAAQ,IAAIoiD,EAA2Bv6D,IAH3CkY,QAAQE,OAAO,IAAI3mC,MAAM,8C,8BCTjC,MCwBM0oF,EAAoBC,IAAIC,gBAAgB,IAAIC,KAAK,CArBhD,gaAqB0D,CAAEj5E,KAAM,4BCTjE,MAAMi7E,EAgBjBjsF,YAAYuV,GACRxL,KAAKwL,SAAWA,EAChBxL,KAAKmiF,eAAiB9mF,SAASwF,cAAc,UAC7Cb,KAAKoiF,sBAAwBpiF,KAAKmiF,eAAe3B,WAAW,MAC5DxgF,KAAK0gF,cAAgBrlF,SAASwF,cAAc,SAG5Cb,KAAKqiF,oBAAsBriF,KAAKqiF,oBAAoBn1F,KAAK8S,MACzDA,KAAKsiF,uBAAyBtiF,KAAKsiF,uBAAuBp1F,KAAK8S,MAC/DA,KAAKuiF,cAAgB,IAAIZ,OAAO5B,EAAmB,CAAE9zF,KAAM,8BAC3D+T,KAAKuiF,cAAczmE,UAAY9b,KAAKqiF,oBAWxCjD,YAAYx5D,EAAqBkb,GAC7B,OAAO,IAAIhD,QAAc,CAACC,EAASC,KAAW,MACxB,YAAd8C,GACA9C,IAEJ,MAAMwkD,EAAe58D,EAAOsU,iBAAiB,IACvC,OAAEvB,EAAF,MAAUG,GAAV,UACA0pD,EAAat/C,qBADb,QAC8Bs/C,EAAaniD,iBAEjDrgC,KAAKyiF,cAAgB9pD,EACrB34B,KAAK0iF,aAAe5pD,EACpB94B,KAAKmiF,eAAexpD,OAASrgB,SAASqgB,EAAQ,IAC9C34B,KAAKmiF,eAAerpD,MAAQxgB,SAASwgB,EAAO,IAC5C94B,KAAK0gF,cAAc/nD,OAASrgB,SAASqgB,EAAQ,IAC7C34B,KAAK0gF,cAAc5nD,MAAQxgB,SAASwgB,EAAO,IAC3C94B,KAAK0gF,cAAcxkD,UAAYtW,EAC/B5lB,KAAK0gF,cAAcG,OAGnB7gF,KAAK0gF,cAAcljD,iBAAiB,aAAcx9B,KAAKsiF,wBACvDvkD,MASR+hD,aACI9/E,KAAKuiF,cAAcX,YAAY,CAAE16E,GFvDX,IEwDtBlH,KAAK0gF,cAAcjtC,oBAAoB,aAAczzC,KAAKsiF,wBAY9DA,yBACI,MACMK,EADetnF,SAASwF,cAAc,UACH2/E,WAAW,MAEpDmC,EAAoBzB,UAAUlhF,KAAK0gF,cAAe,EAAG,EAAG1gF,KAAK0iF,aAAc1iF,KAAKyiF,eAChF,MAAM,KAAE9oF,GAASgpF,EAAoBC,aAAa,EAAG,EAAG5iF,KAAK0iF,aAAc1iF,KAAKyiF,eAEhFziF,KAAK6iF,iBAAmBlpF,EACxBqG,KAAKuiF,cAAcX,YAAY,CAC3B16E,GFvFgB,EEwFhB26E,OFpGiB,ME+GzBQ,oBAAoB59E,GAChB,OFjFwB,IEiFjBA,EAAQ9K,KAAKuN,IAA2BlH,KAAK8iF,oBAUxDC,yBAAyBC,GACrB,OAAOA,GFhIkB,IEyI7BF,oBACI9iF,KAAKoiF,sBAAsBlB,UAAUlhF,KAAK0gF,cAAe,EAAG,EAAG1gF,KAAK0iF,aAAc1iF,KAAKyiF,eACvF,MAAM,KAAE9oF,GAASqG,KAAKoiF,sBAAsBQ,aAAa,EAAG,EAAG5iF,KAAK0iF,aAAc1iF,KAAKyiF,eACjFQ,EAAaC,IAAWvpF,EAAMqG,KAAK6iF,iBAAkB,KAAM7iF,KAAK0iF,aAAc1iF,KAAKyiF,eAErFziF,KAAK+iF,yBAAyBE,KAC9BjjF,KAAK6iF,iBAAmBlpF,EACxBqG,KAAKwL,SAASxL,KAAKmiF,kBC1IxB,SAASgB,EAA8B33E,GAC1C,OAAKy2E,iBAAiB30F,UAAU41C,aAAgB++C,iBAAiB30F,UAAU+yC,eAIpEvC,QAAQC,QAAQ,IAAImkD,EAAwB12E,IAHxCsyB,QAAQE,OAAO,IAAI3mC,MAAM,2C,2CCbxC,yIAcA,MAAM0mB,EAASF,oBAAU6E,GASlB,MAAM+0B,EAKTxhD,YAAY2wB,GACR5mB,KAAK4mB,WAAaA,EAElB5mB,KAAKojF,mBAAoB,EACzBpjF,KAAKqjF,UAAW,EAChBrjF,KAAKq4D,UAAO93D,EACZP,KAAKsjF,eAAY/iF,EAEjBP,KAAKujF,SAAW,IAAIC,IACpBxjF,KAAKyjF,YAAc,IAAIvI,IAAWt0D,GAGlC5mB,KAAK0jF,YAAcC,IAAS3jF,KAAK4jF,gBAtBjB,KAuBhB5jF,KAAK6jF,WAAaF,IAAS3jF,KAAK8jF,eAvBhB,KA4BhB9jF,KAAK4mB,WAAWZ,GACZgB,oBACA,KACIhnB,KAAKojF,mBAAoB,IAEjCpjF,KAAK4mB,WAAWZ,GACZgB,+BACAhnB,KAAK47E,8BAA8B1uF,KAAK8S,OAC5CA,KAAK4mB,WAAWZ,GACZgB,cACAhnB,KAAK+jF,qBAAqB72F,KAAK8S,OACnCA,KAAK4mB,WAAWZ,GACZgB,YACAhnB,KAAK27E,mBAAmBzuF,KAAK8S,OAOjCA,KAAK4mB,WAAWZ,GACZgB,yBACAhnB,KAAKgkF,uBAAuB92F,KAAK8S,OACrCA,KAAK4mB,WAAWZ,GACZgB,cACA2Z,GAASA,EAAM5W,WAAa/pB,KAAKikF,mBAAmBtjD,IACxD3gC,KAAK4mB,WAAWouD,IAAIhvD,GAChBqU,IAAUtN,mBACV,CAAC4T,EAAO7Y,IAAQ9nB,KAAKkkF,2BAA2Bp8D,EAAK6Y,IACzD3gC,KAAK4mB,WAAWZ,GACZgB,qBACAhnB,KAAKmkF,kBAAkBj3F,KAAK8S,OAGhCA,KAAKyjF,YAAYz9D,GACbk1D,IAAWvqC,OAAOoqC,iBAClB/6E,KAAKokF,iBAAiBl3F,KAAK8S,OAC/BA,KAAKyjF,YAAYz9D,GACbk1D,IAAWvqC,OAAOqqC,+BAClBh7E,KAAKqkF,+BAA+Bn3F,KAAK8S,OAC7CA,KAAKyjF,YAAYz9D,GACbk1D,IAAWvqC,OAAOsqC,wBAClBj7E,KAAKskF,yBAAyBp3F,KAAK8S,OAS3C,mBAAmB63B,GACf,OAAO1T,IAAQogE,6BACRrJ,IAAW38C,iBACT1G,EAAO2sD,SAAW3sD,EAAO2sD,QAAQC,aAQ9CvF,YACI,OAAOl/E,KAAKqjF,SAShB,iBAAiBlvB,GACb,GAAIA,IAAYn0D,KAAKqjF,SACjB,OASJ,GANArjF,KAAKsjF,iBAAmBtjF,KAAKsjF,UAE7BtjF,KAAKsjF,UAAY,IAAI9Z,IAErBxpE,KAAKqjF,SAAWlvB,EAEZA,QACMn0D,KAAKyjF,YAAYiB,mBACpB,CACH,IAAK,MAAMvN,KAAen3E,KAAK4mB,WAAWkxD,kBACtC93E,KAAKujF,SAASoB,QAAQxN,EAAYG,SAEtCt3E,KAAKyjF,YAAY3G,+BAGrB98E,KAAK4mB,WAAWg+D,4BAA4B,eAAgBzwB,GAE5Dn0D,KAAK4mB,WAAWi+D,wBAGhB7kF,KAAKq4D,OAAOlE,GAAUn0D,KAAK8kF,eAG3B,MAAM7vD,QAAcj1B,KAAKyjF,YAAYsB,UAAU/kF,KAAKq4D,MAGpDr4D,KAAKujF,SAASyB,OAAOhlF,KAAK4mB,WAAWghB,WAAY5nC,KAAKq4D,KAAMpjC,GAE5Dj1B,KAAKsjF,UAAUvlD,UASnB+mD,eACI,OAAOx5F,OAAO25F,OAAOC,gBAAgB,IAAI1gC,WAAW,KAQxDy/B,mBAAmBtjD,GACf,IAAK,MAAM1oB,KAAWjY,KAAK4mB,WAAWu+D,oBAClCnlF,KAAKolF,yBAAyBntE,EAAS0oB,GAS/CqjD,uBAAuB/rE,GACnB,MAAMurB,EAAcxjC,KAAK4mB,WAAW2gB,iBAEpC,IAAK,MAAM5G,KAAS6C,EAChBxjC,KAAKolF,yBAAyBntE,EAAS0oB,GAQ/CyjD,iBAAiBtG,GACb//D,EAAO9Y,MAAO,qBAAoB64E,GAGlC99E,KAAK4mB,WAAWg+D,4BAA4B,aAAc9G,GAO9DiG,uBACQ/jF,KAAKojF,mBAAqBpjF,KAAKqjF,UAC/BrjF,KAAK0jF,cAQb/H,mBAAmBz0E,GACflH,KAAKujF,SAASoB,QAAQz9E,GAElBlH,KAAKqjF,UACLrjF,KAAK6jF,aAQbQ,+BAA+Bn9E,GAC3B6W,EAAO9Y,MAAO,iCAAgCiC,cAWlDo9E,yBAAyBp9E,EAAIja,EAAKgoC,GAC9BlX,EAAO9Y,MAAO,eAAciC,uBAE5BlH,KAAKujF,SAASyB,OAAO99E,EAAIja,EAAKgoC,GAYlC,oCAAoCkiD,EAAalrF,EAAMwyF,EAAUlV,GAC7D,OAAQt9E,GACR,IAAK,aACD8xB,EAAO9Y,MAAO,eAAckyE,EAAYG,iCAAiC/N,KACzE,MACJ,IAAK,gBACIA,GAAYvpE,KAAKqjF,WAClBrjF,KAAKyjF,YAAY7G,wBAAwBzF,GAEzCn3E,KAAK6jF,eAWjB,wBACI9lE,EAAO9Y,MAAM,mBAEb,MAAMogF,QAAiBC,YAAUtlF,KAAKq4D,MAChCktB,QAAeC,YAAQH,GAE7BrlF,KAAKq4D,KAAO,IAAI7T,WAAW+gC,GAE3B,MAAMtwD,EAAQj1B,KAAKyjF,YAAY9G,iBAAiB38E,KAAKq4D,MAErDr4D,KAAKujF,SAASyB,OAAOhlF,KAAK4mB,WAAWghB,WAAY5nC,KAAKq4D,KAAMpjC,GAShE,uBACIlX,EAAO9Y,MAAM,gBAEbjF,KAAKq4D,KAAOr4D,KAAK8kF,eACjB,MAAM7vD,QAAcj1B,KAAKyjF,YAAYsB,UAAU/kF,KAAKq4D,MAEpDr4D,KAAKujF,SAASyB,OAAOhlF,KAAK4mB,WAAWghB,WAAY5nC,KAAKq4D,KAAMpjC,GAQhEivD,2BAA2Bp8D,EAAK6Y,GAC5B,IAAK3gC,KAAKqjF,SACN,OAGJ,MAAMzzC,EAAW9nB,EAAI29D,qBAAqB9kD,EAAMA,OAE5CiP,EACA5vC,KAAKujF,SAASmC,eAAe91C,EAAUjP,EAAMmH,UAAWnH,EAAM82C,oBAE9D15D,EAAO5Y,KAAM,6BAA4Bw7B,6BAAiC7Y,KAWlFs9D,yBAAyBntE,EAAS0oB,GAC9B,IAAK3gC,KAAKqjF,SACN,OAGJ,MAAMhnB,EAAKpkD,EAAQoN,eACbsgE,EAAStpB,GAAMA,EAAGupB,mBAAmBjlD,EAAMA,OAE7CglD,EACA3lF,KAAKujF,SAASsC,aAAaF,EAAQhlD,EAAMmH,UAAWnH,EAAM82C,oBAE1D15D,EAAO5Y,KAAM,6BAA4Bw7B,0BAA8B07B,KAS/E8nB,kBAAkBxjD,GACd,GAAIxc,IAAQ2hE,+BAAiCnlD,EAAM5W,WAAa4W,EAAM8gD,iBAAmB9gD,EAAM04C,UAC3F,IAAK,MAAMphE,KAAWjY,KAAK4mB,WAAWu+D,oBAClCnlF,KAAKolF,yBAAyBntE,EAAS0oB,O,8EC7VvD,6OA4BA,MAAM5iB,EAASF,oBAAU6E,GA+CV,MAAMqjE,UAAwBC,IASzC,yBAAyBC,GACrB,MAAMC,EAAgBD,EAAe3wD,KAAK,0BAE1C,GAAI4wD,EAAc3vF,OAAQ,CACtB,MAAMm3C,EAAUw4C,EAAc,GAAGtjF,aAAa,WAE9C,GAAgB,SAAZ8qC,GACe,cAAZA,GACY,cAAZA,GACY,SAAZA,EACH,OAAOA,EAIf,OAAO,KASX,2BAA2Bu4C,GACvB,MAAME,EAAoBF,EAAe3wD,KAAK,2CAE9C,OAAO6wD,EAAkB5vF,OAASgjB,OAAO4sE,EAAkBxkF,QAAU,KAqBzE1L,YACQoW,EACA+5E,EACAC,EACA9xE,EACA+xE,EACAlgD,EACA5e,EACA++D,GACJ9qD,MACIpvB,EACA+5E,EACAC,EAAW9xE,EAAY+xE,EAAkBlgD,EAAWmgD,GAWxDvmF,KAAKwmF,iBAAmB,KAQxBxmF,KAAKymF,wBAAqBlmF,EAQ1BP,KAAK0mF,wBAAqBnmF,EAQ1BP,KAAK2mF,6BAA+B,KAYpC3mF,KAAK4mF,2BAA6B,KAOlC5mF,KAAK6mF,6BAA0BtmF,EAgB/BP,KAAK8mF,mBAAoB,EAYzB9mF,KAAK+mF,oBAAqB,EAS1B/mF,KAAKgnF,oBAAqB,EAE1BhnF,KAAKinF,kBAAmB,EACxBjnF,KAAKknF,QAAS,EAQdlnF,KAAKwnB,MAAQA,EAObxnB,KAAKmnF,8BAA2B5mF,EAMhCP,KAAKonF,eAAiB,IAAIC,IAO1BrnF,KAAKsnF,kBAAoB,IAAIC,IAO7BvnF,KAAKwnF,cAAe,EAQpBxnF,KAAKynF,2BAAwBlnF,EAE7BP,KAAK0nF,eAAiB,GACtB1nF,KAAK0nF,eAAexkF,KAChBqR,EAAWipB,iBACPqY,IAAeI,OAAO4pB,oBACtB7/D,KAAK2nF,oBAAoBz6F,KAAK8S,QAGtCA,KAAK4nF,iDAA8CrnF,EAUvDsnF,kBACI,OAAO7nF,KAAKsxC,QAAUw2C,IAO1BC,aAAa5gF,GACTnH,KAAKyrC,QAAU1R,QAAQ5yB,EAAQskC,SAC/BzrC,KAAKinF,kBAAmB,EACxBjnF,KAAKmH,QAAUA,EAMfnH,KAAKgoF,aAAc,EAMnBhoF,KAAKioF,WAAY,EACjBjoF,KAAKkoF,oBAAsBnuD,QAAQ5yB,EAAQ+gF,qBAC3CloF,KAAKmoF,oBAAsBpuD,QAAQ5yB,EAAQghF,qBAE3C,MAAMC,EAAY,CAAEnxC,WAAY9vC,EAAQ8vC,YAgBxC,GAdI9vC,EAAQkhF,cACRD,EAAUE,SAhSI,KAkSlBF,EAAUG,uBAAwB,EAClCH,EAAU7hD,wBAA0Bp/B,EAAQo/B,wBAC5C6hD,EAAUI,aAAerhF,EAAQqhF,aACjCJ,EAAUvhD,eAAiB1/B,EAAQ0/B,eACnCuhD,EAAUzsD,aAAex0B,EAAQw0B,aACjCysD,EAAUzhD,gBAAkB3mC,KAAK2mC,gBAC3BxiB,IAAQskE,wBACFtkE,IAAQuQ,aACLvQ,IAAQub,kBACN1/B,KAAKwnB,OAASrD,IAAQ0Y,mBAAqB11B,EAAQuhF,uBAEhE1oF,KAAKwnB,MAAO,CAEZ4gE,EAAUO,kBAAmB,EAC7B,MAAMtiD,EAAqBrmC,KAAK4oF,2BAA2BzhF,QAEzB,IAAvBk/B,IACP+hD,EAAU/hD,mBAAqBA,OAEhC,SAEH+hD,EAAUO,iBACJxhF,EAAQwhF,kBACFxhF,EAAQ0hF,aAAe1hF,EAAQ2hF,aAC/B3hF,EAAQqhF,cAAgBrhF,EAAQqhF,aAAaO,iBAAmBtxD,OAI5E2wD,EAAUG,sBAAwBH,EAAUO,oBACa,iBAAhD,UAAOxhF,EAAQsjE,+BAAf,aAAO,EAAiC5xC,OACtC,UAAA1xB,EAAQsjE,+BAAR,eAAiC5xC,KAAMgxC,KAIlDpmD,IAAWyB,UAAUohB,uBAAuB,CAAEiiD,sBAAuBH,EAAUG,wBAG/EphF,EAAQ6hF,cACRZ,EAAUY,aAAc,GAG5BhpF,KAAKqlB,eACCrlB,KAAKg1E,IAAI9uC,qBACHlmC,KAAKonF,eACLpnF,KAAKomC,UACLpmC,KAAKwnB,MACL4gE,GAEZpoF,KAAKqlB,eAAe4jE,eAAiBttC,IACjC,IAAKA,EAMD,OAIJ,MAAM3oB,EAAY2oB,EAAG3oB,UACf7e,EAAM7oB,OAAOusD,YAAY1jC,MAE/B,GAAI6e,EAAW,CAC6B,OAApChzB,KAAK4mF,6BACL5mF,KAAK4mF,2BAA6BzyE,GAItC,IAAIzL,EAAWsqB,EAAUtqB,SAEzB,GAAwB,iBAAbA,EAEP,GADAA,EAAWA,EAAS/F,cACH,QAAb+F,GAAmC,WAAbA,GACtB,GAAI1I,KAAKmoF,oBACL,YAED,GAAiB,QAAbz/E,GACH1I,KAAKkoF,oBACL,YAIJloF,KAAKgnF,qBAEbvjE,IAAWuI,cACP4C,IACA,CACIs6D,MAAO,YACPv8F,MAAOwnB,EAAMnU,KAAK4mF,2BAClBzqC,IAAKn8C,KAAKwnB,MACVuyD,UAAW/5E,KAAKumF,cAExBvmF,KAAKgnF,oBAAqB,GAE9BhnF,KAAKmpF,iBAAiBn2D,IAU1BhzB,KAAKqlB,eAAe+jE,uBAAyB,KACE,WAAvCppF,KAAKqlB,eAAegkE,eACpBrpF,KAAKioF,WAAY,EAC6B,WAAvCjoF,KAAKqlB,eAAegkE,gBACgB,WAAxCrpF,KAAKqlB,eAAeikE,iBACvBtpF,KAAK28C,KAAK94B,aAAa8D,KAAKqwB,IAAW3nD,iBAAkB2P,OAUjEA,KAAKqlB,eAAekkE,2BAA6B,KAC7C,MAAMp1E,EAAM7oB,OAAOusD,YAAY1jC,MAC/B,IAAIq1E,GAAW,EAuBf,OArBKxpF,KAAKwnB,QACNxnB,KAAK28C,KAAKzH,gBACL,aAAYl1C,KAAKqlB,eAAeokE,oBAC/Bt1E,GAEV4J,EAAOnZ,IAAK,cAAa5E,KAAKqlB,eAAeokE,sBAAsBzpF,KAAKwnB,MAAQ,MAAQ,WAAYrT,GAEpGsP,IAAWuI,cACP8C,IACA,CACIqtB,IAAKn8C,KAAKwnB,MACV8pB,MAAOtxC,KAAKqlB,eAAeokE,mBAC3B,gBAAmBzpF,KAAKqlB,eAAegkE,eACvCK,UAAW1pF,KAAKgoF,YAChBr7F,MAAOwnB,IAGfnU,KAAK28C,KAAK94B,aAAa8D,KACnBqwB,IAAWviD,6BACXuK,KACAA,KAAKqlB,eAAeokE,oBAChBzpF,KAAKqlB,eAAeokE,oBAC5B,IAAK,WACDzpF,KAAK2mF,6BAA+BxyE,EACpC,MACJ,IAAK,YAGD,GAA2C,WAAvCnU,KAAKqlB,eAAegkE,eAA6B,CACjDG,GAAW,EACX,MAAMG,GAA2B3pF,KAAKmH,QAAQyiF,kBACvC5pF,KAAK28C,KAAKktC,8BAEb7pF,KAAKgoF,aAAe2B,IACpB3pF,KAAK28C,KAAK94B,aAAa8D,KACnBqwB,IAAW5pD,oBAAqB4R,MAW5C,IAAKA,KAAKwnF,eACFxnF,KAAKioF,WACFuB,GACCxpF,KAAK2mC,iBAAmB3mC,KAAKumF,aAAepiE,IAAQ0Y,mBAAqB,CAEjFpZ,IAAWuI,cACP4C,IACA,CACIs6D,MAAO,WACPv8F,MAAOwnB,EAAMnU,KAAK2mF,6BAClBxqC,IAAKn8C,KAAKwnB,MACVuyD,UAAW/5E,KAAKumF,cAMxB,MAAMuD,EACA1+E,KAAKqP,IACHza,KAAK2mF,6BACL3mF,KAAK4mF,4BAEb5mF,KAAKynF,sBAAwBtzE,EAAM21E,EAEnCrmE,IAAWuI,cACP4C,IACA,CACIs6D,MAAO,gBACPv8F,MAAOqT,KAAKynF,sBACZtrC,IAAKn8C,KAAKwnB,MACVuyD,UAAW/5E,KAAKumF,cAGxBvmF,KAAKwnF,cAAe,EACpBxnF,KAAK28C,KAAK94B,aAAa8D,KACnBqwB,IAAW9pD,uBAAwB8R,MAE3CA,KAAKgoF,aAAc,EACnB,MACJ,IAAK,eACDhoF,KAAKgoF,aAAc,EAIfhoF,KAAKioF,WACLjoF,KAAK28C,KAAK94B,aAAa8D,KACnBqwB,IAAW7pD,uBAAwB6R,MAE3C,MACJ,IAAK,SACDA,KAAK28C,KAAK94B,aAAa8D,KACnBqwB,IAAW3lD,sBAAuB2N,QAS9CA,KAAKqlB,eAAe0kE,oBAAsB,KACtC,MAAMz4C,EAAQtxC,KAAKqlB,eAAegkE,eAC5BW,EAAoBhqF,KAAKqlB,eAAe2kE,kBAE9C,GAAIhqF,KAAK2mC,iBAA6B,WAAV2K,GACrB04C,GAAsD,iBAA1BA,EAAkB3zD,IAAkB,CACnEtY,EAAO9Y,MAAO,GAAEjF,qCAAqCA,KAAKqlB,4BAA4BisB,KACtF,MAAM24C,EAAeC,IACjB,MAAMC,EAAS,IAAI5+C,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAE5Dr2B,KAAKqqF,eACA3sD,KAAK,KACF,MAAM4sD,EAAS,IAAI/+C,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAE5Dr2B,KAAKuqF,mBAAmBJ,EAAQG,GAChCJ,KAEJA,IAGRlqF,KAAKsnF,kBAAkBpkF,KACnB+mF,EACAjlF,IACQA,EACA+Y,EAAO/Y,MAAShF,KAAF,6BAAoCgF,GAElD+Y,EAAO9Y,MAASjF,KAAF,0CAOlCA,KAAKonF,eAAeoD,YAAYxqF,KAAK28C,MAQzC8tC,8BACI,GAAIzqF,KAAKwnB,MACL,OAAOxnB,KAAKmnF,yBAWpBgC,iBAAiBn2D,GACb,MAAM03D,EAAW,IAAIn/C,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAE9D,GAAIrD,GAAaA,EAAUA,UAAUz8B,SAAWyJ,KAAKinF,iBAAkB,CACnE,MAAM0D,EAAM35D,IAAQE,UAAUw5D,EAAS14D,MAAMgB,EAAU43D,eAAgBF,EAASzyE,SAC1E4yE,EAAQ75D,IAAQwD,kBAAkBxB,EAAUA,WAElD,IAAM23D,IAAOE,EAAQ,CACjB,MAAMC,EAAgB,6BAKtB,OAHAruD,IAAqBkG,iBAAiB,IAAItrC,MAAMyzF,SAChD/sE,EAAO/Y,MAAM8lF,GAIjBH,EAAI1kF,MAAQ,uCAERjG,KAAK+qF,SAC6B,IAA9B/qF,KAAKgrF,cAAcz0F,QACnBgU,WAAW,KAC2B,IAA9BvK,KAAKgrF,cAAcz0F,SAGvByJ,KAAKirF,kBAAkBjrF,KAAKgrF,eAC5BhrF,KAAKgrF,cAAgB,KA/kBV,KAklBnBhrF,KAAKgrF,cAAc9nF,KAAK8vB,IAExBhzB,KAAKirF,kBAAkB,CAAEj4D,SAG7BjV,EAAOnZ,IAAO5E,KAAF,qCAGZA,KAAKinF,kBAAmB,EAUhCgE,kBAAkBC,GACd,IAAKlrF,KAAK6nF,gBAAgB,qBAEtB,OAGJ9pE,EAAOnZ,IAAK,GAAE5E,0BAA0B4M,KAAKwL,UAAU8yE,MACvD,MAAM13D,EAAO73B,cAAI,CAAE0tC,GAAIrpC,KAAKqmF,UACxBp/E,KAAM,QACLlb,EAAE,SAAU,CAAEka,MAAO,oBAClBipB,OAAQ,iBACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAEZq+E,EAAW,IAAIn/C,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAE9D,IAAK,IAAI0V,EAAM,EAAGA,EAAM2+C,EAAS14D,MAAMz7B,OAAQw1C,IAAO,CAClD,MAAMq/C,EAAQF,EAAWl2D,OAAO90B,GAAMA,EAAG0qF,gBAAkB7+C,GACrD1Z,EACArB,IAAQe,WAAW24D,EAAS14D,MAAM+Z,GAAKhpC,MAAM,QAAQ,IAE3D,GAAIqoF,EAAM70F,OAAS,EAAG,CAClB,MAAMo0F,EACA35D,IAAQE,UAAUw5D,EAAS14D,MAAM+Z,GAAM2+C,EAASzyE,SAEtD0yE,EAAI1kF,MAAQ,uCACZutB,EAAKznC,EAAE,UAAW,CACdwgD,QAASvsC,KAAKmrF,eAAiBnrF,KAAKomF,SAC9B,YAAc,YACpBn6F,KAAMm/F,EAAM,GAAGC,OAASD,EAAM,GAAGC,OAASh5D,EAAML,QACjDjmC,EAAE,YAAa4+F,GAClB,IAAK,IAAIj/F,EAAI,EAAGA,EAAI0/F,EAAM70F,OAAQ7K,IAAK,CACnC,MAAMsnC,EACAhC,IAAQwD,kBAAkB42D,EAAM1/F,GAAGsnC,WAIrChzB,KAAKyrC,UACLzY,EAAUG,GAAK,WAEnBK,EAAKznC,EAAE,YAAainC,GAAW7sB,KAInC,MAAMmlF,EACAt6D,IAAQO,SACNm5D,EAAS14D,MAAM+Z,GACf,iBAAkB2+C,EAASzyE,SAEnC,GAAIqzE,EAAiB,CACjB,MAAMC,EAAMv6D,IAAQ4B,iBAAiB04D,GAErCC,EAAIC,UAAW,EACfh4D,EAAKznC,EACD,cACA,CAAEka,MAAO,gCACRrZ,EAAE2+F,EAAI14D,oBACJ04D,EAAI14D,YACXW,EAAKh4B,MAAM+vF,GACX/3D,EAAKrtB,KAETqtB,EAAKrtB,KACLqtB,EAAKrtB,MAObnG,KAAKuU,WAAWnG,OACZolB,EAAM,KAAMxzB,KAAKyrF,sBAAsBj4D,GAtrBhC,KAgsBfk4D,4BACI,MAAMC,EACAhwF,cAAI,CACF0tC,GAAIrpC,KAAKqmF,UACTp/E,KAAM,QACTlb,EAAE,SAAU,CAAEka,MAAO,oBAClBipB,OAAQ,eACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MACbtgB,EAAE,YAAa,CAAEka,MAAO,oCACxBrZ,EAAE,UACFuZ,KAELnG,KAAKwmF,kBACEmF,EAAY5/F,EACX,iBAAkB,CACdka,MAAO,kCACPiB,GAAIlH,KAAKwmF,mBAGrBxmF,KAAKuU,WAAW8tD,QACZspB,EAAa,CAMT/9E,QAAS,KAEZ2uB,MAAMv8B,KAAKyrF,sBAAsBE,IAM1CC,iBAAiBlsF,GACb,GAA2C,WAAvCM,KAAKqlB,eAAegkE,eAGpB,YAFAtrE,EAAO5Y,KAAQnF,KAAF,mDAKjB,MAAM6rF,EAAgB,GAyBtB,GAvBAnsF,EAAK41B,KAAK,gCACLlV,KAAK,CAAC6rB,EAAKjZ,KACR,IAAIxuB,EAAOwsB,IAAQyD,oBAAoBzB,GAEvCxuB,EAAOA,EAAK5C,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAI9C,MAAMkqF,EAAe,IAAIC,gBAAgB,CACrCnB,cAAe,EAOfS,OAAQ,GACRr4D,UAAWxuB,IAGfqnF,EAAc3oF,KAAK4oF,MAGtBD,EAAct1F,OAGf,YAFAwnB,EAAO/Y,MAAShF,KAAF,8BAAqCN,EAAK,IAAMA,EAAK,GAAGssF,WAqB1EjuE,EAAO9Y,MAAO,GAAEjF,oBAAoB6rF,EAAct1F,+BAClDyJ,KAAKsnF,kBAAkBpkF,KAbFgnF,IACjB,IAAK,MAAM+B,KAAgBJ,EACvB7rF,KAAKqlB,eAAe6mE,gBAAgBD,GAC/BvuD,KACG,IAAM3f,EAAO9Y,MAASjF,KAAF,wBACpBmQ,GAAO4N,EAAO/Y,MAAShF,KAAF,2BAAkCmQ,IAGnE+5E,IACAnsE,EAAO9Y,MAASjF,KAAF,mCAWtBmsF,aAAap9C,GAEHD,EAAEC,GAAUzZ,KACV,gEAGFlV,KAAK,CAAC10B,EAAG0gG,KACX,MAAM5iE,EAAOjQ,OAAO6yE,EAAYxpF,aAAa,SAEzC5C,KAAKwnB,MAELxnB,KAAKonF,eAAeiF,aAChB7iE,EAAM/tB,UAAQyI,mBAAmBlE,KAAKqmF,YAE1Cv3C,EAAEs9C,GACG92D,KAAK,gDACLlV,KAAK,CAACksE,EAAIC,KACP,MAAMC,EAAQD,EAAgB3pF,aAAa,SAEvC4pF,GAASA,EAAMj2F,SACXmjB,MAAM8P,IAASA,EAAO,EACtBzL,EAAO5Y,KAAM,GAAEnF,qBAAqBwpB,wBAA2BgjE,KAE/DxsF,KAAKonF,eAAeiF,aAChB7iE,EACA/tB,UAAQyI,mBAAmBsoF,SAa3DC,uBACQzsF,KAAKqlB,eACLrlB,KAAKqlB,eAAeonE,uBAEpB1uE,EAAO/Y,MAAShF,KAAF,yDAOtB0sF,0BACI,OAAO1sF,KAAKqlB,eAAeqnE,0BAuB/BC,YAAYC,EAAaluB,EAASmuB,EAASrpD,GACvCxjC,KAAK8sF,oBACDF,EACA,KAII5sF,KAAK+sF,kBAAkBruB,EAASmuB,IAEpCA,EACArpD,GAWRwpD,OAAOxpD,EAAc,IACjB,IAAKxjC,KAAKumF,YACN,MAAM,IAAIlvF,MAAM,+CAoBpB0mB,EAAO9Y,MAASjF,KAAF,uBACdA,KAAKsnF,kBAAkBpkF,KAnBFgnF,IACjB,MAAM+C,EAAY,GAElB,IAAK,MAAMC,KAAc1pD,EACrBypD,EAAU/pF,KAAKlD,KAAKqlB,eAAe8nE,SAASD,EAAYltF,KAAKumF,cAGjEzoD,QAAQyK,IAAI0kD,GACPvvD,KAAK,IAAM19B,KAAKqlB,eAAe+nE,YAAYptF,KAAKsmF,mBAChD5oD,KAAK2vD,GAAYrtF,KAAKqlB,eAAeioE,oBAAoBD,IACzD3vD,KAAK,KAGF19B,KAAKutF,oBAAoBvtF,KAAKqlB,eAAe+kE,iBAAiB/zD,OAEjEqH,KAAK,IAAMwsD,IAAoBllF,GAASklF,EAAiBllF,KAM9DA,IACQA,EACA+Y,EAAO/Y,MAAShF,KAAF,gBAAuBgF,GAErC+Y,EAAO9Y,MAASjF,KAAF,2BAe9ButF,oBAAoBF,GAChB,IAAIziF,EAAOjP,cAAI,CACX0tC,GAAIrpC,KAAKqmF,UACTp/E,KAAM,QACPlb,EAAE,SAAU,CACXka,MAAO,oBACPipB,OAAQ,mBACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAGd,IAAIk/B,IAAI8hD,GAAUjhD,SACdxhC,EACA5K,KAAKumF,YAAc,YAAc,aACrC37E,EAAOA,EAAKvF,OACZ0Y,EAAO7Y,KAAQlF,KAAF,sBAA6B4K,GAC1C5K,KAAKuU,WAAWnG,OAAOxD,EACnB,KACImT,EAAO7Y,KAAQlF,KAAF,uCAEjBgF,IACI+Y,EAAO/Y,MAAShF,KAAF,4BAAmCgF,IAh8B9C,KAy8BfwoF,UAAUC,GACN,IAAKztF,KAAKumF,YACN,MAAM,IAAIlvF,MAAM,oDAEpB2I,KAAK8sF,oBACDW,EACA,KACI1vE,EAAO7Y,KAAQlF,KAAF,2BAEjBgF,IACI+Y,EAAO/Y,MAAShF,KAAF,sBAA6BgF,KAmBvD8nF,oBAAoBY,EAAqBhvB,EAASmuB,EAASrpD,EAAc,IA+DrEzlB,EAAO9Y,MAASjF,KAAF,oCACdA,KAAKsnF,kBAAkBpkF,KA/DFgnF,IACjB,MAAM+C,EAAY,GAElB,IAAK,MAAMtsD,KAAS6C,EAChBypD,EAAU/pF,KAAKlD,KAAKqlB,eAAe8nE,SAASxsD,EAAO3gC,KAAKumF,cAG5D,MAAMoH,EACA3tF,KAAK4tF,yBAAyBF,GAC9BG,EACA7tF,KAAKqlB,eAAe+kE,iBAAiB/zD,IAMrCy3D,EAHAh/C,EAAE4+C,GACCp4D,KAAK,4DAEwB/zB,KAAK,MAEvCusF,IAAoB9tF,KAAKwmF,mBACzBxmF,KAAKwmF,iBAAmBsH,GAG5BhwD,QAAQyK,IAAI0kD,GACPvvD,KAAK,IAAM19B,KAAKqqF,aAAasD,EAAar9E,MAC1CotB,KAAK,KA2BF,GA1BI19B,KAAKsxC,QAAUw2C,MACf9nF,KAAKsxC,MAAQw2C,KAeT9nF,KAAKwnB,OACAxnB,KAAK8mF,oBAAqB9mF,KAAK6mF,yBACpC7mF,KAAK+tF,qBAQTF,EAAa,CACb,MAAMG,EACA,IAAIziD,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAEnDr2B,KAAKuqF,mBACD,IAAIh/C,IAAIsiD,GAAcG,MAGjCtwD,KAAK,IAAMwsD,IAAoBllF,GAASklF,EAAiBllF,KAM9DA,IACQA,GACA+Y,EAAO/Y,MAAO,GAAEhF,yCAAyCgF,KACzD6nF,EAAQ7nF,KAER+Y,EAAO9Y,MAASjF,KAAF,kCACd0+D,OAYhBuvB,eAAeC,EAAY,KAAMv+B,EAAW,MACxC,MAAMw+B,EAAUnuF,KAAKqlB,eAAeqnE,0BAEpC,GAAI1sF,KAAK6nF,mBAAqBqG,IAAcC,EAAS,CACjDpwE,EAAO7Y,KAAM,GAAElF,mCAAmCmuF,QAAcD,KAChEluF,KAAKqlB,eAAe4oE,eAAeC,EAAWv+B,GAG9C,MAAMs6B,EAAeC,IACjBlqF,KAAKqqF,eAAe3sD,KAChB,KACI3f,EAAO9Y,MAASjF,KAAF,gCAEPkqF,KACRllF,IACC+Y,EAAO/Y,MAAO,GAAEhF,oCAAoCgF,KAE7CklF,EAAiBllF,MAIpC+Y,EAAO9Y,MAASjF,KAAF,+BAGdA,KAAKsnF,kBAAkBpkF,KAAK+mF,IAcpCmE,iBAAiBC,EAAiB3vB,EAASmuB,GACvC,GAAI7sF,KAAKmH,QAAQmnF,mBAAoB,CACjC,MAAMj4D,EAAM,IAAIkV,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAKzD,OAHAr2B,KAAKuuF,oBAAoBl4D,EAAKqoC,EAASmuB,QACvC7sF,KAAK28C,KAAK94B,aAAa8D,KAAKqwB,IAAW1lD,qBAAsB0N,MAIjEA,KAAK28C,KAAK94B,aAAa8D,KAAKqwB,IAAWllD,eAAgBkN,MAMvD,MAAMwuF,EAAgBH,EAAgBrtE,QAEtCqtE,EACK/4D,KAAK,yBACL/zB,KAAK,UAAW,YAQrB8sF,EACK/4D,KAAK,+BACLm5D,SACLJ,EACK/4D,KAAK,mCACLm5D,SAML,MAAMC,EAAiBL,EAAgB/4D,KAAK,kCAE5Co5D,EAAentF,KAAK,OAAQ,SAC5BmtF,EAAe/sF,KAAK,+DAGpB3B,KAAK8sF,oBACDuB,EACA,KAEIruF,KAAK8sF,oBACD0B,EACA,KACI,MAAM9D,EACA,IAAIn/C,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAEnDr2B,KAAKuuF,oBAAoB7D,EAAUhsB,EAASmuB,GAE5C7sF,KAAK28C,KAAK94B,aAAa8D,KACnBqwB,IAAWjlD,oBACXiN,KACAwuF,IAER3B,IAERA,GAYRE,kBAAkBruB,EAASmuB,GAGvB,MAAMnC,EAAW,IAAIn/C,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAC9D,IAAIs4D,EAAShzF,cAAI,CAAE0tC,GAAIrpC,KAAKqmF,UACxBp/E,KAAM,QACLlb,EAAE,SAAU,CAAEka,MAAO,oBAClBipB,OAAQ,iBACR6qD,UAAW/5E,KAAKmrF,aAChByD,UAAW5uF,KAAK6uF,aAChBxiF,IAAKrM,KAAKqM,MAEdrM,KAAKmoF,sBACLuC,EAASh/C,qBAAsB,GAE/B1rC,KAAKkoF,sBACLwC,EAAS/+C,qBAAsB,GAE/B3rC,KAAKyrC,UACLi/C,EAASj/C,SAAU,GAEvBi/C,EAASt+C,SACLuiD,EACA3uF,KAAKmrF,eAAiBnrF,KAAKomF,SAAW,YAAc,aAGxDuI,EAASA,EAAOtpF,OAChB0Y,EAAO7Y,KAAQlF,KAAF,0BAAiC2uF,GAC9C3uF,KAAKuU,WAAWnG,OAAOugF,EACnBjwB,EACA1+D,KAAKyrF,sBAAsBkD,EAAQ3pF,IAC/B6nF,EAAQ7nF,GAIRhF,KAAK28C,KAAK94B,aAAa8D,KACnBqwB,IAAW7iD,uBAAwB6K,QA/sCpC,KA6uCf+tF,oBACI,MAAMloD,EAAiB7lC,KAAK6mF,wBACtBn5C,EAAU1tC,KAAK8mF,kBAAoB,OAAS,OAElD,IAAIgI,EACEnzF,cAAI,CACF0tC,GAAIrpC,KAAKqmF,UACTp/E,KAAM,QAELlb,EAAE,SAAU,CACTka,MAAO,oBACPipB,OAAQ,iBACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAEbtgB,EAAE,UAAW,CACVE,KAAM,QACNyhD,iBAGkB,IAAnB7H,IACPipD,EAAgBA,EACX/iG,EAAE,mBAAoB,CAAEka,MAAO,mCAC/BrZ,EAAEi5C,IAGX9nB,EAAO7Y,KAAM,GAAElF,+CAA+C0tC,wBAA8B7H,KAE5F7lC,KAAKuU,WAAWnG,OACZ0gF,EACA,KACA9uF,KAAKyrF,sBAAsBqD,GA5wCpB,KAsxCflpD,2BAA2BC,GACvB9nB,EAAO7Y,KAAM,GAAElF,uDAAuD6lC,KAEtE7lC,KAAK6mF,wBAA0BhhD,EAE3B7lC,KAAKwnB,MAGDxnB,KAAKsxC,QAAUw2C,KACf9nF,KAAK+tF,oBAGT/tF,KAAKg1E,IAAIpvC,2BAA2BC,GAc5C0oD,oBAAoB7D,EAAUhsB,EAASmuB,GACnC,IAAIkC,EAAkBpzF,cAAI,CAAE0tC,GAAIrpC,KAAKqmF,UACjCp/E,KAAM,QACLlb,EAAE,SAAU,CACTka,MAAO,oBACPipB,OAAQ,mBACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAGlBq+E,EAAS14D,MAAM5iB,QAAQ,CAAC4/E,EAAY/iD,KAChC,MAAM5Z,EAAQrB,IAAQe,WAAWi9D,EAAWjsF,MAAM,QAAQ,IAE1DgsF,EAAgBhjG,EAAE,UACd,CACIwgD,QACIvsC,KAAKmrF,eAAiBnrF,KAAKomF,SACrB,YACA,YACVn6F,KAAMomC,EAAML,QAGpB04D,EAAS/8C,kBAAkB1B,EAAK8iD,GAChCA,EAAgB5oF,OAIpB4oF,EAAkBA,EAAgB1pF,OAClC0Y,EAAO7Y,KAAQlF,KAAF,8BAAqC+uF,GAElD/uF,KAAKuU,WAAWnG,OAAO2gF,EACnBrwB,EACA1+D,KAAKyrF,sBAAsBsD,EAAiBlC,GAh1CrC,KA+1CfoC,oBAAoBvwB,EAASmuB,GAGzB,IAAIqC,EAAkBvzF,cAAI,CAAE0tC,GAAIrpC,KAAKqmF,UACjCp/E,KAAM,QACLlb,EAAE,SAAU,CACTka,MAAO,oBACPipB,OAAQ,mBACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAGlB6iF,EAAkBA,EAAgB7pF,OAClC0Y,EAAO7Y,KAAQlF,KAAF,8BAAqCkvF,GAElDlvF,KAAKuU,WAAWnG,OAAO8gF,EACnBxwB,EACA1+D,KAAKyrF,sBAAsByD,EAAiBrC,GAh3CrC,KA03CfsC,uBACI,OAAInvF,KAAK6nF,kBACE7nF,KAAKqlB,eAAe+pE,gBAGxBtxD,QAAQC,UASnBsxD,yBAAyBxpD,GACrB,GAAI7lC,KAAK6nF,kBAAmB,CAKxB,GAJA9pE,EAAO7Y,KAAM,GAAElF,kCAAkC6lC,MAI5C7lC,KAAKwnB,OAASrD,IAAQC,sBAA6C,IAAnByhB,EAAgC,CACjF,MAAMypD,EAAczpD,EAAiB,EAErC,OAAO7lC,KAAKuvF,wBAAuB,EAAMD,GAG7C,OAAOtvF,KAAKqlB,eAAegqE,yBAAyBxpD,GAGxD,OAAO/H,QAAQC,UASnByxD,sCACI,OAAIxvF,KAAK6nF,kBACE7nF,KAAKqlB,eAAemqE,sCAGxB1xD,QAAQC,UAMnBgkD,UAAUrjB,EAASmuB,EAAS1lF,GACxB,GAAInH,KAAKsxC,QAAUw2C,IAAnB,CAIA,IAAK3gF,GAAW4yB,QAAQ5yB,EAAQsoF,sBAAuB,CACnD,IAAIC,EACE/zF,cAAI,CACF0tC,GAAIrpC,KAAKqmF,UACTp/E,KAAM,QAELlb,EAAE,SAAU,CACTka,MAAO,oBACPipB,OAAQ,oBACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAEbtgB,EAAE,UACFA,EAAGob,GAAWA,EAAQqI,QAAW,WACjCrJ,KAELgB,GAAWA,EAAQwoF,kBACnBD,EACK3jG,EAAE,QACFa,EAAEua,EAAQwoF,mBACVxpF,KACAA,KAELupF,EAAiBvpF,KAGrBnG,KAAKwmF,kBACEkJ,EAAiB3jG,EAChB,iBAAkB,CACdka,MAAO,kCACPiB,GAAIlH,KAAKwmF,iBACToJ,QAASzoF,IAAsC,IAA3BA,EAAQ0oF,iBAC7B1pF,KAGXupF,EAAmBA,EAAiBrqF,OACpC0Y,EAAO7Y,KAAQlF,KAAF,6BAAoC0vF,GACjD1vF,KAAKuU,WAAWnG,OACZshF,EACAhxB,EACA1+D,KAAKyrF,sBAAsBiE,EAAkB7C,GAx9C1C,UA29CP9uE,EAAO7Y,KAAQlF,KAAF,sCAIjBA,KAAKuU,WAAWo6B,OAAOozC,UAAU/hF,KAAKqM,MAQ1CyjF,aAAaC,EAAiBC,GAI1BjyE,EAAO7Y,KAAQlF,KAAF,sBAA6B+vF,EAAiBC,GAE3DhwF,KAAK0nF,eAAet4E,QAAQ+W,GAAkBA,KAC9CnmB,KAAK0nF,eAAiB,GAElB1nF,KAAK4nF,6CACL5nF,KAAK4nF,8CAGT5nF,KAAKyc,QAQTkrE,oBAAoB53E,GACZA,IAAW8lC,IAAep4C,OAAOM,WAAaiC,KAAKymF,qBACnD1oE,EAAO7Y,KAAQlF,KAAF,qCACbA,KAAKuqF,mBACDvqF,KAAKymF,mBACLzmF,KAAK0mF,qBAcjBuJ,4BAA4BC,EAAeC,GACvC,MAAMC,EAAc,GAgEpB,OA9DAthD,EAAEohD,GAAe9vE,KAAK,CAACiwE,EAAIrhD,KACvB,MAAM/iD,EAAO6iD,EAAEE,GAASztC,KAAK,QAC7B,IAAIqyB,EAAQ,GAEZkb,EAAEE,GACG1Z,KAAK,uDACLlV,MAAK,WAEF,MAAMoV,EAAYx1B,KAAK4C,aAAa,aAC9BkyB,EACAga,EAAE9uC,MACCs1B,KAAK,WACL9vB,KAAI,WAED,OAAOxF,KAAK4C,aAAa,WAE5BrW,MAELuoC,EAAMv+B,SACNq9B,GACQ,gBAAe4B,KACfV,EAAM3xB,KAAK,eAMzB2rC,EAAEE,GAAS1Z,KACT,mDAGJlV,MAAK,WACL,MAAMoJ,EAAOslB,EAAE9uC,MAAMuB,KAAK,QAEtB4uF,EAAiBjkD,aAAa1iB,GAC9BzL,EAAO5Y,KAAM,GAAEnF,8CAA8CwpB,KAMjEslB,EAAE9uC,MAAMs1B,KAAK,cAAclV,MAAK,WAC5BwT,GAAU,UAASpK,KAAQslB,EAAE9uC,MAAMuB,KAAK,UACpCutC,EAAE9uC,MAAMuB,KAAK,UAAYutC,EAAE9uC,MAAMuB,KAAK,SAAShL,SAC/Cq9B,GAAU,IAAGkb,EAAE9uC,MAAMuB,KAAK,UAE9BqyB,GAAS,aAKjBu8D,EAAiBn+D,MAAM5iB,QAAQ,CAAC4iB,EAAOs+D,KAC9Bt/D,IAAQO,SAASS,EAAQ,SAAQ/lC,KAGjCmkG,EAAYE,KACbF,EAAYE,GAAM,IAEtBF,EAAYE,IAAO18D,OAIpBw8D,EAOXG,gBAAgB7wF,GACZM,KAAKwwF,0BAAyB,EAAgB9wF,GAOlD+wF,mBAAmB/wF,GACfM,KAAKwwF,0BAAyB,EAAoB9wF,GAUtDgxF,2BAA2BxpF,GACvB,IAAI8gC,EAAe,GAEnB,MAAMiiD,EAAe0G,IACjB,MAAMC,EAAiB5wF,KAAKqlB,eAAewrE,iCAAiC3pF,GAE5E,GAAI0pF,EAAer6F,OAAQ,CACvB,MAAMs3F,EAAc,IAAItiD,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAC3Ds3D,EAAe3tF,KAAK8wF,2BAA2BF,GAErD5oD,EAAehoC,KAAKqlB,eAAe0rE,mBAAmB7pF,GACtDlH,KAAKqqF,aAAasD,EAAar9E,KAC1BotB,KAAK,KACF,MAAMszD,EAAc,IAAIzlD,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAEjEr2B,KAAKuqF,mBAAmBsD,EAAamD,GACrCL,MAEHp0D,MAAMpsB,GAAOwgF,EAAexgF,SAEjCwgF,KAIR,OAAO,IAAI7yD,QAAQ,CAACC,EAASC,KACzBjgB,EAAO9Y,MAAO,GAAEjF,+DAA+DkH,KAE/ElH,KAAKsnF,kBAAkBpkF,KACnB+mF,EACAjlF,IACQA,GACA+Y,EAAO/Y,MAAShF,KAAF,qCAA4CgF,GAC1Dg5B,EAAOh5B,KAEP+Y,EAAO7Y,KAAQlF,KAAF,qCACb+9B,EAAQiK,QAc5BwoD,yBAAyBS,EAAOvxF,GAC5B,MAAMwxF,EAAYD,EAAQ,kBAAoB,qBAE1CA,GACAjxF,KAAKmsF,aAAazsF,GAyCtBqe,EAAO9Y,MAAO,GAAEjF,eAAekxF,UAG/BlxF,KAAKsnF,kBAAkBpkF,KAzCFgnF,IACjB,IAAKlqF,KAAKqlB,eAAe+kE,mBACjBpqF,KAAKqlB,eAAe+kE,iBAAiB/zD,IAAK,CAC9C,MAAM4iB,EAAYi4C,EAAF,oCAKhB,OAHAnzE,EAAO/Y,MAAMi0C,QACbixC,EAAiBjxC,GAKrBl7B,EAAOnZ,IAAK,GAAE5E,mBAAmBkxF,KAEjC,MAAMrD,EAAc,IAAItiD,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAC3DA,EAAM,IAAIkV,IAAIvrC,KAAKqlB,eAAe2kE,kBAAkB3zD,KACpD86D,EACAF,EACIjxF,KAAKiwF,4BAA4BvwF,EAAM22B,GACvCr2B,KAAKoxF,+BAA+B1xF,EAAM22B,GAC9Cs3D,EACAsD,EACIjxF,KAAKqxF,wBAAwBF,GAC7BnxF,KAAK8wF,2BAA2BK,GAE1CnxF,KAAKqqF,aAAasD,EAAar9E,KAC1BotB,KAAK,KACF,MAAMswD,EACA,IAAIziD,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAEnDtY,EAAOnZ,IAAK,GAAE5E,QAAQkxF,UACtBlxF,KAAKuqF,mBAAmBsD,EAAaG,GACrC9D,KACDllF,IACC+Y,EAAO/Y,MAAO,GAAEhF,QAAQkxF,YAAqBlsF,GAC7CklF,EAAiBllF,OAejC4oF,yBAAyB0D,GACrB,MAAMC,EAAY,IAAIhmD,IAAI,IAe1B,OAbIvrC,KAAKmoF,sBACLoJ,EAAU7lD,qBAAsB,GAEhC1rC,KAAKkoF,sBACLqJ,EAAU5lD,qBAAsB,GAEhC3rC,KAAKyrC,UACL8lD,EAAU9lD,SAAU,GAGxB8lD,EAAU7iD,WAAW4iD,GACrBtxF,KAAKmsF,aAAar9C,EAAEwiD,GAASh8D,KAAK,aAE3Bi8D,EAUXT,2BAA2BF,GACvB,MAAMW,EAAYvxF,KAAK2mC,gBACjB,IAAI4E,IAAIvrC,KAAKqlB,eAAeA,eAAe2kE,kBAAkB3zD,KAC7D,IAAIkV,IAAIvrC,KAAKqlB,eAAe2kE,kBAAkB3zD,KAyCpD,OAvCAu6D,EAAexhF,QAAQ,CAACwkB,EAAOqY,MAE3BrY,EAAQA,EAAM7wB,MAAM,SACd2N,MACF1Q,KAAK2mC,gBACL/S,EAAMxkB,QAAQ5K,IACV,MAAMunC,EAAMwlD,EAAUv/D,MAAMw/D,UAAU17D,GAASA,EAAMgC,SAAStzB,IAE9D,GAAIunC,GAAO,EAKP,GAJAwlD,EAAUv/D,MAAM+Z,GAAOwlD,EAAUv/D,MAAM+Z,GAAKnqC,QAAW4C,EAAF,OAAc,IAI/DxE,KAAKwnB,MAAO,OACZ,MAAM6I,EAAS,UAAGW,IAAQe,WAAWw/D,EAAUv/D,MAAM+Z,GAAKhpC,MAAM,QAAQ,WAAzD,aAAG,EAA2DivB,MACvEy/D,EAAmBzxF,KAAKqlB,eAAeqsE,yBAAyBrhE,GAAW,GAEjF,CAAE6H,IAAeK,SAAUL,IAAeI,UAAWlpB,QAAQ6kB,IACzDs9D,EAAUv/D,MAAM+Z,GAAOwlD,EAAUv/D,MAAM+Z,GAClCnqC,QAAS,KAAIqyB,EAAc,KAAIw9D,UAMxCF,EAAUv/D,MAAM+Z,GAAOwlD,EAAUv/D,MAAM+Z,GAClCnqC,QAAS,KAAIs2B,IAAeI,SAAa,KAAIJ,IAAeC,YAK7EvE,EAAMxkB,QAAQ5K,IACV+sF,EAAUv/D,MAAMia,GACVslD,EAAUv/D,MAAMia,GAAKrqC,QAAW4C,EAAF,OAAc,QAI9D+sF,EAAUjhF,IAAMihF,EAAUt5E,QAAUs5E,EAAUv/D,MAAM7uB,KAAK,IAElDouF,EAUXF,wBAAwBjB,GACpB,MAAMmB,EAAY,IAAIhmD,IAAIvrC,KAAKqlB,eAAe2kE,kBAAkB3zD,KAmBhE,OAjBA+5D,EAAYhhF,QAAQ,CAACwkB,EAAOqY,KAKxB,GAJAslD,EAAUv/D,MAAMia,IAAQrY,EAIpB5zB,KAAKwnB,OAASxnB,KAAK2mC,gBAAiB,OACpC,MAAMtW,EAAS,UAAGW,IAAQe,WAAWw/D,EAAUv/D,MAAMia,GAAKlpC,MAAM,QAAQ,WAAzD,aAAG,EAA2DivB,MACvEy/D,EAAmBzxF,KAAKqlB,eAAeqsE,yBAAyBrhE,GAAW,GAEjF,CAAE6H,IAAeG,SAAUH,IAAeC,UAAW/oB,QAAQ6kB,IACzDs9D,EAAUv/D,MAAMia,GAAOslD,EAAUv/D,MAAMia,GAClCrqC,QAAS,KAAIqyB,EAAc,KAAIw9D,QAIhDF,EAAUjhF,IAAMihF,EAAUt5E,QAAUs5E,EAAUv/D,MAAM7uB,KAAK,IAElDouF,EAYXlH,aAAasH,GACT,GAA2C,WAAvC3xF,KAAKqlB,eAAegkE,eAA6B,CACjD,MAAMrkF,EAAQ,IAAI3N,MAAM,4CAIxB,OAFA2I,KAAK28C,KAAK94B,aAAa8D,KAAKqwB,IAAWtjD,qBAAsBsQ,EAAOhF,MAE7D89B,QAAQE,OAAOh5B,GAG1B,MAAMusF,EACAI,GAAqB3xF,KAAKqlB,eAAe2kE,kBAAkB3zD,IAEjE,IAAKk7D,EAAW,CACZ,MAAMvsF,EAAQ,IAAI3N,MAAO,kEAAiE2I,KAAKsxC,OAI/F,OAFAtxC,KAAK28C,KAAK94B,aAAa8D,KAAKqwB,IAAWtjD,qBAAsBsQ,EAAOhF,MAE7D89B,QAAQE,OAAOh5B,GAG1B,MAAMglF,EAAoB,IAAI4H,sBAAsB,CAChD3qF,KAAMjH,KAAKumF,YAAc,SAAW,QACpClwD,IAAKk7D,IAGT,OAAIvxF,KAAKumF,YACEvmF,KAAK6xF,sBAAsB7H,GAG/BhqF,KAAK8xF,sBAAsB9H,GAStC8H,sBAAsB9H,GAGlB,OAFAjsE,EAAO9Y,MAASjF,KAAF,4CAEPA,KAAKqlB,eAAe0sE,qBAAqB/H,GAC3CtsD,KAAK,KACF3f,EAAO9Y,MAASjF,KAAF,iCAEPA,KAAKqlB,eAAe2sE,aAAahyF,KAAKsmF,kBACxC5oD,KAAKu0D,IACFl0E,EAAO9Y,MAASjF,KAAF,2CAEPA,KAAKqlB,eAAeioE,oBAAoB2E,OAWnEJ,sBAAsB7H,GAGlB,OAFAjsE,EAAO9Y,MAASjF,KAAF,gCAEPA,KAAKqlB,eAAe+nE,YAAYptF,KAAKsmF,kBACvC5oD,KAAKw0D,IACFn0E,EAAO9Y,MAASjF,KAAF,2CAEPA,KAAKqlB,eAAeioE,oBAAoB4E,GAC1Cx0D,KAAK,KACF3f,EAAO9Y,MAASjF,KAAF,4CAGPA,KAAKqlB,eAAe0sE,qBAAqB/H,OAiBpEmI,aAAaC,EAAUC,GACnB,MAAMpI,EAAeC,IACjBnsE,EAAO9Y,MAAO,GAAEjF,gDAAgDoyF,iBAAwBC,KAExF,MAAMxE,EAAc7tF,KAAKqlB,eAAe+kE,iBAAiB/zD,IAEpDr2B,KAAK2mC,kBAKF3mC,KAAKqlB,eAAele,QAAQohF,uBACzB6J,GAAYC,GAAYA,EAAS5Q,gBAMpCzhF,KAAKqlB,eAAeitE,qBAInBF,GAAYC,GAAYA,EAAS5Q,eAMlCzhF,KAAKqlB,eAAeitE,oBAGbF,GAAYA,EAAS3Q,iBAAmB4Q,IAK/CryF,KAAKqlB,eAAeitE,oBACpBtyF,KAAKqlB,eAAeonE,yBAI5BzsF,KAAKqlB,eAAe8sE,aAAaC,EAAUC,GACtC30D,KAAK60D,IACF,IAAI51D,EAAUmB,QAAQC,UAetB,OAbAhgB,EAAO9Y,MAAO,GAAEjF,uDACZuyF,2BAA2CvyF,KAAKsxC,SAEhDihD,IACIH,GAAYC,IACbryF,KAAKsxC,QAAUw2C,MAClBnrD,EAAU38B,KAAKqqF,eAAe3sD,KAAK,KAC/B,MAAMszD,EAAc,IAAIzlD,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KAEjEr2B,KAAKuqF,mBAAmB,IAAIh/C,IAAIsiD,GAAcmD,MAI/Cr0D,EAAQe,KAAK,KAChB,GAAI20D,GAAYA,EAAS5Q,eAKrB,OAJA1jE,EAAO9Y,MAASjF,KAAF,kDAIPA,KAAKqlB,eAAemqE,sCACtB9xD,KAAK,IAAM19B,KAAKqlB,eAAegqE,4BAC/B3xD,KAAK,IAAM19B,KAAKqlB,eAAe+pE,qBAI/C1xD,KAAK,IAAMwsD,IAAoBllF,GAASklF,EAAiBllF,KAGlE,OAAO,IAAI84B,QAAQ,CAACC,EAASC,KACzBjgB,EAAO9Y,MAAO,GAAEjF,8CAA8CoyF,kBAAyBC,KAEvFryF,KAAKsnF,kBAAkBpkF,KACnB+mF,EACAjlF,IACQA,GACA+Y,EAAO/Y,MAAShF,KAAF,wBAA+BgF,GAC7Cg5B,EAAOh5B,KAEP+Y,EAAO7Y,KAAQlF,KAAF,yBACb+9B,SAgBpBqzD,+BAA+BoB,EAAkBrC,GAC7C,MAAMS,EAAiB,GA2DvB,OAzDA9hD,EAAE0jD,GAAkBpyE,KAAK,CAACiwE,EAAIrhD,KAC1B,MAAM/iD,EAAO6iD,EAAEE,GAASztC,KAAK,QAC7B,IAAIqyB,EAAQ,GAEZkb,EAAEE,GACG1Z,KAAK,uDACLlV,MAAK,WAEF,MAAMoV,EAAYx1B,KAAK4C,aAAa,aAC9BkyB,EACAga,EAAE9uC,MACCs1B,KAAK,WACL9vB,KAAI,WACD,OAAOxF,KAAK4C,aAAa,WAE5BrW,MAELuoC,EAAMv+B,SACNq9B,GACQ,gBAAe4B,KACfV,EAAM3xB,KAAK,eAK/B,MAAM2xB,EAAQ,GAIRga,EAAEE,GAAS1Z,KACT,mDAEJlV,MAAK,WAEL,MAAMoJ,EAAOslB,EAAE9uC,MAAMuB,KAAK,QAE1BuzB,EAAM5xB,KAAKsmB,MAEf2mE,EAAiBn+D,MAAM5iB,QAAQ,CAAC4iB,EAAOs+D,KAC9Bt/D,IAAQO,SAASS,EAAQ,SAAQ/lC,KAGjC2kG,EAAeN,KAChBM,EAAeN,GAAM,IAEzBx7D,EAAM1lB,QAAQoa,IACV,MAAMipE,EACAzhE,IAAQsD,UAAUtC,EAAQ,UAASxI,GAErCipE,EAAUl8F,SACVq6F,EAAeN,IAAUmC,EAAUtvF,KAAK,QAAjB,UAG/BytF,EAAeN,IAAO18D,OAIvBg9D,EAeX8B,qBAAqBC,EAAeC,GAChC,MAAMC,EACA,IAAItnD,IAAIvrC,KAAKqlB,eAAe+kE,iBAAiB/zD,KACnD,IAAIy8D,EAAU,IAAIC,IAAUH,EAAQC,GACpC,MAAMG,EAAaF,EAAQG,cAE3B,GAAI7mG,OAAOmZ,KAAKytF,GAAYz8F,OAGxB,OAFAwnB,EAAO/Y,MAAO,GAAEhF,kCAAkC2yF,IAAiBK,IAE5D,EAGXF,EAAU,IAAIC,IAAUF,EAAiBD,GACzC,MAAMM,EAAeJ,EAAQG,cAE7B,OAAI7mG,OAAOmZ,KAAK2tF,GAAc38F,SAC1BwnB,EAAO/Y,MAAO,GAAEhF,qCAAqC2yF,IAAiBO,IAE/D,GAcfC,iBAAiBxyD,GACb,OAAO3gC,KAAKozF,6BACR,EAA2BzyD,GAC1BjD,KAAK,KAGF,GAAIiD,EAAM8gD,gBAAkBt9D,IAAQ2hE,8BAChC,OAAO9lF,KAAKmvF,uBACPzxD,KAAK,IAAM19B,KAAKwvF,uCAChB9xD,KAAK,IAAM19B,KAAKqvF,8BAarCgE,kBAAkB1yD,GACd,OAAO3gC,KAAKozF,6BACR,EAA2BzyD,GAUnCyyD,4BAA4BE,EAAQ3yD,GAChC,IAAKA,EACD,OAAO7C,QAAQE,OAAO,kCAE1B,MAAM20D,EAAgBW,EAAS,kBAAoB,iBAC7CrJ,EAAeC,IACjB,MAAMpiE,EAAM9nB,KAAKqlB,eAEjB,IAAKyC,EAKD,YAJAoiE,EACK,iBAAgByI,yCAKzB,MAAMY,EAAczrE,EAAIsiE,iBAAiB/zD,KAEnCi9D,EACIxrE,EAAI0rE,gBAAgB7yD,GACpB7Y,EAAI2rE,eAAe9yD,IAGxBjD,KAAK60D,IACEA,GAAqBgB,GAAezrE,EAAIkiE,kBAAkB3zD,IAC1Dr2B,KAAKqqF,eACA3sD,KAAK,KAIF19B,KAAK0yF,qBACDC,EAAe,IAAIpnD,IAAIgoD,IAC3BrJ,MAGRA,KAGRA,IAKR,OAFAnsE,EAAO9Y,MAAO,GAAEjF,eAAe2yF,UAExB,IAAI70D,QAAQ,CAACC,EAASC,KACzBh+B,KAAKsnF,kBAAkBpkF,KACnB+mF,EACAjlF,IACQA,GACA+Y,EAAO/Y,MAAO,GAAEhF,QAAQ2yF,YACxB30D,EAAOh5B,KAEP+Y,EAAO9Y,MAAO,GAAEjF,QAAQ2yF,UACxB50D,SAgBpBwxD,uBAAuBmE,EAAapE,GAChC,IAAKtvF,KAAKqlB,eACN,OAAOyY,QAAQE,OACX,uEAIR,MAAM21D,EAAcD,EAAc,eAAiB,iBAC7CE,EAActE,EAAc,eAAiB,iBAEnDvxE,EAAO7Y,KAAM,GAAElF,oBAAoB4zF,MAAgBD,UAEnD,MAAM1J,EAAeC,IACjB,MAAM2J,EAAkB7zF,KAAKsxC,QAAUw2C,IAMjCgM,EACA9zF,KAAKqlB,eAAe0uE,uBAAuBL,GAE7C1zF,KAAK8mF,oBAAsBwI,IAC3BtvF,KAAK8mF,kBAAoBwI,EAUrBtvF,KAAKwnB,OAASqsE,GACd7zF,KAAK+tF,qBAIb,MAAMiG,EACAh0F,KAAKqlB,eAAe4uE,uBAClBj0F,KAAK8mF,mBAAqB9mF,KAAK+mF,oBAInC8M,IACQC,GAAsBE,GAC9Bh0F,KAAKqqF,eACA3sD,KACGwsD,EACAA,GAERA,KAIR,OAAO,IAAIpsD,QAAQ,CAACC,EAASC,KACzBh+B,KAAKsnF,kBAAkBpkF,KACnB+mF,EACAjlF,IACQA,GACA+Y,EAAO/Y,MAAO,GAAEhF,aAAa4zF,MAAgBD,kBAC7C31D,EAAOh5B,KAEP+Y,EAAO9Y,MAAO,GAAEjF,aAAa4zF,MAAgBD,gBAC7C51D,SAgBpBm2D,eAAejO,GACX,MAAMkO,EACApO,EAAgBqO,kBAAkBnO,GAClCoO,EACAtO,EAAgBuO,oBAAoBrO,GAU1C,GAPIoO,IACAt2E,EAAO7Y,KAAM,GAAElF,0CAA0Cq0F,KACzDr0F,KAAKmnF,yBAA2BkN,EAChCr0F,KAAK6jB,aAAa8D,KACd4sE,IAAmBC,iCAAkCx0F,OAGrC,OAApBm0F,EAKA,YAJAp2E,EAAO/Y,MACAhF,KAAF,0EAkBT+d,EAAO9Y,MAAO,GAAEjF,oDAAoDm0F,OAEpEn0F,KAAKsnF,kBAAkBpkF,KAdFgnF,IACblqF,KAAK6nF,gBAAgB,mBACd7nF,KAAKy0F,yBAAyBN,GAGrCn0F,KAAKqqF,eACA3sD,KAAKwsD,EAAkBA,GAE5BA,KAQJllF,IACQA,EACA+Y,EAAO/Y,MAAShF,KAAF,2BAAkCgF,GAEhD+Y,EAAO9Y,MAAO,GAAEjF,6CAA6Cm0F,cAe7EM,yBAAyBC,GACrB,MAAMC,EACuB,SAAvBD,GAC6B,cAAvBA,GAAsC10F,KAAKumF,aACpB,cAAvBmO,IAAuC10F,KAAKumF,YAOxD,OALIoO,IAAwB30F,KAAK+mF,qBAC7BhpE,EAAO9Y,MAAO,GAAEjF,iCAAiC20F,KACjD30F,KAAK+mF,mBAAqB4N,GAGvB30F,KAAKqlB,eAAe4uE,uBACvBj0F,KAAK8mF,mBAAqB9mF,KAAK+mF,oBAQvCwD,mBAAmBqI,EAAQgC,GAEvB,GAAI50F,KAAKsxC,QAAUw2C,IAGf,YAFA/pE,EAAO5Y,KAAM,GAAEnF,iCAAiCA,KAAKsxC,kBAKzD,IAAKtxC,KAAKuU,WAAW3K,UAQjB,OANK5J,KAAKymF,qBACNzmF,KAAKymF,mBAAqBmM,GAE9B5yF,KAAK0mF,mBAAqBkO,OAC1B72E,EAAO5Y,KAAQnF,KAAF,gEAKjBA,KAAKymF,wBAAqBlmF,EAC1BP,KAAK0mF,wBAAqBnmF,EAG1B,IAAIs0F,EAAY,IAAI9B,IAAU6B,EAAQhC,GACtC,MAAMnE,EAAS9yF,cAAI,CAAE0tC,GAAIrpC,KAAKqmF,UAC1Bp/E,KAAM,QACLlb,EAAE,SAAU,CACTka,MAAO,oBACPipB,OAAQ,gBACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAGMwoF,EAAUzoD,SAASqiD,KAGvC1wE,EAAO7Y,KAAQlF,KAAF,yBAAgCyuF,EAAOppF,QACpDrF,KAAKuU,WAAWnG,OACZqgF,EAAQ,KACRzuF,KAAKyrF,sBAAsBgD,GAp5ExB,MAw5EXoG,EAAY,IAAI9B,IAAUH,EAAQgC,GAClC,MAAMhwE,EAAMjpB,cAAI,CAAE0tC,GAAIrpC,KAAKqmF,UACvBp/E,KAAM,QACLlb,EAAE,SAAU,CACTka,MAAO,oBACPipB,OAAQ,aACR6qD,UAAW/5E,KAAKmrF,aAChB9+E,IAAKrM,KAAKqM,MAIOwoF,EAAUzoD,SAASxnB,KAGxC7G,EAAO7Y,KAAQlF,KAAF,sBAA6B4kB,EAAIvf,QAC9CrF,KAAKuU,WAAWnG,OACZwW,EAAK,KAAM5kB,KAAKyrF,sBAAsB7mE,GAx6EnC,MA87Ef6mE,sBAAsBqJ,EAASC,GAC3B,OAAOC,IAEH,MAAMhwF,EAAQ,GAGRiwF,EAAanmD,EAAEkmD,GAAa1/D,KAAK,SAEvC,GAAI2/D,EAAW1+F,OAAQ,CACnByO,EAAM2X,KAAOs4E,EAAW1zF,KAAK,QAC7B,MAAM2zF,EAAiBpmD,EAAEkmD,GAAa1/D,KAAK,gBAEvC4/D,EAAe3+F,SACfyO,EAAMwK,OAAS0lF,EAAe,GAAG/0F,SAGrC,MAAMg1F,EAAcF,EAAW3/D,KAAK,SAEhC6/D,EAAY5+F,SACZyO,EAAMF,IAAMqwF,EAAYxzF,QAI3BqzF,IACDhwF,EAAMwK,OAAS,WAGnBxK,EAAMiT,QAAUjY,KAAKtJ,WAEjBq+F,EACAA,EAAU/vF,GACHhF,KAAKsxC,QAAUw2C,KACM,mBAAjB9iF,EAAMwK,OAMjBuO,EAAO9Y,MAAO,GAAEjF,sBAAsB4M,KAAKwL,UAAUpT,MAErDy3B,IAAqBkG,iBACjB,IAAItrC,MACC,iBAAgBuV,KAAKwL,UAAUpT,MASpDowF,wBACI,OAAOp1F,KAAKqlB,eAAegwE,qBAM/B54E,QACIzc,KAAKsxC,MAAQw2C,IACb9nF,KAAKynF,2BAAwBlnF,EAEzBP,KAAKqlB,iBACLrlB,KAAKqlB,eAAe4jE,eAAiB,KACrCjpF,KAAKqlB,eAAekkE,2BAA6B,KACjDvpF,KAAKqlB,eAAe0kE,oBAAsB,KAC1C/pF,KAAKqlB,eAAe+jE,uBAAyB,MAGjDrrE,EAAO9Y,MAASjF,KAAF,+BAGdA,KAAKsnF,kBAAkBxhC,QAEvB/nC,EAAO9Y,MAASjF,KAAF,yBACdA,KAAKsnF,kBAAkBpkF,KAAKytF,IAExB3wF,KAAKonF,eAAeoD,YAAY,MAGhCxqF,KAAKqlB,gBAAkBrlB,KAAKqlB,eAAe5I,QAC3Ck0E,IACA5yE,EAAO9Y,MAASjF,KAAF,0BAGlB+d,EAAO9Y,MAASjF,KAAF,gCAGdA,KAAKsnF,kBAAkBgO,WAO3B5+F,WACI,MAAQ,2BAA0BsJ,KAAKwnB,MAAQ,MAAQ,mBAAmBxnB,KAAKumF,mBAAmBvmF,KAAKqM,OAS3Gu8E,4BAA2B,UAAE2M,IACzB,IAAKA,IAAcA,EAAUC,uBACzB,OAMJ,MAAM7xF,EAAM3D,KAAKy1F,mBAEjB,OAAOC,sBAAY/xF,GAAO,GAAM,M,qFCllFxCzY,EAAQo9D,WAuCR,SAAqBqtC,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,GA1ClD7qG,EAAQozF,YAiDR,SAAsBqX,GACpB,IAAIpK,EAcA7/F,EAbAkqG,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvBz/F,EAAM,IAAI6/F,EAVhB,SAAsBL,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,EAS9BE,CAAYN,EAAKG,EAAUC,IAEzCG,EAAU,EAGV/9F,EAAM49F,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAKpqG,EAAI,EAAGA,EAAIyM,EAAKzM,GAAK,EACxB6/F,EACG4K,EAAUR,EAAIp+F,WAAW7L,KAAO,GAChCyqG,EAAUR,EAAIp+F,WAAW7L,EAAI,KAAO,GACpCyqG,EAAUR,EAAIp+F,WAAW7L,EAAI,KAAO,EACrCyqG,EAAUR,EAAIp+F,WAAW7L,EAAI,IAC/ByK,EAAI+/F,KAAc3K,GAAO,GAAM,IAC/Bp1F,EAAI+/F,KAAc3K,GAAO,EAAK,IAC9Bp1F,EAAI+/F,KAAmB,IAAN3K,EAGK,IAApBwK,IACFxK,EACG4K,EAAUR,EAAIp+F,WAAW7L,KAAO,EAChCyqG,EAAUR,EAAIp+F,WAAW7L,EAAI,KAAO,EACvCyK,EAAI+/F,KAAmB,IAAN3K,GAGK,IAApBwK,IACFxK,EACG4K,EAAUR,EAAIp+F,WAAW7L,KAAO,GAChCyqG,EAAUR,EAAIp+F,WAAW7L,EAAI,KAAO,EACpCyqG,EAAUR,EAAIp+F,WAAW7L,EAAI,KAAO,EACvCyK,EAAI+/F,KAAc3K,GAAO,EAAK,IAC9Bp1F,EAAI+/F,KAAmB,IAAN3K,GAGnB,OAAOp1F,GA3FTjL,EAAQsyF,cAkHR,SAAwB4Y,GAQtB,IAPA,IAAI7K,EACApzF,EAAMi+F,EAAM7/F,OACZ8/F,EAAal+F,EAAM,EACnB6L,EAAQ,GAIHtY,EAAI,EAAG4qG,EAAOn+F,EAAMk+F,EAAY3qG,EAAI4qG,EAAM5qG,GAH9B,MAInBsY,EAAMd,KAAKqzF,EACTH,EAAO1qG,EAAIA,EALM,MAKgB4qG,EAAOA,EAAQ5qG,EAL/B,QAUF,IAAf2qG,GACF9K,EAAM6K,EAAMj+F,EAAM,GAClB6L,EAAMd,KACJszF,EAAOjL,GAAO,GACdiL,EAAQjL,GAAO,EAAK,IACpB,OAEsB,IAAf8K,IACT9K,GAAO6K,EAAMj+F,EAAM,IAAM,GAAKi+F,EAAMj+F,EAAM,GAC1C6L,EAAMd,KACJszF,EAAOjL,GAAO,IACdiL,EAAQjL,GAAO,EAAK,IACpBiL,EAAQjL,GAAO,EAAK,IACpB,MAIJ,OAAOvnF,EAAMb,KAAK,KA3IpB,IALA,IAAIqzF,EAAS,GACTL,EAAY,GACZH,EAA4B,oBAAfxxC,WAA6BA,WAAapuD,MAEvDumB,EAAO,mEACFjxB,EAAI,EAAGyM,EAAMwkB,EAAKpmB,OAAQ7K,EAAIyM,IAAOzM,EAC5C8qG,EAAO9qG,GAAKixB,EAAKjxB,GACjByqG,EAAUx5E,EAAKplB,WAAW7L,IAAMA,EAQlC,SAASmqG,EAASF,GAChB,IAAIx9F,EAAMw9F,EAAIp/F,OAEd,GAAI4B,EAAM,EAAI,EACZ,MAAM,IAAId,MAAM,kDAKlB,IAAIy+F,EAAWH,EAAI/xF,QAAQ,KAO3B,OANkB,IAAdkyF,IAAiBA,EAAW39F,GAMzB,CAAC29F,EAJcA,IAAa39F,EAC/B,EACA,EAAK29F,EAAW,GAsEtB,SAASS,EAAaH,EAAOr5E,EAAO6D,GAGlC,IAFA,IAAI2qE,EARoB3zF,EASpB+6E,EAAS,GACJjnF,EAAIqxB,EAAOrxB,EAAIk1B,EAAKl1B,GAAK,EAChC6/F,GACI6K,EAAM1qG,IAAM,GAAM,WAClB0qG,EAAM1qG,EAAI,IAAM,EAAK,QACP,IAAf0qG,EAAM1qG,EAAI,IACbinF,EAAOzvE,KAdFszF,GADiB5+F,EAeM2zF,IAdT,GAAK,IACxBiL,EAAO5+F,GAAO,GAAK,IACnB4+F,EAAO5+F,GAAO,EAAI,IAClB4+F,EAAa,GAAN5+F,IAaT,OAAO+6E,EAAOxvE,KAAK,IAjGrBgzF,EAAU,IAAI5+F,WAAW,IAAM,GAC/B4+F,EAAU,IAAI5+F,WAAW,IAAM,I,6BCnB/B,8CAQA,SAASk/F,EAAYC,EAAQC,GAEzB,IAAKA,EACD,OAAO,EAIX,GAAID,EAAOngG,SAAWogG,EAAOpgG,OACzB,OAAO,EAGX,IAAK,IAAI7K,EAAI,EAAGC,EAAI+qG,EAAOngG,OAAQ7K,EAAIC,EAAGD,IAEtC,GAAIgrG,EAAOhrG,aAAc0K,OAASugG,EAAOjrG,aAAc0K,OAEnD,IAAKsgG,EAAOhrG,GAAGkrG,OAAOD,EAAOjrG,IACzB,OAAO,OAER,GAAIgrG,EAAOhrG,KAAOirG,EAAOjrG,GAG5B,OAAO,EAIf,OAAO,EAQI,SAASqnG,EAAU8D,EAAOC,GAGrC,GAFA92F,KAAK62F,MAAQA,EACb72F,KAAK82F,SAAWA,GACXD,EACD,MAAM,IAAIx/F,MAAM,yBACb,IAAKy/F,EACR,MAAM,IAAIz/F,MAAM,4BAQxB07F,EAAUzlG,UAAU2lG,YAAc,WAE9B,MAAM8D,EAAW/2F,KAAK62F,MAAMjrD,kBACtBorD,EAAeh3F,KAAK82F,SAASlrD,kBAC7BqrD,EAAW,GAoFjB,OAlFA7qG,OAAOmZ,KAAKyxF,GAAc5nF,QAAQ8nF,IAC9B,MAAMC,EAAUJ,EAASG,GACnBE,EAAcJ,EAAaE,GAE5BC,IAAWC,GAQhBhrG,OAAOmZ,KAAK6xF,EAAYtiE,OAAO1lB,QAAQoa,IACnC,IAAkD,IAA9Cp9B,OAAOmZ,KAAK4xF,EAAQriE,OAAOlxB,QAAQ4lB,GAG9BytE,EAASC,KACVD,EAASC,GAAkB,CACvBprD,WAAYsrD,EAAYtrD,WACxBC,IAAKqrD,EAAYrrD,IACjBjX,MAAO,GACPK,WAAY,KAGpB8hE,EAASC,GAAgBpiE,MAAMtL,GAAQ4tE,EAAYtiE,MAAMtL,QACtD,GAAI4tE,EAAYtiE,MAAMtL,GAAMoK,OACpBujE,EAAQriE,MAAMtL,GAAMoK,MAAO,MAGOrzB,IADvB42F,EAAQriE,MAAMtL,GAAMoK,MAAM0B,KAC5C9wB,IAAkC,IAA1BA,EAAKZ,QAAQ,iBAEoBrD,IADtB62F,EAAYtiE,MAAMtL,GAAMoK,MAAM0B,KACjD9wB,IAAkC,IAA1BA,EAAKZ,QAAQ,YAGhBqzF,EAASC,KACVD,EAASC,GAAkB,CACvBprD,WAAYsrD,EAAYtrD,WACxBC,IAAKqrD,EAAYrrD,IACjBjX,MAAO,GACPK,WAAY,KAGpB8hE,EAASC,GAAgBpiE,MAAMtL,GACzB4tE,EAAYtiE,MAAMtL,OAMpC4tE,EAAYjiE,WAAW/lB,QAAQioF,IAG3B,IAAI9lF,GAAU,EAEd,IAAK,IAAI7lB,EAAI,EAAGA,EAAIyrG,EAAQhiE,WAAW5+B,OAAQ7K,IAAK,CAChD,MAAM4rG,EAAcH,EAAQhiE,WAAWzpC,GAEvC,GAAI2rG,EAAe7hE,YAAc8hE,EAAY9hE,WACtCihE,EAAYY,EAAeviE,MAAOwiE,EAAYxiE,OAAQ,CAEzDvjB,GAAU,EACV,OAIHA,IAII0lF,EAASC,KACVD,EAASC,GAAkB,CACvBprD,WAAYsrD,EAAYtrD,WACxBC,IAAKqrD,EAAYrrD,IACjBjX,MAAO,GACPK,WAAY,KAGpB8hE,EAASC,GAAgB/hE,WAAWjyB,KAAKm0F,OAvE7CJ,EAASC,GAAkBE,IA4E5BH,GAMXlE,EAAUzlG,UAAU8+C,SAAW,SAASmrD,GACpC,MAAMC,EAAgBx3F,KAAKizF,cAE3B,IAAIwE,GAAW,EA+Df,OA7DArrG,OAAOmZ,KAAKiyF,GAAepoF,QAAQ08B,IAC/B2rD,GAAW,EACX,MAAMzlE,EAAQwlE,EAAc1rD,GAE5ByrD,EAAOxrG,EAAE,UAAW,CAAEE,KAAM+lC,EAAM+Z,MAElCwrD,EAAOxrG,EAAE,cACL,CAAEka,MAAO,6BACL+rB,MAAOA,EAAM+Z,MAKrB3/C,OAAOmZ,KAAKysB,EAAM8C,OAAO1lB,QAAQswC,IAC7B,MAAMg4C,EAAY1lE,EAAM8C,MAAM4qB,GAE9B63C,EAAOxrG,EAAE,SAAU,CAAEka,MAAO,oCAC5BsxF,EAAO/7F,MAAM,CAAEguB,KAAMkuE,EAAUluE,OAG/BkuE,EAAU9jE,MAAMxkB,QAAQ5K,IACpB,MAAMynC,EAAMznC,EAAKZ,QAAQ,KACnBqpC,EAAKzoC,EAAK4Q,OAAO62B,EAAM,GAG7B,GADAsrD,EAAOxrG,EAAE,cACgB,IAArBkhD,EAAGrpC,QAAQ,KACX2zF,EAAO/7F,MAAM,CAAEvP,KAAMghD,QAClB,CACH,MAAM0qD,EAAK1qD,EAAGlqC,MAAM,IAAK,GACnB9W,EAAO0rG,EAAG,GACVhrG,EAAQqkC,IAAQC,mBAAmB0mE,EAAG,IAE5CJ,EAAO/7F,MAAM,CAAEvP,SACfsrG,EAAO/7F,MAAM,CAAE7O,UAEnB4qG,EAAOpxF,OAEXoxF,EAAOpxF,OAIX6rB,EAAMmD,WAAW/lB,QAAQ8mB,IACjBA,EAAUpB,MAAMv+B,SAEhBghG,EAAOxrG,EAAE,aAAc,CACnBypC,UAAWU,EAAUV,UACrBvvB,MAAO,oCAGXiwB,EAAUpB,MAAM1lB,QAAQoa,IACpB+tE,EAAOxrG,EAAE,SAAU,CAAEy9B,SAChBrjB,OAEToxF,EAAOpxF,QAIfoxF,EAAOpxF,KACPoxF,EAAOpxF,OAGJsxF,I,8BCvNX,2IAOA,MAAM15E,EAASF,oBAAU6E,GAKZk1E,EAAiB,CAJN,IACA,IACA,KAQjB,MAAMC,EAQT5hG,YAAYovB,EAAgByyE,GACxB93F,KAAKq8D,GAAKh3C,EACVrlB,KAAK83F,cAAgBA,EAAcvkD,KAAOukD,EAe1C93F,KAAK+3F,2BAA6B,CAC9B,CACIC,QAAQ,EACRzmB,WAAYptD,IAAQuQ,YAAc10B,KAAK83F,cAAcxoC,KAAOtvD,KAAK83F,cAAcG,IAC/E3rF,IAvCQ,IAwCR4rF,sBAAuB/zE,IAAQuQ,YAAc,EAAM,GAEvD,CACIsjE,QAAQ,EACRzmB,WAAYvxE,KAAK83F,cAAcK,SAC/B7rF,IA5CQ,IA6CR4rF,sBAAuB,GAE3B,CACIF,QAAQ,EACRzmB,WAAYptD,IAAQuQ,YAAc10B,KAAK83F,cAAcG,IAAMj4F,KAAK83F,cAAcxoC,KAC9EhjD,IAjDQ,IAkDR4rF,sBAAuB/zE,IAAQuQ,YAAc,EAAM,IAY/D0jE,iBAAiB/nE,EAAW68D,EAAa,MACrC,IAAImL,EAAc,KAiBlB,OAdsBnL,GACdA,GACG/oE,IAAQ2hE,+BACRoH,EAAWzL,gBACXyL,EAAW7T,UAGlBgf,EAAcr4F,KAAKq8D,GAAGh3C,eAAeizE,kBAChChjE,KAAK1oC,IAAC,eAAI,UAAAA,EAAEgjD,gBAAF,mBAAYjP,aAAZ,eAAmBlG,QAASpK,IACpC68D,IACPmL,EAAcr4F,KAAKq8D,GAAGh3C,eAAeizE,kBAChChjE,KAAK1oC,IAAC,eAAI,UAAAA,EAAE+4F,cAAF,mBAAUhlD,aAAV,eAAiBz5B,MAAOgmF,EAAWqL,gBAG/CF,EAQXG,oBAAoBtL,GAChB,OAAIltF,KAAKq8D,GAAGo8B,iBAAmBvL,EAAWzL,eAC/BzhF,KAAK+3F,2BAGT7K,EAAWzL,eACZ,CAAE,CACAuW,QAAQ,EACRzmB,WAAYvxE,KAAK83F,cAAcxoC,OAEjC,CAAE,CAAE0oC,QAAQ,IAWtBU,0BAA0BxoB,GACtB,MAAMyoB,EAAYp3C,IAAUrpC,MAAMg4D,EAAY75C,KAmB9C,OAjBAsiE,EAAU3mE,MAAM5iB,QAAQ0mB,IACpB,GAAIA,EAAM7uB,OAASugC,IACf,OAEJ,IAAK1R,EAAMX,aAAeW,EAAMX,WAAW5+B,OACvC,OAEJ,IAAIqiG,EAAiB,GAErB9iE,EAAMX,WAAW,GAAGL,MAAM/xB,MAAM,KAAKqM,QAAQoa,IACzC,MAAMqvE,EAAU/iE,EAAMhB,MAAME,OAAOvF,GAAUA,EAAOvoB,GAAGxQ,aAAe8yB,GAEtEovE,EAAiBA,EAAe5+F,OAAO6+F,KAE3C/iE,EAAMhB,MAAQ8jE,IAGX,IAAIhH,sBAAsB,CAC7B3qF,KAAMipE,EAAYjpE,KAClBovB,IAAKkrB,IAAU3N,MAAM+kD,KAc7BG,kCAAkCnlE,GAG9B,GAAIxP,IAAQ40E,6BACR,OAAOplE,EAEX,MAAM0C,EAAMkrB,IAAUrpC,MAAMyb,EAAK0C,KAC3B4V,EAAM5V,EAAIrE,MAAMw/D,UAAUn/D,GAASA,EAAMprB,OAASugC,KAExD,GAAInR,EAAIrE,MAAMia,GAAKoB,OAAShX,EAAIrE,MAAMia,GAAK+sD,cAAgB3iE,EAAIrE,MAAMia,GAAKgtD,WAatE,OAVA5iE,EAAIrE,MAAM5iB,QAAQ,CAACijB,EAAO3mC,KAClB2mC,EAAMprB,OAASugC,KAAmB97C,IAAMugD,IACxC5V,EAAIrE,MAAMtmC,GAAG2hD,UAAO9sC,EACpB81B,EAAIrE,MAAMtmC,GAAGutG,eAAY14F,EAGzB81B,EAAIrE,MAAMtmC,GAAGstG,kBAAez4F,KAI7B,IAAIqxF,sBAAsB,CAC7B3qF,KAAM0sB,EAAK1sB,KACXovB,IAAKkrB,IAAU3N,MAAMvd,KAK7BA,EAAIrE,MAAMia,GAAKoB,KAAO,CAClB,CACInmC,GAlLQ,IAmLR+sB,UAAW,QAEf,CACI/sB,GArLQ,IAsLR+sB,UAAW,QAEf,CACI/sB,GAxLQ,IAyLR+sB,UAAW,SAOnB,MAAMilE,EAAgB/0E,IAAQuQ,aAAevQ,IAAQ0hD,qBAAqB,IACnE,QAAO+xB,EAAez0F,KAAK,KAC3B,YAAWy0F,EAAez0F,KAAK,KAOtC,OAJAkzB,EAAIrE,MAAMia,GAAK+sD,aAAe,CAC1BrsG,MAAOusG,GAGJ,IAAItH,sBAAsB,CAC7B3qF,KAAM0sB,EAAK1sB,KACXovB,IAAKkrB,IAAU3N,MAAMvd,KAU7B82D,SAASD,EAAY3G,GACjB,MAAM5lD,EAAQusD,EAAWiM,WAEzB,GAAI5S,EAAa,CAGb,MAAM6S,EAAkB,CACpBnlE,UAAWiE,IAAeK,SAC1BwV,QAAS,CAAEm/C,EAAWvN,qBACtB0Z,cAAe,IAGdl1E,IAAQuQ,cACT0kE,EAAgBC,cAAgBr5F,KAAKw4F,oBAAoBtL,IAE7DltF,KAAKq8D,GAAGh3C,eAAei0E,eAAe34D,EAAOy4D,QAK7Cp5F,KAAKq8D,GAAGh3C,eAAe8nE,SAASxsD,GASxC8yD,eAAevG,GACX,MAAM78D,EAAY68D,EAAWplD,UACvBnH,EAAQusD,EAAWiM,WACnBd,EAAcr4F,KAAKo4F,iBAAiB/nE,GAE1C,OAAKgoE,GAGLt6E,EAAO9Y,MAAO,GAAEjF,KAAKq8D,aAAa6wB,KAE3BmL,EAAY1S,OAAOwM,aAAaxxD,IAJ5B7C,QAAQE,OAAO,IAAI3mC,MAAO,yBAAwBg5B,gBAejEkpE,gCAAgCrM,GAE5B,GAAI/oE,IAAQC,gBACR,OAAO,KAGX,MAAMo1E,EAA8B,IAG9B,OAAE7gE,EAAS,KAAQu0D,EAAWhqD,cAEpC,IAAK,MAAMu2D,KAAYz5F,KAAK+3F,2BACxByB,EAA4Bt2F,KAAKy1B,EAAS8gE,EAASvB,uBAGvD,OAAOsB,EAQXhG,gBAAgBtG,GACZ,MAAM78D,EAAY68D,EAAWplD,UACvBuwD,EAAcr4F,KAAKo4F,iBAAiB/nE,EAAW68D,GAErD,OAAKmL,GAILt6E,EAAO9Y,MAAO,GAAEjF,KAAKq8D,eAAe6wB,KAE7BmL,EAAY1S,OAAOwM,aAAa,OAL5Br0D,QAAQE,OAAO,IAAI3mC,MAAO,yBAAwBg5B,gBAcjE8hE,aAAaC,EAAUC,GACnB,GAAID,GAAYC,EAAU,CACtB,MAAMhiE,EAAYgiE,EAASvqD,UACrBliB,EAASysE,EAAS1S,oBAMxB,IAAK/5D,EAID,OAHA5lB,KAAKq8D,GAAG74B,YAAYtb,OAAOkqE,EAAS/uD,OACpCrjC,KAAKq8D,GAAG74B,YAAY/d,IAAI4sE,EAAShvD,MAAOgvD,GAEjCv0D,QAAQC,UAGnB,MAAMs6D,EAAcr4F,KAAKo4F,iBAAiB/nE,EAAW+hE,GAC/CzxD,EAAQ0xD,EAAS8G,WAEvB,OAAKd,GAGLt6E,EAAO9Y,MAAO,GAAEjF,KAAKq8D,gBAAgB+1B,UAAiBC,KAE/CgG,EAAY1S,OAAOwM,aAAaxxD,GAClCjD,KAAK,KACF,MAAMlU,EAAOxpB,KAAKq8D,GAAGq9B,WAAWntG,IAAI6lG,EAAS/uD,OAE7CrjC,KAAKq8D,GAAG74B,YAAYtb,OAAOkqE,EAAS/uD,OACpCrjC,KAAKq8D,GAAGq9B,WAAWxxE,OAAOkqE,EAAS/uD,OACnCrjC,KAAKq8D,GAAGs9B,cAAgB35F,KAAKq8D,GAAGs9B,cAAc3kE,OAAOvnC,GAAKA,IAAMm4B,GAChE5lB,KAAKq8D,GAAG74B,YAAY/d,IAAI4sE,EAAShvD,MAAOgvD,GAExCryF,KAAKq8D,GAAGs9B,cAAcz2F,KAAK0iB,GAC3B5lB,KAAKq8D,GAAGq9B,WAAWj0E,IAAI4sE,EAAShvD,MAAO7Z,MAdpCsU,QAAQE,OAAO,IAAI3mC,MAAM,yBAgBjC,OAAI+6F,IAAaC,EACbryF,KAAKwzF,gBAAgBpB,GACvB10D,KAAK,KACF,MAAMrN,EAAY+hE,EAAStqD,UACrBuwD,EAAcr4F,KAAKo4F,iBAAiB/nE,GAItCgoE,IACAA,EAAYpkE,UAAYiE,IAAeG,UAI3Cr4B,KAAKq8D,GAAG74B,YAAYtb,OAAOkqE,EAAS/uD,OACpCrjC,KAAKq8D,GAAGq9B,WAAWxxE,OAAOkqE,EAAS/uD,SAEpCgvD,IAAaD,EACbpyF,KAAKyzF,eAAepB,GACtB30D,KAAK,KACF,MAAMrN,EAAYgiE,EAASvqD,UACrBuwD,EAAcr4F,KAAKo4F,iBAAiB/nE,EAAWgiE,GAIjDgG,IACAA,EAAYpkE,UAAYiE,IAAeK,UAS3C,OAJgBpU,IAAQ40E,6BAClBj7D,QAAQC,UACR/9B,KAAK45F,aAAavH,IAGnB30D,KAAK,KAEF19B,KAAKq8D,GAAG74B,YAAY/d,IAAI4sE,EAAShvD,MAAOgvD,QAK5Dt0E,EAAO7Y,KAAQlF,KAAKq8D,GAAP,oEAENv+B,QAAQC,WAYnBg2D,uBAAuBiE,GACnBh4F,KAAKuvF,uBAAuB/nD,IAAiBwwD,GASjD4B,aAAaj5D,GAAO,QAChB,MAAMtQ,EAAYsQ,EAAMmH,UAClBuwD,EAAcr4F,KAAKo4F,iBAAiB/nE,EAAWsQ,GAC/CotC,EAAasqB,SAAH,UAAGA,EAAa1S,cAAhB,aAAG,EAAqBkU,gBAKxC,OAAK9rB,SAAD,UAACA,EAAY+rB,iBAAb,aAAC,EAAuBvjG,SAG5Bw3E,EAAW+rB,UAAY95F,KAAKw4F,oBAAoB73D,GAEzC03D,EAAY1S,OAAOoU,cAAchsB,IAJ7BjwC,QAAQC,UAevBwxD,uBAAuBl/D,EAAW2nE,GAC9B,MAAMgC,EAAeh6F,KAAKq8D,GAAGh3C,eAAeizE,kBACvCtjE,OAAOpoC,GAAKA,EAAEgjD,UAAYhjD,EAAEgjD,SAASjP,OAAS/zC,EAAEgjD,SAASjP,MAAMlG,OAASpK,GACvEmT,EAAcxjC,KAAKq8D,GAAG90B,eAAelX,GAE3CtS,EAAO7Y,KAAM,GAAElF,KAAKq8D,MAAM27B,EAAS,WAAa,gBAAgB3nE,qBAChE2pE,EAAa5qF,QAAQ,CAACipF,EAAapsD,KAC3B+rD,EAEY,IAAR/rD,GAAazI,EAAYjtC,OACzB8hG,EAAYpkE,UAAYiE,IAAeK,SAEvC8/D,EAAYpkE,UAAYiE,IAAeG,SAG3CggE,EAAYpkE,UAAYiE,IAAeC,WAcnD87D,uBAAuB+D,GACnBh4F,KAAKuvF,uBAAuB/nD,IAAiBwwD,GAWjDiC,0BAA0BlsB,GACtB,KAAM5pD,IAAQub,iBAAmBquC,EAAW+rB,WAAa1jG,MAAMC,QAAQ03E,EAAW+rB,YAC9E,OAGEA,SAIgB/rB,EAAW+rB,WAJJI,MAAMT,QAAsD,IAAnCA,EAASvB,uBACpDuB,EAASvB,wBAA0B4B,EAAU,GAAG5B,wBAIvDnqB,EAAW+rB,UAAU1qF,QAAQ,CAACqqF,EAAUxtD,KACpCwtD,EAASvB,sBAAwBl4F,KAAK+3F,2BAA2B9rD,GAAKisD,4B,wOCte/E,SAASiC,EAAajuB,EAAMxnE,EAAW,iBAC1C,MAAM01F,EAAY9uG,OAAO00F,IAAIC,gBAAgB/T,GAGvCx0E,EAAI2D,SAASwF,cAAc,KAEjCnJ,EAAE8F,MAAQ,gBACV9F,EAAEu8D,KAAOmmC,EACT1iG,EAAE2iG,SAAW31F,EACbrJ,SAASyc,KAAKlX,YAAYlJ,GAC1BA,EAAE4iG,QACFj/F,SAASyc,KAAKqH,YAAYznB,G,qCCjB9B,IAOI6iG,EACAC,EARAr3C,EAAUh4D,EAAOD,QAAU,GAU/B,SAASuvG,IACL,MAAM,IAAIpjG,MAAM,mCAEpB,SAASqjG,IACL,MAAM,IAAIrjG,MAAM,qCAsBpB,SAASsjG,EAAWC,GAChB,GAAIL,IAAqBhwF,WAErB,OAAOA,WAAWqwF,EAAK,GAG3B,IAAKL,IAAqBE,IAAqBF,IAAqBhwF,WAEhE,OADAgwF,EAAmBhwF,WACZA,WAAWqwF,EAAK,GAE3B,IAEI,OAAOL,EAAiBK,EAAK,GAC/B,MAAMvhG,GACJ,IAEI,OAAOkhG,EAAiB1uG,KAAK,KAAM+uG,EAAK,GAC1C,MAAMvhG,GAEJ,OAAOkhG,EAAiB1uG,KAAKmU,KAAM46F,EAAK,MAvCnD,WACG,IAEQL,EADsB,mBAAfhwF,WACYA,WAEAkwF,EAEzB,MAAOphG,GACLkhG,EAAmBE,EAEvB,IAEQD,EADwB,mBAAjB/sF,aACcA,aAEAitF,EAE3B,MAAOrhG,GACLmhG,EAAqBE,GAjB7B,GAwEA,IAEIG,EAFAC,EAAQ,GACRC,GAAW,EAEXC,GAAc,EAElB,SAASC,IACAF,GAAaF,IAGlBE,GAAW,EACPF,EAAatkG,OACbukG,EAAQD,EAAa7gG,OAAO8gG,GAE5BE,GAAc,EAEdF,EAAMvkG,QACN2kG,KAIR,SAASA,IACL,IAAIH,EAAJ,CAGA,IAAIntF,EAAU+sF,EAAWM,GACzBF,GAAW,EAGX,IADA,IAAI5iG,EAAM2iG,EAAMvkG,OACV4B,GAAK,CAGP,IAFA0iG,EAAeC,EACfA,EAAQ,KACCE,EAAa7iG,GACd0iG,GACAA,EAAaG,GAAYjzF,MAGjCizF,GAAc,EACd7iG,EAAM2iG,EAAMvkG,OAEhBskG,EAAe,KACfE,GAAW,EAnEf,SAAyBI,GACrB,GAAIX,IAAuB/sF,aAEvB,OAAOA,aAAa0tF,GAGxB,IAAKX,IAAuBE,IAAwBF,IAAuB/sF,aAEvE,OADA+sF,EAAqB/sF,aACdA,aAAa0tF,GAExB,IAEWX,EAAmBW,GAC5B,MAAO9hG,GACL,IAEI,OAAOmhG,EAAmB3uG,KAAK,KAAMsvG,GACvC,MAAO9hG,GAGL,OAAOmhG,EAAmB3uG,KAAKmU,KAAMm7F,KAgD7CC,CAAgBxtF,IAiBpB,SAASytF,EAAKT,EAAKp8E,GACfxe,KAAK46F,IAAMA,EACX56F,KAAKwe,MAAQA,EAYjB,SAAS8C,KA5BT6hC,EAAQm4C,SAAW,SAAUV,GACzB,IAAIl4D,EAAO,IAAItsC,MAAM+K,UAAU5K,OAAS,GACxC,GAAI4K,UAAU5K,OAAS,EACnB,IAAK,IAAI7K,EAAI,EAAGA,EAAIyV,UAAU5K,OAAQ7K,IAClCg3C,EAAKh3C,EAAI,GAAKyV,UAAUzV,GAGhCovG,EAAM53F,KAAK,IAAIm4F,EAAKT,EAAKl4D,IACJ,IAAjBo4D,EAAMvkG,QAAiBwkG,GACvBJ,EAAWO,IASnBG,EAAK/tG,UAAUya,IAAM,WACjB/H,KAAK46F,IAAIn8E,MAAM,KAAMze,KAAKwe,QAE9B2kC,EAAQo4C,MAAQ,UAChBp4C,EAAQh/B,SAAU,EAClBg/B,EAAQq4C,IAAM,GACdr4C,EAAQs4C,KAAO,GACft4C,EAAQ8gB,QAAU,GAClB9gB,EAAQu4C,SAAW,GAInBv4C,EAAQn9B,GAAK1E,EACb6hC,EAAQ/e,YAAc9iB,EACtB6hC,EAAQ7Q,KAAOhxB,EACf6hC,EAAQvQ,IAAMtxB,EACd6hC,EAAQh9B,eAAiB7E,EACzB6hC,EAAQl7B,mBAAqB3G,EAC7B6hC,EAAQx7B,KAAOrG,EACf6hC,EAAQ9Q,gBAAkB/wB,EAC1B6hC,EAAQ5Q,oBAAsBjxB,EAE9B6hC,EAAQ/Q,UAAY,SAAUnmD,GAAQ,MAAO,IAE7Ck3D,EAAQE,QAAU,SAAUp3D,GACxB,MAAM,IAAIoL,MAAM,qCAGpB8rD,EAAQw4C,IAAM,WAAc,MAAO,KACnCx4C,EAAQy4C,MAAQ,SAAUhsC,GACtB,MAAM,IAAIv4D,MAAM,mCAEpB8rD,EAAQ04C,MAAQ,WAAa,OAAO,I,o3BC3IpC,MAAM99E,EAASb,IAAOW,UAAU6E,GAehC,SAASo5E,EAAkC30F,GACvC,MAAMlK,EAAa,CACf,gBACIkK,EAAQw2B,QAAQ7F,SAAS,SAC7B,gBACI3wB,EAAQw2B,QAAQ7F,SAAS,SAC7B,yBACI3wB,EAAQw2B,QAAQ7F,SAAS,YAOjC,OAJI76B,EAAW8+F,kBACX9+F,EAAWwiC,WAAat4B,EAAQs4B,YAG7BxiC,EAiCI++F,UAVf,SAAkC7wG,GAC9B,MAC4C,iBAAjCG,OAAOk0F,sBACRpzF,OAAO+zC,OAAO,GAAI70C,OAAOk0F,sBAAuBr0F,GAChDA,EAMC6wG,CAAyB,CAEpC/3B,QAAS,kBAETg4B,oBASAC,2BACA96D,QAAS,CACL29C,qBACAiD,0BACAma,2BACAhZ,kCACAiZ,mCAEJC,UAAW,CACPpjB,4BAA6B1E,IAC7B+nB,UAAWC,IACXC,WAAYC,EACZC,oBAAqBC,GAEzBhsD,OAAQ,CACJ/pB,WAAYI,EACZzS,WAAYkiC,EACZmmD,UAAWC,EACXl8D,MAAO+2C,EACPn6C,aAAcu/D,EACdC,kBAAmBC,EACnBr5B,QAASs5B,GAEbzlF,OAAQ,CACJoP,WAAYs2E,EACZ3oF,WAAYmiC,EACZ/V,MAAOxC,GAEXg/D,WAAY,CACR/yE,qBAEJgzE,UAAWlgF,IAAOK,OAClBggB,aAAc8/D,IACdn4E,UAAWzB,IAAWyB,UACtBw4C,WAAWv2D,EAAU,IACjBnH,KAAK4K,KAAKzD,IAEdyD,KAAKzD,EAAU,IACXA,E,sUAAU,CAAH,GAAO27D,IAAkB37D,GAChCm2F,IAAS1yF,KAAKzD,EAAQs3C,iBACtBh7B,IAAW7Y,KAAKzD,GAIX7b,OAAO4pD,kBACR5pD,OAAO4pD,gBAAkB,KAGU,IAAnC/tC,EAAQo2F,yBACRx/E,EAAO5Y,KAAK,kCACZnF,KAAKklB,UAAUuC,WAGftgB,EAAQq2F,4BACR/gE,IAAqB1uB,WACjB/N,KAAKy9F,wBAAwBvwG,KAAK8S,OAK1C,MAAM09F,EAASv2F,EAAQ6uC,eAEvB,GAAI0nD,GAAUtxG,OAAOmZ,KAAKm4F,GAAQnnG,OAAS,EAAG,CAC1C,MAAMonG,EAAY,GAElB,IAAK,MAAMp8F,KAAQm8F,EACXA,EAAOnwG,eAAegU,KACtBo8F,EAAUp8F,GAAQm8F,EAAOn8F,IAIjCo8F,EAAUz2F,GAAK,kBACfuc,IAAWqH,QAAQle,KAAKwL,UAAUulF,IAGtC,GAAI39F,KAAKikE,QAAS,CACd,MAAM05B,EAAY,CACdz2F,GAAI,oBACJgsB,UAAW,0BACX+wC,QAASjkE,KAAKikE,SAGlBxgD,IAAWqH,QAAQle,KAAKwL,UAAUulF,IAGtC,OAAOr6D,IAAI14B,KAAKzD,IAQpB06B,wBAAuB,IACZyB,IAAIzB,0BAWf+7D,kBAAiB,IACNt6D,IAAIs6D,oBAGf1/E,YAAYrZ,GACRqY,IAAOgB,YAAYrZ,IAWvBmZ,gBAAgBnZ,EAAOqC,GACnBgW,IAAOc,gBAAgBnZ,EAAOqC,IASlC22F,sBAAsBC,GAClB5gF,IAAOO,mBAAmBqgF,IAS9BC,yBAAyBD,GACrB5gF,IAAOS,sBAAsBmgF,IAUjCE,oBAAoB72F,GAChB+V,IAAOU,iBAAiBzW,IAyC5BmtE,kBAAkBntE,EAAU,GAAI82F,GAC5B,IAAIC,GAAmB,EAEvB,MAAM,iCAAEC,EAAF,qBAAoCC,GAAyCj3F,EAAhBk3F,EAAnE,EAAmFl3F,EAAnF,6DAqBA,OApB6Bg3F,GAAoCF,KAEpC36D,IAAItB,2CAC7Bq7D,IAAkBiB,UACdxB,6BACA34E,IAAQs5C,WACL2gC,GACP9yG,OAAOif,WAAW,KACT2zF,GACDb,IAAkBiB,UAAUxB,wBApRR,KAyR3BxxG,OAAO4pD,kBACR5pD,OAAO4pD,gBAAkB,IAE7B5pD,OAAO4pD,gBAAgB,2BACjB5pD,OAAOusD,YAAY1jC,MAElBmvB,IAAIxE,+BAA+Bu/D,GACrC3gE,KAAKmK,IAWF,GAVAq2D,GAAmB,EAEnB5yG,OAAO4pD,gBAAgB,yBACjB5pD,OAAOusD,YAAY1jC,MAEzBsP,IAAWuI,cACPiE,YACI,UACA6rE,EAAkCuC,MAErC/6D,IAAIn8B,QAAQ2d,mBACb,IAAK,IAAIp5B,EAAI,EAAGA,EAAIm8C,EAAOtxC,OAAQ7K,IAAK,CACpC,MAAMi1C,EAAQkH,EAAOn8C,GACf6yG,EAAU59D,EAAMg/C,oBAElBh/C,EAAMmH,YAAcN,MACpB/jB,IAAWkC,gBAAgB44E,EACvB59D,EAAMqI,cAAc97C,KAAKyzC,IAC7BA,EAAMnD,iBACFk6C,sBACA,KACIj0D,IAAW0E,eAAeo2E,MAO9C,MAAMC,EACAl7D,IAAIvB,oCAEV,GAAIy8D,EACA,IAAK,IAAI9yG,EAAI,EAAGA,EAAIm8C,EAAOtxC,OAAQ7K,IAAK,CACtBm8C,EAAOn8C,GAEf+yG,+BACFD,GAMZ,IAAK,MAAM79D,KAASkH,EACZlH,EAAM15B,OAASugC,KACQ,YAApB7G,EAAMG,WACT9gC,KAAK0+F,0BAA0B/9D,EAAMA,MAAO,UAIpD,OAAOkH,IAEVtL,MAAMv3B,IAGH,GAFAk5F,GAAmB,EAEfl5F,EAAM/Y,OAASkyC,8BAA8C,CAI7D,MAAMw/D,EAAY,CACdz2F,GAAI,8BACJzC,QAASO,EAAMP,SAGnBgf,IAAWqH,QAAQle,KAAKwL,UAAUulF,IAElCl6E,IAAWuI,cACPiE,YACI,UACA,CACIzgB,OAAQ,0CAEjB,GAAIxK,EAAM/Y,OAASkyC,YAA4B,CAElD,MAAMw/D,EAAY,CACdz2F,GAAI,2BACJ6I,OAAQ/K,EAAMqlB,IAAIsT,SAGtBla,IAAWqH,QAAQle,KAAKwL,UAAUulF,IAElC,MAAM1gG,EACA6+F,EAAkC30F,GAExClK,EAAWuS,OAAS,mBACpBvS,EAAW0gC,QAAU34B,EAAMqlB,IAAIsT,QAAQx6B,KAAK,KAC5CsgB,IAAWuI,cACPiE,YAAwB,QAAShzB,QAClC,CAEHwmB,IAAW0G,uBAAuBnlB,GAElC,MAAM/H,EACA6+F,EAAkC30F,GAExClK,EAAWuS,OAASxK,EAAM/Y,KAC1Bw3B,IAAWuI,cACPiE,YAAwB,QAAShzB,IAMzC,OAHA3R,OAAO4pD,gBAAgB,yBACjB5pD,OAAOusD,YAAY1jC,MAElB2pB,QAAQE,OAAOh5B,MAoBlC25F,sBAAqB,CAACC,EAAoBC,EAAYC,IAC3CC,IAAgB/xG,OAAO4xG,EAAoBC,EAAYC,GASlErf,iBAAgB,IACL,IAAIuf,IAQfC,qBAAoB,IACTA,cAWX/hE,wBAII,OAHAnf,EAAO5Y,KAAK,yFAGLnF,KAAKu9B,aAAaL,yBAY7Bb,wBAAwBoF,GAIpB,OAHA1jB,EAAO5Y,KAAK,2FAGLnF,KAAKu9B,aAAalB,wBAAwBoF,IAUrDy9D,gCACI,OAAOl/F,KAAKu9B,aAAa2hE,iCAQ7BC,uBAAsB,IACX17E,IAAWoB,oBACXu6E,IAAoBC,wBAS/BliE,iBAAiB3xB,GACbuS,EAAO5Y,KAAK,oFAEZnF,KAAKu9B,aAAaJ,iBAAiB3xB,IAWvCiyF,wBAAwBh5F,EAASgrB,EAAQ6vE,EAAQC,EAAOv6F,GACpD+Y,EAAO/Y,MACF,mBAAkBP,EAClB,WAAUgrB,EACV,SAAQ6vE,EACR,WAAUC,EACX,eAAgBv6F,GACpBye,IAAWkI,kBAAkB3mB,IASjCw6F,gBAAe,SAAE/lB,IACbh2D,IAAWuI,cACPyzE,IAA4C,CACxChmB,cAERF,IAAYG,kBAAkB,CAAED,cAUpCilB,0BAA0B/9D,EAAO++D,GACzB,gBAAiB/+D,GACjBA,EAAMg/D,YAAcD,EAChB/+D,EAAMg/D,cAAgBD,GACtB3hF,EAAO9Y,MAAM,oCAGjB8Y,EAAO9Y,MAAM,yDAIrB26F,gBAQAC,KAAM,CACFC,aACAz7E,eACAF,gB,wJCjmBD,MAAM47E,EACF,QADEA,EAEM,gBCwDNhgB,EAAoBC,IAAIC,gBAAgB,IAAIC,KAAK,CArBhD,8ZAqB0D,CAAEj5E,KAAM,4BC1CjE,MAAM+4F,EA2BjB/pG,YAAYgqG,EAAe94F,GAQuE,WAP9FnH,KAAK8/D,SAAW34D,EAEZnH,KAAK8/D,SAASogC,kBAAkBC,iBAAmBJ,IACnD//F,KAAKogG,cAAgB/kG,SAASwF,cAAc,OAC5Cb,KAAKogG,cAAcC,YAAc,YACjCrgG,KAAKogG,cAActhF,IAAM9e,KAAK8/D,SAASogC,kBAAkBI,eAEzDtgG,KAAK8/D,SAASogC,kBAAkBC,iBAAmBJ,KACnD//F,KAAKugG,cAAgBllG,SAASwF,cAAc,SAC5Cb,KAAKugG,cAAc3f,UAAW,EAC9B5gF,KAAKugG,cAAcrkE,UAAnB,UAA+Bl8B,KAAK8/D,gBAApC,iBAA+B,EAAeogC,yBAA9C,iBAA+B,EAAkCI,qBAAjE,aAA+B,EAAiD16E,QAEpF5lB,KAAKwgG,OAASP,EACdjgG,KAAKygG,wBAA0BzgG,KAAK8/D,SAAShnC,MAAQ94B,KAAK8/D,SAASnnC,OAGnE34B,KAAK0gG,kBAAoB1gG,KAAK0gG,kBAAkBxzG,KAAK8S,MAGrDA,KAAK2gG,qBAAuBtlG,SAASwF,cAAc,UACnDb,KAAK2gG,qBAAqBngB,WAAW,MACrCxgF,KAAK4gG,mBAAqBvlG,SAASwF,cAAc,SAUrD6/F,kBAAkB/tF,GD7CM,IC8ChBA,EAAShZ,KAAKuN,IACdlH,KAAK6gG,cASbC,oBACI9gG,KAAK+gG,iBAAiBC,yBAA2B,OAM7ChhG,KAAK8/D,SAASogC,kBAAkBC,iBAAmBJ,EACnD//F,KAAK+gG,iBAAiB/rE,OAAS,YAE/Bh1B,KAAK+gG,iBAAiB/rE,OAAS,YAGnCh1B,KAAK+gG,iBAAiB7f,UAClBlhF,KAAKihG,wBACL,EACA,EACAjhG,KAAK8/D,SAAShnC,MACd94B,KAAK8/D,SAASnnC,OACd,EACA,EACA34B,KAAK4gG,mBAAmB9nE,MACxB94B,KAAK4gG,mBAAmBjoE,QAE5B34B,KAAK+gG,iBAAiBC,yBAA2B,YACjDhhG,KAAK+gG,iBAAiB/rE,OAAS,OAK/Bh1B,KAAK+gG,iBAAiB7f,UAAUlhF,KAAK4gG,mBAAoB,EAAG,GAK5D5gG,KAAK+gG,iBAAiBC,yBAA2B,mBAC7ChhG,KAAK8/D,SAASogC,kBAAkBC,iBAAmBJ,GACnD//F,KAAK+gG,iBAAiB7f,UAClBlhF,KAAKogG,cACL,EACA,EACApgG,KAAK4gG,mBAAmB9nE,MACxB94B,KAAK4gG,mBAAmBjoE,QAG5B34B,KAAK8/D,SAASogC,kBAAkBC,iBAAmBJ,EACnD//F,KAAK+gG,iBAAiB7f,UAClBlhF,KAAKugG,cACL,EACA,EACAvgG,KAAKkhG,wBAAwBpoE,MAC7B94B,KAAKkhG,wBAAwBvoE,SAGjC34B,KAAK+gG,iBAAiB/rE,OAAU,QAAOh1B,KAAK8/D,SAASogC,kBAAkBiB,eACvEnhG,KAAK+gG,iBAAiB7f,UAAUlhF,KAAK4gG,mBAAoB,EAAG,IASpEQ,eACIphG,KAAKwgG,OAAOa,gBACZ,MAAMC,EAAqBthG,KAAKwgG,OAAOe,yBAA2B,EAElE,IAAK,IAAI71G,EAAI,EAAGA,EAAIsU,KAAKygG,wBAAyB/0G,IAAK,CACnD,MAAM81G,EAAaxhG,KAAKwgG,OAAOiB,QAAQH,EAA0B,EAAJ51G,GACvDg2G,EAAS1hG,KAAKwgG,OAAOiB,QAAQH,EAA0B,EAAJ51G,EAAS,GAC5DumC,EAAQ7mB,KAAKytB,IAAI2oE,EAAYE,GAC7BC,EAAgBv2F,KAAKw2F,IAAIJ,EAAavvE,GACtC4vE,EAAYz2F,KAAKw2F,IAAIF,EAASzvE,GAGpCjyB,KAAK8hG,kBAAkBnoG,KAAU,EAAJjO,EAAS,GAAM,IAAMm2G,GAAcF,EAAgBE,GAEpF7hG,KAAK+hG,qBAAqBC,aAAahiG,KAAK8hG,kBAAmB,EAAG,GAStEjB,cAAc,UACV,MAAMoB,EAAiB,UAAGjiG,KAAK8/D,gBAAR,iBAAG,EAAeogC,yBAAlB,iBAAG,EAAkCI,qBAArC,aAAG,EAAiD3/D,MAEvEshE,IACAjiG,KAAKkhG,wBAA0Be,EAAkB/+D,YAAc++D,EAAkB/+D,cAC3E++D,EAAkB5hE,kBAE5BrgC,KAAKkiG,eACLliG,KAAKohG,eACLphG,KAAK8gG,oBAEL9gG,KAAKmiG,sBAAsBvgB,YAAY,CACnC16E,GD9Ke,EC+Kf26E,OAAQ,IAAO,KASvBqgB,eACIliG,KAAK+hG,qBAAqB7gB,UACtBlhF,KAAK4gG,mBACL,EACA,EACA5gG,KAAK4gG,mBAAmB9nE,MACxB94B,KAAK4gG,mBAAmBjoE,OACxB,EACA,EACA34B,KAAK8/D,SAAShnC,MACd94B,KAAK8/D,SAASnnC,QAGlB,MAAMypE,EAAYpiG,KAAK+hG,qBAAqBnf,aACxC,EACA,EACA5iF,KAAK8/D,SAAShnC,MACd94B,KAAK8/D,SAASnnC,QAEZ0pE,EAAoBriG,KAAKwgG,OAAO8B,wBAA0B,EAEhE,IAAK,IAAI52G,EAAI,EAAGA,EAAIsU,KAAKygG,wBAAyB/0G,IAC9CsU,KAAKwgG,OAAOiB,QAAQY,EAAyB,EAAJ32G,GAAU02G,EAAUzoG,KAAS,EAAJjO,GAAS,IAC3EsU,KAAKwgG,OAAOiB,QAAQY,EAAyB,EAAJ32G,EAAS,GAAK02G,EAAUzoG,KAAU,EAAJjO,EAAS,GAAK,IACrFsU,KAAKwgG,OAAOiB,QAAQY,EAAyB,EAAJ32G,EAAS,GAAK02G,EAAUzoG,KAAU,EAAJjO,EAAS,GAAK,IAW7FwzF,UAAUsC,GACN,OAAOA,EAAgBC,gBAAgD,WAA9BD,EAAgB1gD,UAS7Ds+C,YAAYx5D,GACR5lB,KAAKmiG,sBAAwB,IAAIxgB,OAAO5B,EAAmB,CAAE9zF,KAAM,uBACnE+T,KAAKmiG,sBAAsBrmF,UAAY9b,KAAK0gG,kBAC5C,MAAMrgB,EAAkBz6D,EAAOsU,iBAAiB,IAC1C,OAAEvB,EAAF,UAAU4yC,EAAV,MAAqBzyC,GACrBunD,EAAgBn9C,YAAcm9C,EAAgBn9C,cAAgBm9C,EAAgBhgD,iBAsBpF,OApBArgC,KAAK8hG,kBAAoB,IAAIS,UAAUviG,KAAK8/D,SAAShnC,MAAO94B,KAAK8/D,SAASnnC,QAC1E34B,KAAKihG,wBAA0B5lG,SAASwF,cAAc,UACtDb,KAAKihG,wBAAwBnoE,MAAQ94B,KAAK8/D,SAAShnC,MACnD94B,KAAKihG,wBAAwBtoE,OAAS34B,KAAK8/D,SAASnnC,OACpD34B,KAAK+hG,qBAAuB/hG,KAAKihG,wBAAwBzgB,WAAW,MAEpExgF,KAAK2gG,qBAAqB7nE,MAAQxgB,SAASwgB,EAAO,IAClD94B,KAAK2gG,qBAAqBhoE,OAASrgB,SAASqgB,EAAQ,IACpD34B,KAAK+gG,iBAAmB/gG,KAAK2gG,qBAAqBngB,WAAW,MAC7DxgF,KAAK4gG,mBAAmB9nE,MAAQxgB,SAASwgB,EAAO,IAChD94B,KAAK4gG,mBAAmBjoE,OAASrgB,SAASqgB,EAAQ,IAClD34B,KAAK4gG,mBAAmBhgB,UAAW,EACnC5gF,KAAK4gG,mBAAmB1kE,UAAYtW,EACpC5lB,KAAK4gG,mBAAmB4B,aAAe,KACnCxiG,KAAKmiG,sBAAsBvgB,YAAY,CACnC16E,GD3PW,EC4PX26E,OAAQ,IAAO,MAIhB7hF,KAAK2gG,qBAAqB7e,cAAcxpE,SAASizD,EAAW,KAQvEuU,aACI9/E,KAAKmiG,sBAAsBvgB,YAAY,CACnC16E,GDhQiB,ICmQrBlH,KAAKmiG,sBAAsBpgB,a,oIClRnC,MAAM0gB,EACO,+CADPA,EAEQ,+CAGRC,EAAyB,CAC3BC,QAAS,CACLhqE,OAAQ,GACRG,MAAO,KAEX8pE,SAAU,CACNjqE,OAAQ,IACRG,MAAO,MAYR32B,eAAei6F,EAA8B8D,GAChD,IAAKje,iBAAiB30F,UAAU41C,cAAgB++C,iBAAiB30F,UAAU+yC,eACvE,MAAM,IAAIhpC,MAAM,8CAEpB,IAAIwrG,EAGAA,EADAC,UAAkBC,WACHC,+BAEAC,qBAGnB,MAAMC,EAAoBL,EAAOM,8BAC3BC,QAAsBlhC,MAAM4gC,UAAkBC,KAAON,EAAkBA,GAE7E,IAAKW,EAAcC,GACf,MAAM,IAAIhsG,MAAM,oCAGpB,MAAM4oG,QAAcmD,EAAc95B,cAElCu5B,EAAOS,OAAO79E,IAAI,IAAI++B,WAAWy7C,GAAQiD,GAEzCL,EAAOU,WAAWtD,EAAM33C,YAExB,MAAMnhD,E,sUAAU,CAAH,GACN27F,UAAkBC,KAAOL,EAAuBE,SAAWF,EAAuBC,QAD5E,CAETzC,sBAGJ,OAAO,IAAIF,EAA4B6C,EAAQ17F,GAG5ChF,eAAeqhG,IAClBn/E,aAAWC,WAAW,iCACtBD,aAAWC,WAAW,wC,iGC3CX,MAAMm/E,EAqCjBxtG,YAAYytG,G,aA5BU,G,EA4Ba,gB,EAAA,M,sFAG/B,IAMI,GALA1jG,KAAK2jG,eAAiBD,EAGtB1jG,KAAK4jG,cAAgB5jG,KAAK2jG,eAAeE,QAxDjBC,OA0DnB9jG,KAAK4jG,cACN,MAAMvsG,MAAM,8CAKhB,GAFA2I,KAAK+jG,eAAiB/jG,KAAK2jG,eAAeE,QA9DlBC,OAgEnB9jG,KAAK+jG,eAEN,MADAL,EAAcM,MAAMhkG,KAAK4jG,eACnBvsG,MAAM,+CAMhB2I,KAAKikG,sBAAwBjkG,KAAK4jG,cAAgB,EAElD5jG,KAAK8yD,SAAW9yD,KAAK2jG,eAAeO,kBACtC,MAAOl/F,GAGL,MADAhF,KAAKmkG,wBACCn/F,GAUdo/F,2BAA2BC,GACvBrkG,KAAK2jG,eAAelC,QAAQh8E,IAAI4+E,EAAWrkG,KAAKikG,uBASpDK,mBAAmBC,GACf,IAAK,MAAQtvE,EAAOtoC,KAAW43G,EAAS1+C,UACpC0+C,EAAStvE,GAAiB,MAARtoC,EAU1Bw3G,wBAEQnkG,KAAK4jG,gBACL5jG,KAAK2jG,eAAeK,MAAMhkG,KAAK4jG,eAC/B5jG,KAAK4jG,cAAgB,MAGrB5jG,KAAK+jG,iBACL/jG,KAAK2jG,eAAeK,MAAMhkG,KAAK+jG,gBAC/B/jG,KAAK+jG,eAAiB,MAGtB/jG,KAAK8yD,WACL9yD,KAAK2jG,eAAea,iBAAiBxkG,KAAK8yD,UAC1C9yD,KAAK8yD,SAAW,MASxB2xC,kBACI,OA3IqC,IAmJzCC,0BACI,OA1IsB,MAmJ1BrgE,UAEQrkC,KAAK2kG,aAIT3kG,KAAKmkG,wBAELnkG,KAAK2kG,YAAa,GAUtBC,uBAAuBC,GACnB,GAAI7kG,KAAK2kG,WACL,MAAM,IAAIttG,MAAM,sEAGpB,MAAMytG,EAAiBD,EAAStuG,OAEhC,GAtLqC,MAsLjCuuG,EACA,MAAM,IAAIztG,MAAO,wEAAuEytG,GAM5F,OAHA9kG,KAAKskG,mBAAmBO,GACxB7kG,KAAKokG,2BAA2BS,GAEzB7kG,KAAK2jG,eAAeoB,uBAAuB/kG,KAAK8yD,SAAU9yD,KAAK+jG,eAAgB/jG,KAAK4jG,gB,YCxLnG,IAAIoB,EAOG,SAAS7I,IAIZ,OAHK6I,IACDA,EAAgBC,mBAEbD,EAActnE,KAAKwnE,GAAO,IAAIzB,EAAiByB,IAGnD,SAASC,IACZ9gF,aAAWC,WAAW,qC,6BCzB1B,YAEe5F,QAAf,U,6BCFA,oBAaegB,IAVf,SAAiB3pB,GAChB,OAAY,MAAPA,EACGA,EAAM,GAGQ,iBAARA,EACb2oB,IAAYhoB,IAAS7K,KAAMkK,KAAW,gBAC/BA,I,6BCVT,kCAgBAzK,OAAO85G,aAAe95G,OAAO85G,cAAgB95G,OAAO+5G,mBAEpD,IAAI9lF,EAAU,KAkEC,SAAS6/E,EAAoBx5E,EAAQ0/E,EAAU95F,GAC1DxL,KAAK4lB,OAASA,EACd5lB,KAAKulG,WAAa,KAClBvlG,KAAKwlG,cAAgBF,EACrBtlG,KAAKipC,WAAa,EAClBjpC,KAAKwL,SAAWA,EArEhBlgB,OAAO85G,eACP7lF,EAAU,IAAI6lF,aAUd7lF,EAAQkmF,SAAWlmF,EAAQkmF,WAgE/BrG,EAAoB9xG,UAAUyvB,MAAQ,WAClC,IAAKqiF,EAAoBC,wBACrB,OAEJ9/E,EAAQvU,SACR,MAAM06F,EAAWnmF,EAAQomF,iBAEzBD,EAASE,sBAxF2B,GAyFpCF,EAASG,QA/FsB,KAiGhBtmF,EAAQumF,wBAAwB9lG,KAAK4lB,QAE7Cna,QAAQi6F,GAEf1lG,KAAKulG,WAAa9nE,YACd,KACI,MAAMjf,EAAQ,IAAIgmC,WAAWkhD,EAASK,mBAEtCL,EAASM,sBAAsBxnF,GAC/B,MAAMyqB,EA3ElB,SAAoCg9D,GAEhC,IAAIC,EAAY,EAEhB,MAAM3vG,EAAS0vG,EAAQ1vG,OAEvB,IAAK,IAAI7K,EAAI,EAAGA,EAAI6K,EAAQ7K,IACpBw6G,EAAYD,EAAQv6G,KACpBw6G,EAAYD,EAAQv6G,IAI5B,OAAOy6G,aAAaD,EAAY,KAAO,KAAKE,QAAQ,IA+DzBC,CAA2B7nF,GAM9Cxe,KAAKipC,WA5DjB,SAAsBq9D,EAAUC,GAC5B,IAAI55G,EAAQ,EACZ,MAAMymE,EAAOmzC,EAAYD,EAUzB,OAPI35G,EADAymE,EAAO,GACCmzC,EAAY,GACbnzC,GAAQ,GACPmzC,EAAY,GAEZD,EAGLH,WAAWx5G,EAAMy5G,QAAQ,IAgDNI,CAAav9D,EAAYjpC,KAAKipC,YAChDjpC,KAAKwL,SAASxL,KAAKipC,aAEvBjpC,KAAKwlG,gBAObpG,EAAoB9xG,UAAU86B,KAAO,WAC7BpoB,KAAKulG,aACL3pE,cAAc57B,KAAKulG,YACnBvlG,KAAKulG,WAAa,OAU1BnG,EAAoBC,sBAAwB,WACxC,OAAOtlE,QAAQxa,K,6BChJnB,8EAKO,MAAMknF,EAAK,KAOLC,EAAM,O,6BCZJ,KAIXlS,iCAAkC,mD,8BCJtC,wGAUA,MAAMz2E,EAASF,oBAAU6E,GAKnBikF,EAAoB,CACtB,WAAc,SACd,aAAgB,WAChB,YAAe,WAMJ,MAAMC,UAAmB9iF,IAcpC7tB,YACQ2wB,EACAhB,EACA+a,EACAkmE,EACAC,EACAhmE,GACJrF,QAGAz7B,KAAKw9B,iBAAmBx9B,KAAKokC,YAC7BpkC,KAAKyzC,oBAAsBzzC,KAAK4yC,IAAM5yC,KAAKmmB,eAM3CnmB,KAAK+mG,WAAa,GAClB/mG,KAAK4mB,WAAaA,EAClB5mB,KAAKipC,YAAc,EACnBjpC,KAAKiH,KAAO6/F,EACZ9mG,KAAK2gC,MAAQA,EACb3gC,KAAK8gC,UAAYA,EACjB9gC,KAAKmJ,SAAW,IAAIya,IASpB5jB,KAAKgnG,UAAW,EAShBhnG,KAAKinG,uBAAyBJ,EAE9B7mG,KAAKknG,WAAWthF,GAWpBuhF,+BAA+B5iG,GACvB4f,IAAQuQ,YACR10B,KAAK2gC,MAAMymE,QAAU7iG,EAErBvE,KAAK4lB,OAAOyhF,WAAa9iG,EAUjC+iG,YAAYrgG,EAAM1C,GACd,GAAKoiG,EAAkBp5G,eAAe0Z,IAWtC,GANI1C,EACAvE,KAAKmJ,SAASsc,IAAIxe,EAAM1C,GAExBvE,KAAKmJ,SAAS+e,OAAOjhB,GAGrBjH,KAAK4lB,OACL,IAAK,MAAM+a,KAAS3gC,KAAK4lB,OAAO+b,YAC5BhB,EAAMgmE,EAAkB1/F,IAAS1C,OAZrCwZ,EAAO/Y,MAAO,wBAAuBiC,GAqB7CsgG,sBACI,GAAKvnG,KAAK4lB,OAAV,CAOA,IAAK,MAAM3e,KAAQjH,KAAKmJ,SAAS5D,OAE7B,IAAK,MAAMkjC,KAAczoC,KAAK4lB,OAAOsU,iBACjCuO,EAAWk+D,EAAkB1/F,SAAS1G,EAG1CP,KAAKinG,wBACLjnG,KAAKmnG,oCAA+B5mG,QAbpCwd,EAAO5Y,KACAnF,KAAF,sDAuBbknG,WAAWthF,GACP,GAAI5lB,KAAK4lB,SAAWA,IAIpB5lB,KAAK4lB,OAASA,EAMV5lB,KAAK4lB,QAAQ,CACb,IAAK,MAAM3e,KAAQjH,KAAKmJ,SAAS5D,OAC7BvF,KAAKsnG,YAAYrgG,EAAMjH,KAAKmJ,SAAS5c,IAAI0a,IAEzCjH,KAAKinG,wBACLjnG,KAAKmnG,+BAA+BnnG,KAAKinG,yBAQrDO,eACI,OAAOxnG,KAAK8gC,UAMhBgH,UACI,OAAO9nC,KAAKiH,KAMhBkiC,eACI,OAAOnpC,KAAK8nC,YAAcN,IAS9BigE,qBACI,OAAOznG,KAAK2gC,OAAS3gC,KAAK2gC,MAAMrX,MAMpCm4D,eACI,OAAOzhF,KAAK8nC,YAAcN,IAQ9Bzd,UACI,MAAM,IAAI1yB,MAAM,+BAQpBqwG,oBACI,OAAO1nG,KAAKmpC,gBAAkBnpC,KAAK+pB,UAMvC41D,oBACI,OAAO3/E,KAAK4lB,OAOhB+hF,cACI,OAAO3nG,KAAK4lB,OAAS5lB,KAAK4lB,OAAO1e,GAAK,KAO1CiyF,WACI,OAAOn5F,KAAK2gC,MAOhBinE,gBACI,OAAO5nG,KAAK2gC,MAAM3F,MAOtBu9D,aACI,OAAOv4F,KAAK2gC,MAAQ3gC,KAAK2gC,MAAMz5B,GAAK,KAQxC2gG,gBACI,OAAI7nG,KAAKmpC,eACE,MAGJnpC,KAAK8gC,UAAY9gC,KAAK8gC,UAAY,UAS7CgnE,wBAAwBC,GAChB/nG,KAAK4mB,YAAcmhF,GACnB/nG,KAAK4mB,WAAWohF,eAAehoG,KAAM+nG,GAc7C37F,OAAO27F,GACC/nG,KAAK4lB,SACL5lB,KAAKgoG,eAAeD,GACpBxsE,IAASQ,kBAAkBgsE,EAAW/nG,KAAK4lB,SAE/C5lB,KAAK+mG,WAAW7jG,KAAK6kG,GACrB/nG,KAAK8nG,wBAAwBC,GAC7B/nG,KAAKioG,mBAAmBF,GAW5BG,OAAOH,GACH,IAAK,IAAIn/E,EAAK5oB,KAAK+mG,WAAYr7G,EAAIk9B,EAAGryB,OAAS,EAAG7K,GAAK,IAAKA,EAAG,CAC3D,MAAMK,EAAI68B,EAAGl9B,GAERq8G,IACD/nG,KAAKmoG,eAAep8G,GACpBwvC,IAASQ,kBAAkBhwC,EAAG,OAE7Bg8G,GAAah8G,IAAMg8G,GACpBn/E,EAAG3kB,OAAOvY,EAAG,GAIjBq8G,IACA/nG,KAAKmoG,eAAeJ,GACpBxsE,IAASQ,kBAAkBgsE,EAAW,OAW9CC,eAAeD,IAWfI,eAAeJ,IAYfE,mBAAmBF,IASnBtgF,UAKI,OAJAznB,KAAKioB,qBAELjoB,KAAKgnG,UAAW,EAETlpE,QAAQC,UAOnBqqE,mBAQA9wB,QACI,OAAIt3E,KAAK4lB,OACE2V,IAASS,YAAYh8B,KAAK4lB,QAG9B,KASXoxD,WACI,YAAkC,IAAvBh3E,KAAK4lB,OAAOoyE,QACZh4F,KAAK4lB,OAAOoyE,OAc3BhvD,cAAcC,EAAYnhB,GACtB,IAAIugF,EAAgBp/D,EAMhB9kB,IAAQmkF,8BAA0C,IAARxgF,GAAuB9nB,KAAKq5E,YACtEgvB,EAAgB,GAGhBroG,KAAKipC,aAAeo/D,GACpBroG,KAAKipC,WAAao/D,EAClBroG,KAAK2nB,KACD+vD,4BACA2wB,EACAvgF,IAIuB,IAApB9nB,KAAKipC,YACS,IAAlBo/D,GACAroG,KAAK+pB,YACJ/pB,KAAKynG,sBACTznG,KAAK2nB,KACD+vD,iBACA2wB,GAQZE,UACI,MAAMz/D,EAAW9oC,KAAK2nG,cAChBa,EAAUxoG,KAAKu4F,aAErB,OAAOzvD,GAAY0/D,EAAW,GAAE1/D,KAAY0/D,IAAY,KAW5D9+D,eAAe3Q,GACX,OAAKwC,IAASc,wBAAwB,UAOlCr8B,KAAKyhF,eACE3jD,QAAQC,UAIfD,QAAQyK,IACJvoC,KAAK+mG,WAAWvhG,IACZ+I,GACIA,EAAQirB,UAAUT,GACbwD,MAAMv3B,IAOH,MANA+Y,EAAO5Y,KACH,+GAGAoJ,EACAvJ,GACEA,MAGrB04B,KAAK,KACF19B,KAAK2nB,KACD+vD,6BACA3+C,KA5BL+E,QAAQE,OACX,IAAI3mC,MAAM,oD,0DC7a1BlM,EAAOD,QAvDa,CAChB,KAAQ,CACJ4tC,MAAO,KACPH,OAAQ,MAEZ,KAAM,CACFG,MAAO,KACPH,OAAQ,MAEZ,KAAQ,CACJG,MAAO,KACPH,OAAQ,MAEZ,OAAU,CACNG,MAAO,KACPH,OAAQ,MAEZ,IAAO,CACHG,MAAO,KACPH,OAAQ,KAEZ,GAAM,CACFG,MAAO,KACPH,OAAQ,KAEZ,IAAO,CACHG,MAAO,IACPH,OAAQ,KAEZ,IAAO,CACHG,MAAO,IACPH,OAAQ,KAEZ,IAAO,CACHG,MAAO,IACPH,OAAQ,KAEZ,IAAO,CACHG,MAAO,IACPH,OAAQ,KAEZ,IAAO,CACHG,MAAO,IACPH,OAAQ,KAEZ,IAAO,CACHG,MAAO,IACPH,OAAQ,KAEZ,IAAO,CACHG,MAAO,IACPH,OAAQ,O,6BCnDhB,+EAgBe,MAAMomE,UAAwBj7E,IASzC7tB,YAAYwyG,EAAoB3J,EAActd,GAC1C/lD,QAKAz7B,KAAK0oG,oBAAsBD,EAK3BzoG,KAAK2oG,cAAgB7J,EAKrB9+F,KAAK4oG,YAAcpnB,EAKnBxhF,KAAK6oG,eAAiB,IAAIC,aAAa,IAKvC9oG,KAAK+oG,cAAgBC,YAAmB,CAAEnK,WAAYC,EAAa4F,4BAMnE1kG,KAAKipG,eAAiBnK,EAAa2F,kBAMnCzkG,KAAKkpG,gBAAkBlpG,KAAKkpG,gBAAgBh8G,KAAK8S,MAEjDA,KAAKmpG,0BAeT,cAAcnpE,EAAayoE,EAAoB3J,GAC3C,OAAOx7D,IAAIxE,+BAA+B,CACtCnB,QAAS,CAAE,SACXqC,gBACDtC,KAAKwvD,IAEJ,IAAKA,EAAW,GACZ,MAAM,IAAI71F,MAAO,qDAAoD2oC,GAGzE,OAAO,IAAI++D,EAAgB0J,EAAoB3J,EAAc5R,EAAW,MAYhFic,0BACInpG,KAAKopG,aAAeppG,KAAK+oG,cAAcjD,wBAAwB9lG,KAAK4oG,YAAYhjF,QAQhF5lB,KAAKqpG,qBAAuBrpG,KAAK+oG,cAAcO,sBAAsBtpG,KAAK0oG,oBAAqB,EAAG,GActGQ,gBAAgBK,GAEZ,MAAMC,EAASD,EAAWE,YAAYC,eAAe,GAC/CC,EAAiB,IAAK3pG,KAAK6oG,kBAAmBW,GAC9CI,EAAkBzhG,KAAKgM,MAE7B,IAAIzoB,EAAI,EAER,KAAOA,EAAIsU,KAAKipG,eAAiBU,EAAepzG,OAAQ7K,GAAKsU,KAAKipG,eAAgB,CAC9E,MAAM5E,EAAYsF,EAAe7pF,MAAMp0B,EAAGA,EAAIsU,KAAKipG,gBAG7CY,EAAW7pG,KAAK2oG,cAAc/D,uBAAuBP,EAAUvkF,SAErE9f,KAAK2nB,KAAK2sB,sBAAqB,CAC3Bw1D,UAAWF,EACXG,MAAOF,EACPG,QAAS3F,EACTvpE,SAAU96B,KAAK4oG,YAAYqB,gBAInCjqG,KAAK6oG,eAAiBc,EAAe7pF,MAAMp0B,EAAGi+G,EAAepzG,QAQjE2zG,qBACIlqG,KAAKqpG,qBAAqBc,eAAiBnqG,KAAKkpG,gBAChDlpG,KAAKopG,aAAa39F,QAAQzL,KAAKqpG,sBAC/BrpG,KAAKqpG,qBAAqB59F,QAAQzL,KAAK+oG,cAAcqB,aAQzDC,wBAIIrqG,KAAKqpG,qBAAqBc,eAAiB,OAC3CnqG,KAAKqpG,qBAAqB95F,aAC1BvP,KAAKopG,aAAa75F,aAQtB+6F,oBACItqG,KAAKqqG,wBACLrqG,KAAK4oG,YAAY2B,aAQrBN,cACI,OAAOjqG,KAAK4oG,YAAYqB,cAS5BrC,gBACI,OAAO5nG,KAAK4oG,YAAY4B,iBAQ5BztF,QACI/c,KAAKkqG,qBAQT9hF,OACIpoB,KAAKqqG,wBACLrqG,KAAK6oG,eAAiB,GAQ1BxkE,UACQrkC,KAAK2kG,aAIT3kG,KAAKsqG,oBACLtqG,KAAK2kG,YAAa,M,6BCrOnB,SAASqE,EAAmB7hG,GAC/B,MAAMsjG,EAAmBn/G,OAAO85G,cAAgB95G,OAAO+5G,mBAEvD,GAAKoF,EAIL,OAAO,IAAIA,EAAiBtjG,GAZhC,mC,6BCAA,uDAGO,MAAMujG,EAAkB,2B,6BCA/B,MAAMC,EACS,iJAIfz/G,EAAQgtB,MAAQ,SAAUvW,KAAS+gC,GAI/B,MAAMkoE,EAAkC,iBAAZloE,EAAK,IAAmBA,EAAK,GACnDmoE,EAAUnoE,EAAKnsC,OAAS,IAAMq0G,EAAeloE,EAAK,QAAKniC,EACvD4G,EAAWu7B,EAAKnsC,OAAS,GAAKmsC,EAAK,IAAOkoE,GAAgB,GAI1D70G,EAAM6W,KAAKsL,MAAMvW,EAAMkpG,GAI7B,MAA4B,WAAxB1jG,EAAQ2jG,YACD/0G,EAKNA,GACc,iBAARA,GAON4L,EAAK2R,MAAMq3F,IAMhBz/G,EAAQ6/G,KAAKh1G,EAAKoR,GAEXpR,GAbIA,GAiBf7K,EAAQ6/G,KAAO,SAAUh1G,EAAKoR,EAAU,IAEpC,IAAI8jB,EAAO,CAACl1B,GAEZ,KAAOk1B,EAAK10B,QAAQ,CAChB,MAAMy0G,EAAQ//E,EACdA,EAAO,GAEP,IAAK,MAAM/pB,KAAQ8pG,EAAO,CACtB,GAAI5+G,OAAOkB,UAAUC,eAAe1B,KAAKqV,EAAM,aAAc,CACzD,GAA4B,WAAxBiG,EAAQ2jG,YACR,MAAM,IAAIG,YAAY,uDAGnB/pG,EAAKgqG,UAGhB,IAAK,MAAMj+G,KAAOiU,EAAM,CACpB,MAAMvU,EAAQuU,EAAKjU,GACfN,GACiB,iBAAVA,GAEPs+B,EAAK/nB,KAAKhC,EAAKjU,QAQnC/B,EAAQigH,UAAY,SAAUxpG,EAAMkpG,GAEhC,IACI,OAAO3/G,EAAQgtB,MAAMvW,EAAMkpG,GAE/B,MAAOO,GACH,OAAO,Q,uNCnFf,MAAMrtF,EAASF,oBAAU6E,GAMlB,MAAM2oF,UAAoCr3B,IA6B7C/9E,cACIwlC,QADU,uBAzBE,MAyBF,8BApBS,MAoBT,sBAfC,MAeD,iBAVJ,MAUI,qBALA,OAeVz7B,KAAK+oG,cAAgB,IAAI3D,aACzBplG,KAAKsrG,YAActrG,KAAK+oG,cAAclK,WACtC9gF,EAAOnZ,IAAK,sBAAqB5E,KAAKsrG,gBAY1CnC,wBAAwBnpE,EAAax0B,GACjC,MAAwB,mBAAbA,EACAsyB,QAAQE,OAAO,oCAGnBh+B,KAAKo0E,gBAAgBp0C,GAC3BtC,KAAK9X,IACF5lB,KAAKurG,QAAU3lF,EACf5lB,KAAKopG,aACCppG,KAAK+oG,cAAcjD,wBAAwBlgF,GACjD5lB,KAAKqpG,qBACCrpG,KAAK+oG,cAAcO,sBAAsB,KAAM,EAAG,GACxDtpG,KAAKqpG,qBAAqBc,eAAiB3+F,EAC3CuS,EAAO9Y,MAAM,6BAEhBs3B,MAAMpsB,IACH4N,EAAO/Y,MAAO,iCAAgCmL,GAEvC2tB,QAAQE,OAAO7tB,KAW9B+5F,qBACIlqG,KAAKopG,aAAa39F,QAAQzL,KAAKqpG,sBAC/BrpG,KAAKqpG,qBAAqB59F,QAAQzL,KAAK+oG,cAAcqB,aASzDC,wBACIrqG,KAAKqpG,qBAAqBc,oBAAiB5pG,EAC3CP,KAAKqpG,qBAAqB95F,aAC1BvP,KAAKopG,aAAa75F,aAUtBi8F,YAAYxrE,GACR,OAAIhgC,KAAK+oG,eAAiB/oG,KAAKqpG,qBACpBrpG,KAAKo0E,gBAAgBp0C,GAAatC,KAAK+tE,IAC1C,MAAMC,EAAY1rG,KAAK+oG,cAClBjD,wBAAwB2F,GAE7BzrG,KAAKopG,aAAa75F,aAClBm8F,EAAUjgG,QAAQzL,KAAKqpG,sBACvBrpG,KAAKurG,QAAUE,EACfzrG,KAAKopG,aAAesC,IAIrB5tE,QAAQC,c,mMC7HhB,SAAS4tE,O,cCgIhBxgH,EAAOD,QA1HP,MAWI+K,YAAY+zB,EAAQ4hF,EAAaC,GAC7B7rG,KAAK8rG,QAAU9hF,EACfhqB,KAAK+rG,eAAeH,GACpB5rG,KAAKgsG,cAAgBH,IAAgB,EACrC7rG,KAAKisG,oBAAmB,GACxBjsG,KAAKksG,yBAA2B,EAChClsG,KAAKmsG,sBAAwB,EAC7BnsG,KAAKosG,UAAW,EAQpBC,YACI,OAAOrsG,KAAK8rG,QAQhBQ,iBACI,OAAOtsG,KAAK4rG,YAShBG,eAAeQ,GACXvsG,KAAK4rG,YAAcW,EAQvBV,eACI,OAAO7rG,KAAKgsG,cAQhBQ,oBACI,OAAOxsG,KAAKmsG,sBAAwB,EAWxCF,mBAAmBQ,GACf,IAAKzsG,KAAKwsG,qBAAuBC,EAC7BzsG,KAAKmsG,sBAAwBhkG,KAAKgM,WAC/B,GAAInU,KAAKwsG,sBAAwBC,EAAsB,CAC1D,MACMC,EADMvkG,KAAKgM,MACSnU,KAAKmsG,sBAE/BnsG,KAAKksG,0BAA4BQ,EACjC1sG,KAAKmsG,sBAAwB,GASrCQ,8BACI,IAAIC,EAAQ5sG,KAAKksG,yBAMjB,OAJIlsG,KAAKwsG,sBACLI,GAASzkG,KAAKgM,MAAQnU,KAAKmsG,uBAGxBS,EAQXC,UACI,OAAO7sG,KAAKosG,SAQhBU,gBACI9sG,KAAKosG,UAAW,EAChBpsG,KAAKisG,oBAAmB,M,6BC7HhC,kD,6BCAa,SAAS5yG,EAAEA,EAAE7M,GAAG,IAAIiB,EAAE,OAAM,EAAG,MAAMN,EAAEkM,EAAEmvD,OAAO,IAAIukD,EAAErqC,EAAEn2E,IAAIY,GAAG,GAAG,MAAM4/G,EAAE,CAAC,IAAIA,EAAEngH,EAAEogH,SAAS7/G,KAAKX,EAAE,IAAI,IAAII,EAAEqgH,SAAS,IAAIrgH,EAAEsgH,OAAO//G,IAAIjC,QAAQ,KAAK,MAAMmO,GAAG0zG,GAAE,EAAGrqC,EAAEj9C,IAAIt4B,EAAE4/G,GAAG,OAAOA,EAAE,MAAMngH,EAAEugH,YAAY3gH,EAAE,IAAI6M,IAAImrD,WAAW4oD,GAAG,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,KAAK/zG,GAAGlM,EAAE,IAAIkM,IAAIg0G,YAAYD,GAAG,WAAW,KAAK/zG,GAAG0zG,EAAE,IAAI1zG,IAAIlM,EAAE,WAAW,YAAYkM,EAAE,SAAS,KAAK3N,EAAE,IAAI2N,IAAI7M,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK6M,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,GAAGlN,EAAE,IAAIkN,IAAIi0G,YAAYF,GAAG,MAAM,MAAM,EAAE,EAAE,KAAK,MAAM,EAAE,IAAI,KAAK/zG,GAAG3B,EAAE,IAAI2B,IAAIlN,KAAKkN,EAAE,KAAK,KAAK,MAAM,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG5L,EAAE,iBAAiBb,EAAEktD,EAAEzgD,GAAG5L,GAAG,mBAAmB4L,EAAEqpE,EAAE,IAAIzd,QAAQt5D,EAAEwB,EAAE,WAAW,SAAS,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,SAAS,SAAS,KAAKpB,EAAEI,EAAE,IAAI,EAAE,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,MAAM,MAAM,IAAI,IAAI,GAAGqB,EAAEL,EAAE,WAAW,SAAS,UAAU,UAAU,WAAW8J,EAAEzK,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,GAAGmL,EAAE21G,YAAYF,GAAG,MAAM,MAAM,EAAE,EAAE,KAAK,MAAM,IAAI,MAAM,IAAI,EAAE,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,MAAM,MAAM,IAAI,IAAI,GAAGthH,EAAE4L,EAAE,KAAK,KAAK,MAAM,EAAE,EAAE,KAAK61G,EAAE71G,EAAE,KAAK,KAAK,MAAM,OAAO1L,EAAE+gH,EAAE,UAAU,UAAU,UAAU,WAAW,UAAUh4F,EAAErpB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAGsL,EAAE+1G,EAAE,SAAS,QAAQ,SAAS,QAAQ,UAAU,YAAY3zG,EAAE1N,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,IAAIP,EAAOD,QAAQ,CAACs3B,QAAQ,CAAC51B,EAAE,IAAIa,GAAG4L,EAAEg0G,YAAYD,GAAG,WAAWxgH,IAAI,uBAAuB,OAAOktD,EAAEltD,EAAE4gH,uBAAuBC,QAAQ,CAAC,aAAa,OAAOp0G,EAAE1N,GAAE,IAAK,WAAW,OAAO0N,EAAEtN,IAAI,iBAAiB,OAAOsN,EAAE7L,IAAI,oBAAoB,OAAO6L,EAAEpC,IAAI,iBAAiB,OAAOoC,EAAE1B,IAAI,0BAA0B,OAAO0B,EAAEvN,IAAI,qBAAqB,OAAOuN,EAAEk0G,IAAI,eAAe,OAAOl0G,EAAErN,IAAI,cAAc,OAAOqN,EAAE0b,IAAI,WAAW,OAAO1b,EAAErC,IAAI,iBAAiB,OAAOqC,EAAED,IAAI,qBAAqB,OAAO0gD,EAAEltD,EAAE8gH,OAAOzmG,OAAO,qBAAqB,OAAO6yC,EAAEltD,EAAEijD,c,+NCsU/xD,QAtTf,MAKI55C,cACI+J,KAAK2tG,cAAgB,IAAI7pF,IACzB9jB,KAAK4tG,aAAe,GAEpBtqE,IAAIc,YACA/J,IAAU/M,oBACVqQ,GACI39B,KAAK2tG,cAAchmF,KACfm1E,sBACAn/D,IACZ2F,IAAIc,YACA/J,IAAU7M,sBACVmQ,GACI39B,KAAK6tG,iBACD7tG,KAAKs8B,uBACLqB,IAGZ2F,IAAIc,YACA/J,IAAU5N,oBACVqhF,GAAe9tG,KAAK+tG,yBAAyBD,IAIjD9tG,KAAKguG,yBAA2B,IAAIlwE,QAAQC,IACxC,IAAKT,UAAUwwE,YAGX,YAFA/vE,GAAQ,GAKZ,MAAMloC,EAAOmK,KAEP67E,EAAW,GAEjBA,EAAS34E,KAAKo6B,UAAUwwE,YAAYG,MAAM,CAAEhiH,KA7C1B,WA8CbyxC,KAAK3tB,IACF/P,KAAK+tG,yBAAyB,CAC1B,CAACvmE,KAAkBxnC,KAAKkuG,sBAAsBn+F,KAElDA,EAAOo+F,SAAW,WACd,IACIt4G,EAAKk4G,yBAAyB,CAC1B,CAACvmE,KAAkB3xC,EAAKq4G,sBAAsBluG,QAEpD,MAAOgF,OAKN,IAEVu3B,MAAM,KAAM,IAEjBs/C,EAAS34E,KAAKo6B,UAAUwwE,YAAYG,MAAM,CAAEhiH,KAlE1B,eAmEbyxC,KAAK3tB,IACF/P,KAAK+tG,yBAAyB,CAC1B,CAACvmE,KAAkBxnC,KAAKkuG,sBAAsBn+F,KAElDA,EAAOo+F,SAAW,WACd,IACIt4G,EAAKk4G,yBAAyB,CAC1B,CAACvmE,KAAkB3xC,EAAKq4G,sBAAsBluG,QAEpD,MAAOgF,OAKN,IAEVu3B,MAAM,KAAM,IAEjBuB,QAAQyK,IAAIszC,GAAUn+C,KAAK7b,GAAWkc,EAAQlc,EAAQq4E,MAAMkU,GAAaA,OAajFF,sBAAsBG,EAAmB,IAIrC,MAAMt+F,EAASs+F,EAAiB/8D,OAAS+8D,EAAiBt+F,OAE1D,GAAsB,iBAAXA,EACP,MAAM,IAAIlZ,UAGd,MA3G0B,YA2GnBkZ,EAUXg+F,yBAAyBD,GAEf,CAAEtmE,IAAiBA,KAChBvF,KAAKh7B,GAAQA,KAAQ6mG,GAAeA,EAAY7mG,KAAUjH,KAAK4tG,aAAa3mG,MAGjFjH,KAAK4tG,a,sUAAL,IACO5tG,KAAK4tG,aACLE,GAEP9tG,KAAK2tG,cAAchmF,KAAKm1E,sBAA6C98F,KAAK4tG,eAEtE5tG,KAAK4tG,aAAapmE,MAAoBxnC,KAAK4tG,aAAapmE,OAIxDxnC,KAAKm9B,iBAAiB,SAUlC0wE,iBAAiBS,EAAU3wE,GACvB,MAAM9C,EACA8C,EAAQrI,KACNtpC,GAAgB,gBAAXA,EAAEyuC,MAA0BzuC,EAAE8uC,WAAawzE,GAEpDzzE,GACApX,IAAWkG,0BACP2Z,IAAIpB,4BAA4BrH,IAQ5CsC,iBAAiB3xB,GACb83B,IAAInG,iBAAiB3xB,GASzB0xB,wBACI,OAAOoG,IAAIpG,wBAUfb,wBAAwBoF,GACpB,OAAO6B,IAAIjH,wBAAwBoF,GAUvC8sE,0BAA0BtnG,GACtB,OAAO,IAAI62B,QAAQC,IAGX92B,KAAQjH,KAAK4tG,aACb7vE,EAAQ/9B,KAAK4tG,aAAa3mG,IAM9BjH,KAAKguG,yBAAyBtwE,KAAK0wE,IAC/B,IAAKA,EAGD,YAFArwE,GAAQ,GAKZ,MAAM89C,EAAW,GAEjB,OAAQ50E,GACR,KAAKugC,IACDq0C,EAAS34E,KACLo6B,UAAUwwE,YAAYG,MAAM,CACxBhiH,KArNE,YAuNV,MACJ,KAAKu7C,IACDq0C,EAAS34E,KACLo6B,UAAUwwE,YAAYG,MAAM,CACxBhiH,KA7NE,gBA+NV,MACJ,QACI4vF,EAAS34E,KACLo6B,UAAUwwE,YAAYG,MAAM,CACxBhiH,KAjOE,YAmOV4vF,EAAS34E,KACLo6B,UAAUwwE,YAAYG,MAAM,CACxBhiH,KAvOE,gBA2Od6xC,QAAQyK,IAAIszC,GAAUn+C,KAClB7b,GAAWkc,EAAQlc,EAAQq4E,MAAMmU,IAC7B,IACI,OAAOruG,KAAKkuG,sBAAsBG,GACpC,SACE,OAAO,MAGf,IAAMtwE,GAAQ,QAY9BmhE,gCACI,OAAQ/6E,IAAQuQ,YAQpB4H,uBACI,OAAOgH,IAAIhH,uBAWfwF,qBAAqBhH,GAWjB,OAVyBwI,IAAIvB,oCAERxrC,OAAS,GAI1ByJ,KAAK6tG,iBACD/yE,EAAUwI,IAAIvB,qCAGfuB,IAAIxB,qBAAqBhH,GAQpC0C,iBAAiB3R,EAAOtnB,GACpBvE,KAAK2tG,cAAcvpE,YAAYvY,EAAOtnB,GAQ1CkvC,oBAAoB5nB,EAAOtnB,GACvBvE,KAAK2tG,cAAcxnF,eAAe0F,EAAOtnB,GAO7C+5F,UAAUzyE,KAAU6W,GAChB1iC,KAAK2tG,cAAchmF,KAAKkE,KAAU6W,M,cCtT1Cv3C,EAAOD,QAZsB,CASzBsjH,iBAAkB,oC,iBCTtB,YAUA,IASIC,EAAS,aAGTC,EAAa,qBAGbC,EAAa,aAGbC,EAAY,cAGZC,EAAev2F,SAGfuqC,EAA8B,iBAAVjtD,GAAsBA,GAAUA,EAAOxJ,SAAWA,QAAUwJ,EAGhFktD,EAA0B,iBAARjtD,MAAoBA,MAAQA,KAAKzJ,SAAWA,QAAUyJ,KAGxE7K,EAAO63D,GAAcC,GAAYjT,SAAS,cAATA,GAUjCwX,EAPcj7D,OAAOkB,UAOQoJ,SAG7Bo4G,EAAY1jG,KAAKytB,IACjBk2E,EAAY3jG,KAAKqP,IAkBjBtG,EAAM,WACR,OAAOnpB,EAAKmd,KAAKgM,OA4MnB,SAAS21C,EAASn9D,GAChB,IAAIsa,SAActa,EAClB,QAASA,IAAkB,UAARsa,GAA4B,YAARA,GA4EzC,SAAS+nG,EAASriH,GAChB,GAAoB,iBAATA,EACT,OAAOA,EAET,GAhCF,SAAkBA,GAChB,MAAuB,iBAATA,GAtBhB,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,EAsBtB46D,CAAa56D,IAzTF,mBAyTY06D,EAAex7D,KAAKc,GA8B1CsiH,CAAStiH,GACX,OA3VM,IA6VR,GAAIm9D,EAASn9D,GAAQ,CACnB,IAAI86D,EAAgC,mBAAjB96D,EAAMg5D,QAAwBh5D,EAAMg5D,UAAYh5D,EACnEA,EAAQm9D,EAASrC,GAAUA,EAAQ,GAAMA,EAE3C,GAAoB,iBAAT96D,EACT,OAAiB,IAAVA,EAAcA,GAASA,EAEhCA,EAAQA,EAAMiV,QAAQ6sG,EAAQ,IAC9B,IAAIS,EAAWP,EAAWz8F,KAAKvlB,GAC/B,OAAQuiH,GAAYN,EAAU18F,KAAKvlB,GAC/BkiH,EAAaliH,EAAMmzB,MAAM,GAAIovF,EAAW,EAAI,GAC3CR,EAAWx8F,KAAKvlB,GAxWb,KAwW6BA,EAGvCxB,EAAOD,QAtPP,SAAkB0U,EAAM+L,EAAMxE,GAC5B,IAAIgoG,EACAC,EACAC,EACA5pG,EACA6pG,EACAC,EACAC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTC,GAAW,EAEf,GAAmB,mBAAR/vG,EACT,MAAM,IAAI/I,UArIQ,uBA+IpB,SAAS+4G,EAAWC,GAClB,IAAIntE,EAAOysE,EACPW,EAAUV,EAKd,OAHAD,EAAWC,OAAW7uG,EACtBivG,EAAiBK,EACjBpqG,EAAS7F,EAAK6e,MAAMqxF,EAASptE,GAI/B,SAASqtE,EAAYF,GAMnB,OAJAL,EAAiBK,EAEjBP,EAAU/kG,WAAWylG,EAAcrkG,GAE5B8jG,EAAUG,EAAWC,GAAQpqG,EAWtC,SAASwqG,EAAaJ,GACpB,IAAIK,EAAoBL,EAAON,EAM/B,YAAyBhvG,IAAjBgvG,GAA+BW,GAAqBvkG,GACzDukG,EAAoB,GAAOR,GANJG,EAAOL,GAM8BH,EAGjE,SAASW,IACP,IAAIH,EAAO17F,IACX,GAAI87F,EAAaJ,GACf,OAAOM,EAAaN,GAGtBP,EAAU/kG,WAAWylG,EAzBvB,SAAuBH,GACrB,IAEIpqG,EAASkG,GAFWkkG,EAAON,GAI/B,OAAOG,EAASX,EAAUtpG,EAAQ4pG,GAHRQ,EAAOL,IAGkC/pG,EAoBhC2qG,CAAcP,IAGnD,SAASM,EAAaN,GAKpB,OAJAP,OAAU/uG,EAINovG,GAAYR,EACPS,EAAWC,IAEpBV,EAAWC,OAAW7uG,EACfkF,GAeT,SAAS4qG,IACP,IAAIR,EAAO17F,IACPm8F,EAAaL,EAAaJ,GAM9B,GAJAV,EAAWhuG,UACXiuG,EAAWpvG,KACXuvG,EAAeM,EAEXS,EAAY,CACd,QAAgB/vG,IAAZ+uG,EACF,OAAOS,EAAYR,GAErB,GAAIG,EAGF,OADAJ,EAAU/kG,WAAWylG,EAAcrkG,GAC5BikG,EAAWL,GAMtB,YAHgBhvG,IAAZ+uG,IACFA,EAAU/kG,WAAWylG,EAAcrkG,IAE9BlG,EAIT,OAxGAkG,EAAOqjG,EAASrjG,IAAS,EACrBm+C,EAAS3iD,KACXsoG,IAAYtoG,EAAQsoG,QAEpBJ,GADAK,EAAS,YAAavoG,GACH2nG,EAAUE,EAAS7nG,EAAQkoG,UAAY,EAAG1jG,GAAQ0jG,EACrEM,EAAW,aAAcxoG,IAAYA,EAAQwoG,SAAWA,GAiG1DU,EAAU9uC,OAnCV,gBACkBhhE,IAAZ+uG,GACF7hG,aAAa6hG,GAEfE,EAAiB,EACjBL,EAAWI,EAAeH,EAAWE,OAAU/uG,GA+BjD8vG,EAAU7iG,MA5BV,WACE,YAAmBjN,IAAZ+uG,EAAwB7pG,EAAS0qG,EAAah8F,MA4BhDk8F,K,+CCvNFluG,eAAeqjF,EAAQH,GAC1B,MAAMkrB,EAAc,IAAIC,YAGxB,OAAOvrB,OAAOwrB,OAAOC,WAAW,CAC5BzkH,KAAM,OACN4oB,KAAM07F,EAAYI,OAAO,oBACzB93G,KAAM,UACNqM,KAAM,IAAIimD,aACXk6B,EAAU,KAUVljF,eAAemjF,EAAUsrB,GAE5B,OAAO3rB,OAAOwrB,OAAOnrB,UAAU,MAAOsrB,EAAU,QAAQ,EAAO,CAAE,aAAc,cAvDnF,qE,8BCAA,mHAUA,MAAMC,EAAsB,CAAE,WAAY,OAAQ,OAAQ,QACpDC,EAAkC,CAAE,WAAY,OAAQ,QAQ9D,SAASC,EAAkBr5G,EAAGC,GAC1B,IAAIwkC,EAAM,EAMV,OAJA20E,EAAgC7uE,KAAKh1C,GACiC,KAAjEkvC,EAAQzkC,EAAEzK,GAAO0K,EAAE1K,GAAS,EAAQyK,EAAEzK,GAAO0K,EAAE1K,KAAU,IAGvDkvC,EA+BJ,SAASme,EAAep5C,GAC3B,MAAM4H,EAAW,IAAIqc,IACfozB,EAAa,IAAIpzB,IAWvB,OATA2pB,EAAE5tC,GAAMo0B,KAAK,kBACRlV,KAAK,CAACmuB,EAAGruC,IAAO4I,EAAS8b,IAAI1kB,EAAG0C,aAAa,SAClDksC,EAAE5tC,GAAMo0B,KAAK,mBACRlV,KAAK,CAACmuB,EAAGruC,IAAOq4C,EAAW3zB,IAAI,CAC5B3d,KAAM/G,EAAG0C,aAAa,QACtB3W,KAAMiU,EAAG0C,aAAa,QACtBouG,SAAU9wG,EAAG0C,aAAa,eAG3B,CACHkG,WACAyvC,cAOO,MAAM1B,UAAarb,IAO9BvlC,YAAYse,EAAa,GAAIrT,EAAO,8BAIhC,GAHAu6B,QACAz7B,KAAKkB,KAAOA,EACZlB,KAAK+gE,MAAQxsD,EAAWwsD,OACnB/gE,KAAK+gE,MACN,MAAM,IAAI1pE,MACN,uDAIR2I,KAAKikE,QAAU,GACfjkE,KAAKixG,MAAQ,IAAI9rF,IAIjBnlB,KAAKkxG,iBAAmB,IAAI/rF,IAE5B,MAAM+1B,EAAO3mC,EAAW2mC,KAExBA,EAAK9W,YAAY4T,IAAWxlD,gBACxBmqD,GAAQ38C,KAAKmxG,aAAax0D,IAC9BzB,EAAK9W,YAAY4T,IAAWvlD,kBACxBkqD,GAAQ38C,KAAKoxG,gBAAgBz0D,IACjCvwD,OAAOmZ,KAAK21C,EAAK+1D,OAAO7hG,QAAQzL,IAC5B3D,KAAKmxG,aAAaj2D,EAAK+1D,MAAMttG,MAGjClI,UAAQ+D,aAAa,OAAQ,mCAC7BQ,KAAK+gE,MAAM/pB,WAAWv7C,UAAQK,GAAGu1G,MAarCr6D,WAAWy2D,EAASv4C,GAAS,EAAOo8C,GAAW,GAC3CtxG,KAAK+gE,MAAM/pB,WAAWy2D,GACtBztG,KAAKuxG,mBAEDD,IAAatxG,KAAKkxG,iBAAiB3oF,IAAIklF,KACvCztG,KAAKkxG,iBAAiBtsF,IAAI6oF,GAC1BztG,KAAKixG,MAAM7hG,QAAQutC,GAAQ38C,KAAKwxG,gCAAgC70D,KAGhEuY,GACAl1D,KAAKk1D,SAYbu8C,cAAchE,EAASv4C,GAAS,EAAOo8C,GAAW,GAC9CtxG,KAAK+gE,MAAM0wC,cAAchE,GACzBztG,KAAKuxG,mBAEDD,GAAYtxG,KAAKkxG,iBAAiB3oF,IAAIklF,KACtCztG,KAAKkxG,iBAAiBhpF,OAAOulF,GAC7BztG,KAAKixG,MAAM7hG,QAAQutC,GAAQ38C,KAAKwxG,gCAAgC70D,KAGhEuY,GACAl1D,KAAKk1D,SAObA,SACIl1D,KAAKixG,MAAM7hG,QAAQutC,GAAQA,EAAKjvC,gBAQpC8jG,gCAAgC70D,GAC5B,GAAmC,IAA/B38C,KAAKkxG,iBAAiBxpF,KACtBi1B,EAAK+0D,mBAAmB,gBACrB,CACH,MAAMC,EAAW,GAEjB3xG,KAAKkxG,iBAAiB9hG,QAAQ0qC,IAC1B63D,EAASzuG,KAAK,CACV,QAAW,UACXjG,WAAY,CAAE,IAAO68C,OAI7B6C,EAAKi1D,uBAAuB,WAAY,CAAED,cAUlDr5D,yBAAyB30C,EAAKzC,EAAM0M,EAAU,KAC1C,OAAO5N,KAAK6xG,cAAcluG,EAAKzC,EAAM0M,GAWzCikG,cAAcluG,EAAKzC,EAAM0M,GACrB,OAAO,IAAIkwB,QAAQ,CAACC,EAASC,IACzBh+B,KAAK+gE,MAAM77D,KAAKvB,EAAKzC,EAAMyR,IACvBorB,EAAQuc,EAAe3nC,KACxBqrB,EAAQpwB,IASnBujG,aAAax0D,GACT38C,KAAKixG,MAAMrsF,IAAI+3B,GACf38C,KAAK8xG,wBAAwBn1D,GAE7B38C,KAAKwxG,gCAAgC70D,GAQzCy0D,gBAAgBz0D,GACZ38C,KAAKixG,MAAM/oF,OAAOy0B,GAOtBm1D,wBAAwBn1D,GACpBA,EAAKi1D,uBAAuB,IAAK,CAC7B30G,WAAY,CACRgJ,MAAOxK,UAAQK,GAAGu1G,KAClBx4G,KA3OH,QA4OGqI,KAAMlB,KAAKkB,KACX+a,IAAKjc,KAAKikE,WAQtB8tC,wBAEI/xG,KAAKixG,MAAM7hG,QAAQutC,GAAQ38C,KAAK8xG,wBAAwBn1D,IAM5D40D,mBACIvxG,KAAKikE,QAtOb,SAAqB1rB,EAAYzvC,GAC7B,MAAMkpG,EAAmBz5D,EAAWj3C,KAAKyvG,GAAmBrrG,OACxD,CAACusG,EAAkBz4D,IACfq3D,EAAoBnrG,OAChB,CAAC6lF,EAAKt+F,EAAKg/C,IACPs/C,GACe,IAARt/C,EAAY,GAAK,MACjBuN,EAASvsD,GAAOusD,EAASvsD,GAAO,IAC3C,IANyB,IAO5B,IACHilH,EAAiBppG,EAASxH,OAAOoE,OACnC,CAAC6lF,EAAKkiB,IAAeliB,EAAMkiB,EAAR,IAAoB,IAE3C,OAAOnzG,mBAAS03G,EAAmBE,GA0NzBC,CAAYnyG,KAAK+gE,MAAMqxC,YAAapyG,KAAK+gE,MAAMsxC,WAErDryG,KAAK+xG,4B,gDC7Qb,wFAQA,MAAMh0F,EAASF,oBAAU6E,GAYV,MAAM4vF,UAAyBxuF,eAW1C7tB,YAAY2wB,EAAY2rF,GACpB92E,QAKAz7B,KAAKwyG,oBAAsBD,EAM3BvyG,KAAKyyG,YAAc,KAKnBzyG,KAAK0yG,sBAAuB,EAK5B1yG,KAAK2yG,mBAAqB,GAS1B3yG,KAAK4yG,gBAAkB90E,QAAQC,UAK/B/9B,KAAK6yG,iBAAmB7yG,KAAK6yG,iBAAiB3lH,KAAK8S,MAEnD4mB,EAAWZ,GAAGgB,cAAmChnB,KAAK8yG,YAAY5lH,KAAK8S,OACvE4mB,EAAWZ,GAAGgB,gBAAqChnB,KAAK+yG,cAAc7lH,KAAK8S,OAC3E4mB,EAAWZ,GAAGgB,qBAA0ChnB,KAAKmkF,kBAAkBj3F,KAAK8S,OAQxFgzG,uBAAuBC,GACnBjzG,KAAK2yG,mBAAmBzvG,KAAK+vG,GAC7BA,EAAWjtF,GAAGmuB,wBAAuB,MAGVn0C,KAAK2yG,mBAAmB39E,OAAOk+E,IAAoC,IAAxBA,EAASl8B,YAKvDzgF,QAAUyJ,KAAK0yG,qBAC/B1yG,KAAKmzG,kBACGnzG,KAAK0yG,sBACb1yG,KAAKozG,qBASjBA,mBACIpzG,KAAKyyG,YAAYzsF,GAAGsuB,sBAAqBt0C,KAAK6yG,kBAC9C7yG,KAAKyyG,YAAY11F,QACjB/c,KAAK0yG,sBAAuB,EAOhCS,kBACInzG,KAAKyyG,YAAYtsF,eAAemuB,sBAAqBt0C,KAAK6yG,kBAC1D7yG,KAAKyyG,YAAYrqF,OACjBpoB,KAAK0yG,sBAAuB,EAahCG,iBAAiBhJ,GACb,IAAK,MAAMqJ,KAAYlzG,KAAK2yG,mBACxBO,EAASG,gBAAgBxJ,GASjCyJ,0BAA0Bj6B,GACtB,IAAK,MAAM65B,KAAYlzG,KAAK2yG,mBACxBO,EAASK,gBAAgBl6B,GAWjCy5B,YAAYnyE,GACJA,EAAM+mE,sBAGN1nG,KAAK4yG,gBAAkB5yG,KAAK4yG,gBAAgBl1E,KAAK,IAAM19B,KAAKwyG,uBACvD90E,KAAKohE,GACFC,IAAgB/xG,OAAO2zC,EAAMspE,cA/IjB,KA+IyDnL,IAExEphE,KAAK81E,IACFz1F,EAAO9Y,MAAM,kCAAmC07B,EAAMinE,iBAEtD5nG,KAAKyyG,YAAce,EAInBxzG,KAAKszG,0BAA0B3yE,EAAM04C,aAExC98C,MAAMv3B,IACH+Y,EAAO5Y,KAAK,mCAAoCH,MAYhEm/E,kBAAkBxjD,GACVA,EAAM+mE,sBAEN1nG,KAAK4yG,gBAAkB5yG,KAAK4yG,gBAAgBl1E,KAAK,KAE7C19B,KAAKszG,0BAA0B3yE,EAAM04C,cAajD05B,cAAcpyE,GACNA,EAAM+mE,sBAEN1nG,KAAK4yG,gBAAkB5yG,KAAK4yG,gBAAgBl1E,KAAK,KAC7C3f,EAAO9Y,MAAM,uCAAwC07B,EAAMinE,iBAGvD5nG,KAAKyyG,cACLzyG,KAAKmzG,kBACLnzG,KAAKyyG,YAAYpuE,UACjBrkC,KAAKyyG,YAAc,MAIvB,IAAK,MAAMS,KAAYlzG,KAAK2yG,mBACxBO,EAAS7qG,e,qFCtN7B,qDAOe,MAAMorG,EAMjBx9G,YAAYkR,EAAU,IAClBnH,KAAKwU,YAAcrN,EAAQoN,WAC3BvU,KAAK0zG,MAAQvsG,EAAQta,KAErBmT,KAAK2zG,cAAcxsG,EAAQ8yE,WAC3Bj6E,KAAK4zG,UAAUzsG,EAAQ4I,QAQ3B8jG,WACI,OAAO7zG,KAAK08D,OAQhBo3C,QACI,OAAO9zG,KAAK+zG,WAQhBC,eACI,OAAOh0G,KAAKi0G,WAQhBC,uBACI,OAAOl0G,KAAKm0G,mBAQhBC,YACI,OAAOp0G,KAAK6gE,QAQhBwzC,gBACI,OAAOr0G,KAAKs0G,YAQhBC,UACI,OAAOv0G,KAAK0zG,MAUhBc,SAASxvG,GACLhF,KAAK08D,OAAS13D,EAUlByvG,qBAAqBxyC,GACjBjiE,KAAKm0G,mBAAqBlyC,EAS9B2xC,UAAU7jG,GACN/P,KAAK6gE,QAAU9wD,EAQnB2kG,aAAav9B,GACTn3E,KAAKi0G,WAAa98B,EAQtBw9B,cAAcx9B,GACVn3E,KAAKs0G,YAAcn9B,EAoBvBp6D,OAAM,QAAE63F,EAAF,YAAWC,EAAX,YAAwBC,EAAxB,SAAqChsE,IACvC,OAAO,IAAIhL,QAAQ,CAACC,EAASC,KACzBh+B,KAAKwU,YAAYpG,OACbpO,KAAK+0G,UAAU,CACX7lF,OAAQ,QACR0lF,UACAE,cACAD,cACA/rE,aAEJrjC,IAKIzF,KAAK4zG,UAAU,WACf5zG,KAAK2zG,cACDqB,IAAkBz6B,mBAAmB90E,IAEzCs4B,KAEJ/4B,IACIhF,KAAKi1G,gBAAgBjwG,GAErBg5B,EAAOh5B,OAcvBojB,MAAK,YAAE0sF,IACH,OAAO,IAAIh3E,QAAQ,CAACC,EAASC,KACzBh+B,KAAKwU,YAAYpG,OACbpO,KAAK+0G,UAAU,CACX7lF,OAAQ,OACR4lF,gBAEJ/2E,EACAC,KAqBZ+2E,WAAU,OAAE7lF,EAAF,QAAU0lF,EAAV,YAAmBC,EAAnB,YAAgCC,EAAhC,SAA6ChsE,IACnD,OAAOntC,cAAI,CACP0tC,GAAIyrE,EACJ7tG,KAAM,QAETlb,EAAE,QAAS,CACR,MAAS,kCACT,OAAUmjC,EACV,SAAY0lF,EACZ,eAAkB50G,KAAK0zG,MACvB,SAAY5qE,EACZ,sBAAyB+rE,IAE5B1uG,KAUL8uG,gBAAgBC,GACZ,MAAMlwG,EAAQkwG,EAAQpkG,qBAAqB,SAAS,GAEpD9Q,KAAKw0G,SAASxvG,EAAM2sG,SAAS,GAAGxxG,SAUpCwzG,cAAc15B,GACVj6E,KAAK+zG,WAAa95B,K,6BC1P1B,IAAIiL,EAAoC,oBAAXD,QAA0BA,OAAOC,iBAAmBD,OAAOC,gBAAgBh4F,KAAK+3F,SAA+B,oBAAbkwB,UAAgE,mBAA7BA,SAASjwB,iBAAkCiwB,SAASjwB,gBAAgBh4F,KAAKioH,UACvOC,EAAQ,IAAI5wD,WAAW,IACZ,SAAS6wD,IACtB,IAAKnwB,EACH,MAAM,IAAI7tF,MAAM,4GAGlB,OAAO6tF,EAAgBkwB,GCNzB,IAFA,IAAIE,EAAY,GAEP,EAAI,EAAG,EAAI,MAAO,EACzBA,EAAUpyG,MAAM,EAAI,KAAOxM,SAAS,IAAI0e,OAAO,IAWlC,MARf,SAAqBmgG,EAAK/qD,GACxB,IAAI9+D,EAAI8+D,GAAU,EACdgrD,EAAMF,EAGV,OAAQE,EAAID,EAAI7pH,EAAI,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM8pH,EAAID,EAAI7pH,EAAI,IAAM,IAAM8pH,EAAID,EAAI7pH,EAAI,KAAO8pH,EAAID,EAAI7pH,EAAI,KAAO8pH,EAAID,EAAI7pH,EAAI,KAAO8pH,EAAID,EAAI7pH,EAAI,KAAO8pH,EAAID,EAAI7pH,EAAI,KAAO8pH,EAAID,EAAI7pH,EAAI,MAAMiX,eCaxT,IAzBf,SAAYwE,EAASouG,EAAK/qD,GACD,iBAAZrjD,IACTouG,EAAkB,WAAZpuG,EAAuB,IAAIq9C,WAAW,IAAM,KAClDr9C,EAAU,MAIZ,IAAIsuG,GADJtuG,EAAUA,GAAW,IACFkE,SAAWlE,EAAQkuG,KAAOA,KAK7C,GAHAI,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBF,EAAK,CAGP,IAFA,IAAIx4F,EAAQytC,GAAU,EAEb9+D,EAAI,EAAGA,EAAI,KAAMA,EACxB6pH,EAAIx4F,EAAQrxB,GAAK+pH,EAAK/pH,GAGxB,OAAO6pH,EAGT,OAAO,EAAYE,K,cCNrB,IAAIl4F,EAAS,CACT,MAAS,EACT,MAAS,EACT,KAAQ,EACR,IAAO,EACP,KAAQ,EACR,MAAS,GAObL,EAAOw4F,iBAAmB3wG,QAM1B,IAAI4wG,EAAmB,CAAEz4F,EAAOw4F,kBAOhCx4F,EAAOO,mBAAqB,SAASC,IACY,IAAzCi4F,EAAiB/xG,QAAQ8Z,IACzBi4F,EAAiBzyG,KAAKwa,IAS9BR,EAAOS,sBAAwB,SAASD,GACpC,IAAIk4F,EAAeD,EAAiB/xG,QAAQ8Z,IACtB,IAAlBk4F,GACAD,EAAiB1xG,OAAO2xG,EAAc,IAO9C,IAAIC,EAAgB,GAgBpB,SAASC,IACL,IAAIC,EAAa,CACbj5C,WAAY,GACZk5C,aAAc,GACdxxG,KAAM,KACNyxG,OAAQ,MAGRjxG,EAAQ,IAAI3N,MACZ+M,EAAQY,EAAMZ,MAAOY,EAAMZ,MAAMrB,MAAM,MAAQ,GACnD,IAAIqB,GAASA,EAAM7N,OAAS,EACxB,OAAOw/G,EAEX,IAAIjqH,EAAI,KAIR,OAHGsY,EAAM,KACLtY,EAAIsY,EAAM,GAAGkP,MAAM,iDAEnBxnB,GAAKA,EAAEyK,QAAU,GAEe,IAA7B6N,EAAM,GAAGR,QAAQ,QAEhBmyG,EAAWj5C,WAAa14D,EAAM,GAAGgR,OAAO,EAAGhR,EAAM,GAAGR,QAAQ,MAG5DmyG,EAAWj5C,WAAa14D,EAAM,GAAGgR,OAAO,EAAGhR,EAAM,GAAGR,QAAQ,MAEzDmyG,IAGXA,EAAWj5C,WAAahxE,EAAE,GAC1BiqH,EAAWC,aAAelqH,EAAE,GAC5BiqH,EAAWvxG,KAAO1Y,EAAE,GACpBiqH,EAAWE,OAASnqH,EAAE,GACfiqH,GASX,SAASnxG,IACL,IAAImZ,EAAS5c,UAAU,GAAI0D,EAAQ1D,UAAU,GACzCuhC,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GACjD,KAAGoc,EAAO1Y,GAASkZ,EAAOlZ,OAQ1B,IAJA,IAAIkxG,IACIh4F,EAAO5W,QAAQ+uG,mBAAqBL,EAAcK,oBAClDJ,IACJh4F,EAAa63F,EAAiB37G,OAAO+jB,EAAOD,YACxCpyB,EAAI,EAAGA,EAAIoyB,EAAWvnB,OAAQ7K,IAAK,CACvC,IAAIkB,EAAIkxB,EAAWpyB,GACfC,EAAIiB,EAAEiY,GACV,GAAGlZ,GAAmB,mBAAR,EAAoB,CAC9B,IAAIwqH,EAAc,GAElBA,EAAYjzG,MAAK,IAAIiF,MAAOiuG,eAExBr4F,EAAO7W,IACPivG,EAAYjzG,KAAK,IAAM6a,EAAO7W,GAAK,KAGnC6uG,GAAcA,EAAWj5C,WAAWvmE,OAAS,GAC7C4/G,EAAYjzG,KAAK,IAAM6yG,EAAWj5C,WAAa,OAGnD,IAAIu5C,EAAeF,EAAYn8G,OAAO0oC,GAEtC/2C,EAAEuB,KAAKN,GAAG6xB,MAAM7xB,EAAGypH,KAiB/B,SAASn5F,EAAOrY,EAAOqC,EAAI4W,EAAY3W,GACnCnH,KAAKkH,GAAKA,EACVlH,KAAKmH,QAAUA,GAAW,GAC1BnH,KAAK8d,WAAaA,EACd9d,KAAK8d,aACL9d,KAAK8d,WAAa,IAEtB9d,KAAK6E,MAAQ0Y,EAAO1Y,GAEpB,IADA,IAAIyxG,EAAUlqH,OAAOmZ,KAAKgY,GAClB7xB,EAAI,EAAGA,EAAI4qH,EAAQ//G,OAAQ7K,IAC/BsU,KAAKs2G,EAAQ5qH,IACTkZ,EAAI1X,KAAK,KAAM8S,KAAMs2G,EAAQ5qH,IA7GzCwxB,EAAOU,iBAAmB,SAASzW,GAC/B0uG,EAAgB1uG,GAAW,IAoH/B+V,EAAO5vB,UAAU2wB,SAAW,SAAUpZ,GAClC7E,KAAK6E,MAAQ0Y,EAAO1Y,IAExB1Z,EAAOD,QAAUgyB,EAKjBA,EAAOK,OAAS,CACZC,MAAO,QACP3e,MAAO,QACPC,KAAM,OACNy3G,IAAK,MACLx3G,KAAM,OACNrB,MAAO,U,cC3MXvS,EAAOD,QAAU,SAASC,GAoBzB,OAnBKA,EAAOqrH,kBACXrrH,EAAOsrH,UAAY,aACnBtrH,EAAOurH,MAAQ,GAEVvrH,EAAOwmH,WAAUxmH,EAAOwmH,SAAW,IACxCvlH,OAAOC,eAAelB,EAAQ,SAAU,CACvCmB,YAAY,EACZC,IAAK,WACJ,OAAOpB,EAAOQ,KAGhBS,OAAOC,eAAelB,EAAQ,KAAM,CACnCmB,YAAY,EACZC,IAAK,WACJ,OAAOpB,EAAOO,KAGhBP,EAAOqrH,gBAAkB,GAEnBrrH,I,cCpBR,IAAIwrH,EAAUxrH,EAAOD,QAAU,CAC7BgiD,EAAG,CAAC,CACFjhD,KAAM,UACN2qH,IAAK,YAEPzqH,EAAG,CAAC,CAEFF,KAAM,SACN2qH,IAAK,wCACLtxG,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEuxG,OAAQ,wBAGVppH,EAAG,CAAC,CAAExB,KAAM,SACZP,EAAG,CAAC,CAAEO,KAAM,gBACZ8gH,EAAG,CAAC,CAAE9gH,KAAM,QACZoN,EAAG,CAAC,CAAEpN,KAAM,UACZuB,EAAG,CAAC,CAAEvB,KAAM,UACZ6qH,EAAG,CAAC,CAAE7qH,KAAM,cACZO,EAAG,CAAC,CAAEP,KAAM,YAEZW,EAAG,CAAC,CACFX,KAAM,SACN2qH,IAAK,eACLtxG,MAAO,CAAC,QAAS,QACjBuxG,OAAQ,UAEV9qH,EAAG,CAAC,CACFE,KAAM,aACN2qH,IAAK,mBACLtxG,MAAO,CAAC,UAAW,MACnBuxG,OAAQ,eAEVl/G,EAAG,CAAC,CACFuL,KAAM,YACN0zG,IAAK,4BACLtxG,MAAO,CAAC,OAAQ,SAChBuxG,OAAQ,UAEV/qH,EAAG,CAAC,CAGF8qH,IAAK,mCACLtxG,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCuxG,OAAQ,gBAEVn/G,EAAG,CACD,CACEwL,KAAM,MACN0zG,IAAK,0DACLtxG,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCuxG,OAAQ,SAAU1qH,GAChB,OAAQA,EAAU,SAChB,qBACAA,EAAE4qH,KACF,kBACA,iBAGN,CAEE7zG,KAAM,OACN0zG,IAAK,wBACLtxG,MAAO,CAAC,UAAW,UACnBuxG,OAAQ,cAEV,CACE5qH,KAAM,UACN2qH,IAAK,gBACLC,OAAQ,cAEV,CACE5qH,KAAM,OACN2qH,IAAK,sCACLtxG,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCuxG,OAAQ,SAAU1qH,GAChB,OAAqB,MAAbA,EAAE0gF,QACR,qBACA,YAGN,CACE3pE,KAAM,eACN0zG,IAAK,kCACLtxG,MAAO,CAAC,UAAW,SACnBuxG,OAAQ,yBAEV,CACE3zG,KAAM,SACN0zG,IAAK,6CACLtxG,MAAO,CAAC,UAAW,OAAQ,WAC3BuxG,OAAQ,SAAU1qH,GAChB,OAAqB,MAAbA,EAAE6qH,QACR,mBACA,kBAGN,CAEE9zG,KAAM,MACN0zG,IAAK,6CACLtxG,MAAO,CAAC,QAAS,YAAa,MAAO,UACrCuxG,OAAQ,SAAU1qH,GAChB,MAAO,aAAeA,EAAE8nC,UAAY,MAAQ,MAAQ,OAAS9nC,EAAE0rC,OAAS,MAAQ,MAGpF,CACE30B,KAAM,SACN0zG,IAAK,0CACLtxG,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCuxG,OAAQ,SAAU1qH,GAChB,OAA2B,MAAnBA,EAAE8qH,cACR,qBACA,oBAGN,CACEhrH,KAAM,QACN2qH,IAAK,eACLC,OAAQ,YAEV,CACE5qH,KAAM,MACN2qH,IAAK,gBACLC,OAAQ,UAEV,CACE5qH,KAAM,OACN2qH,IAAK,aACLC,OAAQ,WAEV,CACE5qH,KAAM,QACN2qH,IAAK,eACLC,OAAQ,YAEV,CACE5qH,KAAM,WACN2qH,IAAK,kBACLC,OAAQ,eAEV,CACE5qH,KAAM,YACN2qH,IAAK,0CAEP,CACE3qH,KAAM,UACN2qH,IAAK,eAEP,CACE3qH,KAAM,WACN2qH,IAAK,mBACLC,OAAQ,gBAEV,CACE5qH,KAAM,SACN2qH,IAAK,iBACLC,OAAQ,cAEV,CACE5qH,KAAM,cACN2qH,IAAK,2BACLtxG,MAAO,CAAC,OAAQ,QAChBuxG,OAAQ,qBAEV,CAKE3zG,KAAK,aACL0zG,IAAK,+KACLtxG,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3IuxG,OAAQ,SAAU1qH,GAChB,IAAIiL,EAAM,qCAaV,OAXAA,GAAmB,MAAXjL,EAAE+qH,MAAiB,qBAAuB,OAGlD9/G,GAAqB,MAAbjL,EAAEknC,QAAmB,cAAgB,KAEzB,MAAhBlnC,EAAEinC,aACJh8B,GAAO,kBAGTA,GAA2B,MAAnBjL,EAAE,cAAyB,iBAAmB,KACtDiL,GAA6B,MAArBjL,EAAE,gBAA2B,mBAAqB,OAI9D,CACEF,KAAM,kBACN2qH,IAAK,wBAEP,CACE3qH,KAAM,mBACN2qH,IAAK,0BACLC,OAAQ,wBAEV,CACE5qH,KAAM,aACN2qH,IAAK,qBACLC,OAAQ,kBAEV,CACE3zG,KAAM,QACN0zG,IAAK,iCACLtxG,MAAO,CAAC,KAAM,YAAa,SAC3BuxG,OAAQ,SAAU1qH,GAChB,IAAIiL,EAAM,UAOV,OANmB,MAAfjL,EAAEmR,YACJlG,GAAO,MACQ,MAAXjL,EAAEQ,QACJyK,GAAO,QAGJA,IAGX,CAEE8L,KAAM,aAEN0zG,IAAK,mEACLtxG,MAAO,CAAC,YAAa,SACrBuxG,OAAQ,oBAEV,CACE5qH,KAAM,eACN2qH,IAAK,gCACLtxG,MAAO,CAAC,WAAY,SACpBuxG,OAAQ,wBAEV,CACE3zG,KAAM,SACN0zG,IAAK,oBACLtxG,MAAO,CAAC,OAAQ,QAChBuxG,OAAQ,eAEV,CACE5qH,KAAM,UACN2qH,IAAK,eAEP,CACE3qH,KAAM,YACN2qH,IAAK,iBAEP,CACE3qH,KAAM,UACN2qH,IAAK,uCACLtxG,MAAO,CAAC,gBAAiB,MAAO,kBAChCuxG,OAAQ,SAAU1qH,GAChB,OAA4B,MAApBA,EAAEomF,eACR,mBACA,kBAGN,CACEtmF,KAAM,cACN2qH,IAAK,0BACLC,OAAQ,oBAEV,CACE3zG,KAAM,OACN0zG,IAAK,sCACLtxG,MAAO,CAAC,KAAM,YAAa,UAC3BuxG,OAAQ,SAAU1qH,GAChB,OAAQA,EAAQ,OAAI,eAAiB,cAGzC,CAGE+W,KAAM,aACN0zG,IAAK,IAAItyD,OAEP,wKAMFh/C,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCuxG,OAAQ,SAAU1qH,GAChB,MAAO,sBAAwBA,EAAEgrH,KAAO,SAAW,MAGvD,CAEElrH,KAAM,YACN2qH,IAAK,IAAItyD,OAEP,2FAQFh/C,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCuxG,OAAQ,SAAU1qH,GAChB,MAAO,mBAAqBA,EAAEgrH,KAAO,SAAW,MAGpD,CAIElrH,KAAM,eACN2qH,IAAK,kCACLtxG,MAAO,CAAC,SACRuxG,OAAQ,iBAEV,CAGE5qH,KAAM,YACN2qH,IAAK,8BACLC,OAAQ,gBAEV,CACE3zG,KAAM,UACNoC,MAAO,CAAC,YAMdlZ,OAAOmZ,KAAKoxG,GAASvnG,SAAQ,SAAUniB,GAC1B0pH,EAAQ1pH,GACdmiB,SAAQ,SAAUrZ,GAChBA,EAAI6gH,MACP7gH,EAAI6gH,IAAM,QAEP7gH,EAAI8gH,SACP9gH,EAAI8gH,OAAS,a,gBC9UnB,MAAMO,EAAkB30F,EAAQ,KAa1B40F,EAAgB,SAAS12E,GAE3B3gC,KAAK2gC,MAAQA,EAGb3gC,KAAKs3G,SAAW,KAIhBt3G,KAAKrG,KAAO,KAIZqG,KAAK/T,KAAO,KAGZ+T,KAAKu3G,UAAY,MAQrB,SAASC,EAAcC,GACnB,QAA+Bl3G,IAA3Bk3G,EAAcH,SACd,MAAM,IAAIjgH,MAAM,yEAGpBogH,EAAcH,SAASv6F,QACvB06F,EAAcF,UAAY,IAAIpvG,KAQlC,SAASuvG,EAAaD,GAClB,QAA+Bl3G,IAA3Bk3G,EAAcH,SACd,MAAM,IAAIjgH,MAAM,wEAGpBogH,EAAcH,SAASlvF,OAO3B,SAASuvF,IACL,GAAIC,cAAcC,gBA3DH,cA4DX,MA5DW,aA6DR,GAAID,cAAcC,gBA5DX,aA6DV,MA7DU,YA+Dd,MAAM,IAAIxgH,MACN,6DASR,SAASygH,EAAcC,GAGnB/3G,KAAKg4G,UAAY,GAGjBh4G,KAAKi4G,SAAWN,IAGhB33G,KAAKk4G,aAAc,EAGnBl4G,KAAK+3G,gBAAkBA,EAM3BD,EAAcH,yBAA2BA,EAOzCG,EAAcxqH,UAAU6/F,SAAW,SAASxsD,GACxC,GAAIA,EAAMwI,eAAgB,CAEtB,MAAMsuE,EAAgBz3G,KAAKm4G,yBAAyBx3E,GAIpD3gC,KAAKg4G,UAAU90G,KAAKu0G,GAGpBz3G,KAAKo4G,cAIDp4G,KAAKk4G,aACLV,EAAcC,KAU1BK,EAAcxqH,UAAU6qH,yBAA2B,SAASx3E,GACxD,MAAM82E,EAAgB,IAAIJ,EAAc12E,GAGlC03E,EAAiBZ,EAAc92E,MAAMg/C,oBACrC/5D,EAAS,IAAI8a,YAmBnB,OAjBA23E,EAAer+E,iBAAiB5qB,QAAQxiB,GAAKg5B,EAAOunE,SAASvgG,IAG7D6qH,EAAcH,SAAW,IAAIM,cAAchyF,EACvC,CAAE0yF,SAAUt4G,KAAKi4G,WAIrBR,EAAc99G,KAAO,GAGrB89G,EAAcH,SAASiB,gBAAkB,SAASC,GAC1CA,EAAU7+G,KAAK+tB,KAAO,GACtB+vF,EAAc99G,KAAKuJ,KAAKs1G,EAAU7+G,OAInC89G,GAaXK,EAAcxqH,UAAUmrH,YAAc,SAAS93E,GAC3C,GAAIA,EAAM8gD,eACN,OAGJ,MAAMjjE,EAAQxe,KAAKg4G,UACnB,IAAItsH,EAEJ,IAAKA,EAAI,EAAGA,EAAI8yB,EAAMjoB,OAAQ7K,IAC1B,GAAI8yB,EAAM9yB,GAAGi1C,MAAM82C,qBAAuB92C,EAAM82C,mBAAoB,CAChE,MAAMihC,EAAmBl6F,EAAM9yB,GAE3BsU,KAAKk4G,YACLR,EAAagB,GAGbl6F,EAAMva,OAAOvY,EAAG,GAM5BsU,KAAKo4G,eAQTN,EAAcxqH,UAAU8qH,YAAc,WAClC,MAAMxxF,EAAa5mB,KAAK+3G,gBAExB/3G,KAAKg4G,UAAU5oG,QAAQqoG,IACnB,GAAIA,EAAc92E,MAAM5W,UACpB0tF,EAAcxrH,KAAO,sBAClB,CACH,MAAMib,EAAKuwG,EAAc92E,MAAM82C,mBAEzB80B,EADc3lF,EAAWmxD,mBAAmB7wE,GACtBolG,iBAEZ,cAAZC,IACAkL,EAAcxrH,KAAOsgH,OASrCuL,EAAcxqH,UAAUyvB,MAAQ,WAC5B,GAAI/c,KAAKk4G,YACL,MAAM,IAAI7gH,MAAM,sCAKpB2I,KAAKk4G,aAAc,EAGnBl4G,KAAKg4G,UAAU5oG,QAAQqoG,GAAiBD,EAAcC,IAGtD1yG,QAAQH,IACH,2DACG5E,KAAKg4G,UAAUzhH,6BAM3BuhH,EAAcxqH,UAAU86B,KAAO,WAE3BpoB,KAAKk4G,aAAc,EAGnBl4G,KAAKg4G,UAAU5oG,QAAQqoG,GAAiBC,EAAaD,IACrD1yG,QAAQH,IAAI,sBAMhBkzG,EAAcxqH,UAAU+sG,SAAW,WAC/Br6F,KAAKg4G,UAAU5oG,QAAQqoG,IACnB,MAAMvrC,EAAO,IAAIgU,KAAKu3B,EAAc99G,KAAM,CAAEsN,KAAMjH,KAAKi4G,WACjDh2C,EAAM+d,IAAIC,gBAAgB/T,GAC1Bx0E,EAAI2D,SAASwF,cAAc,KAEjCxF,SAASyc,KAAKlX,YAAYlJ,GAC1BA,EAAE8F,MAAQ,gBACV9F,EAAEu8D,KAAOgO,EACTvqE,EAAE2iG,SAAY,QAAOr6F,KAAKi4G,SAASl1G,MAAM,KAAK,GAC9CrL,EAAE4iG,QACFhvG,OAAO00F,IAAI24B,gBAAgB12C,MASnC61C,EAAcxqH,UAAUsrH,oBAAsB,WAC1C,GAAI54G,KAAKk4G,YACL,MAAM,IAAI7gH,MACN,kEAIR2I,KAAKo4G,cAEL,MAAM55F,EAAQ,GAUd,OARAxe,KAAKg4G,UAAU5oG,QACXkoG,GACI94F,EAAMtb,KACF,IAAIk0G,EACA,IAAIl3B,KAAKo3B,EAAS39G,KAAM,CAAEsN,KAAMjH,KAAKi4G,WACrCX,EAASrrH,KACTqrH,EAASC,aAElB/4F,GAOXs5F,EAAcxqH,UAAUurH,YAAc,WAClC,OAAO74G,KAAKi4G,UAMhB9sH,EAAOD,QAAU4sH,G,gPC7SjB,MAAM/5F,EAASF,oBAAU6E,GA4CnBo2F,EAAoB,IAAI3zF,IAAI,CAAE,OAAQ,MAAO,QAU7C4zF,EAAkB3sH,OAAO4sH,OAAO,CAIlCC,KAAMxsH,OAAO,QAKbysH,SAAUzsH,OAAO,YAKjB0sH,UAAW1sH,OAAO,aAKlB2sH,SAAU3sH,OAAO,YAKjB4sH,OAAQ5sH,OAAO,YAkCZ,MAAM6sH,EA0FTrjH,cAAc,mBAjFF,IAiFE,qBA1EG,MA0EH,+BAjEkB,GAiElB,gBA1DL8iH,EAAgBE,MA0DX,mBAnDH,GAmDG,sBA5CC,WA4CD,iBAzJe,QAyJf,sBA3BA,GA4BVj5G,KAAKu5G,eAAiBv5G,KAAKu5G,eAAersH,KAAK8S,MAC/CA,KAAKw5G,qBAAuBx5G,KAAKw5G,qBAAqBtsH,KAAK8S,MAC3DA,KAAKy5G,gBAAkBz5G,KAAKy5G,gBAAgBvsH,KAAK8S,MACjDA,KAAK05G,eAAiB15G,KAAK05G,eAAexsH,KAAK8S,MAC/CA,KAAK25G,eAAiB35G,KAAK25G,eAAezsH,KAAK8S,MAC/CA,KAAK45G,kBAAoB55G,KAAK45G,kBAAkB1sH,KAAK8S,MACrDA,KAAK65G,iBAAmB75G,KAAK65G,iBAAiB3sH,KAAK8S,MACnDA,KAAK85G,aAAe95G,KAAK85G,aAAa5sH,KAAK8S,MAC3CA,KAAK+5G,oBAAsB/5G,KAAK+5G,oBAAoB7sH,KAAK8S,MAW7Du5G,eAAe3yF,GACN5mB,KAAKg6G,cACNh6G,KAAKi6G,YAAcrzF,EACf5mB,KAAKi6G,cACLj6G,KAAKi6G,YACAC,mBA/MA,eA+MiCl6G,KAAK05G,gBAC3C15G,KAAKi6G,YACAC,mBAvNC,gBAuNiCl6G,KAAKy5G,iBAC5Cz5G,KAAKi6G,YACAC,mBA7MA,eA6MiCl6G,KAAK25G,gBAC3C35G,KAAKg6G,aAAc,GAElBh6G,KAAKi6G,YAAYE,eAClBn6G,KAAKi6G,YAAYG,gBAjNZ,eAiN0C,KAW3D,mBAAmBC,GACfr6G,KAAKs6G,gBAAkBD,EAS3B,aAAaA,GACTr6G,KAAKu6G,UAAYF,EASrB,cAAcA,GACVr6G,KAAKw6G,WAAaH,EAQtBI,eAAe5D,GACX72G,KAAKu5G,iBACLv5G,KAAK06G,aAAa7D,GACd72G,KAAKi6G,aAAej6G,KAAKi6G,YAAYE,eACrCn6G,KAAKi6G,YAAYU,cAnQR,gBAoQT36G,KAAKi6G,YAAYW,YA1QP,gBA0QkC,CACxC39G,WAAY,CACR49G,aAAc76G,KAAK86G,kBACnBjE,OAAQ72G,KAAK+6G,YAGd/6G,KAAKw6G,YACZx6G,KAAKw6G,WAAW,wCASxBQ,gBACQh7G,KAAKi6G,cACDj6G,KAAKi6G,YAAYE,eACjBn6G,KAAKi6G,YAAYU,cA7RX,iBA8RN36G,KAAKi6G,YAAYW,YAxRZ,eAwRsC,CACvC39G,WAAY,CACR49G,aAAc76G,KAAKi7G,yBAGpBj7G,KAAKw6G,YACZx6G,KAAKw6G,WAAW,yCAY5BU,qBAAqBL,GACb76G,KAAKm7G,UAAUN,GACf76G,KAAKm7G,UAAUN,GAAc5mC,qBACxBv2C,KAAKgF,IACF,MAAM,KAAE/oC,EAAF,OAAQk9G,GAAWn0E,EAEnB04E,EAAY,WAAUP,EACrB,IAAG76G,KAAKi6G,YAAYryE,cAAcivE,IAEzC1c,YAAaxgG,EAAMyhH,KAEtB7+E,MAAMv3B,IACH+Y,EAAO/Y,MACA,wCAAW61G,aAAwB71G,OAGlD+Y,EAAO/Y,MAAO,sCAAqC61G,GAU3D1mC,aAAan0C,GACLA,IAAgBhgC,KAAKq7G,eACrBr7G,KAAKq7G,aAAeviH,OAAOknC,GAEvBhgC,KAAKs7G,SAAWvC,EAAgBI,YAEhCp7F,EAAOnZ,IAAI,kCACX5E,KAAKm7G,UAAUn7G,KAAKi7G,sBACf9mC,aAAan0E,KAAKq7G,cAClB39E,KAAK,KACF3f,EAAOnZ,IAAI,oCAId23B,MAAM,KACHxe,EAAO/Y,MAAM,kCAGzB+Y,EAAOnZ,IAAK,wBAAuB5E,KAAKq7G,eAWhDnnC,SAAS5qD,GACLtpB,KAAKu7G,SAAWxhF,QAAQzQ,GAEpBtpB,KAAKs7G,SAAWvC,EAAgBI,WAChCn5G,KAAKm7G,UAAUn7G,KAAKi7G,sBAAsB/mC,SAASl0E,KAAKu7G,UAUhEb,aAAac,GACJ1C,EAAkBvwF,IAAIizF,IAK3Bx7G,KAAK+6G,QAAUS,EACfz9F,EAAOnZ,IAAK,gCAA+B42G,IALvCz9F,EAAOnZ,IAAK,kBAAiB42G,kBAerCC,gBACI,MAAO,CACHC,oBAAqB17G,KAAKi7G,qBAC1B/C,YAAal4G,KAAKs7G,SAAWvC,EAAgBI,UAC7CwC,cAAe,EACfC,eAAgB,GAWxBpC,uBACI,MAAMqC,EACA77G,KAAKi6G,YAAYniC,kBAClBtyE,IAAIs2G,IACM,CACH50G,GAAI40G,EAAOxkC,QACXs0B,YAAakQ,EAAOxP,iBACpByP,eACIC,IAAO9jG,MAAM4jG,EAAOG,YArYrB,kBAqYoD,MACvDC,QAAQ,KAKdz2G,EAAS,GAEf,IAAK,IAAI/Z,EAAI,EAAGA,EAAImwH,EAAQtlH,SAAU7K,EAClC+Z,EAAOo2G,EAAQnwH,GAAGwb,IAAM20G,EAAQnwH,GAEpC,MAAMywH,EAAUn8G,KAAKi6G,YAAYryE,WASjC,OAPAniC,EAAO02G,GAAW,CACdj1G,GAAIi1G,EACJvQ,YAAa,oBACbmQ,eAAgB/7G,KAAKy7G,gBACrBS,QAAQ,GAGLz2G,EAYX22G,aAAa7jC,GACLv4E,KAAKs7G,SAAW/iC,IAChBx6D,EAAOnZ,IAAK,iBAAgB5E,KAAKs7G,OAAO5kH,iBAC/B6hF,EAAS7hF,YAClBsJ,KAAKs7G,OAAS/iC,GAYtBuhC,eACQ95G,KAAKi6G,aACLj6G,KAAKi6G,YAAYr1B,4BAvbN,gBAwbPh4E,KAAKwL,UAAUpY,KAAKy7G,kBAahChC,gBAAgB9sH,GACZ,MAAM,aAAEkuH,EAAF,OAAgBhE,GAAWlqH,EAAMsQ,WAEnC+C,KAAKs7G,SAAWvC,EAAgBE,MAChCj5G,KAAKo8G,aAAarD,EAAgBG,UAClCl5G,KAAK+5G,oBAAoBc,EAAchE,GACvC72G,KAAK45G,qBACE55G,KAAKs7G,SAAWvC,EAAgBI,WACpCn5G,KAAKi7G,uBAAyBJ,IAIjC76G,KAAKo8G,aAAarD,EAAgBK,UAClCp5G,KAAK65G,mBAAmBn8E,KAAK,KACzB19B,KAAKo8G,aAAarD,EAAgBG,UAClCl5G,KAAK+5G,oBAAoBc,EAAchE,GACvC72G,KAAK45G,uBAcjBF,eAAe/sH,GACPqT,KAAKs7G,SAAWvC,EAAgBI,WAC7Bn5G,KAAKi7G,uBAAyBtuH,EAAMsQ,WAAW49G,eAClD76G,KAAKo8G,aAAarD,EAAgBK,UAClCp5G,KAAK65G,oBAYbF,iBACQ35G,KAAKi6G,YAAYE,gBACjBp8F,EAAOnZ,IAAI,gCACX5E,KAAKi6G,YAAYG,gBA3fR,eA2fsC,KAUvDU,kBACI,OAAO1vG,KAAKmM,MAAsB,IAAhBnM,KAAKC,UAAwB,EAWnDuuG,oBACI,GAAI55G,KAAKs7G,SAAWvC,EAAgBG,SAAU,CAC1C,MAAMmB,EAAWr6G,KAAKm7G,UAAUn7G,KAAKi7G,sBAErCZ,EAASt9F,MAAM/c,KAAKq7G,cACnB39E,KAAK,KACF19B,KAAKo8G,aAAarD,EAAgBI,WAClCkD,IAAeC,aAAat8G,KAAKi7G,sBACjCl9F,EAAOnZ,IAAI,4BAEP5E,KAAKu6G,WACLv6G,KAAKu6G,UAAU,mCAEfv6G,KAAKs6G,iBACLt6G,KAAKs6G,iBAAgB,GAGzBD,EAASnmC,SAASl0E,KAAKu7G,UACvBv7G,KAAK85G,iBAERv9E,MAAMpsB,IACH4N,EAAO/Y,MAAM,mCAAoCmL,MAc7D0pG,mBACI,GAAI75G,KAAKs7G,SAAWvC,EAAgBK,SAAU,CAC1C,MAAMrkE,EAAQ/0C,KAAKi7G,qBAEnB,OAAOj7G,KAAKm7G,UAAUn7G,KAAKi7G,sBACtB7yF,OACAsV,KAAK,KACF19B,KAAKo8G,aAAarD,EAAgBE,MAClCoD,IAAeE,WAAWv8G,KAAKi7G,sBAC/Bl9F,EAAOnZ,IAAI,8BACX5E,KAAKk7G,qBAAqBnmE,GAE1B,MAAMynE,EACAx8G,KAAKi6G,YAAYE,cACb,4CACA,mCACJsC,EAAgB,CAClB1nE,SAGA/0C,KAAKu6G,WACLv6G,KAAKu6G,UAAUiC,EAAYC,GAE3Bz8G,KAAKs6G,iBACLt6G,KAAKs6G,iBAAgB,GAEzBt6G,KAAK85G,iBAERv9E,MAAMpsB,IACH4N,EAAO/Y,MAAM,kCAAmCmL,KAK5D,OAAQ2tB,QAAQC,UAepBg8E,oBAAoBc,EAAchE,GAC9B72G,KAAK+6G,QAAUlE,EACf72G,KAAKi7G,qBAAuBJ,EAC5B98F,EAAOnZ,IAAK,gBAAe5E,KAAKi7G,iCACfj7G,KAAK+6G,SACtB/6G,KAAKm7G,UAAUN,GACR76G,KAAK08G,0BACZL,IAAeM,cAAc9B,EAAc76G,KAAK+6G,SASpD2B,0BAII,OAHA3+F,EAAO9Y,MACA,wDAAejF,KAAK+6G,mBAEnB/6G,KAAK+6G,SACb,IAAK,MACD,OAAO,IAAI6B,IACf,IAAK,OACD,OAAO,IAAIC,IACf,IAAK,MACD,OAAO,IAAIC,IACf,QACI,MAAM,IAAIzlH,MAAO,mBAAkB2I,KAAK+6G,c,mSCtqBpD,MAAMh9F,EAASF,oBAAU6E,GAOlB,MAAMk6F,UAAmB5oC,IAAiB,sDAM5B,MAN4B,sBAY9B,MAZ8B,uBAkB7B,MAOhBj3D,MAAMijB,GAKF,OAJKhgC,KAAK+8G,eACN/8G,KAAK+8G,aAAe/8G,KAAKg9G,YAAYh9E,IAGlChgC,KAAK+8G,aAAar/E,KAAK,IAC1B,IAAII,QAAQC,IACR/9B,KAAKi9G,eAAelgG,QACpBghB,OAUZ3V,OACI,OAAO,IAAI0V,QACPC,IACI/9B,KAAKi9G,eAAeC,OAAS,IAAMn/E,IACnC/9B,KAAKi9G,eAAe70F,SAUhC6rD,qBACI,OAA2B,OAAvBj0E,KAAKm9G,cACEr/E,QAAQC,QAAQ,CACnBpkC,KAAMqG,KAAKm9G,cACXtG,OAAQ,QAIT/4E,QAAQE,OAAO,2BAQ1Bk2C,SAAS5qD,GACL,MAAM8zF,GAAgB9zF,EAEtB,IAAKtpB,KAAKurG,QACN,OAAOztE,QAAQC,UAGnB,MAAM4C,EAAQ3gC,KAAKurG,QAAQvxE,iBAAiB,GAE5C,OAAK2G,GAMDA,EAAMwzB,UAAYipD,IAClBz8E,EAAMwzB,QAAUipD,EAChBr/F,EAAOnZ,IAAI0kB,EAAQ,OAAS,WAGzBwU,QAAQC,YAVXhgB,EAAO/Y,MAAM,wCAEN84B,QAAQC,WAkBvBi/E,YAAYh9E,GACR,OAAIhgC,KAAKi9G,eACEn/E,QAAQC,UAGZ,IAAID,QAAQ,CAACC,EAAS/4B,KACzBhF,KAAKo0E,gBAAgBp0C,GACpBtC,KAAK9X,IACF5lB,KAAKurG,QAAU3lF,EACf5lB,KAAKi9G,eAAiB,IAAIrF,cAAchyF,GACxC5lB,KAAKi9G,eAAe1E,gBACdl/G,GAAK2G,KAAKq9G,eAAehkH,EAAEM,MACjCokC,MAEHxB,MAAMpsB,IACH4N,EAAO/Y,MAAO,iCAAgCmL,GAC9CnL,QAYZq4G,eAAe1jH,GACXqG,KAAKm9G,cAAgBxjH,M,yRC3I7B,MAAMokB,EAASF,oBAAU6E,GASlB,MAAMo6F,UAAmBzR,IAyB5Bp1G,cACIwlC,QADU,oBApBD,GAoBC,qBAfA,IAeA,yBAVG,GAUH,sBALC,MAOXz7B,KAAKkpG,gBAAkBlpG,KAAKkpG,gBAAgBh8G,KAAK8S,MAQrD+c,MAAMijB,GAKF,OAJKhgC,KAAK+8G,eACN/8G,KAAK+8G,aAAe/8G,KAAKg9G,YAAYh9E,IAGlChgC,KAAK+8G,aAAar/E,KAAK,KAC1B19B,KAAKs9G,YAAc,GACnBt9G,KAAKu9G,WAAa,EAElBv9G,KAAKkqG,uBASb9hF,OAOI,OANApoB,KAAKqqG,wBACLrqG,KAAKiK,MAAQjK,KAAKw9G,eAAex9G,KAAKs9G,YAAat9G,KAAKu9G,YACxDv9G,KAAKqpG,qBAAuB,KAC5BrpG,KAAKopG,aAAe,KACpBppG,KAAKy9G,gBAAiB,EAEf3/E,QAAQC,UAQnBk2C,qBACI,OAAmB,OAAfj0E,KAAKiK,MACE6zB,QAAQC,QAAQ,CACnBpkC,KAAMqG,KAAKiK,MACX4sG,OAAQ,QAIT/4E,QAAQE,OAAO,2BAQ1Bk2C,SAAS5qD,GACL,MAAM8zF,GAAgB9zF,EAEtB,IAAKtpB,KAAKurG,QACN,OAAOztE,QAAQC,UAGnB,MAAM4C,EAAQ3gC,KAAKurG,QAAQvxE,iBAAiB,GAE5C,OAAK2G,GAMDA,EAAMwzB,UAAYipD,IAClBz8E,EAAMwzB,QAAUipD,EAChBr/F,EAAOnZ,IAAI0kB,EAAQ,OAAS,WAGzBwU,QAAQC,YAVXhgB,EAAO/Y,MAAM,wCAEN84B,QAAQC,WAgBvBo2C,aAAan0C,GACT,OAAOhgC,KAAKwrG,YAAYxrE,GAU5B09E,iBAAiBC,GAOb,MAAMn1D,EAAS,IAAI2C,YAAY,IACzByyD,EAAO,IAAI74D,SAASyD,GAqC1B,OAlCAq1D,EAAcD,EAAM,EAAG,QAGvBC,EAAcD,EAAM,EAAG,QAGvBC,EAAcD,EAAM,GAAI,QACxBA,EAAKE,UAAU,GAAI,IAAI,GACvBF,EAAKG,UAAU,GAAI,GAAG,GAGtBH,EAAKG,UAAU,GAAI,GAAG,GAGtBH,EAAKE,UAAU,GAAI99G,KAAKsrG,aAAa,GAGrCsS,EAAKE,UAAU,GACgB,EAA3BvkG,OAAOvZ,KAAKsrG,aA7JI,GA6JqC,GAAG,GAG5DsS,EAAKG,UAAU,GAAI,EAAIxkG,OAhKH,IAgKiC,GAAG,GAExDqkG,EAAKG,UAAU,GAlKK,IAkKoB,GAGxCF,EAAcD,EAAM,GAAI,QAGxBA,EAAKE,UAAU,EAAG,GAAKH,GAAY,GAGnCC,EAAKE,UAAU,GAAIH,GAAY,GAExB,IAAIn5D,WAAWgE,GAU1Bw0D,YAAYh9E,GACR,OAAIhgC,KAAKy9G,eACE3/E,QAAQC,UAGZ/9B,KAAKmpG,wBAAwBnpE,EAAahgC,KAAKkpG,iBACjDxrE,KAAK,KACF19B,KAAKy9G,gBAAiB,IAWlCvU,gBAAgB7vG,GAIZ,MAAM2kH,EAAc3kH,EAAEowG,YAAYC,eAAe,GAMjD1pG,KAAKs9G,YAAYp6G,KAAK,IAAI4lG,aAAakV,IACvCh+G,KAAKu9G,YAAcS,EAAYznH,OAWnCinH,eAAeS,EAAS1nH,GACpB,MAAMonH,EAAsB,EAATpnH,EACbiyD,EAAS,IAAI2C,YAAY,GAAKwyD,GAC9BC,EAAO,IAAI74D,SAASyD,GAGpBjuC,EAASva,KAAK09G,iBAAiBC,GAC/BxlH,EAAMoiB,EAAOhkB,OAEnB,IAAK,IAAI7K,EAAI,EAAGA,EAAIyM,IAAOzM,EACvBkyH,EAAKM,SAASxyH,EAAG6uB,EAAO7uB,IAM5B,OA+BR,SAAyBinF,EAAQnoB,EAAQ2zD,GAErC,IAAIzyH,EAAGwN,EACHu6D,EAAOhmE,EAAG2wH,EACd,MAAMC,EAAcF,EAAa5nH,OACjC,IAAIpK,EAAIq+D,EAER,IAAK9+D,EAAI,EAAGA,EAAI2yH,IAAe3yH,EAG3B,IAFA+nE,EAAQ0qD,EAAazyH,GACrB0yH,EAAc3qD,EAAMl9D,OACf2C,EAAI,EAAGA,EAAIklH,IAAellH,EAAG/M,GAAK,EACnCsB,EAAI2d,KAAKytB,KAAK,EAAGztB,KAAKqP,IAAI,EAAGg5C,EAAMv6D,KACnCy5E,EAAO2rC,SAASnyH,EAAGsB,EAAI,EAAQ,MAAJA,EAAiB,MAAJA,GAAY,GA7CxD8wH,CAAgBX,EAAM,GAAIK,GAEnB,IAAI/9B,KAAK,CAAE09B,GAAQ,CAAE32G,KAAM,eAc1C,SAAS42G,EAAcD,EAAMpzD,EAAQnuC,GACjC,MAAMmiG,EAAMniG,EAAO9lB,OAGnB,IAAK,IAAI7K,EAAI,EAAGA,EAAI8yH,IAAO9yH,EACvBkyH,EAAKM,SAAS1zD,EAAS9+D,EAAG2wB,EAAO9kB,WAAW7L,O,iSCtQpD,MAAMqyB,EAASF,oBAAU6E,GAgBlB,MAAMm6F,UAAoBxR,IA0B7Bp1G,cACIwlC,QADU,kBArBH,MAqBG,8BAfS,MAeT,oCAVe,MAUf,sBALC,MAOXz7B,KAAKkpG,gBAAkBlpG,KAAKkpG,gBAAgBh8G,KAAK8S,MACjDA,KAAKy+G,iBAAmBz+G,KAAKy+G,iBAAiBvxH,KAAK8S,MAQvD+c,MAAMijB,GAKF,OAJKhgC,KAAK+8G,eACN/8G,KAAK+8G,aAAe/8G,KAAKg9G,YAAYh9E,IAGlChgC,KAAK+8G,aAAar/E,KAAK,KAC1B19B,KAAKkqG,uBASb9hF,OACI,OAAKpoB,KAAK0+G,SAMH,IAAI5gF,QAAQC,IACf/9B,KAAK+8G,aAAe,KACpB/8G,KAAKqqG,wBACLrqG,KAAK2+G,qBAAuB5gF,EAC5B/9B,KAAK0+G,SAAS98B,YAAY,CACtBg9B,QAASjrC,SAVb51D,EAAO/Y,MAAM,+CAEN84B,QAAQE,UAkBvBi2C,qBACI,OAAmB,OAAfj0E,KAAKiK,MACE6zB,QAAQC,QAAQ,CACnBpkC,KAAMqG,KAAKiK,MACX4sG,OAAQ,SAIT/4E,QAAQE,OAAO,2BAQ1Bk2C,SAAS5qD,GACL,MAAM8zF,GAAgB9zF,EAEtB,IAAKtpB,KAAKurG,QACN,OAAOztE,QAAQC,UAGnB,MAAM4C,EAAQ3gC,KAAKurG,QAAQvxE,iBAAiB,GAE5C,OAAK2G,GAMDA,EAAMwzB,UAAYipD,IAClBz8E,EAAMwzB,QAAUipD,EAChBr/F,EAAOnZ,IAAI0kB,EAAQ,OAAS,WAGzBwU,QAAQC,YAVXhgB,EAAO/Y,MAAM,wCAEN84B,QAAQC,WAgBvBo2C,aAAan0C,GACT,OAAOhgC,KAAKwrG,YAAYxrE,GAU5Bg9E,YAAYh9E,GACR,GAAsB,OAAlBhgC,KAAK0+G,SACL,OAAO5gF,QAAQC,UA6BnB,OA1B0B,IAAID,QAAQ,CAACC,EAASC,KAC5C,IACIh+B,KAAK6+G,iBACP,MAAOxlH,GACL2kC,IAMJh+B,KAAK8+G,2BAA6B/gF,EAGlC/9B,KAAK0+G,SAAS5iG,UAAY9b,KAAKy+G,iBAE/Bz+G,KAAK0+G,SAAS98B,YAAY,CACtBg9B,QAAShrC,IACT/7C,OAAQ,CACJgnE,WAAY7+F,KAAKsrG,YACjByT,IAAK,QAQZrhF,KAAK,IACF19B,KAAKmpG,wBACDnpE,EACAhgC,KAAKkpG,kBAWrBA,gBAAgB7vG,GAIZ,MAAM2kH,EAAc3kH,EAAEowG,YAAYC,eAAe,GAEjD1pG,KAAK0+G,SAAS98B,YAAY,CACtBg9B,QAAS/qC,IACT0hC,IAAKyI,IAWbS,iBAAiBplH,GACb,OAAQA,EAAEM,KAAKilH,SACf,KAAK7qC,IAED/zE,KAAKiK,MAAQ5Q,EAAEM,KAAK47G,IACc,OAA9Bv1G,KAAK2+G,uBACL3+G,KAAK2+G,uBACL3+G,KAAK2+G,qBAAuB,KAC5B3+G,KAAK0+G,SAAS38B,YACd/hF,KAAK0+G,SAAW,MAEpB,MACJ,KAAK7/G,IACDkf,EAAOnZ,IAAIvL,EAAEM,MACb,MACJ,KAAKm6E,IACD/1D,EAAOnZ,IAAI,qBACX5E,KAAK8+G,6BACL,MACJ,QACI/gG,EAAO/Y,MACF,6DAC4B3L,EAAEM,KAAKilH,cAWhDC,iBAMI,IAEI7+G,KAAK0+G,SAAW,IAAI/8B,OAAO,iDAAkD,CAAE11F,KAAM,wBACvF,MAAO+yH,GAEL,IACIh/G,KAAK0+G,SAAW,IAAI/8B,OAAO,6CAA8C,CAAE11F,KAAM,wBACnF,MAAOgzH,GACL,MAAM,IAAI5nH,MAAM,0C,wLC5PhC,MAAM0mB,EAASF,oBAAU6E,GAOzB,SAASw8F,IACL,OAAO5zH,OAAOusD,aACPvsD,OAAOusD,YAAY1jC,KACnB7oB,OAAOusD,YAAYsnE,QACnB7zH,OAAOusD,YAAYsnE,OAAOC,gBAC3B9zH,OAAOusD,YAAY1jC,MAAQ7oB,OAAOusD,YAAYsnE,OAAOC,gBACrDj3G,KAAKgM,MASf,MAAMkrG,EAAmBjzH,OAAO4sH,OAAO,CAMnCsG,gBAAiB,kBAOjBC,gBAAiB,kBAKjBC,cAAe,kBAsYZ,MAAMnD,EAAiB,IAvS9B,MAWIpmH,c,YANoB,I,EAMN,uB,EAAA,M,sFACV+J,KAAKy/G,gBASTA,gBACI,MAAMC,EAAUlhE,IAAkBrmC,QApChB,kCAsClB,GAAgB,OAAZunG,EACA,IACI,MAAMC,EAAa3D,IAAO9jG,MAAMwnG,GAEhC1/G,KAAK4/G,kBAAoBD,EAC3B,MAAOtmH,GAGL,YAFA0kB,EAAO5Y,KAAK,uCAaxB06G,gBACIrhE,IAAkB1xC,QA1DA,iCA2DdF,KAAKwL,UAAUpY,KAAK4/G,oBAU5BjD,cAAc9B,EAAsBhE,QACat2G,IAAzCP,KAAK4/G,kBAAkB/E,IACvB76G,KAAK4/G,kBAAkB/E,GAAgB,CACnChE,SACAlmE,OAAQ,IAEZ3wC,KAAK4/G,kBAAkB/E,GAAclqE,OAAOztC,KAAK,CAC7C+D,KAAMo4G,EAAiBC,gBACvBxV,UAAWoV,MAEfl/G,KAAK6/G,iBAEL9hG,EAAO5Y,KAAM,WAAU01G,oBAS/Bp/D,cACI,MAAMqkE,EAAgB1zH,OAAOmZ,KAAKvF,KAAK4/G,mBACjCjtC,EAAS,GAEf,IAAK,IAAIjnF,EAAI,EAAGA,EAAIo0H,EAAcvpH,SAAU7K,EAAG,CAC3C,MAAMq0H,EAAc//G,KAAK4/G,kBAAkBE,EAAcp0H,IACnDs0H,EAA8B,CAChCjjG,MAAOgjG,EAAYpvE,OAAO,GAAGm5D,UAC7B+M,OAAQkJ,EAAYlJ,OACpBgE,aAAciF,EAAcp0H,GAC5Bu0H,SAAUjgH,KAAKkgH,YAAYJ,EAAcp0H,KAG7CinF,EAAOzvE,KAAK88G,GAKhB,OAFArtC,EAAOrxE,KAAK,CAAC5J,EAAGC,KAAOD,EAAEqlB,OAAS,IAAMplB,EAAEolB,OAAS,IAE5C41D,EASXwtC,cAActF,UACH76G,KAAK4/G,kBAAkB/E,GAC9B76G,KAAK6/G,gBASTK,YAAYrF,GACR,MAAMkF,EAAc//G,KAAK4/G,kBAAkB/E,GAE3C,OAAIkF,EACO//G,KAAKogH,mBAAmBL,EAAYpvE,QAGxC,GAaX2rE,aAAazB,GACT,YAA6Ct6G,IAAzCP,KAAK4/G,kBAAkB/E,IACvB98F,EAAO5Y,KAAK,qDACM01G,IAEV,IAEZ76G,KAAK4/G,kBAAkB/E,GAAclqE,OAAOztC,KAAK,CAC7C+D,KAAMo4G,EAAiBE,gBACvBzV,UAAWoV,MAEfl/G,KAAK6/G,gBAEE7/G,KAAKkgH,YAAYrF,GAActkH,OAAS,GAUnD8pH,uBAAuBxF,GACnB,QAA6Ct6G,IAAzCP,KAAK4/G,kBAAkB/E,GACvB,OAAQ,EAEZ,MAAMoF,EAAWjgH,KAAKkgH,YAAYrF,GAElC,GAAwB,IAApBoF,EAAS1pH,OACT,OAAQ,EAKZ,OAFoB0pH,EAASA,EAAS1pH,OAAS,GAE/BqqB,KAEJ,EAGLq/F,EAAS1pH,OAAS,EAS7BgmH,WAAW1B,QACsCt6G,IAAzCP,KAAK4/G,kBAAkB/E,GACvB98F,EAAO5Y,KAAK,sDACM01G,IAElB76G,KAAK4/G,kBAAkB/E,GAAclqE,OAAOztC,KAAK,CAC7C+D,KAAMo4G,EAAiBG,cACvB1V,UAAWoV,MAEfl/G,KAAK6/G,iBAYbO,mBAAmBzvE,GACf,GAAsB,IAAlBA,EAAOp6C,OACP,MAAO,GAGX,MAAMo8E,EAAS,GACf,IAAI2tC,EAAmB,KACnBC,EAA8B,GAQlC,SAASC,IACL,QAAiCjgH,IAA7BggH,EAAeE,WACiB,OAA7BF,EAAeE,UAClB,GAAI9tC,EAAOp8E,OAAS,GAAKo8E,EAAOA,EAAOp8E,OAAS,GAAGqqB,IAAK,CACpD,MAAM8/F,EAAc/tC,EAAOA,EAAOp8E,OAAS,GAEvCgqH,EAAexjG,OAAS2jG,EAAY9/F,IACpC2/F,EAAeE,UAAYF,EAAexjG,MACpC2jG,EAAY9/F,IAElB2/F,EAAeE,UAAY,UAEH,OAArBH,GAA+C,IAAlB3tC,EAAOp8E,OAC3CgqH,EAAeE,UAAYF,EAAexjG,MACpCwjG,EAAexjG,MAAQujG,EACvB,KAENC,EAAeE,UAAY,KAGnCF,EAAeI,SAAWJ,EAAe3/F,KAAO2/F,EAAexjG,MACzDwjG,EAAe3/F,IAAM2/F,EAAexjG,MACpC,KACN41D,EAAOzvE,KAAKq9G,GACZA,EAAiB,GAGrB,IAAK,IAAI70H,EAAI,EAAGA,EAAIilD,EAAOp6C,SAAU7K,EAAG,CACpC,MAAMk1H,EAAejwE,EAAOjlD,GAE5B,OAAQk1H,EAAa35G,MACrB,KAAKo4G,EAAiBC,gBACO,OAArBgB,EACAA,EAAmBM,EAAa9W,UAEhC/rF,EAAO5Y,KAAK,oCACNy7G,GAEV,MACJ,KAAKvB,EAAiBE,qBACWh/G,IAAzBggH,EAAexjG,OACa,OAAzBwjG,EAAexjG,OAGlByjG,IAFAD,EAAexjG,MAAQ6jG,EAAa9W,UAKxC,MAEJ,KAAKuV,EAAiBG,mBACWj/G,IAAzBggH,EAAexjG,OACa,OAAzBwjG,EAAexjG,MAClBgB,EAAO5Y,KAAK,iCAAkCy7G,IAE9CL,EAAe3/F,IAAMggG,EAAa9W,UAClC0W,KAEJ,MAEJ,QACIziG,EAAO5Y,KAAK,+CAQpB,OAJIo7G,EAAexjG,OACfyjG,IAGG7tC,IAWfrnF,OAAO+wH,eAAiBA,I,snBClaT,SAASpgB,EAAgBlnD,EAAO5tC,EAAQ,IACnDA,EAAU,EAAH,GAAO47D,IAAqB57D,GAEnCnH,KAAK+0C,MAAQA,EACb,MAAM8rE,EAAM7gH,KAAK8gH,SAAS/rE,GAC1B/0C,KAAK/T,KAAO40H,EAAMA,EAAIlkE,KAAO,KAC7B38C,KAAKsH,KAAOu5G,EAAIthG,QAAQjY,KACxBtH,KAAKmH,QAAUA,EACfnH,KAAK0jB,KAAO,IAAIoxB,IAAK3tC,EAAS4tC,EAAO/0C,KAAK/T,MAC1C+T,KAAK+0C,MAAQA,EAGb/0C,KAAKw9B,iBAAiBiZ,oBAClB,CAACsqE,EAASj8G,EAAK8yC,EAAaroB,KACxB9L,IAAWmI,oBACPwD,YAA4B2xF,EAASj8G,EAAKyqB,MAItDvvB,KAAKw9B,iBAAiBiZ,0BAClB3xC,IAMQA,GACA2e,IAAWuI,cACPg1F,IACA,CAAEv8G,QAASK,IAEnB2e,IAAWqH,QACPle,KAAKwL,UACD,CACIlR,GAAI85G,IACJl8G,WAKxBm3F,EAAgB3uG,UAAUwzH,SAAW,SAAU/rE,GAC3C,IACI,OAAOnoC,KAAKsL,MAAMnF,KAAKgiC,EAAMhyC,MAAM,KAAK,KAE5C,MAAO1J,GACH,OAAO,OAQf4iG,EAAgB3uG,UAAUme,QAAU,SAAStE,EAAU,IACnDnH,KAAK0jB,KAAKjY,QAAQtE,EAAQD,GAAIC,EAAQwxC,WAU1CsjD,EAAgB3uG,UAAU8e,OAAS,SAASjF,GACxCnH,KAAK0jB,KAAKtX,OAAOjF,IAOrB80F,EAAgB3uG,UAAUiiB,WAAa,YAAYmzB,GAK/C,OAAO1iC,KAAK0jB,KAAKnU,cAAcmzB,IAQnCu5D,EAAgB3uG,UAAU6tD,OAAS,WAC/B,OAAOn7C,KAAK0jB,KAAKy3B,UAOrB8gD,EAAgB3uG,UAAU2zH,SAAW,SAASlsE,GAC1C/0C,KAAK+0C,MAAQA,GAWjBknD,EAAgB3uG,UAAU4zH,oBAAsB,SAAS/5G,EAAQ,IAC7DA,EAAU,EAAH,GAAO67D,IAAqB77D,GACnC,MAAMlb,EAAQ+T,KAAK/T,KACnB,OAAO,IAAIk1H,IAAgB,CACvBl1H,OACA4rC,OAAQ73B,KAAKmH,QACboN,WAAYvU,KACZsH,KAAMtH,KAAKsH,QASnB20F,EAAgB3uG,UAAUkwC,iBAAmB,SAAS3R,EAAO9F,GACzD/lB,KAAK0jB,KAAK0gB,YAAYvY,EAAO9F,IAQjCk2E,EAAgB3uG,UAAUmmD,oBAAsB,SAAS5nB,EAAO9F,GAC5D/lB,KAAK0jB,KAAKyC,eAAe0F,EAAO9F,IAMpCk2E,EAAgB3uG,UAAU8zH,mBAAqB,WAC3C,OAAOphH,KAAK0jB,KAAKwxB,iBAUrB+mD,EAAgB3uG,UAAU0pD,WAAa,SAASy2D,EAASv4C,GAAS,GAC9Dl1D,KAAK0jB,KAAKkzB,KAAKI,WAAWy2D,EAASv4C,GAAQ,IAU/C+mC,EAAgB3uG,UAAUmkH,cAAgB,SAAShE,EAASv4C,GAAS,GACjEl1D,KAAK0jB,KAAKkzB,KAAK66D,cAAchE,EAASv4C,GAAQ,IAMlD+mC,EAAgB3uG,UAAU+zH,QAAU,WAChC,MAAM1nH,EAAOqG,KAAK0jB,KAAK03B,eAEjBkmE,EAAW,GAEjBA,EAASzR,KAAO,IAAI1nG,KACpBm5G,EAASr/C,IAAM32E,OAAOyvB,SAASk5C,KAC/BqtD,EAASC,GAAKjkF,UAAU0mC,UAExB,MAAMp/D,EAAM5E,KAAK0jB,KAAK43B,aAQtB,OANI12C,IACA08G,EAAS59F,KAAO9e,GAGpBjL,EAAK2nH,SAAWA,EAET3nH,I,igCC/HX,MAAMokB,GAASF,oBAAU6E,GA+CV,SAASy+F,GAAgBh6G,GAGpC,KAFAA,EAAU,GAAH,GAAO67D,KAAqB77D,IAEtBlb,MAAQkb,EAAQlb,KAAK0W,gBAAkBwE,EAAQlb,KAAM,CAC9D,MAAMysD,EACA,8GAIN,MADA36B,GAAO/Y,MAAM0zC,GACP,IAAIrhD,MAAMqhD,GAEpB14C,KAAKsH,KAAOH,EAAQG,KACpBtH,KAAK6jB,aAAe,IAAIC,IACxB9jB,KAAKmH,QAAUA,EACfnH,KAAKwhH,aAAe,IAAIC,IAA4BzhH,MACpDA,KAAK63E,aAAe,GACpB73E,KAAKo7E,MAAMj0E,GACXnH,KAAK0hH,mBAAqB,IAAIC,IAAmB3hH,MAMjDA,KAAK4hH,iBAAmB,KACxB5hH,KAAK6hH,oBAAsB,KAC3B7hH,KAAK8hH,YAAc,KACnB9hH,KAAK+hH,sBAAuB,EAC5B/hH,KAAKgiH,aAAc,EACnBhiH,KAAKiiH,iBAAkB,EACvBjiH,KAAKkiH,iBAAkB,EACvBliH,KAAKmiH,iBAAmB,CACpB/nF,OAAO,EACP1B,OAAO,GAEX14B,KAAKoiH,gBAAiB,EAGtBpiH,KAAKqiH,kBAAoB,KAEzBriH,KAAKsiH,qBAAsB,EAG3BtiH,KAAKuiH,uBAAyB,KAM9BviH,KAAKwiH,YAAa,EAGlBxiH,KAAK8rB,WAAa,GAOlB9rB,KAAK+8F,kBACC,IAAI0lB,IAAkBziH,KAAMA,KAAK6jB,aAAc1c,GAMrDnH,KAAK0iH,oBACC,IAAIC,IAAoB3iH,KAAMmH,EAAQ0wB,OAAO+qF,cAAgB,IAMnE5iH,KAAK6iH,4BAA8B,IAAIC,IAA2B9iH,MAKlEA,KAAK+iH,4BAA6B,EAKlC/iH,KAAKgjH,sBAAwB,IAAIC,IAAsBjjH,MAUvDA,KAAKkjH,qBAAuB,KAE5B,MAAMC,EACA7qG,SAASnR,EAAQ0wB,OAAOskB,KAAOh1C,EAAQ0wB,OAAOskB,IAAIinE,eAAgB,IAOxEpjH,KAAKojH,eAAiB1pG,MAAMypG,GAAS,EAAIA,EACzCplG,GAAO7Y,KAAM,mBAAkBlF,KAAKojH,gBAQpCpjH,KAAKqjH,4BAA6B,EAQlCrjH,KAAKm8C,KAAM,EAMXn8C,KAAKsjH,iBAAmB,KAExBtjH,KAAKujH,kBAAoB,IAAIC,IAAWxjH,KAAK28C,MAC7C38C,KAAKyjH,iBAAmB,IAAIC,IAAiB1jH,KAAK28C,MAQlD38C,KAAK2jH,uCAAoCpjH,EAKrCP,KAAK4jH,oBACL7lG,GAAO7Y,KAAK,uCAEZlF,KAAK6jH,eAAiB,IAAIpsE,IAAcz3C,OAG5CA,KAAK8jH,kBAED38G,EAAQ+7D,sBACRljE,KAAKkjE,uBAGL/7D,EAAQi8D,yBACRpjE,KAAKmjE,0BAGLh8D,EAAQg8D,yBACRnjE,KAAKmjE,0BAGLh8D,EAAQ87D,iBACRjjE,KAAKijE,kBAGTjjE,KAAK+jH,oBAAsB,IAAIC,IAAoBhkH,MAKvDmhH,GAAgB7zH,UAAU2I,YAAckrH,GAcxCA,GAAgB8C,gBAAkB,SAAStgH,GACvC,OAAOlI,UAAQiI,eAAeC,IAQlCw9G,GAAgB7zH,UAAU8tF,MAAQ,SAASj0E,EAAU,IAG7CA,EAAQoN,aACRvU,KAAKuU,WAAapN,EAAQoN,WAC1BvU,KAAK0jB,KAAO1jB,KAAKuU,WAAWmP,KAG5B1jB,KAAKwhH,aAAa0C,sBAGtB,MAAM,OAAErsF,GAAW73B,KAAKmH,QAKlBg9G,EAAgB,CAClBC,cAAevsF,EAAO2wD,aAChB3wD,EAAO2wD,aAAa47B,cACpBvsF,EAAOskB,KAAOtkB,EAAOskB,IAAI2sC,aAAerxD,IAAcC,KAC5D2sF,sBAAuBxsF,EAAO2wD,cAAgB3wD,EAAO2wD,aAAa67B,sBAClEC,SAAWzsF,EAAO2wD,cAAgB3wD,EAAO2wD,aAAaO,gBAC9ClxD,EAAOgxD,YAAcpxD,IAAcC,KAC3C6sF,SAAU1sF,EAAOskB,IACXtkB,EAAOskB,IAAI4sC,gBAAmBlxD,EAAOskB,IAAI0sC,YAAcpxD,IAAcC,KACrED,IAAc8b,KAGxBvzC,KAAKwkH,eAAiB,IAAIC,IAAezkH,KAAMmkH,GAC/CnkH,KAAK0kH,gBAAkB7sF,EAAO8sF,aAAe9sF,EAAO8sF,aAAernB,IAASsnB,kBAC5E5kH,KAAK28C,KAAO38C,KAAK0jB,KAAKi3B,WAClB36C,KAAKmH,QAAQlb,KADL,MAED4rC,EAFC,CAGJgtF,QAAS7kH,KAAK0kH,kBAElBvD,GAAgB8C,iBAIpBjkH,KAAK8kH,4BACC9kH,KAAK8kH,4BAA4B53H,KAAK8S,MAC5CA,KAAK28C,KAAKvY,YACN4T,0BAAmCh4C,KAAK8kH,6BAE5C9kH,KAAK+kH,yBAA2B/kH,KAAK+kH,yBAAyB73H,KAAK8S,MACnEA,KAAK28C,KAAKvY,YACN4T,uBAAgCh4C,KAAK+kH,0BAEzC/kH,KAAKglH,4BACChlH,KAAKglH,4BAA4B93H,KAAK8S,MAC5CA,KAAK28C,KAAKvY,YACN4T,0BAAmCh4C,KAAKglH,6BAE5ChlH,KAAKilH,kBAAoBjlH,KAAKilH,kBAAkB/3H,KAAK8S,MACrDA,KAAK28C,KAAKvY,YAAY4T,iCAClBh4C,KAAKilH,mBAETjlH,KAAKklH,kCAAoCllH,KAAKklH,kCAAkCh4H,KAAK8S,MACrFA,KAAK28C,KAAKvY,YAAY4T,kBAA2Bh4C,KAAKklH,mCAEtDllH,KAAK2jE,QAAU,IAAIwhD,IACfnlH,KACA63B,EACA,CAACpzB,EAAS4kC,KACN,IACIrpC,KAAKspC,YACD7kC,EAAS4kC,GAAI,GACnB,MAAOrkC,GACL+Y,GAAO5Y,KAAK,+CAAgDH,GAASA,EAAMF,QAIlF9E,KAAKg1E,MACNh1E,KAAKg1E,IAAM,IAAI1xC,IAAItjC,KAAMmH,GACzBnH,KAAKwhH,aAAa4D,qBAGtBplH,KAAKqlH,uBAAyB,IAAIC,IAAuBtlH,KAAMA,KAAKg1E,KACpEh1E,KAAKulH,oBAAsB,IAAIC,IAAoBxlH,KAAMA,KAAKg1E,KAE9Dh1E,KAAKi5E,4BACC,IAAIvE,IACF10E,KAAKg1E,IACLh1E,KACA,CAKIo1E,eAAgBv9C,EAAO4tF,8BACvBtwC,kBAAmBt9C,EAAO6tF,mCAEtC1lH,KAAKi5E,4BAA4BruE,OAGjC,IAAIoZ,GAAkB,EAuCtB,GArCI6T,EAAO2sD,SAAW3sD,EAAO2sD,QAAQmhC,qBACjC3hG,EAAmC,IAAhB5Y,KAAKC,UAAmBwsB,EAAO2sD,QAAQmhC,oBAGzD3lH,KAAK2oB,aACN3oB,KAAK2oB,WAAa,IAAIlF,IAAWzjB,KAAK0jB,KAAM,CACxCN,UAAWpjB,KAAK0kH,gBAChBvhG,SAAU0U,EAAO+tF,sBAAwB/tF,EAAO+tF,sBAAwB5lH,KAAK4nC,WAC7ErkB,OAAQsU,EAAOtU,QAAW,GAAEvjB,KAAKuU,WAAWpN,QAAQouC,MAAMz6C,UAAUkF,KAAKmH,QAAQlb,OACjFu3B,OAAQqU,EAAOrU,OACfe,gBAAiBsT,EAAOguF,yBACxB5iG,YAAa4U,EAAO5U,YACpBC,gBAAiB2U,EAAO3U,gBACxBgB,iCAAkC2T,EAAO3T,iCACzCF,kBACAgxB,SAAUh1C,KAAKmH,QAAQlb,KACvBo3B,gBAAiBwU,EAAOxU,gBACxBC,mBAAoBuU,EAAOvU,qBAE/BG,IAAWyB,UAAUohB,uBAAuB,CACxC,eAAkBtmC,KAAK0kH,kBAIvB7sF,EAAO5S,wBACPjlB,KAAK2oB,WAAWhC,qBAAqB3mB,OAI7CA,KAAKwhH,aAAasE,yBAIlB9lH,KAAKwhH,aAAauE,2BAIdluF,EAAOyrC,sBAAwBn/C,IAAQ6hG,uBAGvC,GAAInuF,EAAO06E,mBAAoB,CAC3Bx0F,GAAO7Y,KAAK,8DAEPlF,KAAKimH,iBACNjmH,KAAKimH,eAAiB,IAAI3T,IAAiBtyG,KAAM63B,EAAO06E,qBAG5D,MAAM2T,EAAwB,IAAIC,IAElCD,EAAsBlgG,GAAG62E,uBAAsC,IAC3D78F,KAAK6jB,aAAa8D,KAAKX,qBAE3BhnB,KAAKimH,eAAejT,uBAAuBkT,QAE3CnoG,GAAO5Y,KAAK,0FAMpB,GAAI0yB,EAAO2rC,yBAA2Br/C,IAAQ6hG,uBAC1C,GAAInuF,EAAO06E,mBAAoB,CACtBvyG,KAAKimH,iBACNjmH,KAAKimH,eAAiB,IAAI3T,IAAiBtyG,KAAM63B,EAAO06E,qBAG5D,MAAM6T,EAAoB,IAAIC,IAE9BD,EAAkBpgG,GAAG62E,mBAAkC,IACnD78F,KAAK6jB,aAAa8D,KAAKX,cAE3BhnB,KAAKimH,eAAejT,uBAAuBoT,QAE3CroG,GAAO5Y,KAAK,0FAKhB0yB,EAAO0rC,yBACPvjE,KAAKsmH,wBAA0B,IAAIC,IAAuBvmH,MAC1DA,KAAKsmH,wBAAwBtgG,GAAG62E,iBAAgC,KAC5D78F,KAAK6jB,aAAa8D,KAAKX,oBAE3BhnB,KAAKsmH,wBAAwBtgG,GAAG62E,2BAA0C2pB,IACtExmH,KAAK6jB,aAAa8D,KAAKX,2BAAgDw/F,MAK3E,iBAAkB3uF,GAClB73B,KAAKwpC,SAAS3R,EAAO4uF,cAOzBzmH,KAAK0mH,aAAe,IAAIC,IAAqB3mH,MAG7CA,KAAK4mH,4BAA8B,IAAIC,IAA4B7mH,MAE/D63B,GAAUA,EAAOme,gBAAkBne,EAAOme,eAAe8wE,YACzD9mH,KAAK4kF,4BACD,SAAU/sD,EAAOme,eAAe8wE,YAIxC9mH,KAAK4kF,4BAA4B,YAAa5kF,KAAKwkH,eAAeuC,sBAStE5F,GAAgB7zH,UAAU6V,KAAO,SAASw1C,EAAUquE,GAAqB,GACjEhnH,KAAK28C,MACL38C,KAAK28C,KAAKx5C,KAAKw1C,EAAUquE,GAAoBtpF,KAAK,IAAM19B,KAAKinH,uBAYrE9F,GAAgB7zH,UAAU45H,2BAA6B,SAAS//G,GAC5D,OAAO+/G,IAA2Br7H,KAAKmU,KAAhC,MACAmH,EADA,CAEHyzC,iBAAkBumE,GAAgB8C,oBAO1C9C,GAAgB7zH,UAAU65H,SAAW,WACjC,OAAOnnH,KAAK28C,MAAQ38C,KAAK28C,KAAKyqE,QAOlCjG,GAAgB7zH,UAAU+5H,aAAe,WACrC,OAAOttF,QAAQ/5B,KAAKmH,QAAQ0wB,OAAOskB,KAAOn8C,KAAKmH,QAAQ0wB,OAAOskB,IAAIgY,eAGxB,IAA5Bn0D,KAAKmH,QAAQ0wB,OAAOskB,KAQtCglE,GAAgB7zH,UAAUg6H,qBAAuB,WAC7C,OAAOvtF,QAAQ/5B,KAAKmH,QAAQ0wB,OAAO2sD,SAC5BxkF,KAAKmH,QAAQ0wB,OAAO2sD,QAAQ+iC,cAOvCpG,GAAgB7zH,UAAUk6H,MAAQ,WA2C9B,GA1CIxnH,KAAKi5E,8BACLj5E,KAAKi5E,4BAA4BxxD,UACjCznB,KAAKi5E,4BAA8B,MAEnCj5E,KAAK0iH,sBACL1iH,KAAK0iH,oBAAoBj7F,UACzBznB,KAAK0iH,oBAAsB,MAG3B1iH,KAAK6iH,8BACL7iH,KAAK6iH,4BAA4Bp7F,UACjCznB,KAAK6iH,4BAA8B,MAGnC7iH,KAAK2jE,UACL3jE,KAAK2jE,QAAQv7C,OACbpoB,KAAK2jE,QAAU,MAGnB3jE,KAAKunC,iBAAiBn4B,QAAQuxB,GAAS3gC,KAAKynH,oBAAoB9mF,IAEhE3gC,KAAKg1E,IAAIjsC,qBAET/oC,KAAK0nH,oCAED1nH,KAAK2oB,YACL3oB,KAAK2oB,WAAWlB,UAGpBznB,KAAK2nH,mBAAqB3nH,KAAK2nH,kBAAkBpmD,SAG7CvhE,KAAK4hH,mBACL5hH,KAAK4hH,iBAAiBnlG,QACtBzc,KAAK4hH,iBAAmB,MAExB5hH,KAAKsjH,mBACLtjH,KAAKsjH,iBAAiB7mG,QACtBzc,KAAKsjH,iBAAmB,MAIxBtjH,KAAK28C,KAAM,CACX,MAAMA,EAAO38C,KAAK28C,KAuBlB,OApBAA,EAAKx2B,eACD6xB,0BACAh4C,KAAK8kH,6BACTnoE,EAAKx2B,eACD6xB,uBACAh4C,KAAK+kH,0BACTpoE,EAAKx2B,eACD6xB,0BACAh4C,KAAKglH,6BAETroE,EAAKx2B,eACD6xB,iCACAh4C,KAAKilH,mBAETtoE,EAAKx2B,eAAe6xB,kBAA2Bh4C,KAAKklH,mCAEpDllH,KAAKwhH,aAAaoG,sBAElB5nH,KAAK28C,KAAO,KAELA,EAAK6qE,QACP9pF,KAAK,KACE19B,KAAKg1E,KACLh1E,KAAKg1E,IAAI3wC,YAGhB9H,MAAMv3B,IAOH,MAHAhF,KAAK83E,kBAAkB1oE,QACnB+nE,GAAen3E,KAAK6nH,aAAa1wC,EAAYh8B,WAE3Cn2C,IAKlB,OAAO84B,QAAQE,OACX,IAAI3mC,MAAM,6CASlB8pH,GAAgB7zH,UAAUw6H,uBAAyB,WAC/C,OAAO9nH,KAAKi4E,cAAgBj4E,KAAKsjH,iBAAmBtjH,KAAK4hH,kBAS7DT,GAAgB7zH,UAAU63F,kBAAoB,WAC1C,MAAMzpC,EAAW,GAKjB,OAHA17C,KAAK4hH,kBAAoBlmE,EAASx4C,KAAKlD,KAAK4hH,kBAC5C5hH,KAAKsjH,kBAAoB5nE,EAASx4C,KAAKlD,KAAKsjH,kBAErC5nE,GAMXylE,GAAgB7zH,UAAUmwE,QAAU,WAChC,OAAOz9D,KAAKmH,QAAQlb,MAMxBk1H,GAAgB7zH,UAAUoqD,cAAgB,WACtC,OAAO13C,KAAKuU,YAMhB4sG,GAAgB7zH,UAAUy6H,cAAgB,WACtC,OAAO/nH,KAAKgiH,aAMhBb,GAAgB7zH,UAAU06H,WAAa,WACnC,OAAOjuF,QAAQ/5B,KAAKioH,eAMxB9G,GAAgB7zH,UAAU46H,aAAe,WACrC,OAAOloH,KAAKioH,cAMhB9G,GAAgB7zH,UAAU66H,sBAAwB,WAC9C,OAAOnoH,KAAK28C,MAAQ38C,KAAK28C,KAAKyrE,UAAUD,yBAS5ChH,GAAgB7zH,UAAU+6H,mBAAqB,SAASC,GACpD,OAAO,IAAIxqF,QAAQ,CAACC,EAASC,KACpBh+B,KAAKmoH,wBAKNG,EACAtoH,KAAK28C,KAAKyrE,UAAUG,iBAAiBxqF,EAASC,GAE9Ch+B,KAAK28C,KAAKyrE,UAAUI,YAAYzqF,EAASC,GAPzCA,OAiBZmjF,GAAgB7zH,UAAUi6C,eAAiB,SAASlX,GAChD,IAAIwX,EAAS,GAMb,OAJI7nC,KAAKg1E,MACLntC,EAAS7nC,KAAKg1E,IAAIztC,eAAelX,IAG9BwX,GAOXs5E,GAAgB7zH,UAAUm6C,mBAAqB,WAC3C,OAAOznC,KAAKg1E,IAAMh1E,KAAKg1E,IAAIvtC,qBAAuB,MAOtD05E,GAAgB7zH,UAAU+5C,mBAAqB,WAC3C,OAAOrnC,KAAKg1E,IAAMh1E,KAAKg1E,IAAI3tC,qBAAuB,MAOtD85E,GAAgB7zH,UAAUm7H,oBAAsB,WAC5C,MAAO,CACHC,eAAgB1oH,KAAK2oB,WAAWxB,sBAaxCg6F,GAAgB7zH,UAAU04B,GAAK,SAAS2iG,EAASpkH,GACzCvE,KAAK6jB,cACL7jB,KAAK6jB,aAAamC,GAAG2iG,EAASpkH,IAYtC48G,GAAgB7zH,UAAUslD,IAAM,SAAS+1E,EAASpkH,GAC1CvE,KAAK6jB,cACL7jB,KAAK6jB,aAAasC,eAAewiG,EAASpkH,IAKlD48G,GAAgB7zH,UAAUkwC,iBAAmB2jF,GAAgB7zH,UAAU04B,GACvEm7F,GAAgB7zH,UAAUmmD,oBAAsB0tE,GAAgB7zH,UAAUslD,IAQ1EuuE,GAAgB7zH,UAAU4sH,mBAAqB,SAAS0E,EAASr6G,GACzDvE,KAAK28C,MACL38C,KAAK28C,KAAKisE,oBAAoBhK,EAASr6G,IAS/C48G,GAAgB7zH,UAAUu7H,sBAAwB,SAASjK,EAASr6G,GAC5DvE,KAAK28C,MACL38C,KAAK28C,KAAKmsE,uBAAuBlK,EAASr6G,IAUlD48G,GAAgB7zH,UAAUy7H,gBAAkB,SACpCtkH,EAASukH,EAAc,QACvBhpH,KAAK28C,MACL38C,KAAK28C,KAAKrT,YAAY7kC,EAASukH,IAWvC7H,GAAgB7zH,UAAU27H,uBAAyB,SAC3C/hH,EAAIzC,EAASukH,EAAc,QAC3BhpH,KAAK28C,MACL38C,KAAK28C,KAAKusE,mBAAmBhiH,EAAIzC,EAASukH,IASlD7H,GAAgB7zH,UAAUstH,YAAc,SAAS3uH,EAAMs7B,GAC/CvnB,KAAK28C,KACL38C,KAAK28C,KAAKi1D,uBAAuB3lH,EAAMs7B,IAAWvnB,KAAK28C,KAAKjvC,eAE5DqQ,GAAO5Y,KAAK,iDAUpBg8G,GAAgB7zH,UAAU8sH,gBAAkB,SAASnuH,EAAMs7B,GACvDvnB,KAAK46G,YAAY3uH,EAAMs7B,GACvBvnB,KAAK26G,cAAc1uH,IAOvBk1H,GAAgB7zH,UAAUqtH,cAAgB,SAAS1uH,GAC3C+T,KAAK28C,MACL38C,KAAK28C,KAAK+0D,mBAAmBzlH,IAQrCk1H,GAAgB7zH,UAAUy+G,eAAiB,SAAS9/G,GAC5C+T,KAAK28C,MACL38C,KAAK28C,KAAKi1D,uBAAuB,OAAQ,CACrC30G,WAAY,CAAEgJ,MAAO,mCACrBtZ,MAAOV,KACL+T,KAAK28C,KAAKjvC,gBAQxByzG,GAAgB7zH,UAAU67H,WAAa,SAASC,GACxCppH,KAAK28C,MAAQ38C,KAAKm6G,cAClBn6G,KAAK28C,KAAKwsE,WAAWC,GAErBrrG,GAAO5Y,KAAM,0BAAyBnF,KAAK28C,KAAO,GAAK,oBACnD38C,KAAKm6G,cAAgB,GAAK,qCAQtCgH,GAAgB7zH,UAAU+7H,eAAiB,WACvC,QAAyB9oH,IAArBP,KAAKspH,YAA2B,CAChCtpH,KAAKspH,YAAc,IAAIC,IAGvB,MAAMC,EAAmBxpH,KAAKunC,eAAeC,KAE7C,IAAK,MAAME,KAAc8hF,EACrBxpH,KAAKspH,YAAYn8B,SAASzlD,GAI9B,MAAM+B,EAAoBzpC,KAAKg1E,IAAIjtC,gBAAgBP,KAEnD,IAAK,MAAMgwC,KAAe/tC,EACtBzpC,KAAKspH,YAAYn8B,SAAS3V,GAIlC,OAAOx3E,KAAKspH,aAQhBnI,GAAgB7zH,UAAUm8H,uBAAyB,WAC/C,OAAOzpH,KAAK28C,KAAK+/C,qBAUrBykB,GAAgB7zH,UAAU6/F,SAAW,SAASxsD,GAC1C,MAAMtQ,EAAYsQ,EAAMmH,UAClBtE,EAAcxjC,KAAKg1E,IAAIztC,eAAelX,GAG5C,OAAImT,EAAYjtC,OAAS,EAEjBoqC,IAAU6C,EAAY,GACf1F,QAAQC,QAAQ4C,GAGpB7C,QAAQE,OAAO,IAAI3mC,MAAO,qBAAoBg5B,8BAGlDrwB,KAAKmyF,aAAa,KAAMxxD,IAQnCwgF,GAAgB7zH,UAAUo8H,2BAA6B,SAC/CzgF,EACAnhB,GACJ,MAAM6hG,EAAY3pH,KAAK4pH,0BAOlB9hG,GAAO6hG,IAAc7hG,GACtB9nB,KAAK6jB,aAAa8D,KACdX,4BACAhnB,KAAK4nC,WAAYqB,IAQ7Bk4E,GAAgB7zH,UAAUu8H,qBAAuB,SAASlpF,GActD,IAAImpF,EAEJ,GAdI9pH,KAAKoiH,gBAAkBzhF,EAAMwI,iBAAmBxI,EAAM04C,WACtDr5E,KAAKoiH,gBAAiB,EAGtBpiH,KAAK28C,KAAKotE,gBAAgB/pH,KAAK28C,KAAKqtE,WAAW,EAAOxiF,MAC/CxnC,KAAKsiH,qBAAuB3hF,EAAM8gD,iBAAmB9gD,EAAM04C,YAClEr5E,KAAKsiH,qBAAsB,EAG3BtiH,KAAK28C,KAAKotE,gBAAgB/pH,KAAK28C,KAAKqtE,WAAW,EAAOxiF,MAKtDxnC,KAAKqiH,mBAAqB1hF,EAAMwI,eAAgB,CAChD,MAAM8gF,EAAUxuH,UAAQyI,mBAAmBlE,KAAKqiH,mBAEhDyH,EAAmB9pH,KAAK63E,aAAaoyC,QAClC,GAAIjqH,KAAKuiH,wBAA0B5hF,EAAM8gD,eAAgB,CAC5D,MAAMwoC,EAAUxuH,UAAQyI,mBAAmBlE,KAAKuiH,wBAEhDuH,EAAmB9pH,KAAK63E,aAAaoyC,GAKzC,GAAItpF,EAAM8gD,iBAAmBt9D,IAAQ2hE,8BAA+B,CAChE,MAAMhlD,EAAYH,EAAM04C,UAAYt4C,KAAUoD,KAAOxD,EAAM6mE,eAE3DxnG,KAAKg1E,IAAIlvC,aAAahF,GAG1B9gC,KAAK6jB,aAAa8D,KAAKX,qBAA0C2Z,EAAOmpF,IAU5E3I,GAAgB7zH,UAAU48H,uBAAyB,WAC/C,OAAOlqH,KAAKunC,iBACPvS,OAAO2L,GAAUA,EAAMmH,YAAcN,MAAoBxnC,KAAKmqH,qBAC3DxpF,EAAMmH,YAAcN,MAAoBxnC,KAAKoqH,sBAOzDjJ,GAAgB7zH,UAAUm6H,oBAAsB,SAAS9mF,GACrDA,EAAM0pF,eAAe,MACrBrqH,KAAKg1E,IAAItsC,iBAAiB/H,GAC1BA,EAAM8S,oBAAoBikC,qBACtB/2C,EAAM2pF,aACV3pF,EAAM8S,oBAAoBikC,4BACtB/2C,EAAM4pF,mBAKN5pF,EAAM8gD,gBAAkB9gD,EAAMG,YAAcC,KAAUC,SACtDhhC,KAAK2oB,WAAWY,wBAAuB,GAG3CvpB,KAAK6jB,aAAa8D,KAAKX,gBAAqC2Z,IAShEwgF,GAAgB7zH,UAAUmrH,YAAc,SAAS93E,GAC7C,OAAO3gC,KAAKmyF,aAAaxxD,EAAO,OAYpCwgF,GAAgB7zH,UAAU6kG,aAAe,SAASC,EAAUC,GAExD,OAAID,GACIA,EAAS4U,UAKb3U,GACIA,EAAS2U,SALFlpE,QAAQE,OACX,IAAI5T,IAAgB+T,sBAWzBn+B,KAAKwqH,gBAAgBp4B,EAAUC,GACjC30D,KAAK,KACE00D,GACApyF,KAAKynH,oBAAoBr1B,GAIzBC,GAEAryF,KAAKyqH,eAAep4B,GACpBA,EAAS5Q,gBAAkBzhF,KAAKg1E,IAAIlvC,aAAausD,EAASmV,iBAE1DpV,GAAYA,EAAS3Q,gBAAkBzhF,KAAKg1E,IAAIlvC,aAAa/E,KAAUoD,OAGvEnkC,KAAKoiH,gBAAkBpiH,KAAKsiH,sBAC5BtiH,KAAK6pH,qBAAqBx3B,GAGvBv0D,QAAQC,YAElBxB,MAAMv3B,GAAS84B,QAAQE,OAAO,IAAI3mC,MAAM2N,MAejDm8G,GAAgB7zH,UAAUk9H,gBAAkB,SAASp4B,EAAUC,GAC3D,MAAMq4B,EAAuB,GAgB7B,OAdI1qH,KAAK4hH,iBACL8I,EAAqBxnH,KACjBlD,KAAK4hH,iBAAiBzvB,aAAaC,EAAUC,IAEjDt0E,GAAO7Y,KAAK,0CAGZlF,KAAKsjH,iBACLoH,EAAqBxnH,KACjBlD,KAAKsjH,iBAAiBnxB,aAAaC,EAAUC,IAEjDt0E,GAAO7Y,KAAK,0CAGT44B,QAAQyK,IAAImiF,IAOvBvJ,GAAgB7zH,UAAUm9H,eAAiB,SAASp4B,GAChD,GAAIA,EAASlpD,gBAAmBkpD,EAAS5Q,gBAC9B4Q,EAASvxD,YAAcC,KAAUC,QAAU,CAElD,MACMnG,EADUyI,IAAIvB,oCAENzM,KACNtpC,GACIA,EAAEyuC,OAAY43D,EAAS8G,WAAW1+D,KAAtB,SACLzuC,EAAEgvC,QAAUq3D,EAAS8G,WAAWn+D,OAE/CH,GACApX,IAAWkG,0BACP2Z,IAAIpB,4BAA4BrH,IAG5C,GAAIw3D,EAAS5Q,eAAgB,CACzB,MAAMkpC,EAAmB,aAGrBt4B,EAASvxD,YAAcC,KAAUQ,QAAUvhC,KAAK28C,KAAKiuE,gBAAgBD,KACrE3qH,KAAK46G,YAAY+P,EAAkB,CAAEh+H,MAAO0lG,EAASvxD,YAG7D9gC,KAAKg1E,IAAI5tC,cAAcirD,GAGnBA,EAASlpD,eACTnpC,KAAK28C,KAAKzU,aAAamqD,EAAShZ,WAEhCr5E,KAAK28C,KAAKnU,aAAa6pD,EAAShZ,WAGpCgZ,EAASi4B,YAActqH,KAAK6pH,qBAAqB38H,KAAK8S,KAAMqyF,GAC5DA,EAASk4B,kBAAoBvqH,KAAK0pH,2BAA2Bx8H,KAAK8S,MAClEqyF,EAAS70D,iBACLk6C,qBACA2a,EAASi4B,aACbj4B,EAAS70D,iBACLk6C,4BACA2a,EAASk4B,mBAEbl4B,EAASg4B,eAAerqH,MAExBA,KAAK6jB,aAAa8D,KAAKX,cAAmCqrE,IAY9D8uB,GAAgB7zH,UAAUu9H,uBAAyB,SAASlqF,GACxD,MAAMmqF,EAAsB,GAc5B,OAZI9qH,KAAK4hH,iBACLkJ,EAAoB5nH,KAAKlD,KAAK4hH,iBAAiBzuB,iBAAiBxyD,IAEhE5iB,GAAO9Y,MAAM,uEAGbjF,KAAKsjH,iBACLwH,EAAoB5nH,KAAKlD,KAAKsjH,iBAAiBnwB,iBAAiBxyD,IAEhE5iB,GAAO9Y,MAAM,uEAGV64B,QAAQm+C,WAAW6uC,GACrBptF,KAAK,KAEFiD,EAAM8gD,gBAAkBzhF,KAAKg1E,IAAIlvC,aAAanF,EAAM6mE,mBAWhE2Z,GAAgB7zH,UAAUy9H,wBAA0B,SAASpqF,GACzD,MAAMqqF,EAAuB,GAa7B,OAXIhrH,KAAK4hH,iBACLoJ,EAAqB9nH,KAAKlD,KAAK4hH,iBAAiBvuB,kBAAkB1yD,IAElE5iB,GAAO9Y,MAAM,+DAEbjF,KAAKsjH,iBACL0H,EAAqB9nH,KAAKlD,KAAKsjH,iBAAiBjwB,kBAAkB1yD,IAElE5iB,GAAO9Y,MAAM,+DAGV64B,QAAQm+C,WAAW+uC,GACrBttF,KAAK,KAEFiD,EAAM8gD,gBAAkBzhF,KAAKg1E,IAAIlvC,aAAa/E,KAAUoD,SAQpEg9E,GAAgB7zH,UAAU29H,QAAU,WAChC,OAAOjrH,KAAK28C,KAAKiyB,MAUrBuyC,GAAgB7zH,UAAU49H,SAAW,WACjC,OAAKlrH,KAAKuU,WAIH9Y,UAAQoI,iBAAiB7D,KAAKuU,WAAW4mC,YACxCn7C,KAAKmH,QAAQ0wB,OAAO6rC,aAJjB,MAYfy9C,GAAgB7zH,UAAU6sH,YAAc,WACpC,OAAOn6G,KAAK28C,KAAO38C,KAAK28C,KAAKw9D,cAAgB,MAQjDgH,GAAgB7zH,UAAU69H,KAAO,SAASxyE,GACtC,OAAK34C,KAAKm6G,cAIH,IAAIr8E,QAAQ,CAACC,EAASC,KACzBh+B,KAAK28C,KAAKyuE,SACNzyE,GAAY,GACZ,IAAM5a,IACN5tB,GAAO6tB,EAAO7tB,GACd,IAAM6tB,EAAOk/D,6BARVp/D,QAAQE,OAAO,IAAI3mC,MAAM,4BAgBxC8pH,GAAgB7zH,UAAU+9H,OAAS,WAC/B,OAAOrrH,KAAKmrH,QAWhBhK,GAAgB7zH,UAAUg+H,kBAAoB,SAASz7F,GACnD7vB,KAAKurH,mBAAmB,CAAE17F,KAe9BsxF,GAAgB7zH,UAAUi+H,mBAAqB,SAAS10C,GACpD,IAAKzgF,MAAMC,QAAQwgF,GACf,MAAM,IAAIx/E,MAAM,sDAGpB2I,KAAKqlH,uBAAuBt/E,gBAAgB8wC,IAOhDsqC,GAAgB7zH,UAAU+qF,SAAW,WACjC,OAAOr4E,KAAKqlH,uBAAuBhtC,YAWvC8oC,GAAgB7zH,UAAUk8C,SAAW,SAASgiF,GAC1C,IAAKjyG,OAAOkyG,UAAUD,KAAWjyG,OAAOjB,SAASkzG,EAAO,IACpD,MAAM,IAAIn0H,MAAO,4BAA2Bm0H,GAEhD,MAAMr+H,EAAIosB,OAAOiyG,GAEjB,GAAIr+H,GAAK,EACL,MAAM,IAAI2kD,WAAW,mCAMzB,GAJA9xC,KAAKqlH,uBAAuB77E,SAASr8C,GAIjC6S,KAAKsjH,iBAAkB,CACvB,MAAMoI,EAAsB,IAANv+H,EAEtB6S,KAAKsjH,iBACA/zB,wBAAuB,EAAMm8B,GAC7BnvF,MAAMv3B,IACH+Y,GAAO/Y,MACF,2CAA0C0mH,KAC3C1mH,OAepBm8G,GAAgB7zH,UAAUk4C,UAAY,SAAS3V,GAC3C,OAAO7vB,KAAKg1E,IAAIxvC,UAAU3V,IAO9BsxF,GAAgB7zH,UAAUwqF,gBAAkB,WACxC,OAAO1rF,OAAOm7B,OAAOvnB,KAAK63E,eAS9BspC,GAAgB7zH,UAAUq+H,oBACpB,SAASC,GAAc,GAErB,IAAI/zC,EAAe73E,KAAK83E,kBAOxB,OALK8zC,IACD/zC,EAAeA,EAAa7iD,OAAOxnC,IAAMA,EAAE09H,aAIxCrzC,EAAathF,OAAS,GAQrC4qH,GAAgB7zH,UAAUyqF,mBAAqB,SAAS7wE,GACpD,OAAOlH,KAAK63E,aAAa3wE,IAO7Bi6G,GAAgB7zH,UAAUu+H,WAAa,SAAS3kH,GAC5C,MAAMiwE,EAAcn3E,KAAK+3E,mBAAmB7wE,GAEvCiwE,GAGLn3E,KAAK28C,KAAKmvE,eAAe30C,EAAYh8B,SAAU,UAQnDgmE,GAAgB7zH,UAAUy+H,YAAc,SAAS7kH,GAC7C,MAAMiwE,EAAcn3E,KAAK+3E,mBAAmB7wE,GACtC8kH,EAAWhsH,KAAK4nC,aAAe1gC,EAC/B0nE,EAAO5uE,KAAKisH,gBAAkB,SAAW,OAE3CD,EACAhsH,KAAK28C,KAAKmvE,eAAe9rH,KAAK28C,KAAKqtE,UAAWp7C,GACvCuI,GACPn3E,KAAK28C,KAAKmvE,eAAe30C,EAAYh8B,SAAUyzB,IAUvDuyC,GAAgB7zH,UAAU4+H,gBAAkB,SAAShlH,EAAIsI,GACrD,MAAM2nE,EAAcn3E,KAAK+3E,mBAAmB7wE,GAEvCiwE,GAGLn3E,KAAK28C,KAAKwvE,KAAKh1C,EAAYh8B,SAAU3rC,IAQzC2xG,GAAgB7zH,UAAU8+H,qBAAuB,WACzCpsH,KAAKqsH,0BACGrsH,KAAK4hH,kBAAoB5hH,KAAK2rH,sBAAwB,KAC9DrgI,OAAOmiB,aAAazN,KAAKqsH,yBACzBrsH,KAAKqsH,wBAA0B,OASvClL,GAAgB7zH,UAAU25H,mBAAqB,YAEtCjnH,KAAK4hH,kBACC5hH,KAAK2rH,uBAAyB,IAC7B3rH,KAAKqsH,0BACbrsH,KAAKqsH,wBAA0B/gI,OAAOif,WAAW,KAC7CvK,KAAKqsH,wBAA0B,KAC/B5oG,IAAWuI,cAAcmE,aACrBjC,KACA,CACIiuB,KAAK,EACLxvD,MAr8CM,eA+8C1Bw0H,GAAgB7zH,UAAUy8H,gBAAkB,SAAS7iH,EAAImpB,GACrD,MAAMi8F,EAAgBj8F,GAAwBmX,IAE9C,GAAI8kF,IAAkB9kF,KAAmB8kF,IAAkB9kF,IAGvD,YAFAzpB,GAAO/Y,MAAO,2BAA0BsnH,GAK5C,MAAMn1C,EAAcn3E,KAAK+3E,mBAAmB7wE,GAEvCiwE,GAGLn3E,KAAK28C,KAAKotE,gBAAgB5yC,EAAYh8B,UAAU,EAAMmxE,IAwB1DnL,GAAgB7zH,UAAUi/H,eAAiB,SACnC5oH,EAAK6oH,EAAM59C,EAAMs8C,EAAUuB,EAAS18G,EAAQypC,EAAUkzE,EAASC,EAAS7jH,EAAU8jH,GACtF,MAAM1lH,EAAKzL,UAAQyI,mBAAmBP,GAEtC,GAAW,UAAPuD,GAAkBlH,KAAK4nC,aAAe1gC,EACtC,OAGJ,MAAMiwE,EACA,IAAI01C,IAAiBlpH,EAAK3D,KAAMwsH,EAAMtB,EAAUuB,EAAS18G,EAAQypC,GAEvE29B,EAAY21C,QAAQl+C,GACpBuI,EAAY41C,WAAWL,GACvBv1C,EAAY61C,YAAYlkH,GACxBquE,EAAY81C,eAAeL,GAE3B5sH,KAAK63E,aAAa3wE,GAAMiwE,EACxBn3E,KAAK6jB,aAAa8D,KACdX,cACA9f,EACAiwE,GAEJn3E,KAAKktH,gBAAgB/1C,GAGjBn3E,KAAKmnH,YACLnnH,KAAKmtH,uBAGTntH,KAAKinH,sBAYT9F,GAAgB7zH,UAAU8/H,aAAe,WACrCptH,KAAKmtH,wBASThM,GAAgB7zH,UAAU4/H,gBAAkB,SAAS/1C,GACjDA,EAAY4E,cACPr+C,KAAK50B,IACFquE,EAAYk2C,cAAgBvkH,EAASyf,IAAI,0BACzCvoB,KAAKstH,oBAEDxkH,EAASyf,IAAIqsB,MACbuiC,EAAYo2C,YAAY,mBAAmB,GAG3CzkH,EAASyf,IAAIssB,MACbsiC,EAAYo2C,YAAY,iBAAiB,KAGhDhxF,MAAM,KAAM,IASrB4kF,GAAgB7zH,UAAUkgI,wBAA0B,SAAS7pH,EAAK+oH,GAI9D,MACMe,EADQztH,KAAK83E,kBACUxiD,KAAK9nC,GAAKA,EAAE2tD,WAAax3C,GAEtD,GAAI8pH,EAAgB,CAChBA,EAAeV,WAAWL,GAC1B,MAAMxlH,EAAKzL,UAAQyI,mBAAmBP,GAEtC3D,KAAK6jB,aAAa8D,KACdX,mBACA9f,EACAwlH,GAOHe,EAAeC,cAChB1tH,KAAKmtH,wBAIbhM,GAAgB7zH,UAAUu6H,aAAe,SAASlkH,GAC9C,MAAMuD,EAAKzL,UAAQyI,mBAAmBP,GAEtC,GAAW,UAAPuD,GAAkBlH,KAAK4nC,aAAe1gC,EACtC,OAGJ,MAAMiwE,EAAcn3E,KAAK63E,aAAa3wE,UAE/BlH,KAAK63E,aAAa3wE,GAGzB,MAAMymH,EAAgB3tH,KAAKmlF,oBACrByoC,EAAiB,GAEvB,IAAK,MAAM31G,KAAW01G,EAClBC,EAAe1qH,KAAK+U,EAAQy4E,2BAA2BxpF,IAG3D42B,QAAQm+C,WAAW2xC,GACdlwF,KAAK7b,IACF,IAAIgsG,EAAgB,GAEpBhsG,EAAQrc,IAAIC,GAAUA,EAAO9Y,OAAOyiB,QAAQziB,IACpCA,IACAkhI,EAAgBA,EAAc7zH,OAAOrN,MAI7CkhI,EAAcz+G,QAAQuxB,IAClB3gC,KAAK6jB,aAAa8D,KAAKX,gBAAqC2Z,KAI5Dw2C,GACAn3E,KAAK6jB,aAAa8D,KAAKX,YAAiC9f,EAAIiwE,GAGhEn3E,KAAKmtH,sBAAqB,GAC1BntH,KAAKosH,0BAkBjBjL,GAAgB7zH,UAAUwgI,eAAiB,SACnCC,EACA9D,EACA+D,EACAx+G,EACAo9G,GAIJ,GAAI3C,IAAYjqH,KAAK4nC,WACjB,OAGJ,MAAMkiF,EAAmB9pH,KAAK63E,aAAaoyC,GAE3C,GAAI8D,EAMA,OALA/tH,KAAK6jB,aAAa8D,KACdX,SAA8B8iG,EAAkBt6G,EAAQo9G,QAE5D5sH,KAAKwnH,QAKT,MAAMyG,EAAoBjuH,KAAK63E,aAAam2C,GAE5CC,EAAkBC,cAActB,GAEhC5sH,KAAK6jB,aAAa8D,KACdX,qBAA0C8iG,EAAkBmE,EAAmBz+G,IAOvF2xG,GAAgB7zH,UAAU6gI,mBAAqB,SAASv/C,GAEpD5uE,KAAK6jB,aAAa8D,KACdX,oBAAyChnB,KAAK4nC,WAAYgnC,IAGlEuyC,GAAgB7zH,UAAU8gI,kBAAoB,SAASzqH,EAAKirE,GACxD,MAAM1nE,EAAKzL,UAAQyI,mBAAmBP,GAChCwzE,EAAcn3E,KAAK+3E,mBAAmB7wE,GAEvCiwE,IAGLA,EAAY21C,QAAQl+C,GACpB5uE,KAAK6jB,aAAa8D,KAAKX,oBAAyC9f,EAAI0nE,KAGxEuyC,GAAgB7zH,UAAU+gI,qBAAuB,SAAS1qH,EAAKioG,GAC3D,MAAM1kG,EAAKzL,UAAQyI,mBAAmBP,GAChCwzE,EAAcn3E,KAAK+3E,mBAAmB7wE,GAEvCiwE,GAIDA,EAAYm3C,eAAiB1iB,IAIjCz0B,EAAYm3C,aAAe1iB,EAC3B5rG,KAAK6jB,aAAa8D,KACdX,uBACA9f,EACA0kG,KAURuV,GAAgB7zH,UAAU+oF,mBAAqB,SAAS11C,GACpD,GAAIA,EAAMnZ,QAAUxnB,KAAKi4E,cAIrB,YAHAl6D,GAAO7Y,KACH,6DAGD,IAAKy7B,EAAMnZ,OAASxnB,KAAKi4E,cAI5B,YAHAl6D,GAAO7Y,KACH,yDAKR,MAAMgC,EAAKy5B,EAAM82C,mBACXN,EAAcn3E,KAAK+3E,mBAAmB7wE,GAE5C,IAAKiwE,EAGD,YAFAp5D,GAAO/Y,MAAO,gCAA+BkC,GAMjDiwE,EAAYo3C,QAAQrrH,KAAKy9B,GAErB3gC,KAAKspH,aACLtpH,KAAKspH,YAAYn8B,SAASxsD,GAG9B,MAAMqQ,EAAUhxC,KAAK6jB,aAErB8c,EAAMnD,iBACFk6C,qBACA,IAAM1mC,EAAQrpB,KAAKX,qBAA0C2Z,IACjEA,EAAMnD,iBACFk6C,4BACA,CAACzuC,EAAYnhB,KACS9nB,KAAK4pH,4BAEL9hG,GACdkpB,EAAQrpB,KACJX,4BACA9f,EACA+hC,KAKhB+H,EAAQrpB,KAAKX,cAAmC2Z,IAUpDwgF,GAAgB7zH,UAAUkhI,eAAiB,SAASv2G,EAASg6E,GACrDjyF,KAAKsjH,mBAAqBrrG,IAC1B8F,GAAO7Y,KAAK,iBAEZlF,KAAKsjH,iBAAiB91B,UAAUyE,GAChCjyF,KAAK6jB,aAAa8D,KAAKX,yBAA8ChnB,KAAKsjH,oBAYlFnC,GAAgB7zH,UAAUmhI,gBAAkB,SAASx2G,EAASy2G,GACtD1uH,KAAKsjH,mBAAqBrrG,IAC1B8F,GAAO7Y,KAAK,wBACZlF,KAAKsjH,iBAAiB13B,iBAAiB8iC,KAU/CvN,GAAgB7zH,UAAUipF,qBAAuB,SAASo4C,GACtD3uH,KAAK83E,kBAAkB1oE,QAAQ+nE,IAC3B,MAAMtvC,EAASsvC,EAAYx1C,YAE3B,IAAK,IAAIj2C,EAAI,EAAGA,EAAIm8C,EAAOtxC,OAAQ7K,IAC/B,GAAIm8C,EAAOn8C,KAAOijI,EAAc,CAG5Bx3C,EAAYo3C,QAAQtqH,OAAOvY,EAAG,GAE9BsU,KAAK6jB,aAAa8D,KACdX,gBAAqC2nG,GAErC3uH,KAAKspH,aACLtpH,KAAKspH,YAAY7Q,YAAYkW,GAGjC,QAGT3uH,OAMPmhH,GAAgB7zH,UAAUshI,mBAAqB,SACvCC,EACAjiC,GAEJ,IAAIkiC,GAEE9uH,KAAKqnH,iBAAmBrnH,KAAKsnH,wBAA2BnjG,IAAQuQ,aAAevQ,IAAQub,gBACzFovF,EAAe,CACXt/G,OAAQ,UACRmgF,kBAAmB,eACnBhkB,SAAU,0CAEP3rE,KAAKsjH,iBAEZwL,EAAe,CACXt/G,OAAQ,OACRmgF,kBAAmB,0BACnBhkB,SAAU,qCAEN3rE,KAAK+uH,uBACbD,EAAe,CACXt/G,OAAQ,UACRmgF,kBAAmB,2BACnBhkB,SAAU,kEAEdloD,IAAWuI,cAAcmE,aAAkB7B,QAG3CwgG,EACA9uH,KAAKgvH,oBAAoBH,EAAeC,GAExC9uH,KAAKivH,uBAAuBJ,EAAejiC,IAOnDu0B,GAAgB7zH,UAAU4hI,eAAiB,SACnCL,EACAjiC,EACAz4E,GAEJ,GAAI06G,EAAcrnG,MACdxnB,KAAK4uH,mBAAmBC,EAAejiC,OACpC,CACH,IAAK5sF,KAAK28C,KAAKwyE,QAAQN,EAAcxoC,WAAY,CAC7C,MAAMnW,EAAc,6CASpB,YAPAlwE,KAAKgvH,oBACDH,EAAe,CACXr/G,OAAQ,iBACRmgF,kBAAmBzf,EACnBvE,SAAUuE,IAKtBlwE,KAAKovH,uBAAuBP,EAAejiC,EAAaz4E,KAOhEgtG,GAAgB7zH,UAAU8hI,uBAAyB,SAC3CP,EACAjiC,EACAz4E,GAGJnU,KAAK4hH,iBAAmBiN,EACxB7uH,KAAK28C,KAAKzH,gBAAgB,oBAAsB/gC,EAChDnU,KAAKklH,oCAEDllH,KAAKwiH,YACL/+F,IAAWmI,oBACPuE,aAAkBpC,KAAuB,CAAEouB,KAAK,KAGxD,MAAMkzE,EACAvgF,EAAE89C,GACCt3D,KAAK,4DACL/zB,KAAK,UAEdvB,KAAK6jB,aAAa8D,KACdX,wBACAqoG,GAEJrvH,KAAKosH,uBACL3oG,IAAWuI,cAAcmE,aACrBlC,KACA,CACIkuB,KAAK,EACLxvD,MAAOwnB,KAGf,IACI06G,EAAcnxD,WAAW19D,KAAK28C,KAAM38C,KAAKg1E,IAAzC,MACOh1E,KAAKmH,QAAQ0wB,OADpB,CAEI0O,wBAAyBvmC,KAAK0+E,mBAEpC,MAAO15E,GAIL,OAHAy3B,IAAqBkG,iBAAiB39B,QACtC+Y,GAAO/Y,MAAMA,GAMjBhF,KAAKsvH,kBAAkB1iC,EAAaiiC,EAAcxpG,gBAElD,MAAMme,EAAcxjC,KAAKkqH,yBAEzB,IACI2E,EAAcliC,YACVC,EACA,KAIQ5sF,KAAKi4E,eAAiBj4E,KAAK4hH,kBAC3B5hH,KAAKuvH,wCAGTvvH,KAAK6jB,aAAa8D,KACdX,yBACA6nG,GACC7uH,KAAKi4E,eACNj4E,KAAK6jB,aAAa8D,KACdX,gCACA6nG,IAGZ7pH,IACIy3B,IAAqBkG,iBAAiB39B,GACtC+Y,GAAO/Y,MACH,2CAA4CA,IAEpDw+B,GAOJzlB,GAAO7Y,KAAK,4CACZlF,KAAK2oB,WAAWN,eACZroB,KAAK4hH,iBAAiBv8F,eACtB,SACJrlB,KAAK2oB,WAAWvD,iBAAiBplB,KAAK4hH,iBAAiBv8F,gBACzD,MAAOhsB,GACLojC,IAAqBkG,iBAAiBtpC,GACtC0kB,GAAO/Y,MAAM3L,KAarB8nH,GAAgB7zH,UAAUgiI,kBAAoB,SAASh+B,EAASj1B,GAC5D,IAAI53B,EAAQ,KACZ,MAAM+qF,EACA1gF,EAAEwiD,GACCh8D,KAAK,iCACLjV,QAEgB,IAArBmvG,EAAUj5H,SACVkuC,EAAQ+qF,EAAU,GAAG5sH,aAAa,QAGlC6hC,EAEAzkC,KAAKg1E,IAAIxwC,wBAAwB,KAAMC,GAGvCzkC,KAAKg1E,IAAIxwC,wBAAwB63B,EAAI,OAgB7C8kD,GAAgB7zH,UAAU0hI,oBAAsB,SACxCH,EACA1nH,GACAA,GAAWA,EAAQwkE,UACnBlvC,IAAqBkG,iBAAiB,IAAItrC,MAAM8P,EAAQwkE,WAI5DkjD,EAAc9sC,UACV,KACA/8E,IACI+Y,GAAO5Y,KACH,qEACiCH,IACtC,CACCwK,OAAQrI,GAAWA,EAAQqI,OAC3BmgF,kBAAmBxoF,GAAWA,EAAQwoF,kBACtCF,sBAAsB,KAclC0xB,GAAgB7zH,UAAUm4C,YAAc,SAChCopF,EACA9+B,EACAC,GACJjyE,GAAO7Y,KACF,eAAc6qF,OAAqBC,UAChC6+B,EAAcrnG,SAClBqnG,IAAkB7uH,KAAK4hH,kBACvB5hH,KAAKwiH,YAAa,EAElB/+F,IAAWuI,cACPmE,aAAkBhC,KAAyB,CAAEguB,KAAK,KAGlDn8C,KAAK2oB,aACL3oB,KAAK2oB,WAAWrD,gBACZtlB,KAAK4hH,iBAAiBv8F,gBAC1BtH,GAAO7Y,KAAK,0BACZlF,KAAK2oB,WAAWd,cACZ7nB,KAAK4hH,iBAAiBv8F,iBAI9BrlB,KAAK4hH,iBAAmB,KAGxB5hH,KAAKg1E,IAAIvvC,eACFopF,IAAkB7uH,KAAKsjH,kBAGN,YAApBvzB,GAAgD,iBAAfC,GACjCjyE,GAAO7Y,KAAK,6BACZue,IAAWyB,UAAUohB,uBAAuB,CAAEmpF,aAAa,KAChC,uBAApB1/B,GACW,eAAfC,GAIHvsE,IAAWyB,UAAUohB,uBAAuB,CAAEopF,WAAW,IAE7D1vH,KAAK2vH,mBAEL5xG,GAAO/Y,MACH,2CACA6pH,EAAcxiH,IACdwiH,EAAcxoC,UACd0J,EACAC,IAQZmxB,GAAgB7zH,UAAUsiI,kBAAoB,SAASf,GAC9CA,EAAcrnG,QACfxnB,KAAKwnH,QACLxnH,KAAK6jB,aAAa8D,KAAKX,sBAI/Bm6F,GAAgB7zH,UAAUggI,kBAAoB,WAC1C,IAAIvL,GAAuB,EAC3B,MAAMlqC,EAAe73E,KAAK83E,kBAG1B,IAAK,IAAIpsF,EAAI,EAAGA,EAAImsF,EAAathF,OAAQ7K,GAAK,EAC1C,GAAImsF,EAAansF,GAAGmkI,eAAgB,CAChC9N,GAAuB,EACvB,MAGJA,IAAyB/hH,KAAK+hH,uBAC9B/hH,KAAK+hH,qBAAuBA,EAC5B/hH,KAAK6jB,aAAa8D,KACdX,uBACA+6F,KASZZ,GAAgB7zH,UAAUwiI,gBAAkB,WACxC,OAAO9vH,KAAK+hH,sBAOhBZ,GAAgB7zH,UAAUs6C,SAAW,WACjC,OACI5nC,KAAK28C,MAAQ38C,KAAK28C,KAAKqtE,UACjBvuH,UAAQyI,mBAAmBlE,KAAK28C,KAAKqtE,WACrC,MAGd7I,GAAgB7zH,UAAUyiI,UAAY,SAASC,EAAOrP,EAAU51G,GAC5D,MAAMklH,EAAiBjwH,KAAK4pH,0BAExBqG,EACAA,EAAeF,UAAUC,EAAOrP,EAAU51G,GAE1CgT,GAAO5Y,KAAK,yCAWpBg8G,GAAgB7zH,UAAUmtH,eAAiB,SAAStzG,GAChD,OAAInH,KAAK28C,KACE38C,KAAKyjH,iBAAiBhJ,eAAetzG,GAGzC22B,QAAQE,OAAO,IAAI3mC,MAAM,wCAUpC8pH,GAAgB7zH,UAAU0tH,cAAgB,SAAS/gC,GAC/C,OAAIj6E,KAAK28C,KACE38C,KAAKyjH,iBAAiBzI,cAAc/gC,GAGxCn8C,QAAQE,OAAO,IAAI3mC,MAAM,wCAMpC8pH,GAAgB7zH,UAAU4iI,sBAAwB,WAC9C,QAAIlwH,KAAK28C,MACE38C,KAAK28C,KAAKuzE,yBAUzB/O,GAAgB7zH,UAAUiuD,KAAO,SAASzN,GACtC,OAAI9tC,KAAK28C,KACE38C,KAAK28C,KAAKpB,KAAKzN,GAGnB,IAAIhQ,QAAQ,CAACC,EAASC,KACzBA,EAAO,IAAI3mC,MAAM,0CAOzB8pH,GAAgB7zH,UAAU6iI,OAAS,WAC/B,OAAInwH,KAAK28C,KACE38C,KAAK28C,KAAKwzE,SAGd,IAAIryF,QAAQ,CAACC,EAASC,KACzBA,EAAO,IAAI3mC,MAAM,0CAOzB8pH,GAAgB7zH,UAAU8iI,iBAAmB,WACzC,OAAOpwH,KAAKu7C,KAAK,0BAOrB4lE,GAAgB7zH,UAAU+iI,gBAAkBlP,GAAgB7zH,UAAU6iI,OAKtEhP,GAAgB7zH,UAAUgjI,eAAiB,WACvC,OAAItwH,KAAK28C,KACE38C,KAAK28C,KAAK2zE,iBAGd,MAMXnP,GAAgB7zH,UAAUijI,YAAc,WACpC,OAAIvwH,KAAK28C,KACE38C,KAAK28C,KAAK4zE,cAGd,MAQXpP,GAAgB7zH,UAAUkjI,mBAAqB,WAC3C,GAAIxwH,KAAK28C,KACL,OAAO38C,KAAK28C,KAAK8zE,gBAYzBtP,GAAgB7zH,UAAUs8H,wBAA0B,WAChD,MAAM3xG,EAAUjY,KAAKi4E,cAAgBj4E,KAAKsjH,iBAAmBtjH,KAAK4hH,iBAElE,OAAO3pG,EAAUA,EAAQoN,eAAiB,MAW9C87F,GAAgB7zH,UAAU+nG,mBAAqB,WAC3C,MAAM46B,EAAiBjwH,KAAK4pH,0BAE5B,OAAOqG,EAAiBA,EAAe56B,qBAAuB,MASlE8rB,GAAgB7zH,UAAUojI,oBAAsB,SAASC,GAChD3wH,KAAKm6G,eAMVn6G,KAAKmiH,iBAAmBwO,EACxB3wH,KAAK28C,KAAKi1D,uBAAuB,aAAc,CAC3C30G,WAAY,CACRm9B,MAAOu2F,EAAOv2F,MACd1B,MAAOi4F,EAAOj4F,MACdzyB,MAAO,2CAETjG,KAAK28C,KAAKjvC,gBAZZqQ,GAAO5Y,KAAM,qCAAoCnF,KAAK28C,KAAO,GAAK,oBAC9D38C,KAAKm6G,cAAgB,GAAK,qCAkBtCgH,GAAgB7zH,UAAUsjI,oBAAsB,WAC5C,OAAO5wH,KAAKmiH,kBAMhBhB,GAAgB7zH,UAAU68H,kBAAoB,WAC1C,OAAOnqH,KAAKiiH,iBAMhBd,GAAgB7zH,UAAU88H,kBAAoB,WAC1C,OAAOpqH,KAAKkiH,iBAMhBf,GAAgB7zH,UAAU8zH,mBAAqB,WAC3C,OAAOphH,KAAK28C,KAAKzH,iBAMrBisE,GAAgB7zH,UAAUs3F,4BAA8B,SAAS34F,EAAMU,GACnEqT,KAAK46G,YAAa,qBAAoB3uH,EAAQ,CAAEU,WAMpDw0H,GAAgB7zH,UAAUujI,+BAAiC,SAAS5kI,GAChE+T,KAAK26G,cAAe,qBAAoB1uH,GACxC+T,KAAK28C,KAAKjvC,gBASdyzG,GAAgB7zH,UAAUwjI,4BAA8B,SAAS7kI,GAC7D,MAAMoB,EAAW2S,KAAK28C,KAAKo0E,QAAQ/lB,MAAM11E,KAAKmjC,GAC1CA,EAAKt4D,UAAa,qBAAoBlU,GAG1C,OAAOoB,EAAWA,EAASV,WAAQ4T,GAWvC4gH,GAAgB7zH,UAAU89B,aAAe,SACjC4lG,EACAC,GACJ,OAAOjxH,KAAK2oB,WAAWyC,aAAa4lG,EAAiBC,IAUzD9P,GAAgB7zH,UAAUy7B,mBAAqB,WAC3C,OAAO/oB,KAAK2oB,WAAWI,sBAS3Bo4F,GAAgB7zH,UAAU4jI,eAAiB,SAASvwF,GAAO,MACvD,OAAOA,EAAM5W,UAAN,UAAkB/pB,KAAK4pH,iCAAvB,aAAkB,EAAgCuH,aAAaxwF,GAASA,EAAMywF,WASzFjQ,GAAgB7zH,UAAU06G,eAAiB,SAASrnE,EAAOonE,GACvD,MAAMh+E,EAAU4W,EAAM5W,UACtB,IAAIP,EAAO,KACX,MAAMhC,EAAQmZ,EAAMnZ,MACd6pG,EAAe7pG,EAAQmZ,EAAM82C,mBAAqB,QAClDw4C,EACAzoG,EACIxnB,KAAKsjH,kBAAoBtjH,KAAKsjH,iBAAiBj+F,eAC/CrlB,KAAK4hH,kBAAoB5hH,KAAK4hH,iBAAiBv8F,eAErD0E,EAEIkmG,IACAzmG,EAAOymG,EAAekB,aAAaxwF,IAGvCnX,EAAOmX,EAAMywF,UAEZrpB,EAAU7gG,IAAOsiB,GAASymG,GAI/BjwH,KAAK2oB,WAAWmB,4BACZmmG,EACAzmG,EACAO,EACAsnG,EACA1wF,EAAMknE,gBACNE,EAAU7gG,KAUlBi6G,GAAgB7zH,UAAU69B,mBAAqB,SAAS1mB,GACpDgf,IAAWqH,QAAQrmB,IAWvB08G,GAAgB7zH,UAAUgkI,SAAW,SAASC,GAC1C,OAAOvxH,KAAK28C,KAAO38C,KAAK28C,KAAKwyE,QAAQoC,GAAU,MAMnDpQ,GAAgB7zH,UAAUkkI,+BAAiC,WACvDxxH,KAAK6jB,aAAa8D,KAAKX,oBACnBk2E,iCAWRikB,GAAgB7zH,UAAUmkI,oBAAsB,SAASpoF,EAAIvS,GACzD92B,KAAKg1E,IAAI5rC,mBAAmBC,EAAIvS,IAQpCqqF,GAAgB7zH,UAAUi8C,yBAA2B,SAASzS,GAC1D92B,KAAKg1E,IAAIzrC,yBAAyBzS,IAStCqqF,GAAgB7zH,UAAUokI,yBAA2B,SAAS56F,GAC1D92B,KAAKyxH,oBAAoB,GAAI36F,IAiBjCqqF,GAAgB7zH,UAAUg8C,YAAc,SAChC7kC,EACA4kC,EAAK,GACLsoF,GAAyB,GAC7B,MAAMC,SAAqBntH,EAK3B,GAAoB,WAAhBmtH,IACQD,GAA0C,WAAhBC,EAMtC,GAAID,EACA3xH,KAAKyxH,oBAAoBpoF,EAAI5kC,OAC1B,CACH,IAAIotH,EAAgBptH,EAIhBukH,EAAc,OAElB,GAAoB,WAAhB4I,EAA0B,CAC1B5I,EAAc,eAGT6I,EAActkI,eAAeonD,OAC9Bk9E,EAAcl9E,KAAuB,IAGzC,IACIk9E,EAAgBjlH,KAAKwL,UAAUy5G,GACjC,MAAOx4H,GAGL,YAFA0kB,GAAO/Y,MAAM,6CAA8C3L,IAM/DgwC,EACArpC,KAAKipH,uBAAuB5/E,EAAIwoF,EAAe7I,GAG/ChpH,KAAK+oH,gBAAgB8I,EAAe7I,QAnCxCjrG,GAAO/Y,MAAO,kCAAiC4sH,IAyCvDzQ,GAAgB7zH,UAAUwkI,wBAA0B,WAChD,OAAO9xH,KAAKi4E,cACNj4E,KAAKqjH,2BAA6BrjH,KAAK+iH,4BASjD5B,GAAgB7zH,UAAUykI,uBAAyB,SAAS95G,IACnDA,EAAQuP,OAASxnB,KAAKmH,QAAQ0wB,OAAOy2D,qBACtCtuF,KAAKgyH,mBAAoB,EACzBhyH,KAAK6jB,aAAa8D,KAAKX,oBAAyCk2E,0BASxEikB,GAAgB7zH,UAAUw3H,4BAA8B,SAAS7sG,GACzDA,EAAQuP,MACRxnB,KAAKqjH,4BAA6B,EAElCrjH,KAAK+iH,4BAA6B,EAElC9qG,EAAQuP,QAAUxnB,KAAKi4E,eACvBj4E,KAAK6jB,aAAa8D,KAAKX,2BAS/Bm6F,GAAgB7zH,UAAU2kI,uBAAyB,SAASh6G,GAGpDA,EAAQuP,OAGR/D,IAAWyB,UAAUohB,uBAAuB,CAAEopF,WAAW,IAErD1vH,KAAKsjH,kBACL7/F,IAAWmI,oBACP0E,aACI9B,KACA,CACIurD,UAAW/5E,KAAKsjH,iBAAiB/8B,eAIjDvmF,KAAK2vH,gBAAgB,qBAAsB,eACpC13G,GAAWjY,KAAK4hH,mBAAqB3pG,IAC5CjY,KAAK2nH,kBAAoB,IAAIuK,IAAkBlyH,MAC/CA,KAAK2nH,kBAAkB5qG,MAAM9E,KASrCkpG,GAAgB7zH,UAAUy3H,yBAA2B,SAAS9sG,GACtDA,EAAQuP,MACRxnB,KAAKqjH,4BAA6B,GAElCrjH,KAAK+iH,4BAA6B,EAClC/iH,KAAK2nH,mBAAqB3nH,KAAK2nH,kBAAkBpmD,UAGjDtpD,EAAQuP,QAAUxnB,KAAKi4E,eACvBj4E,KAAK6jB,aAAa8D,KAAKX,wBAU/Bm6F,GAAgB7zH,UAAU2hI,uBAAyB,SAC3CJ,EACAjiC,GACJ5sF,KAAKqjH,4BAA6B,EAGlCrjH,KAAKsjH,iBAAmBuL,EACxB7uH,KAAKklH,oCAELllH,KAAKsjH,iBAAiB5lD,WAClB19D,KAAK28C,KACL38C,KAAKg1E,IAFT,MAGWh1E,KAAKmH,QAAQ0wB,OAHxB,CAIQ0O,wBAAyBvmC,KAAK0+E,mBAGtC3gE,GAAO7Y,KAAK,4CAEZ,IAAIitH,EAAW12H,UAAQyI,mBAAmBlE,KAAKsjH,iBAAiBj9B,WAEhE,MAAMlP,EAAcn3E,KAAK63E,aAAas6C,GAElCh7C,IACAg7C,EAAWh7C,EAAYi7C,cAAgBD,GAG3CnyH,KAAK2oB,WAAWN,eACZroB,KAAKsjH,iBAAiBj+F,eACtB8sG,GAEJ,MAAM3uF,EAAcxjC,KAAKunC,iBAEzBvnC,KAAKsjH,iBAAiB32B,YAClBC,EACA,KACI7uE,GAAO9Y,MAAM,uCAEbjF,KAAK6jB,aAAa8D,KACdX,yBACAhnB,KAAKsjH,mBAEbt+G,IACI+Y,GAAO/Y,MACH,+CAAgDA,IAExDw+B,IAOR29E,GAAgB7zH,UAAU+kI,oBAAsB,WAC5CryH,KAAKsyH,iBACD,MAAOtyH,KAAK4hH,iBAAiBv8F,eAAe0iB,oBAOpDo5E,GAAgB7zH,UAAUilI,oBAAsB,WAC5CvyH,KAAKsyH,iBACD,MAAOtyH,KAAKsjH,iBAAiBj+F,eAAe0iB,oBAUpDo5E,GAAgB7zH,UAAUglI,iBAAmB,SAASE,EAASxqF,GAC3D,IAAK,MAAMrH,KAASqH,EAChBjqB,GAAO7Y,KAAM,iBAAgBstH,YAAkB7xF,KAC/C3gC,KAAKq2E,mBAAmB11C,IAWhCwgF,GAAgB7zH,UAAU03H,4BAA8B,SAChD6J,GAC0B,OAA1B7uH,KAAKsjH,mBAILtjH,KAAKyyH,yBACCzyH,KAAKsjH,iBAAiB77B,uBAGF,OAA1BznF,KAAK4hH,mBACL5hH,KAAK0yH,yBACC1yH,KAAK4hH,iBAAiBn6B,uBAGhC,IAAIl6B,GAAO,EACX,MAAMolE,EAAmB3yH,KAAKmH,QAAQ0wB,OAAO86F,iBAmB7C,GAhBK9D,EAAcrnG,MAERxnB,KAAKsjH,mBAAqBuL,GACjC9wG,GAAO/Y,MAAM,0DAEbuoD,GAAO,IACCshE,EAActoC,aACS,iBAArBosC,GACPvnH,KAAKC,SAAWsnH,IACnB50G,GAAO7Y,KAAM,+BAA8BytH,SAC3ClvG,IAAWyB,UAAUohB,uBAAuB,CAAEmpF,aAAa,IAC3DzvH,KAAK2vH,gBAAgB,UAAW,gBAEhCpiE,GAAO,GAZPA,GAAO,GAeN7zC,MAAM1Z,KAAKyyH,4BACR/4G,MAAM1Z,KAAK0yH,0BAA2B,CAC1C,MAAME,EACA5yH,KAAKyyH,yBAA2BzyH,KAAK0yH,yBAE3CjvG,IAAWuI,cACP6C,KACA,CAAEliC,MAAOimI,IAGb/D,EAAcrnG,QAAUxnB,KAAKi4E,eAC7Bj4E,KAAK6jB,aAAa8D,KAAKX,0BAGvBumC,IAMJvtD,KAAK6yH,eAAc,GAGf7yH,KAAK4hH,iBACL5hH,KAAK8yH,yBAEL/0G,GAAO7Y,KAAK,mDAGhBlF,KAAKuyH,sBAGDvyH,KAAK4hH,kBACL5hH,KAAKuvH,wCAGTxxG,GAAO7Y,KAAK,6CACZlF,KAAK2oB,WAAWvD,iBAAiBplB,KAAKsjH,iBAAiBj+F,gBAEvD5B,IAAWmI,oBACP0E,aACI/B,KACA,CACIwrD,UAAW/5E,KAAKsjH,iBAAiB/8B,iBAajD46B,GAAgB7zH,UAAU23H,kBAAoB,SAASn5F,EAAa,IAChE,MAAMinG,GAAWv0C,IAAQ1yD,EAAY9rB,KAAK8rB,YAG1C,GADA9rB,KAAK8rB,WAAaA,EACdinG,EAAS,CACT/yH,KAAK6jB,aAAa8D,KACdX,qBACAhnB,KAAK8rB,YAGa,CAIlB,eAGA,cAGU1c,QAAQniB,SACMsT,IAApBurB,EAAW7+B,IACXw2B,IAAWyB,UAAUohB,uBAAuB,CACxC,CAACr5C,EAAI2U,QAAQ,IAAK,MAAOkqB,EAAW7+B,SAaxDk0H,GAAgB7zH,UAAU2uH,YAAc,SAAShvH,GAC7C,OAAO+S,KAAK8rB,WAAW7+B,IAO3Bk0H,GAAgB7zH,UAAU0lI,4BAA8B,WAChDhzH,KAAKkjH,uBACLnlG,GAAO7Y,KAAK,mCACZuI,aAAazN,KAAKkjH,sBAClBljH,KAAKkjH,qBAAuB,OASpC/B,GAAgB7zH,UAAUwlI,uBAAyB,WAC/C9yH,KAAKizH,oBACD,MAAOjzH,KAAK4hH,iBAAiBv8F,eAAe0iB,oBAQpDo5E,GAAgB7zH,UAAU4lI,uBAAyB,WAC/ClzH,KAAKizH,oBACD,MAAOjzH,KAAKsjH,iBAAiBj+F,eAAe0iB,oBAUpDo5E,GAAgB7zH,UAAU2lI,oBAAsB,SACxCE,EACAnrF,GACJ,IAAK,MAAMrH,KAASqH,EAChBjqB,GAAO7Y,KAAM,mBAAkBiuH,YAA0BxyF,KACzD3gC,KAAKu2E,qBAAqB51C,IAQlCwgF,GAAgB7zH,UAAU8lI,qCAAuC,WAC7Dr1G,GAAO7Y,KAAK,sDACZlF,KAAK4hH,iBAAiBryB,wBAAuB,GAAM,GAAM7xD,KACrD,KACI3f,GAAO7Y,KAAK,oDAEhBF,IACI+Y,GAAO/Y,MACH,2DACAA,MAWhBm8G,GAAgB7zH,UAAUulI,cAAgB,SAASz7C,GAC/C,GAAIp3E,KAAKm8C,MAAQi7B,EAAjB,CAMA,GADAp3E,KAAKm8C,IAAMi7B,EACPA,EAAW,CACXr5D,GAAO7Y,KAAK,wCAIZue,IAAWyB,UAAUohB,uBAAuB,CACxCopF,WAAW,EACXD,aAAa,IAKjB,MAAM/D,EAAoC,IAApB1rH,KAAKq4E,WAE3Br4E,KAAKsjH,iBACA/zB,wBAAuB,EAAMm8B,GAC7BnvF,MAAMv3B,IACH+Y,GAAO/Y,MAEI,+CAAG0mH,KAAkB1mH,UAGxC+Y,GAAO7Y,KAAK,mCAIZlF,KAAK4hH,kBACL5hH,KAAK2oB,WAAWK,gCACZhpB,KAAK4hH,iBAAiBv8F,gBAAiB+xD,GAI/Cp3E,KAAK8hH,YAAc,KAGnB9hH,KAAK6jB,aAAa8D,KACdX,aACAhnB,KACAA,KAAKm8C,KACTn8C,KAAK6jB,aAAa8D,KACdX,gCACAhnB,KAAK8nH,0BAGT9nH,KAAK6jB,aAAa8D,KACd3nB,KAAK8xH,0BACC9qG,yBACAA,4BApDNjJ,GAAO9Y,MAAO,8CAA6CmyE,IA4DnE+pC,GAAgB7zH,UAAU+lI,iBAAmB,SAAShtC,GAElD,GADArmF,KAAKgzH,8BACDhzH,KAAKsjH,iBAGL,YAFAvlG,GAAO/Y,MAAM,gCAKjBhF,KAAKqjH,4BAA6B,EAClCrjH,KAAKsjH,iBACCtjH,KAAK0jB,KAAKnP,WAAWo6B,OAAO2kF,oBAC1BtzH,KAAK28C,KAAKqtE,UACV3jC,GACRtoE,GAAO7Y,KACH,gCAAiClF,KAAK28C,KAAKqtE,UAAW3jC,GAC1DrmF,KAAKklH,oCAELllH,KAAKsjH,iBAAiB5lD,WAClB19D,KAAK28C,KACL38C,KAAKg1E,IAFT,MAGWh1E,KAAKmH,QAAQ0wB,OAHxB,CAIQ0O,wBAAyBvmC,KAAK0+E,mBAGtC3gE,GAAO7Y,KAAK,4CAEZ,IAAIitH,EAAW12H,UAAQyI,mBAAmBlE,KAAKsjH,iBAAiBj9B,WAEhE,MAAMlP,EAAcn3E,KAAK63E,aAAas6C,GAElCh7C,IACAg7C,EAAWh7C,EAAYi7C,cAAgBD,GAG3CnyH,KAAK2oB,WAAWN,eACZroB,KAAKsjH,iBAAiBj+F,eACtB8sG,GAEJ,MAAM3uF,EAAcxjC,KAAKunC,iBAEzBvnC,KAAKsjH,iBAAiBt2B,OAAOxpD,IAOjC29E,GAAgB7zH,UAAUiiI,sCAAwC,WAC9DxxG,GAAO7Y,KAAK,wDACZlF,KAAK4hH,iBAAiBryB,wBAAuB,GAAO,GAAO7xD,KACvD,KACI3f,GAAO7Y,KAAK,uDAEhBF,IACI+Y,GAAO/Y,MACH,4DACAA,MAWhBm8G,GAAgB7zH,UAAU6/H,qBAAuB,SAASoG,GACtD,IAAKvzH,KAAKqnH,gBAAkBrnH,KAAKsnH,wBAA0BnjG,IAAQuQ,aAAevQ,IAAQub,gBAGtF,YAFA3hB,GAAO7Y,KAAK,qBAIhB,MAAMsuH,EAAQxzH,KAAK83E,kBACb27C,EAAYD,EAAMj9H,OAGlBm9H,EAAgB1zH,KAAK+uH,qBAQ3B,IALK2E,GAAiB1zH,KAAKkjH,sBACvBljH,KAAKgzH,+BAIJhzH,KAAKsjH,kBAAoBoQ,EAAe,CACzC,MAAMt1D,EAAOq1D,GAAaD,EAAM,GAG1BG,EAAO3zH,KAAK4nC,WACZgsF,EAAUx1D,EAAKkZ,QAErB,GAAIq8C,EAAOC,EAKP,YAJA71G,GAAO9Y,MACH,2DACqC0uH,EAAMC,GAG5C,GAAID,IAASC,EAGhB,YAFA71G,GAAO/Y,MAAM,kBAAmB2uH,EAAMC,GAK1C,MAAMjwH,EAAMy6D,EAAKjjB,SAEjB,GAAIo4E,EAAe,CACf,GAAIvzH,KAAKkjH,qBAGL,YAFAnlG,GAAO/Y,MAAM,+CAIjB+Y,GAAO7Y,KACF,wBAAuBvB,WACpB3D,KAAKojH,6BACbpjH,KAAKkjH,qBAAuB34G,WACxBvK,KAAKqzH,iBAAiBnmI,KAAK8S,KAAM2D,GACX,IAAtB3D,KAAKojH,qBAETrlG,GAAO7Y,KAAM,wBAAuBvB,GACpC3D,KAAKqzH,iBAAiB1vH,QAEnB3D,KAAKsjH,mBAAqBoQ,IACjC31G,GAAO7Y,KAAM,uBAAsBlF,KAAKsjH,iBAAiBj9B,WAGrDrmF,KAAKsjH,iBAAiB/8B,aAAektC,EAAY,GACjDhwG,IAAWmI,oBACP0E,aAAe7B,OAEvBzuB,KAAK2vH,oBAUbxO,GAAgB7zH,UAAUyhI,mBAAqB,WAC3C,MAAMyE,EAAQxzH,KAAK83E,kBACb27C,EAAYD,EAAMj9H,OAClBs9H,OAAmGtzH,IAAtFizH,EAAMl+F,KAAK9nC,GAAwB,gBAAnBA,EAAEkgI,cAAkClgI,EAAEsmI,WAAWl/E,MAC9E8+E,EAA8B,IAAdD,IAAoBI,EAI1C,OAFA91G,GAAO9Y,MAAO,mBAAkBwuH,kBAA0BI,QAAiBH,KAEpEA,GAWXvS,GAAgB7zH,UAAUqiI,gBAAkB,SACpCngH,EACAmgF,GACJ,IAAK3vF,KAAKsjH,iBAGN,YAFAvlG,GAAO/Y,MAAM,iCAKjB,MAAM+uH,EAAoB/zH,KAAKi4E,cAG3B87C,IACI/zH,KAAK4hH,kBACL5hH,KAAKozH,uCAITpzH,KAAKkzH,0BAITn1G,GAAO7Y,KAAK,4CACZlF,KAAK2oB,WAAWrD,gBAAgBtlB,KAAKsjH,iBAAiBj+F,gBACtDtH,GAAO7Y,KAAK,yCACZlF,KAAK2oB,WAAWd,cAAc7nB,KAAKsjH,iBAAiBj+F,gBAEpDrlB,KAAKsjH,iBAAiBvhC,UAClB,KACIhkE,GAAO7Y,KAAK,iCAEhBF,IAcQwK,GACAuO,GAAO/Y,MACH,iEAC6BA,IAEtC,CACCwK,OAAQA,GAAkB,UAC1BmgF,kBAAmBA,GACO,yBAC1BF,qBAAsBzvF,KAAK28C,MACpB38C,KAAK+3E,mBACJt8E,UAAQyI,mBAAmBlE,KAAKsjH,iBAAiBj9B,cAGjErmF,KAAKsjH,iBAAmB,KAGxBtjH,KAAK6yH,eAAc,GAEfkB,IAEI/zH,KAAK4hH,iBACL5hH,KAAKqyH,sBAELt0G,GAAO7Y,KAAK,mDAWxBi8G,GAAgB7zH,UAAU2qF,YAAc,WACpC,OAAOj4E,KAAKm8C,KAShBglE,GAAgB7zH,UAAU0mI,sBAAwB,WAC9C,OAAIh0H,KAAKi4E,cACEj4E,KAAKsjH,iBAAiBj+F,eAAegwE,qBAGzC,MAOX8rB,GAAgB7zH,UAAU2mI,gBAAkB,WACxC,MAAMT,EAAQxzH,KAAK83E,kBAGnB,GAAqB,IAAjB07C,EAAMj9H,OAKN,MAAM,IAAIc,MACN,kEANgB,CACpB,MAAM68H,EAAUV,EAAM,GAAGr4E,SAEzBn7C,KAAKqzH,iBAAiBa,KAU9B/S,GAAgB7zH,UAAU6mI,eAAiB,WACvCn0H,KAAK2vH,mBAOTxO,GAAgB7zH,UAAU8mI,gBAAkB,WACxC,OAAOp0H,KAAKgjH,sBAAsBqR,YAoBtClT,GAAgB7zH,UAAUgnI,uBAAyB,SAASC,GACxDv0H,KAAKqlH,uBAAuBiP,uBAAuBC,IAWvDpT,GAAgB7zH,UAAUs4C,2BAA6B,SAASC,GAC5D7lC,KAAKqlH,uBAAuBmP,kCAAkC3uF,IAUlEs7E,GAAgB7zH,UAAU+hG,yBAA2B,SAASxpD,GAC1D,OAAO7lC,KAAKulH,oBAAoBkP,+BAA+B5uF,IAgBnEs7E,GAAgB7zH,UAAUonI,wBACpB,SAASC,EAAY/oB,GACnB,OAAK5rG,KAAK28C,KAIH38C,KAAKujH,kBACPmR,wBAAwBC,EAAY/oB,GAJ9B,IAAIv0G,MAAMolG,wBAY7B0kB,GAAgB7zH,UAAU43H,kCAAoC,WAC1D,MAAM0P,EAAY50H,KAAKwwH,sBAEnBxwH,KAAK2jH,mCAAsCiR,GAAgD,OAAnC50H,KAAK4pH,4BAIjEnmG,IAAWuI,cAAcwD,aAAsB,SAAU,CACrDolG,YACA/kG,cAAgB,GAAE+kG,KAAa50H,KAAK0kH,qBAExC1kH,KAAK2jH,kCAAoCx7G,KAAKgM,QAOlDgtG,GAAgB7zH,UAAUo6H,kCAAoC,WAC1D,MAAMkN,EAAY50H,KAAKwwH,qBAElBoE,GAAc50H,KAAK2jH,mCAKxBlgG,IAAWuI,cAAcwD,aAAsB,OAAQ,CACnDolG,YACA/kG,cAAgB,GAAE+kG,KAAa50H,KAAK0kH,kBACpC15F,MAAO,CACH21F,SAAUv1G,KAAKmM,OAAOpP,KAAKgM,MAAQnU,KAAK2jH,mCAAqC,KAC7EkR,KAAM70H,KAAKyoH,2BAUvBtH,GAAgB7zH,UAAUu3F,sBAAwB,WAC1C7kF,KAAKsjH,kBACLtjH,KAAKm0H,iBAGLn0H,KAAK4hH,kBACL5hH,KAAK4hH,iBAAiB7/B,UAClB,KACA/8E,IACI+Y,GAAO5Y,KAAK,8DAA+DH,IAC5E,CACCwK,OAAQ,UACRmgF,kBAAmB,mBACnBE,gBAAgB,EAChBJ,sBAAsB,IAIlCzvF,KAAKmtH,sBAAqB,IAQ9BhM,GAAgB7zH,UAAUoxF,cAAgB,WACtC,OAAO1+E,KAAK6jH,gBAAkB7jH,KAAK6jH,eAAe3kC,aAStDiiC,GAAgB7zH,UAAUs2H,gBAAkB,WACxC,OAAOnsE,IAAclZ,YAAYv+B,KAAKmH,QAAQ0wB,SASlDspF,GAAgB7zH,UAAUwnI,WAAa,SAAS3gE,GACvCn0D,KAAK4jH,kBAMV5jH,KAAK6jH,eAAekR,WAAW5gE,GAL3Bp2C,GAAO5Y,KAAK,6DAapBg8G,GAAgB7zH,UAAU0nI,iBAAmB,WACzC,OAAOj7F,QAAQ/5B,KAAK28C,MAAQ38C,KAAK28C,KAAKs4E,WAAW12F,gBAQrD4iF,GAAgB7zH,UAAU2+H,cAAgB,WACtC,OAAOlyF,QAAQ/5B,KAAK28C,MAAQ38C,KAAK28C,KAAKu4E,qBAQ1C/T,GAAgB7zH,UAAU6nI,YAAc,WACpC,OAAIn1H,KAAK28C,MAAQ38C,KAAKm6G,cACXn6G,KAAK28C,KAAKs4E,WAAW5yF,SAGzBvE,QAAQE,OACX,IAAI3mC,MAAM,yDAQlB8pH,GAAgB7zH,UAAU8nI,aAAe,WACjCp1H,KAAK28C,MAAQ38C,KAAKm6G,cAClBn6G,KAAK28C,KAAKs4E,WAAWI,UAErBt3G,GAAO5Y,KAAM,4BAA2BnF,KAAK28C,KAAO,GAAK,oBACrD38C,KAAKm6G,cAAgB,GAAK,qCAWtCgH,GAAgB7zH,UAAUgoI,UAAY,SAAS1pB,EAAa2pB,GACxD,OAAIv1H,KAAK28C,KACE38C,KAAK28C,KAAKs4E,WAAW9xH,KAAKyoG,EAAa2pB,GAG3Cz3F,QAAQE,OAAO,IAAI3mC,MAAM,gCAOpC8pH,GAAgB7zH,UAAUkoI,gBAAkB,SAAStuH,GAC7ClH,KAAK28C,MACL38C,KAAK28C,KAAKs4E,WAAWQ,WAAWvuH,IASxCi6G,GAAgB7zH,UAAUooI,mBAAqB,SAASxuH,GAChDlH,KAAK28C,MACL38C,KAAK28C,KAAKs4E,WAAWU,cAAczuH,IAS3Ci6G,GAAgB7zH,UAAUsoI,wBAA0B,WAChD,OAAO77F,QAAQ/5B,KAAK28C,MAAQ38C,KAAK28C,KAAKk5E,kBAAkBt3F,gBAO5D4iF,GAAgB7zH,UAAUwoI,mBAAqB,SAASzlG,GAChDrwB,KAAK28C,MAAQ38C,KAAKm6G,gBACd9pF,IAAcmX,KAAmBnX,IAAcmX,KACnDxnC,KAAK28C,KAAKk5E,kBAAkBxzF,QAAO,EAAMhS,GAEzCtS,GAAO5Y,KAAM,mCAAkCnF,KAAK28C,KAAO,GAAK,oBAC5D38C,KAAKm6G,cAAgB,GAAK,qCAC1Bn6G,KAAK28C,MAAQ38C,KAAKm6G,cAAgB,0BAA4B,OAQ1EgH,GAAgB7zH,UAAUyoI,oBAAsB,SAAS1lG,GACjDrwB,KAAK28C,MAAQ38C,KAAKm6G,gBACd9pF,IAAcmX,KAAmBnX,IAAcmX,KACnDxnC,KAAK28C,KAAKk5E,kBAAkBxzF,QAAO,EAAOhS,GAE1CtS,GAAO5Y,KAAM,oCAAmCnF,KAAK28C,KAAO,GAAK,oBAC7D38C,KAAKm6G,cAAgB,GAAK,qCAC1Bn6G,KAAK28C,MAAQ38C,KAAKm6G,cAAgB,0BAA4B,OAU1EgH,GAAgB7zH,UAAU0oI,oBAAsB,SAAS3lG,EAAWnpB,GAChE,GAAIlH,KAAK28C,MAAQ38C,KAAKm6G,gBACd9pF,IAAcmX,KAAmBnX,IAAcmX,KAAkB,CAErE,MAAM2vC,EAAcn3E,KAAK+3E,mBAAmB7wE,GAE5C,IAAKiwE,EACD,OAGJn3E,KAAK28C,KAAKk5E,kBAAkBI,QAAQ5lG,EAAW8mD,EAAYh8B,eAE3Dp9B,GAAO5Y,KAAM,2BAA0BnF,KAAK28C,KAAO,GAAK,oBACpD38C,KAAKm6G,cAAgB,GAAK,qCAC1Bn6G,KAAK28C,MAAQ38C,KAAKm6G,cAAgB,0BAA4B,OAM1EgH,GAAgB7zH,UAAU4oI,aAAe,WACrC,GAAIl2H,KAAKsH,KACL,OAAOtH,KAAKsH,MAIpB65G,GAAgB7zH,UAAUw2H,gBAAkB,WAExC,IAAIqS,EAAc,GAMlBn2H,KAAKgmB,GAAGgB,4BAAiD,CAACmwD,EAAar6B,KAEnE,IAAMA,GAP6B,yBAOpBA,EAAK71C,MANa,uBAM8B61C,EAAK71C,KAChE,OAGJ,MAAMmvH,EAAsBp2H,KAAK8wH,4BAA4B,wBAE7D,IAEI,MAAMuF,EAAsBv5E,EAAKw5E,WAC3BC,EAAkBz5E,EAAKq6B,YAAYlrF,KAEzC,IAAIuqI,EAAuB,CAAEH,uBAE7B,GAnB6B,uBAmBzBv5E,EAAK71C,MAAyC61C,EAAK25E,WAAaL,EAEhEI,EAAoB,MAAY15E,EAAKn7C,KACrC60H,EAAoB,gBAAsBD,OAEvC,GAzBwB,yBAyBpBz5E,EAAK71C,OAA6CmvH,EAAqB,CAI9E,MAAM,KAAEz0H,GAASm7C,EAAK45E,WAAW,GAM7BP,EAAYE,sBAAwBA,EACrCG,EAAuBL,EAEvBK,EAAoB,gBAAsBD,EAKxCz5E,EAAK65E,WAGC75E,EAAK85E,UAAY,KAIxBJ,EAAoB,OAAa70H,EACjC60H,EAAoB,cAAej2H,GAMnCi2H,EAAoB,SAAe70H,EAbnC60H,EAAoB,MAAY70H,EAkBxC,IAAIk1H,EAAY,GAEhB,GAAIL,EAAqBM,MACrBD,EAAYL,EAAqBM,UAC9B,CACH,MAAMC,EAASP,EAAqBO,QAAU,GAE9CF,EAAYE,GADKP,EAAqBQ,UAAY,IAItDb,EAAcK,EAEdx2H,KAAKgxC,QAAQrpB,KAAKX,qBAA0CwvG,EAAqBH,oBAAqBG,EAAqBD,gBAAiBM,GAC9I,MAAO7xH,GACL+Y,GAAO/Y,MAAM,iDAAkDA,OAM3Em8G,GAAgB7zH,UAAU41E,qBAAuB,WAC7CyoC,gBAIJwV,GAAgB7zH,UAAU61E,wBAA0B,SAASnjC,GAC1DwjE,gBAIH2d,GAAgB7zH,UAAU81E,wBAA0B,SAASpjC,GAC1DmlE,gBAIHgc,GAAgB7zH,UAAU21E,gBAAkB,WACzCjjE,KAAK2oB,WAAWuD,0BAA0BlF,2BAAgD,CAACiF,EAAW6K,KACjG,IAAI7qC,EAAQ,GAAI6rB,EAAO,GACG,iBAAdmU,GACRhgC,EAAOggC,EACPnU,EAAOgf,GACqB,iBAAd7K,IACdhgC,EAAQggC,EAAUhgC,KAClB6rB,EAAOmU,GAGX,MAAMgrG,EAAgB,CAClBhrI,OACAijC,OAAQpX,EAAKoX,OAASpX,EAAKoX,OAAS,GACpCC,cAAerX,EAAKqX,cAAgBrX,EAAKqX,cAAgB,GACzDM,OAAO3X,EAAK2X,OAAS3X,EAAK2X,OAAS,GACnCxyB,WAAY2P,KAAKwL,UAAU0e,IAE/B92B,KAAK6jB,aAAa8D,KAAKX,2BAAgDiwG,MAI/E9V,GAAgB7zH,UAAU4pI,oBAAsB,SAASrgB,GACtD72G,KAAKm3H,oBAAsB,IAAI7d,KAC/Bt5G,KAAKm3H,oBAAoB5d,eAAev5G,MACxCA,KAAKm3H,oBAAoB1c,eAAe5D,IAG3CsK,GAAgB7zH,UAAU8pI,mBAAqB,WAC5Cp3H,KAAKm3H,oBAAoBnc,iBAG5BmG,GAAgB7zH,UAAUotH,aAAe,WACtC16G,KAAKm3H,oBAAoBzc,aAAa7D,SAGzCsK,GAAgB7zH,UAAU4mF,SAAW,SAAS5qD,GAC3CtpB,KAAKm3H,oBAAoBjjD,SAAS5qD,IAGrC63F,GAAgB7zH,UAAU6mF,aAAe,SAASn0C,GAC/ChgC,KAAKm3H,oBAAoBhjD,aAAan0C,M,yEC10HzC,gMAyBA,MAAMjiB,EAASF,oBAAU6E,GAMV,SAAS++F,EAA4B76F,GAChD5mB,KAAK4mB,WAAaA,EAClB5mB,KAAKq3H,cAAgB,GAGrBzwG,EAAWZ,GAAGgB,qBACV2Z,IACI,IAAKA,EAAM5W,YAAcnD,EAAW+B,WAChC,OAEJ,MAAM1Q,EACA0oB,EAAMnZ,MACFZ,EAAW08F,iBAAmB18F,EAAWg7F,iBAI7C95F,EAAO7P,GAAWA,EAAQoN,gBAAmB,KAEnDuB,EAAW+B,WAAWU,cAClBvB,EACA6Y,EAAM04C,UACN14C,EAAMmH,aAOtB25E,EAA4Bn0H,UAAUw4H,uBAAyB,WAC3D,MAAMl/F,EAAa5mB,KAAK4mB,WAClB0wG,EAAW1wG,EAAW+1B,KAE5B38C,KAAKu3H,kBAAoB,IAAIC,IAAsBF,EAC/Ct3H,KAAK4mB,WAAW/C,cAEpByzG,EAASlzF,YAAY4T,IAAWllD,eAAgB+7H,IACvCA,EAAcrnG,OAMfZ,EAAWouD,IAAIjsC,uBAMvBuuF,EAASlzF,YAAY4T,IAAW7jD,6BAA8B,CAACwC,EAAMmS,KACjE,MAAMquE,EAAcvwD,EAAWmxD,mBAAmBt8E,UAAQyI,mBAAmBvN,IAEzEwgF,IACAA,EAAY61C,YAAYlkH,GACxB8d,EAAW/C,aAAa8D,KAAKX,8BAAmDmwD,MAIxFmgD,EAASlzF,YACL4T,IAAWjlD,oBACX,CAAC87H,EAAev9B,MAGXu9B,EAAcrnG,OACRZ,EAAW0oG,kBACVh+B,EAASu9B,EAAcxpG,kBAIvCiyG,EAASlzF,YAAY4T,IAAWrmD,qBAC5B8lI,IAIIh0G,IAAWuI,cAAcuE,YAAyBiX,MAElD5gB,EAAWy7F,kBAAoBoV,EAG/B7wG,EAAWouD,IAAI9sC,cAAa,GAAMxK,KAC9B,KACI9W,EAAWw7F,gBAAiB,EAC5Bx7F,EAAWy7F,kBAAoB,OAElC9lF,MACGv3B,IACI4hB,EAAWy7F,kBAAoB,KAC/BtkG,EAAO5Y,KACH,gDAAiDH,OAKzEsyH,EAASlzF,YAAY4T,IAAWpmD,qBAC5B6lI,IAIIh0G,IAAWuI,cAAcuE,YAAyBiX,MAElD5gB,EAAW27F,uBAAyBkV,EAGpC7wG,EAAWouD,IAAIxsC,cAAa,GAAM9K,KAC9B,KACI9W,EAAW07F,qBAAsB,EACjC17F,EAAW27F,uBAAyB,OAEvChmF,MACGv3B,IACI4hB,EAAW27F,uBAAyB,KACpCxkG,EAAO5Y,KACH,gDAAiDH,OAKzEhF,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAW5nD,gBACtC42B,mBAEJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAW3kD,WACtC2zB,qBAEJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAW/kD,eACtC+zB,4BAGJswG,EAASlzF,YAAY4T,IAAW3kD,WAC5B,KACI2M,KAAK4mB,WAAWwmG,eAEhBptH,KAAK4mB,WAAWm8F,4BAA6B,EAG7C32H,OAAOmZ,KAAK+xH,EAASpiF,iBAAiB9lC,QAAQniB,IAC1C,MAAM4+B,EACA6D,YACG,cAAaziC,EACd,CAAEN,MAAO2qI,EAASpiF,gBAAgBjoD,KAE1Cw2B,IAAWuI,cAAcH,KAI7Bz/B,OAAOmZ,KAAK+xH,EAAS5zG,KAAKwxB,iBAAiB9lC,QAAQniB,IAC/C,MAAM4+B,EACA6D,YACG,QAAOziC,EACR,CAAEN,MAAO2qI,EAAS5zG,KAAKwxB,gBAAgBjoD,KAE/Cw2B,IAAWuI,cAAcH,OAIrCyrG,EAASlzF,YAAY4T,IAAWtjD,qBAAsB,CAAC2E,EAAG4e,KACjDA,EAAQuP,OACTZ,EAAW/C,aAAa8D,KAAKX,oBACzBk2E,sBAA2C7jG,KAIvD2G,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWljD,gBACtCkyB,oBACAk2E,oBAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWpjD,mBACtCoyB,oBACAk2E,oBACJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWnjD,+BACtCmyB,oBACAk2E,qBACJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWjjD,gCACtCiyB,oBACAk2E,sBAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWhjD,qBACtCgyB,oBACAk2E,wBAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAW5jD,kBACtC4yB,oBACAk2E,qBAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWnmD,wBACtCm1B,oBACAk2E,2BAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWlmD,YACtCk1B,oBACAk2E,6BACJo6B,EAASlzF,YACL4T,IAAWlmD,YACX,IAAM2xB,IAAWuI,cAAciD,gBAEnCqoG,EAASlzF,YAAY4T,IAAW1lD,qBAC5Bu8H,IACIjoG,EAAWmrG,uBAAuBlD,KAG1C7uH,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWrjD,kBACtCqyB,oBACAk2E,qBAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWnlD,kBACtCm0B,oBACAk2E,qBAEJo6B,EAASlzF,YAAY4T,IAAW3lD,sBAC5Bw8H,IACIjoG,EAAWqrG,uBAAuBpD,KAG1C7uH,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAW5kD,cACtC4zB,oBACAk2E,wBAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAW9lD,oBACtC80B,mBACAk2E,cAEJl9F,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWrlD,mBACtCq0B,oBACAk2E,sBAEJo6B,EAASlzF,YAAY4T,IAAWplD,WAC5B,KACI6wB,IAAWuI,cAAcgE,eACzBpJ,EAAW/C,aAAa8D,KACpBX,oBACAk2E,gBAGZo6B,EAASlzF,YAAY4T,IAAW7iD,uBAC5B05H,IACIprG,IAAWmI,oBACPuE,YACInC,IACA,CAAEmuB,IAAK0yE,EAAcrnG,WAGrC8vG,EAASlzF,YAAY4T,IAAWjoD,uBAC5B,CAACkoB,EAAStU,KAEN,GAAIA,EAAK,CACL,MAAMkQ,EAAWpY,UAAQyI,mBAAmBP,GACtCwzE,EAAcvwD,EAAWmxD,mBAAmBlkE,IAAaA,EAEnC,QAAxBoE,EAAQm8F,YACRn8F,EAAQ08F,cAAcx9B,GACS,OAAxBl/D,EAAQm8F,aACfn8F,EAAQy8F,aAAav9B,GAI7BvwD,EAAW/C,aAAa8D,KACpBX,yBACA/O,KAGZjY,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWrnD,6BACtCq2B,gCAEJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWhoD,kCACtCg3B,qCAEJhnB,KAAKu3H,kBAAkB3kE,QACnB5a,IAAW/nD,mCACX+2B,sCAEJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWnoD,qBACtCm3B,wBAEJswG,EAASI,+BAA+B,CAACx2H,EAAMvK,KAC3C,MAAMwgF,EAAcvwD,EAAWmxD,mBAAmBphF,GAE7CwgF,GAILA,EAAYo2C,YACRrsH,EAAKf,QAAQuxB,UAAU,qBAAqBn7B,QAC5C2K,EAAKvU,SAGb2qI,EAASlzF,YAAY4T,IAAWnpD,OAC5B+3B,EAAWknG,eAAe5gI,KAAK05B,IACnC0wG,EAASlzF,YAAY4T,IAAW3nD,iBAC5Bu2B,EAAWgpG,kBAAkB1iI,KAAK05B,IAEtC5mB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWlkD,iBACtCkzB,sBAEJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWjkD,yBACtCizB,wBAEJswG,EAASlzF,YAAY4T,IAAW1kD,kBAC5BszB,EAAW2lG,eAAer/H,KAAK05B,IACnC5mB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWxkD,wBACtCwzB,qBACJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWvkD,yBACtCuzB,sBACJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWtkD,sBACtCszB,mBACJswG,EAASlzF,YAAY4T,IAAW7kD,4BAC5ByzB,EAAW4mG,wBAAwBtgI,KAAK05B,IAC5C0wG,EAASlzF,YAAY4T,IAAWzkD,gBAC5BqzB,EAAWihG,aAAa36H,KAAK05B,IACjC5mB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWpkD,SACtCozB,mBACJhnB,KAAKu3H,kBAAkB3kE,QAAQ5a,IAAWrkD,kBACtCqzB,oBACAk2E,4BAEJo6B,EAASlzF,YAAY4T,IAAW1pD,qBAC5Bs4B,EAAWynG,qBAAqBnhI,KAAK05B,IAEzC0wG,EAASlzF,YAAY4T,IAAWhlD,mBAAoB47E,IAChDhoD,EAAWunG,mBAAmBv/C,GAG1BhoD,EAAW+B,YAAc/B,EAAWuzF,eACpCvzF,EAAWZ,GAAGgB,yBACV2wG,IACI,MAAMh6B,EAAY,CACd34F,MAAO2yH,EAAgB9jB,WACvB3sG,GAAI,kBACJ6I,OAAQ4nH,EAAgBvjB,aAG5B3wF,IAAWqH,QAAQle,KAAKwL,UAAUulF,QAKlD25B,EAASlzF,YAAY4T,IAAWnkD,iBAC5B+yB,EAAWwnG,kBAAkBlhI,KAAK05B,IAEtC0wG,EAASlzF,YAAYwzF,IAAqBppB,iBACtC,CAACwT,EAAaiG,KACVrhG,EAAWo7F,YAAcA,EACzBp7F,EAAWqhG,aAAeA,EAC1BrhG,EAAW/C,aAAa8D,KACpBX,sBAA2Cg7F,EAC3CiG,KAGZqP,EAASlzF,YACL4T,IAAW3oD,iBAGX,CAACsU,EAAKk0H,EAAKC,EAAOC,KACd,MAAM7wH,EAAKzL,UAAQyI,mBAAmBP,GAEtCijB,EAAW/C,aAAa8D,KACpBX,mBACA9f,EAAI2wH,EAAKE,KAGrBT,EAASlzF,YACL4T,IAAWxoD,yBAGX,CAACmU,EAAKk0H,EAAKC,EAAOC,KACd,MAAM7wH,EAAKzL,UAAQyI,mBAAmBP,GAEtCijB,EAAW/C,aAAa8D,KACpBX,2BACA9f,EAAI2wH,EAAKE,KAGrBT,EAASlzF,YAAY4T,IAAW1jD,gBAC5B,CAACqP,EAAKoM,KACF,MAAM7I,EAAKzL,UAAQyI,mBAAmBP,GAChCwzE,EAAcvwD,EAAWmxD,mBAAmB7wE,GAE7CiwE,GAAeA,EAAYtW,UAAY9wD,IAG5ConE,EAAYtW,QAAU9wD,EACtB6W,EAAW/C,aAAa8D,KACpBX,sBAA2C9f,EAAI6I,MAG3DunH,EAASlzF,YAAY4T,IAAWtiD,sBAC5B,CAACiB,EAAMmgC,KACH,MAAM5vB,EAAKzL,UAAQyI,mBAAmBvN,GAChCwgF,EAAcvwD,EAAWmxD,mBAAmB7wE,GAE9CiwE,EACAvwD,EAAW/C,aAAa8D,KACpBX,4BACAmwD,EAAargD,GAEjB/Y,EAAO5Y,KACH,0EACkBxO,EAClBmgC,KAIhBwgG,EAAS1O,oBAAoB,aAAc,CAACjvH,EAAMhD,KAC9C,IAAIwjH,GAAc,EAElB,GAAIvzF,EAAWghB,aAAejxC,GAAQiwB,EAAWuzF,cAC7CA,GAAc,MACX,CACH,MAAMhjC,EAAcvwD,EAAWmxD,mBAAmBphF,GAE9CwgF,GAAeA,EAAYgjC,gBAC3BA,GAAc,GAItB,IAAKA,EACD,OAGJ,MAAM8H,EAA4C,SAA1BtoH,EAAKsD,WAAWm9B,MAClC8nF,EAA4C,SAA1BvoH,EAAKsD,WAAWy7B,MAExC,IAAIs/F,GAAU,EAEV/V,IAAoBr7F,EAAWu7F,iBAAiB/nF,QAChDxT,EAAWu7F,iBAAiB/nF,MAAQ6nF,EACpC+V,GAAU,GAGV9V,IAAoBt7F,EAAWu7F,iBAAiBzpF,QAChD9R,EAAWu7F,iBAAiBzpF,MAAQwpF,EACpC8V,GAAU,GAGVA,GACApxG,EAAW/C,aAAa8D,KACpBX,6BACAJ,EAAWu7F,oBAKnBv7F,EAAW+B,aAEX2uG,EAASlzF,YAAY4T,IAAW3lD,sBAC5B4lB,IACI2O,EAAW+B,WAAWS,6BAClBnR,EAAQoN,kBAIpBiyG,EAASlzF,YAAY4T,IAAWtmD,yBAC5B,CAAC2H,EAAGgjE,KACAz1C,EAAW+B,WAAWkC,0BAA0BxxB,EAAGgjE,OAQnEolD,EAA4Bn0H,UAAU83H,kBAAoB,WACtD,MAAMx+F,EAAa5mB,KAAK4mB,WAClBouD,EAAMpuD,EAAWouD,IAEvBA,EAAI5wC,YACA/J,IAAUtN,mBACVnG,EAAWyvD,mBAAmBnpF,KAAK05B,IAEvCouD,EAAI5wC,YACA/J,IAAUpN,qBACVrG,EAAW2vD,qBAAqBrpF,KAAK05B,IAEzCouD,EAAI5wC,YAAY/J,IAAU9rC,yBACtB,CAAC0pI,EAAUC,KACP,GAAItxG,EAAWi7F,sBAAwBoW,GAAYrxG,EAAW+1B,KAAM,CAKhE,GAJA/1B,EAAWi7F,oBAAsBoW,EACjCrxG,EAAW/C,aAAa8D,KACpBX,2BAAgDixG,EAAUC,GAE1DA,GAAYA,EAAS3hI,OAAQ,CAC7B,MAAM+wB,EAAc4wG,EAASp4G,MAAM,GAG/B8G,EAAWghB,WAAaqwF,GACxB3wG,EAAYrjB,OAAO,EAAG,EAAGg0H,GAIzB3wG,EAAY/wB,OAASstE,KACrBv8C,EAAYrjB,OAAO4/D,IAAuBv8C,EAAY/wB,OAASstE,KAEnEj9C,EAAW+B,YAAc/B,EAAW+B,WAAWtB,eAAeC,GAE9DV,EAAW+B,YAAc/B,EAAWghB,aAAeqwF,GAEnDrxG,EAAW+B,WAAWc,yBAAyB7C,EAAW+1B,KAAK9B,YAK/Em6B,EAAI5wC,YAAY/J,IAAU/N,kBAAmB,KACzC,MAAMnY,EAAM7oB,OAAOusD,YAAY1jC,MACzBlnB,EAAM,sBAGZ8wB,EAAOnZ,IAAK,UAAS3X,OAAUknB,GAC/ByS,EAAW+1B,KAAKzH,gBAAgBjoD,GAAOknB,EACvCsP,IAAWuI,cACP0D,YAAkCziC,EAAK,CAAEN,MAAOwnB,KAEpDyS,EAAW/C,aAAa8D,KAAKX,yBAGjCguD,EAAI5wC,YAAY/J,IAAU3rC,0BACtB,CAACiI,EAAMmgC,KACH,MAAMqgD,EAAcvwD,EAAWmxD,mBAAmBphF,GAE9CwgF,EACAvwD,EAAW/C,aAAa8D,KACpBX,4BACAmwD,EAAargD,GAEjB/Y,EAAO5Y,KACH,mEACsBxO,EACtBmgC,KAIhBk+C,EAAI5wC,YAAY/J,IAAU1rC,wBACtB,CAACgI,EAAMmgC,KACH,MAAMqgD,EAAcvwD,EAAWmxD,mBAAmBphF,GAE9CwgF,EACAvwD,EAAW/C,aAAa8D,KAAKX,0BAA+CmwD,EAAargD,GAEzF/Y,EAAO5Y,KAAM,oEAAmExO,KAI5Fq+E,EAAI5wC,YAAY/J,IAAU5M,oBACtB,CAAC3F,EAAKwJ,KACGxJ,EAAIN,OACL/D,IAAWqH,QACPle,KAAKwL,UAAU,CACXlR,GAAI,cACJva,MAAO2kC,OAI3B0jD,EAAI5wC,YAAY/J,IAAU3M,qBACtB,CAAC5F,EAAKwJ,KACGxJ,EAAIN,OACL/D,IAAWqH,QACPle,KAAKwL,UAAU,CACXlR,GAAI,eACJva,MAAO2kC,OAK3B0jD,EAAI5wC,YAAY/J,IAAUjO,qBACtB,CAAC/yB,EAAGyuB,KACAlB,EAAW+B,WAAW+B,uBAAuBrxB,EAAGyuB,GAC3CA,EAAIN,OACLZ,EAAW/C,aAAa8D,KAAKX,oBACzBk2E,sBAA2C7jG,KAI3D27E,EAAI5wC,YAAY/J,IAAUhO,oBACtB,CAAChzB,EAAGyuB,KACAlB,EAAW+B,WAAW8B,sBAAsBpxB,EAAGyuB,GAC1CA,EAAIN,OACLZ,EAAW/C,aAAa8D,KAAKX,oBACzBk2E,sBAA2C7jG,KAI3D27E,EAAI5wC,YAAY/J,IAAUlN,6BACtB,CAAC9zB,EAAGyuB,KACAlB,EAAW+B,WAAWgC,uBAAuBtxB,EAAGyuB,GAC3CA,EAAIN,OACLZ,EAAW/C,aAAa8D,KAAKX,oBACzBk2E,sBAA2C7jG,KAI3D27E,EAAI5wC,YAAY/J,IAAUjN,8BACtB,CAAC/zB,EAAGyuB,KACAlB,EAAW+B,WAAWiC,wBAAwBvxB,EAAGyuB,GAC5CA,EAAIN,OACLZ,EAAW/C,aAAa8D,KAAKX,oBACzBk2E,sBAA2C7jG,KAI3D27E,EAAI5wC,YAAY/J,IAAUzN,yBACtB,CAAC+T,EAAOnX,KAKAmX,EAAM8gD,gBAAkB9gD,EAAMG,YAAcC,IAAUC,SACtDpa,EAAW+B,WAAWY,wBAAuB,EAAMC,MAQnEi4F,EAA4Bn0H,UAAUs6H,oBAAsB,WACxD,MAAMhhG,EAAa5mB,KAAK4mB,WAExBx6B,OAAOmZ,KAAKvF,KAAKq3H,eAAejoH,QAAQ6c,IACpCrF,EAAWlD,KAAKyC,eACZ8F,EACAjsB,KAAKq3H,cAAcprG,MAE3BjsB,KAAKq3H,cAAgB,IAOzB5V,EAA4Bn0H,UAAU42H,mBAAqB,WACvD,MAAMt9F,EAAa5mB,KAAK4mB,WAExB5mB,KAAKm4H,2BACDngF,IAAWhmD,cACX40B,EAAWsoG,eAAehiI,KAAK05B,IACnC5mB,KAAKm4H,2BACDngF,IAAWjmD,cACX60B,EAAW4nG,eAAethI,KAAK05B,IACnC5mB,KAAKm4H,2BACDngF,IAAWxiD,eACXoxB,EAAW6nG,gBAAgBvhI,KAAK05B,IACpC5mB,KAAKm4H,2BACDngF,IAAW/lD,WACX20B,EAAW6e,YAAYv4C,KAAK05B,IAEhC5mB,KAAKm4H,2BAA2BngF,IAAWziD,uBACvC,CAAC6iI,EAAYC,KACLzxG,EAAWzf,QAAQ0wB,OAAOygG,mBAI9B1xG,EAAWq7F,gBAAkBmW,EAC7BxxG,EAAWs7F,gBAAkBmW,EAI7BzxG,EAAW2gB,iBAAiBn4B,QAAQuxB,IAChC,OAAQA,EAAMmH,WACd,KAAKN,IACD5gB,EAAWq7F,iBAAmBthF,EAAM0H,OACpC,MACJ,KAAKb,IACD5gB,EAAWs7F,iBAAmBvhF,EAAM0H,UAK5CzhB,EAAW/C,aAAa8D,KAAKX,oBAGrChnB,KAAKm4H,2BAA2BngF,IAAW3iD,8BACvCkjI,IACI3xG,EAAW/C,aAAa8D,KAAKX,+BAAoDuxG,KAGzFv4H,KAAKm4H,2BAA2BngF,IAAW3mD,sBACvC,CAAC1E,EAAO0jC,EAAWmoG,KACf,MAAM1O,EAAmBljG,EAAWkxD,kBAAkBxiD,KAAK9nC,GAAKA,EAAE2tD,WAAaq9E,GAE/E5xG,EAAW/C,aAAa8D,KAAKX,wBAA6C,CACtEmtC,QAASxnE,EACT0jC,YACAonG,MAAO3N,MAGnB9pH,KAAKm4H,2BAA2BngF,IAAW1mD,mCACvC,CAAC++B,EAAW1sB,KACR,MAAMwzE,EAAcvwD,EAAWmxD,mBAAmBt8E,UAAQyI,mBAAmBP,IAEzEwzE,GACAvwD,EAAW/C,aAAa8D,KAAKX,qCAA0D,CACnFmwD,cACA9mD,gBAIhBrwB,KAAKm4H,2BAA2BngF,IAAW5mD,uBACvCzE,GAASi6B,EAAW/C,aAAa8D,KAAKX,yBAA8C,CAAEqJ,UAAW1jC,MAMzG80H,EAA4Bn0H,UAAU6qI,2BAA6B,SAC3DlsG,EAAWlG,GACf/lB,KAAKq3H,cAAcprG,GAAalG,EAChC/lB,KAAK4mB,WAAWlD,KAAK0gB,YAAYnY,EAAWlG,IAMhD07F,EAA4Bn0H,UAAUy4H,yBAA2B,WAC7D,MAAMn/F,EAAa5mB,KAAK4mB,WAEnBA,EAAW+B,aAKhB/B,EAAW+B,WAAW7C,sBAAsB,CAACgC,EAAK0B,EAAM3kB,EAAOklB,KAC3DnD,EAAWouD,IAAIhsC,cAAclhB,EAAK0B,EAAM3kB,EAAOklB,KAMnDnD,EAAW+B,WAAWvC,0BAA0B,KAC5CQ,EAAW/C,aAAa8D,KACpBX,gCAIHJ,EAAWzf,QAAQ0wB,OAAOmxD,aAC3BpiE,EAAW+B,WAAWnC,yBAAyB,CAACsB,EAAKkD,KACjDpE,EAAW2gB,eAAeC,KAAiBp4B,QAAQuxB,IAC/C,MAAMnX,EAAO1B,EAAIqpG,aAAaxwF,GAEzBnX,GAASwB,EAAMz9B,eAAei8B,IAInCmX,EAAM83F,yBAAyB3wG,EAAKkD,EAAMxB,Y,+ECjwB1D,mEAGA,MAAMzL,EAASF,oBAAU6E,GAcV,MAAMpE,UAA4BsmD,IAI7C3uE,cACIwlC,QACA1d,EAAO7Y,KACF,sBAAqBlF,KAAKy9D,mBAAmBz9D,KAAKylE,gBAU3DqgB,8BACI,OAAO9lF,KAAK68B,mBAAqB78B,KAAK0/B,gBAe1C7C,kBACI,OAAO78B,KAAKmlE,YACLnlE,KAAKwlE,cACLxlE,KAAKulE,UACLvlE,KAAKolE,UAWhB1lC,gBAEI,OAAO1/B,KAAK6kE,QAAQ6zD,SAAS,gBACY,IAA3Bp7F,UAAUC,mBAC8B,IAAxCD,UAAUC,aAAaa,mBACM,IAA7B9yC,OAAOqtI,mBAEdvsI,OAAOmZ,KAAKozH,kBAAkBrrI,WAAWsW,QAAQ,qBAAuB,EAQnFg1H,QACI,MAAO,eAAgBttI,QAAUA,OAAOutI,WAAW,6BAA6BxlH,QAQpFkrB,cACI,OAAQv+B,KAAK68B,mBAAqB78B,KAAK84H,4BApFX,IAqFrB94H,KAAK00B,aACL10B,KAAKokB,iBACLpkB,KAAK0/B,gBAShBq5F,qCACI,OAAO/4H,KAAK00B,aAAe10B,KAAKk3C,kBAAkB,MAStD69B,qCACI,OAAO/0E,KAAK68B,mBAAqB78B,KAAKokB,gBAQ1C40G,8BAGI,OAAQh5H,KAAK00B,cAAgB10B,KAAK0/B,gBAOtCu5F,2BACI,OAAOl/F,QAAQzuC,OAAOqtI,wBACyC,IAAjDrtI,OAAOqtI,kBAAkBO,qBAChC5tI,OAAO6tI,qBAC0C,IAA1C7tI,OAAO6tI,eAAeC,mBAI5Bp5H,KAAK0/B,gBAOjBrC,4BACI,OAAOC,UAAUC,mBACuC,IAA1CD,UAAUC,aAAa87F,qBACqB,IAA5C/7F,UAAUC,aAAaC,iBAOzC87F,sCACI,OAAOt5H,KAAK68B,mBAAqB78B,KAAKokB,iBAAmBpkB,KAAK0/B,gBAQlE7Y,8BACI,YAA6C,IAA/Bv7B,OAAOiuI,qBACdA,oBAAoBC,oBAAoB51H,QAAQ,aAAe,EAM1E0kG,wBACI,YAAwC,IAA1Bh9G,OAAO6tI,gBACd/sI,OAAOmZ,KAAK4zH,eAAe7rI,WAAWsW,QAAQ,8BAAgC,IAI7E5D,KAAK0/B,gBAQjB+5F,wBASI,OAAQz5H,KAAK00B,YAQjBqkE,6BACI,OAAO/4F,KAAK68B,mBAAqB78B,KAAKokB,iBAAmBpkB,KAAK0/B,gBAQlElH,cACI,OAAQx4B,KAAKokB,gBAOjBgpB,uBACI,OAAO,EAOX+8B,0BACI,YAA4C,IAA9B7sC,UAAUguC,sBACkB,IAA3BhuC,UAAUC,mBAET,IADED,UAAUC,aAAa+tC,gBAQ7CiZ,4BACI,QAAqC,IAAxBj5F,OAAOouI,eACZpuI,OAAOouI,aAAapsI,UAAUqsI,uBAC3BruI,OAAOouI,aAAapsI,UAAUssI,0BACrC,OAAO,EAKX,MAAMh0G,EAAS,IAAIi0G,eAEnB,IAGI,OAFAvuI,OAAOs2F,YAAYh8D,EAAQ,IAAK,CAAEA,KAE3B,EACT,SACE,OAAO,GAOfwxB,mBACI,OAAOrd,QAAQzuC,OAAOouI,cACfpuI,OAAOouI,aAAaN,iBACpB9tI,OAAOouI,aAAaN,gBAAgB,SAASjpD,OAAOluC,KAAKpL,GAA4B,cAAnBA,EAAMyhF,WACxEhtH,OAAO6tI,gBACP7tI,OAAO6tI,eAAeC,iBACtB9tI,OAAO6tI,eAAeC,gBAAgB,SAASjpD,OAAOluC,KAAKpL,GAA4B,cAAnBA,EAAMyhF,WAQrF7vB,sBACI,OAAQzoF,KAAKokB,gBAQjB4hG,uBACI,OAAOhmH,KAAK68B,kBAQhBi8F,2BACI,GAAI94H,KAAK68B,kBAAmB,CAExB,GAAI78B,KAAKulE,SAEL,OAAOhsD,OAAOjB,SAAS6qC,EAAQu4C,SAASo+B,SAAU,IAQtD,MAAMvY,EAAKjkF,UAAU0mC,UAErB,GAAIu9C,EAAGjuG,MAAM,UAAW,CAIpB,OAFMiG,OAAOjB,SAASipG,EAAGjuG,MAAM,oBAAoB,GAAI,KAM/D,OAAQ,M,6GC9ThB;;;;;;;;;IASA,WACE,aAEA,IAAI5V,MAAQ,wBACRq8H,OAA2B,iBAAXzuI,OAChBN,KAAO+uI,OAASzuI,OAAS,GACzBN,KAAKgvI,mBACPD,QAAS,GAEX,IAAIE,YAAcF,QAA0B,iBAATlkI,KAC/BqkI,SAAWlvI,KAAKmvI,mBAAwC,iBAAZh3E,SAAwBA,QAAQu4C,UAAYv4C,QAAQu4C,SAASx6F,KACzGg5H,QACFlvI,KAAO4K,OACEqkI,aACTjvI,KAAO6K,MAET,IAAIukI,WAAapvI,KAAKqvI,qBAAyC,iBAAXlvI,QAAuBA,OAAOD,QAC9EovI,IAAsC,yBACtCC,cAAgBvvI,KAAKwvI,wBAAiD,oBAAhBrvE,YACtDsvE,UAAY,mBAAmB13H,MAAM,IACrC23H,MAAQ,CAAC,IAAK,MAAO,SAAU,YAC/BC,MAAQ,CAAC,EAAG,EAAG,GAAI,IACnBC,aAAe,CAAC,MAAO,QAAS,SAAU,SAAU,cAAe,UACnEC,mBAAqB,mEAAmE93H,MAAM,IAE9F+3H,OAAS,GAAIC,QACjB,GAAIR,aAAc,CAChB,IAAI/xE,OAAS,IAAI2C,YAAY,IAC7B4vE,QAAU,IAAIv2E,WAAWgE,QACzBsyE,OAAS,IAAIztB,YAAY7kD,SAGvBx9D,KAAKmvI,mBAAsB/jI,MAAMC,UACnCD,MAAMC,QAAU,SAAUN,GACxB,MAA+C,mBAAxC3J,OAAOkB,UAAUoJ,SAAS7K,KAAKkK,MAItCwkI,eAAiBvvI,KAAKgwI,gCAAmC7vE,YAAY8vE,SACvE9vE,YAAY8vE,OAAS,SAAUllI,GAC7B,MAAsB,iBAARA,GAAoBA,EAAIyyD,QAAUzyD,EAAIyyD,OAAOvyD,cAAgBk1D,cA6D/E,IAAI+vE,mBAAqB,SAAUC,GACjC,OAAO,SAAU12H,GACf,OAAO,IAAI22H,KAAI,GAAMC,OAAO52H,GAAS02H,OAwBrCG,aAAe,WACjB,IAAIC,EAASL,mBAAmB,OAC5BhB,UACFqB,EAASC,SAASD,IAEpBA,EAAOvuI,OAAS,WACd,OAAO,IAAIouI,KAEbG,EAAOF,OAAS,SAAU52H,GACxB,OAAO82H,EAAOvuI,SAASquI,OAAO52H,IAEhC,IAAK,IAAI/Y,EAAI,EAAGA,EAAIkvI,aAAarkI,SAAU7K,EAAG,CAC5C,IAAIub,EAAO2zH,aAAalvI,GACxB6vI,EAAOt0H,GAAQi0H,mBAAmBj0H,GAEpC,OAAOs0H,GAGLC,SAAW,SAAUD,QACvB,IAAIt2C,OAASw2C,KAAK,qBACdl3E,OAASk3E,KAAK,4BACdC,WAAa,SAAUj3H,GACzB,GAAuB,iBAAZA,EACT,OAAOwgF,OAAO02C,WAAW,OAAON,OAAO52H,EAAS,QAAQm3H,OAAO,OAE/D,GAAIn3H,QACF,MAAM/G,MAKV,OAJa+G,EAAQxO,cAAgBk1D,cACjC1mD,EAAU,IAAI+/C,WAAW//C,IAGzBrO,MAAMC,QAAQoO,IAAY0mD,YAAY8vE,OAAOx2H,IAC/CA,EAAQxO,cAAgBsuD,OACjB0gC,OAAO02C,WAAW,OAAON,OAAO,IAAI92E,OAAO9/C,IAAUm3H,OAAO,OAE5DL,OAAO92H,IAGlB,OAAOi3H,YAST,SAASN,IAAIS,GACX,GAAIA,EACFf,OAAO,GAAKA,OAAO,IAAMA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GACxDA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAC3CA,OAAO,GAAKA,OAAO,GAAKA,OAAO,IAAMA,OAAO,IAC5CA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAM,EACpD96H,KAAK86H,OAASA,OACd96H,KAAK+6H,QAAUA,aAEf,GAAIR,aAAc,CAChB,IAAI/xE,EAAS,IAAI2C,YAAY,IAC7BnrD,KAAK+6H,QAAU,IAAIv2E,WAAWgE,GAC9BxoD,KAAK86H,OAAS,IAAIztB,YAAY7kD,QAE9BxoD,KAAK86H,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGnE96H,KAAK87H,GAAK97H,KAAK+7H,GAAK/7H,KAAKg8H,GAAKh8H,KAAKi8H,GAAKj8H,KAAK+c,MAAQ/c,KAAKk8H,MAAQl8H,KAAKm8H,OAAS,EAChFn8H,KAAKo8H,UAAYp8H,KAAKq8H,QAAS,EAC/Br8H,KAAKqgB,OAAQ,EAYf+6G,IAAI9tI,UAAU+tI,OAAS,SAAU52H,GAC/B,IAAIzE,KAAKo8H,UAAT,CAIA,IAAIE,EAAWr1H,SAAcxC,EAC7B,GAAa,WAATwC,EAAmB,CACrB,GAAa,WAATA,EAWF,MAAMvJ,MAVN,GAAgB,OAAZ+G,EACF,MAAM/G,MACD,GAAI68H,cAAgB91H,EAAQxO,cAAgBk1D,YACjD1mD,EAAU,IAAI+/C,WAAW//C,QACpB,KAAKrO,MAAMC,QAAQoO,IACnB81H,cAAiBpvE,YAAY8vE,OAAOx2H,IACvC,MAAM/G,MAMZ4+H,GAAY,EAKd,IAHA,IAAI3/G,EAAiBjxB,EAAXupC,EAAQ,EAAM1+B,EAASkO,EAAQlO,OAAQukI,EAAS96H,KAAK86H,OAC3DC,EAAU/6H,KAAK+6H,QAEZ9lG,EAAQ1+B,GAAQ,CAUrB,GATIyJ,KAAKq8H,SACPr8H,KAAKq8H,QAAS,EACdvB,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAGlDwB,EACF,GAAI/B,aACF,IAAK7uI,EAAIsU,KAAK+c,MAAOkY,EAAQ1+B,GAAU7K,EAAI,KAAMupC,EAC/C8lG,EAAQrvI,KAAO+Y,EAAQwwB,QAGzB,IAAKvpC,EAAIsU,KAAK+c,MAAOkY,EAAQ1+B,GAAU7K,EAAI,KAAMupC,EAC/C6lG,EAAOpvI,GAAK,IAAM+Y,EAAQwwB,IAAU0lG,MAAY,EAANjvI,UAI9C,GAAI6uI,aACF,IAAK7uI,EAAIsU,KAAK+c,MAAOkY,EAAQ1+B,GAAU7K,EAAI,KAAMupC,GAC/CtY,EAAOlY,EAAQlN,WAAW09B,IACf,IACT8lG,EAAQrvI,KAAOixB,EACNA,EAAO,MAChBo+G,EAAQrvI,KAAO,IAAQixB,GAAQ,EAC/Bo+G,EAAQrvI,KAAO,IAAe,GAAPixB,GACdA,EAAO,OAAUA,GAAQ,OAClCo+G,EAAQrvI,KAAO,IAAQixB,GAAQ,GAC/Bo+G,EAAQrvI,KAAO,IAASixB,GAAQ,EAAK,GACrCo+G,EAAQrvI,KAAO,IAAe,GAAPixB,IAEvBA,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9BlY,EAAQlN,aAAa09B,IACjE8lG,EAAQrvI,KAAO,IAAQixB,GAAQ,GAC/Bo+G,EAAQrvI,KAAO,IAASixB,GAAQ,GAAM,GACtCo+G,EAAQrvI,KAAO,IAASixB,GAAQ,EAAK,GACrCo+G,EAAQrvI,KAAO,IAAe,GAAPixB,QAI3B,IAAKjxB,EAAIsU,KAAK+c,MAAOkY,EAAQ1+B,GAAU7K,EAAI,KAAMupC,GAC/CtY,EAAOlY,EAAQlN,WAAW09B,IACf,IACT6lG,EAAOpvI,GAAK,IAAMixB,GAAQg+G,MAAY,EAANjvI,KACvBixB,EAAO,MAChBm+G,EAAOpvI,GAAK,KAAO,IAAQixB,GAAQ,IAAOg+G,MAAY,EAANjvI,KAChDovI,EAAOpvI,GAAK,KAAO,IAAe,GAAPixB,IAAiBg+G,MAAY,EAANjvI,MACzCixB,EAAO,OAAUA,GAAQ,OAClCm+G,EAAOpvI,GAAK,KAAO,IAAQixB,GAAQ,KAAQg+G,MAAY,EAANjvI,KACjDovI,EAAOpvI,GAAK,KAAO,IAASixB,GAAQ,EAAK,KAAUg+G,MAAY,EAANjvI,KACzDovI,EAAOpvI,GAAK,KAAO,IAAe,GAAPixB,IAAiBg+G,MAAY,EAANjvI,OAElDixB,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9BlY,EAAQlN,aAAa09B,IACjE6lG,EAAOpvI,GAAK,KAAO,IAAQixB,GAAQ,KAAQg+G,MAAY,EAANjvI,KACjDovI,EAAOpvI,GAAK,KAAO,IAASixB,GAAQ,GAAM,KAAUg+G,MAAY,EAANjvI,KAC1DovI,EAAOpvI,GAAK,KAAO,IAASixB,GAAQ,EAAK,KAAUg+G,MAAY,EAANjvI,KACzDovI,EAAOpvI,GAAK,KAAO,IAAe,GAAPixB,IAAiBg+G,MAAY,EAANjvI,MAK1DsU,KAAKu8H,cAAgB7wI,EACrBsU,KAAKk8H,OAASxwI,EAAIsU,KAAK+c,MACnBrxB,GAAK,IACPsU,KAAK+c,MAAQrxB,EAAI,GACjBsU,KAAKnH,OACLmH,KAAKq8H,QAAS,GAEdr8H,KAAK+c,MAAQrxB,EAOjB,OAJIsU,KAAKk8H,MAAQ,aACfl8H,KAAKm8H,QAAUn8H,KAAKk8H,MAAQ,YAAc,EAC1Cl8H,KAAKk8H,MAAQl8H,KAAKk8H,MAAQ,YAErBl8H,OAGTo7H,IAAI9tI,UAAUkvI,SAAW,WACvB,IAAIx8H,KAAKo8H,UAAT,CAGAp8H,KAAKo8H,WAAY,EACjB,IAAItB,EAAS96H,KAAK86H,OAAQpvI,EAAIsU,KAAKu8H,cACnCzB,EAAOpvI,GAAK,IAAMgvI,MAAU,EAAJhvI,GACpBA,GAAK,KACFsU,KAAKq8H,QACRr8H,KAAKnH,OAEPiiI,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAEtDA,EAAO,IAAM96H,KAAKk8H,OAAS,EAC3BpB,EAAO,IAAM96H,KAAKm8H,QAAU,EAAIn8H,KAAKk8H,QAAU,GAC/Cl8H,KAAKnH,SAGPuiI,IAAI9tI,UAAUuL,KAAO,WACnB,IAAInB,EAAGC,EAAG5L,EAAGC,EAAGywI,EAAIC,EAAI5B,EAAS96H,KAAK86H,OAElC96H,KAAKqgB,MAQP1oB,IADAA,IALAD,IADAA,EAAIojI,EAAO,GAAK,YACN,EAAIpjI,IAAM,IAAM,WAAa,IAIvC3L,IADAA,IAAM,WADNC,IADAA,IAAM,WAAiB,WAAJ0L,GAAkBojI,EAAO,GAAK,YACvC,GAAK9uI,IAAM,IAAM0L,GAAK,KACH,UAALA,IAAoBojI,EAAO,GAAK,aAC9C,GAAK/uI,IAAM,IAAMC,GAAK,IACjBA,EAAI0L,IAAOojI,EAAO,GAAK,aAC5B,GAAKnjI,IAAM,IAAM5L,GAAK,GAEhC2L,EAAIsI,KAAK87H,GACTnkI,EAAIqI,KAAK+7H,GACThwI,EAAIiU,KAAKg8H,GASTrkI,IADAA,KALAD,IADAA,KADA1L,EAAIgU,KAAKi8H,IACEtkI,GAAK5L,EAAIC,IAAO8uI,EAAO,GAAK,YAC7B,EAAIpjI,IAAM,IAAMC,GAAK,IAI/B5L,IADAA,IAAM4L,GADN3L,IADAA,IAAMD,EAAK2L,GAAKC,EAAI5L,IAAO+uI,EAAO,GAAK,YAC7B,GAAK9uI,IAAM,IAAM0L,GAAK,IAChBA,EAAIC,IAAOmjI,EAAO,GAAK,YAC7B,GAAK/uI,IAAM,IAAMC,GAAK,IAChBA,EAAI0L,IAAOojI,EAAO,GAAK,aAC7B,GAAKnjI,IAAM,IAAM5L,GAAK,GAUlC4L,IADAA,KALAD,IADAA,IAAM1L,EAAK2L,GAAK5L,EAAIC,IAAO8uI,EAAO,GAAK,YAC7B,EAAIpjI,IAAM,IAAMC,GAAK,IAI/B5L,IADAA,IAAM4L,GADN3L,IADAA,IAAMD,EAAK2L,GAAKC,EAAI5L,IAAO+uI,EAAO,GAAK,aAC7B,GAAK9uI,IAAM,IAAM0L,GAAK,IAChBA,EAAIC,IAAOmjI,EAAO,GAAK,aAC7B,GAAK/uI,IAAM,IAAMC,GAAK,IAChBA,EAAI0L,IAAOojI,EAAO,GAAK,WAC7B,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KALAD,IADAA,IAAM1L,EAAK2L,GAAK5L,EAAIC,IAAO8uI,EAAO,GAAK,aAC7B,EAAIpjI,IAAM,IAAMC,GAAK,IAI/B5L,IADAA,IAAM4L,GADN3L,IADAA,IAAMD,EAAK2L,GAAKC,EAAI5L,IAAO+uI,EAAO,GAAK,aAC7B,GAAK9uI,IAAM,IAAM0L,GAAK,IAChBA,EAAIC,IAAOmjI,EAAO,IAAM,QAC9B,GAAK/uI,IAAM,IAAMC,GAAK,IAChBA,EAAI0L,IAAOojI,EAAO,IAAM,aAC9B,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KALAD,IADAA,IAAM1L,EAAK2L,GAAK5L,EAAIC,IAAO8uI,EAAO,IAAM,aAC9B,EAAIpjI,IAAM,IAAMC,GAAK,IAI/B5L,IADAA,IAAM4L,GADN3L,IADAA,IAAMD,EAAK2L,GAAKC,EAAI5L,IAAO+uI,EAAO,IAAM,WAC9B,GAAK9uI,IAAM,IAAM0L,GAAK,IAChBA,EAAIC,IAAOmjI,EAAO,IAAM,aAC9B,GAAK/uI,IAAM,IAAMC,GAAK,IAChBA,EAAI0L,IAAOojI,EAAO,IAAM,aAC9B,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KAHA3L,IADAA,IAAM2L,EAAK5L,IADX2L,IADAA,IAAM3L,EAAKC,GAAK2L,EAAI5L,IAAO+uI,EAAO,GAAK,YAC7B,EAAIpjI,IAAM,IAAMC,GAAK,GACXA,IAAOmjI,EAAO,GAAK,aAC7B,EAAI9uI,IAAM,IAAM0L,GAAK,GAGpBA,IADX3L,IADAA,IAAM2L,EAAKC,GAAK3L,EAAI0L,IAAOojI,EAAO,IAAM,YAC9B,GAAK/uI,IAAM,IAAMC,GAAK,GACZA,IAAO8uI,EAAO,GAAK,YAC7B,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KAHA3L,IADAA,IAAM2L,EAAK5L,IADX2L,IADAA,IAAM3L,EAAKC,GAAK2L,EAAI5L,IAAO+uI,EAAO,GAAK,YAC7B,EAAIpjI,IAAM,IAAMC,GAAK,GACXA,IAAOmjI,EAAO,IAAM,WAC9B,EAAI9uI,IAAM,IAAM0L,GAAK,GAGpBA,IADX3L,IADAA,IAAM2L,EAAKC,GAAK3L,EAAI0L,IAAOojI,EAAO,IAAM,YAC9B,GAAK/uI,IAAM,IAAMC,GAAK,GACZA,IAAO8uI,EAAO,GAAK,YAC7B,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KAHA3L,IADAA,IAAM2L,EAAK5L,IADX2L,IADAA,IAAM3L,EAAKC,GAAK2L,EAAI5L,IAAO+uI,EAAO,GAAK,YAC7B,EAAIpjI,IAAM,IAAMC,GAAK,GACXA,IAAOmjI,EAAO,IAAM,aAC9B,EAAI9uI,IAAM,IAAM0L,GAAK,GAGpBA,IADX3L,IADAA,IAAM2L,EAAKC,GAAK3L,EAAI0L,IAAOojI,EAAO,GAAK,YAC7B,GAAK/uI,IAAM,IAAMC,GAAK,GACZA,IAAO8uI,EAAO,GAAK,aAC7B,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KAHA3L,IADAA,IAAM2L,EAAK5L,IADX2L,IADAA,IAAM3L,EAAKC,GAAK2L,EAAI5L,IAAO+uI,EAAO,IAAM,aAC9B,EAAIpjI,IAAM,IAAMC,GAAK,GACXA,IAAOmjI,EAAO,GAAK,WAC7B,EAAI9uI,IAAM,IAAM0L,GAAK,GAGpBA,IADX3L,IADAA,IAAM2L,EAAKC,GAAK3L,EAAI0L,IAAOojI,EAAO,GAAK,aAC7B,GAAK/uI,IAAM,IAAMC,GAAK,GACZA,IAAO8uI,EAAO,IAAM,aAC9B,GAAKnjI,IAAM,IAAM5L,GAAK,EAUhC4L,IADAA,KAHA+kI,GADA1wI,IADAA,KAHAywI,EAAK9kI,EAAI5L,IAET2L,IADAA,IAAM+kI,EAAKzwI,GAAK8uI,EAAO,GAAK,SAClB,EAAIpjI,IAAM,IAAMC,GAAK,IACfmjI,EAAO,GAAK,aAClB,GAAK9uI,IAAM,IAAM0L,GAAK,GACvBA,IAET3L,IADAA,IAAM2wI,EAAK/kI,GAAKmjI,EAAO,IAAM,aACnB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB8uI,EAAO,IAAM,WACnB,GAAKnjI,IAAM,GAAK5L,GAAK,EAU/B4L,IADAA,KAHA+kI,GADA1wI,IADAA,KAHAywI,EAAK9kI,EAAI5L,IAET2L,IADAA,IAAM+kI,EAAKzwI,GAAK8uI,EAAO,GAAK,aAClB,EAAIpjI,IAAM,IAAMC,GAAK,IACfmjI,EAAO,GAAK,aAClB,GAAK9uI,IAAM,IAAM0L,GAAK,GACvBA,IAET3L,IADAA,IAAM2wI,EAAK/kI,GAAKmjI,EAAO,GAAK,YAClB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB8uI,EAAO,IAAM,aACnB,GAAKnjI,IAAM,GAAK5L,GAAK,EAU/B4L,IADAA,KAHA+kI,GADA1wI,IADAA,KAHAywI,EAAK9kI,EAAI5L,IAET2L,IADAA,IAAM+kI,EAAKzwI,GAAK8uI,EAAO,IAAM,YACnB,EAAIpjI,IAAM,IAAMC,GAAK,IACfmjI,EAAO,GAAK,YAClB,GAAK9uI,IAAM,IAAM0L,GAAK,GACvBA,IAET3L,IADAA,IAAM2wI,EAAK/kI,GAAKmjI,EAAO,GAAK,YAClB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB8uI,EAAO,GAAK,WAClB,GAAKnjI,IAAM,GAAK5L,GAAK,EAU/B4L,IADAA,KAHA+kI,GADA1wI,IADAA,KAHAywI,EAAK9kI,EAAI5L,IAET2L,IADAA,IAAM+kI,EAAKzwI,GAAK8uI,EAAO,GAAK,YAClB,EAAIpjI,IAAM,IAAMC,GAAK,IACfmjI,EAAO,IAAM,YACnB,GAAK9uI,IAAM,IAAM0L,GAAK,GACvBA,IAET3L,IADAA,IAAM2wI,EAAK/kI,GAAKmjI,EAAO,IAAM,YACnB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB8uI,EAAO,GAAK,YAClB,GAAKnjI,IAAM,GAAK5L,GAAK,EAQ/B4L,IADAA,KAHA3L,IADAA,IAAM2L,IADND,IADAA,IAAM3L,GAAK4L,GAAK3L,IAAM8uI,EAAO,GAAK,YACxB,EAAIpjI,IAAM,IAAMC,GAAK,IACf5L,IAAM+uI,EAAO,GAAK,aACxB,GAAK9uI,IAAM,IAAM0L,GAAK,KAEhC3L,IADAA,IAAM2L,GAAK1L,GAAK2L,IAAMmjI,EAAO,IAAM,aACzB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB0L,IAAMojI,EAAO,GAAK,WACxB,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KAHA3L,IADAA,IAAM2L,IADND,IADAA,IAAM3L,GAAK4L,GAAK3L,IAAM8uI,EAAO,IAAM,aACzB,EAAIpjI,IAAM,IAAMC,GAAK,IACf5L,IAAM+uI,EAAO,GAAK,aACxB,GAAK9uI,IAAM,IAAM0L,GAAK,KAEhC3L,IADAA,IAAM2L,GAAK1L,GAAK2L,IAAMmjI,EAAO,IAAM,UACzB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB0L,IAAMojI,EAAO,GAAK,aACxB,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KAHA3L,IADAA,IAAM2L,IADND,IADAA,IAAM3L,GAAK4L,GAAK3L,IAAM8uI,EAAO,GAAK,aACxB,EAAIpjI,IAAM,IAAMC,GAAK,IACf5L,IAAM+uI,EAAO,IAAM,WACzB,GAAK9uI,IAAM,IAAM0L,GAAK,KAEhC3L,IADAA,IAAM2L,GAAK1L,GAAK2L,IAAMmjI,EAAO,GAAK,aACxB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB0L,IAAMojI,EAAO,IAAM,aACzB,GAAKnjI,IAAM,IAAM5L,GAAK,EAQhC4L,IADAA,KAHA3L,IADAA,IAAM2L,IADND,IADAA,IAAM3L,GAAK4L,GAAK3L,IAAM8uI,EAAO,GAAK,YACxB,EAAIpjI,IAAM,IAAMC,GAAK,IACf5L,IAAM+uI,EAAO,IAAM,aACzB,GAAK9uI,IAAM,IAAM0L,GAAK,KAEhC3L,IADAA,IAAM2L,GAAK1L,GAAK2L,IAAMmjI,EAAO,GAAK,YACxB,GAAK/uI,IAAM,IAAMC,GAAK,IAChB0L,IAAMojI,EAAO,GAAK,YACxB,GAAKnjI,IAAM,IAAM5L,GAAK,EAE5BiU,KAAKqgB,OACPrgB,KAAK87H,GAAKpkI,EAAI,YAAc,EAC5BsI,KAAK+7H,GAAKpkI,EAAI,WAAa,EAC3BqI,KAAKg8H,GAAKjwI,EAAI,YAAc,EAC5BiU,KAAKi8H,GAAKjwI,EAAI,WAAa,EAC3BgU,KAAKqgB,OAAQ,IAEbrgB,KAAK87H,GAAK97H,KAAK87H,GAAKpkI,GAAK,EACzBsI,KAAK+7H,GAAK/7H,KAAK+7H,GAAKpkI,GAAK,EACzBqI,KAAKg8H,GAAKh8H,KAAKg8H,GAAKjwI,GAAK,EACzBiU,KAAKi8H,GAAKj8H,KAAKi8H,GAAKjwI,GAAK,IAc7BovI,IAAI9tI,UAAUqvI,IAAM,WAClB38H,KAAKw8H,WAEL,IAAIV,EAAK97H,KAAK87H,GAAIC,EAAK/7H,KAAK+7H,GAAIC,EAAKh8H,KAAKg8H,GAAIC,EAAKj8H,KAAKi8H,GAExD,OAAOxB,UAAWqB,GAAM,EAAK,IAAQrB,UAAe,GAALqB,GAC7CrB,UAAWqB,GAAM,GAAM,IAAQrB,UAAWqB,GAAM,EAAK,IACrDrB,UAAWqB,GAAM,GAAM,IAAQrB,UAAWqB,GAAM,GAAM,IACtDrB,UAAWqB,GAAM,GAAM,IAAQrB,UAAWqB,GAAM,GAAM,IACtDrB,UAAWsB,GAAM,EAAK,IAAQtB,UAAe,GAALsB,GACxCtB,UAAWsB,GAAM,GAAM,IAAQtB,UAAWsB,GAAM,EAAK,IACrDtB,UAAWsB,GAAM,GAAM,IAAQtB,UAAWsB,GAAM,GAAM,IACtDtB,UAAWsB,GAAM,GAAM,IAAQtB,UAAWsB,GAAM,GAAM,IACtDtB,UAAWuB,GAAM,EAAK,IAAQvB,UAAe,GAALuB,GACxCvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,EAAK,IACrDvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,GAAM,IACtDvB,UAAWuB,GAAM,GAAM,IAAQvB,UAAWuB,GAAM,GAAM,IACtDvB,UAAWwB,GAAM,EAAK,IAAQxB,UAAe,GAALwB,GACxCxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,EAAK,IACrDxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,GAAM,IACtDxB,UAAWwB,GAAM,GAAM,IAAQxB,UAAWwB,GAAM,GAAM,KAa1Db,IAAI9tI,UAAUoJ,SAAW0kI,IAAI9tI,UAAUqvI,IAYvCvB,IAAI9tI,UAAUsuI,OAAS,WACrB57H,KAAKw8H,WAEL,IAAIV,EAAK97H,KAAK87H,GAAIC,EAAK/7H,KAAK+7H,GAAIC,EAAKh8H,KAAKg8H,GAAIC,EAAKj8H,KAAKi8H,GACxD,MAAO,CACA,IAALH,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,MAcjEb,IAAI9tI,UAAUkxB,MAAQ48G,IAAI9tI,UAAUsuI,OAYpCR,IAAI9tI,UAAUg8E,YAAc,WAC1BtpE,KAAKw8H,WAEL,IAAIh0E,EAAS,IAAI2C,YAAY,IACzB2vE,EAAS,IAAIztB,YAAY7kD,GAK7B,OAJAsyE,EAAO,GAAK96H,KAAK87H,GACjBhB,EAAO,GAAK96H,KAAK+7H,GACjBjB,EAAO,GAAK96H,KAAKg8H,GACjBlB,EAAO,GAAK96H,KAAKi8H,GACVzzE,GAcT4yE,IAAI9tI,UAAUk7D,OAAS4yE,IAAI9tI,UAAUg8E,YAYrC8xD,IAAI9tI,UAAUsvI,OAAS,WAErB,IADA,IAAIC,EAAIC,EAAIC,EAAIC,EAAY,GAAId,EAAQl8H,KAAKwe,QACpC9yB,EAAI,EAAGA,EAAI,IAClBmxI,EAAKX,EAAMxwI,KACXoxI,EAAKZ,EAAMxwI,KACXqxI,EAAKb,EAAMxwI,KACXsxI,GAAanC,mBAAmBgC,IAAO,GACrChC,mBAA0C,IAAtBgC,GAAM,EAAIC,IAAO,IACrCjC,mBAA0C,IAAtBiC,GAAM,EAAIC,IAAO,IACrClC,mBAAwB,GAALkC,GAMvB,OAJAF,EAAKX,EAAMxwI,GACXsxI,GAAanC,mBAAmBgC,IAAO,GACrChC,mBAAoBgC,GAAM,EAAK,IAC/B,MAIJ,IAAI3xI,QAAUowI,eAEVlB,UACFjvI,OAAOD,QAAUA,SAmBjBF,KAAKiyI,IAAM/xI,QACPovI,MACF,yCACE,OAAOpvI,SACR,0IA9pBP,K,4ECTiEC,EAAOD,QAAiJ,SAASmO,GAAG,IAAIzM,EAAE,GAAG,SAASJ,EAAEd,GAAG,GAAGkB,EAAElB,GAAG,OAAOkB,EAAElB,GAAGR,QAAQ,IAAIiC,EAAEP,EAAElB,GAAG,CAACA,EAAEA,EAAEC,GAAE,EAAGT,QAAQ,IAAI,OAAOmO,EAAE3N,GAAGG,KAAKsB,EAAEjC,QAAQiC,EAAEA,EAAEjC,QAAQsB,GAAGW,EAAExB,GAAE,EAAGwB,EAAEjC,QAAQ,OAAOsB,EAAEV,EAAEuN,EAAE7M,EAAET,EAAEa,EAAEJ,EAAER,EAAE,SAASqN,EAAEzM,EAAElB,GAAGc,EAAEL,EAAEkN,EAAEzM,IAAIR,OAAOC,eAAegN,EAAEzM,EAAE,CAACN,YAAW,EAAGC,IAAIb,KAAKc,EAAEA,EAAE,SAAS6M,GAAG,oBAAoB5M,QAAQA,OAAOC,aAAaN,OAAOC,eAAegN,EAAE5M,OAAOC,YAAY,CAACC,MAAM,WAAWP,OAAOC,eAAegN,EAAE,aAAa,CAAC1M,OAAM,KAAMH,EAAEI,EAAE,SAASyM,EAAEzM,GAAG,GAAG,EAAEA,IAAIyM,EAAE7M,EAAE6M,IAAI,EAAEzM,EAAE,OAAOyM,EAAE,GAAG,EAAEzM,GAAG,iBAAiByM,GAAGA,GAAGA,EAAEvM,WAAW,OAAOuM,EAAE,IAAI3N,EAAEU,OAAOY,OAAO,MAAM,GAAGR,EAAEA,EAAEd,GAAGU,OAAOC,eAAeX,EAAE,UAAU,CAACY,YAAW,EAAGK,MAAM0M,IAAI,EAAEzM,GAAG,iBAAiByM,EAAE,IAAI,IAAIlM,KAAKkM,EAAE7M,EAAER,EAAEN,EAAEyB,EAAE,SAASP,GAAG,OAAOyM,EAAEzM,IAAIM,KAAK,KAAKC,IAAI,OAAOzB,GAAGc,EAAEW,EAAE,SAASkM,GAAG,IAAIzM,EAAEyM,GAAGA,EAAEvM,WAAW,WAAW,OAAOuM,EAAE6jI,SAAS,WAAW,OAAO7jI,GAAG,OAAO7M,EAAER,EAAEY,EAAE,IAAIA,GAAGA,GAAGJ,EAAEL,EAAE,SAASkN,EAAEzM,GAAG,OAAOR,OAAOkB,UAAUC,eAAe1B,KAAKwN,EAAEzM,IAAIJ,EAAEgB,EAAE,GAAGhB,EAAEA,EAAEiB,EAAE,IAAj5B,CAAs5B,CAAC0vI,GAAG,SAAS9jI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEswI,aAAQ,EAAO,IAAIxxI,EAAEc,EAAE,IAAIW,EAAE,WAAW,SAASkM,KAAK,OAAOA,EAAE+jI,cAAc,SAAS/jI,EAAEzM,GAAG,IAAIJ,EAAEI,EAAE0mB,MAAMja,GAAG,OAAO7M,GAAGA,EAAE+J,OAAO,GAAG/J,EAAE,IAAI,IAAI6M,EAAEgkI,eAAe,SAAShkI,EAAEzM,GAAG,IAAIJ,EAAEI,EAAE0mB,MAAMja,GAAG,OAAO7M,GAAGA,EAAE+J,OAAO,GAAG/J,EAAE,IAAI,IAAI6M,EAAEikI,oBAAoB,SAASjkI,EAAEzM,EAAEJ,GAAG,GAAG6M,EAAE6Y,KAAKtlB,GAAG,OAAOJ,GAAG6M,EAAEkkI,sBAAsB,SAASlkI,GAAG,OAAOA,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,MAAM,KAAK,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,MAAM,QAAQ,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,MAAM,IAAI,UAAU,MAAM,KAAK,QAAQ,SAASA,EAAEmkI,oBAAoB,SAASnkI,GAAG,IAAIzM,EAAEyM,EAAE0J,MAAM,KAAKkB,OAAO,EAAE,GAAGuB,KAAI,SAAUnM,GAAG,OAAOif,SAASjf,EAAE,KAAK,KAAK,GAAGzM,EAAEsW,KAAK,GAAG,KAAKtW,EAAE,GAAG,OAAOA,EAAE,IAAI,KAAK,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM,eAAe,KAAK,EAAE,MAAM,OAAO,KAAK,EAAE,MAAM,gBAAgB,KAAK,EAAE,MAAM,YAAY,KAAK,GAAG,MAAM,WAAW,KAAK,GAAG,MAAM,aAAa,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,cAAc,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,WAAW,QAAQ,SAASyM,EAAEokI,sBAAsB,SAASpkI,GAAG,IAAIzM,EAAEyM,EAAE0J,MAAM,KAAKkB,OAAO,EAAE,GAAGuB,KAAI,SAAUnM,GAAG,OAAOif,SAASjf,EAAE,KAAK,KAAK,GAAGzM,EAAEsW,KAAK,KAAK,IAAItW,EAAE,IAAIA,EAAE,GAAG,GAAG,OAAO,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,UAAU,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,SAAS,IAAIA,EAAE,IAAI,IAAIA,EAAE,GAAG,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,cAAc,IAAIA,EAAE,GAAG,YAAY,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,qBAAqB,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,aAAa,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,SAAS,IAAIA,EAAE,GAAG,WAAW,IAAIA,EAAE,GAAG,cAAc,IAAIA,EAAE,GAAG,SAAS,IAAIA,EAAE,GAAG,OAAO,IAAIA,EAAE,GAAG,WAAM,GAAQyM,EAAEqkI,oBAAoB,SAASrkI,GAAG,OAAOA,EAAE0J,MAAM,KAAKxM,QAAQ8C,EAAEskI,gBAAgB,SAAS/wI,EAAEJ,EAAEd,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAIyB,EAAEkM,EAAEqkI,oBAAoB9wI,GAAGa,EAAE4L,EAAEqkI,oBAAoBlxI,GAAGL,EAAEif,KAAKytB,IAAI1rC,EAAEM,GAAGiK,EAAE,EAAEq1G,EAAE1zG,EAAEmM,IAAI,CAAC5Y,EAAEJ,IAAG,SAAUI,GAAG,IAAIJ,EAAEL,EAAEkN,EAAEqkI,oBAAoB9wI,GAAGlB,EAAEkB,EAAE,IAAIwJ,MAAM5J,EAAE,GAAG2W,KAAK,MAAM,OAAO9J,EAAEmM,IAAI9Z,EAAEqX,MAAM,MAAK,SAAU1J,GAAG,OAAO,IAAIjD,MAAM,GAAGiD,EAAE9C,QAAQ4M,KAAK,KAAK9J,KAAK49B,aAAa,IAAIvrC,IAAIgM,EAAEvL,EAAEif,KAAKqP,IAAIttB,EAAEM,IAAItB,GAAG,EAAEA,GAAGuL,GAAG,CAAC,GAAGq1G,EAAE,GAAG5gH,GAAG4gH,EAAE,GAAG5gH,GAAG,OAAO,EAAE,GAAG4gH,EAAE,GAAG5gH,KAAK4gH,EAAE,GAAG5gH,GAAG,CAAC,GAAGA,IAAIuL,EAAE,OAAO,EAAEvL,GAAG,OAAO,GAAG4gH,EAAE,GAAG5gH,GAAG4gH,EAAE,GAAG5gH,GAAG,OAAO,IAAIkN,EAAEmM,IAAI,SAASnM,EAAEzM,GAAG,IAAIJ,EAAEd,EAAE,GAAG,GAAG0K,MAAM9I,UAAUkY,IAAI,OAAOpP,MAAM9I,UAAUkY,IAAI3Z,KAAKwN,EAAEzM,GAAG,IAAIJ,EAAE,EAAEA,EAAE6M,EAAE9C,OAAO/J,GAAG,EAAEd,EAAEwX,KAAKtW,EAAEyM,EAAE7M,KAAK,OAAOd,GAAG2N,EAAEukI,gBAAgB,SAASvkI,GAAG,OAAO3N,EAAEmyI,oBAAoBxkI,IAAIA,EAAEykI,sBAAsB,SAASzkI,GAAG,OAAO3N,EAAEqyI,YAAY1kI,IAAI,IAAIA,EAAtvE,GAA2vEzM,EAAEswI,QAAQ/vI,EAAEkM,EAAEnO,QAAQ0B,EAAEswI,SAASc,GAAG,SAAS3kI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEqxI,WAAWrxI,EAAEsxI,OAAOtxI,EAAEuxI,cAAcvxI,EAAEmxI,YAAYnxI,EAAEixI,yBAAoB,EAAOjxI,EAAEixI,oBAAoB,CAAC,cAAc,cAAc,kBAAkB,UAAUO,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAU,gBAAgB,gBAAgBC,UAAU,YAAY,oBAAoB,KAAK,WAAW,WAAWC,QAAQ,UAAU,iBAAiB,OAAO,aAAa,KAAK,sBAAsB,QAAQC,MAAM,QAAQ,cAAc,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,KAAKC,OAAO,SAASC,OAAO,SAASC,SAAS,WAAW,+BAA+B,mBAAmBC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQ,aAAa,KAAKC,QAAQ,UAAU,gBAAgB,QAAQC,OAAO,SAAS,iBAAiB,SAASC,KAAK,QAAQhzI,EAAEmxI,YAAY,CAAC8B,YAAY,cAAcC,QAAQ,kBAAkBC,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASnG,SAAS,WAAWoG,SAAS,WAAWC,QAAQ,UAAUrsE,MAAM,QAAQssE,QAAQ,UAAUC,UAAU,YAAYC,cAAc,gBAAgBC,GAAG,oBAAoBC,SAAS,WAAWC,QAAQ,UAAUC,KAAK,iBAAiBC,GAAG,aAAaC,MAAM,sBAAsBC,MAAM,QAAQC,YAAY,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,aAAaC,OAAO,kBAAkBC,OAAO,SAASC,SAAS,WAAWC,iBAAiB,+BAA+BC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQC,GAAG,aAAaC,QAAQ,UAAUC,MAAM,gBAAgBC,OAAO,SAASC,OAAO,kBAAkBn1I,EAAEuxI,cAAc,CAAC6D,OAAO,SAASC,OAAO,SAASC,QAAQ,UAAUC,GAAG,MAAMv1I,EAAEsxI,OAAO,CAACkE,aAAa,gBAAgBC,QAAQ,UAAUC,MAAM,QAAQC,IAAI,MAAMC,QAAQ,UAAUC,MAAM,QAAQpE,WAAW,aAAaD,KAAK,OAAOqB,MAAM,QAAQiD,MAAM,QAAQC,SAAS,YAAYC,aAAa,gBAAgBhD,KAAK,QAAQhzI,EAAEqxI,WAAW,CAAC4E,SAAS,WAAWC,MAAM,QAAQC,QAAQ,UAAUC,OAAO,SAASC,MAAM,QAAQC,OAAO,WAAWC,GAAG,SAAS9pI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEswI,aAAQ,EAAO,IAAIxxI,EAAEyB,GAAGzB,EAAEc,EAAE,MAAMd,EAAEoB,WAAWpB,EAAE,CAACwxI,QAAQxxI,GAAG+B,EAAEjB,EAAE,IAAI,SAASL,EAAEkN,EAAEzM,GAAG,IAAI,IAAIJ,EAAE,EAAEA,EAAEI,EAAE2J,OAAO/J,IAAI,CAAC,IAAId,EAAEkB,EAAEJ,GAAGd,EAAEY,WAAWZ,EAAEY,aAAY,EAAGZ,EAAEs6E,cAAa,EAAG,UAAUt6E,IAAIA,EAAEu6E,UAAS,GAAI75E,OAAOC,eAAegN,EAAE3N,EAAEuB,IAAIvB,IAAI,IAAIgM,EAAE,WAAW,SAAS2B,KAAK,IAAIzM,EAAIlB,EAAE,OAAO2N,EAAE0rE,UAAU,SAAS1rE,EAAEzM,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,iBAAiByM,EAAE,MAAM,IAAIhC,MAAM,gCAAgC,OAAO,IAAIlK,EAAE+vI,QAAQ7jI,EAAEzM,IAAIyM,EAAE6e,MAAM,SAAS7e,GAAG,OAAO,IAAIlM,EAAE+vI,QAAQ7jI,GAAG+pI,aAAax2I,EAAEyM,GAAE3N,EAAE,CAAC,CAACuB,IAAI,cAAcV,IAAI,WAAW,OAAOkB,EAAEswI,cAAc,CAAC9wI,IAAI,aAAaV,IAAI,WAAW,OAAOkB,EAAEwwI,aAAa,CAAChxI,IAAI,SAASV,IAAI,WAAW,OAAOkB,EAAEywI,SAAS,CAACjxI,IAAI,gBAAgBV,IAAI,WAAW,OAAOkB,EAAE0wI,mBAA+ChyI,EAAES,EAAElB,GAAG2N,EAA1f,GAA+fzM,EAAEswI,QAAQxlI,EAAE2B,EAAEnO,QAAQ0B,EAAEswI,SAASmG,GAAG,SAAShqI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEswI,aAAQ,EAAO,IAAIxxI,EAAEqhH,EAAEvgH,EAAE,KAAKW,EAAE4/G,EAAEvgH,EAAE,KAAKiB,EAAEs/G,EAAEvgH,EAAE,KAAKL,EAAE4gH,EAAEvgH,EAAE,KAAKkL,EAAEq1G,EAAEvgH,EAAE,KAAK,SAASugH,EAAE1zG,GAAG,OAAOA,GAAGA,EAAEvM,WAAWuM,EAAE,CAAC6jI,QAAQ7jI,GAAG,IAAIrN,EAAE,WAAW,SAASqN,EAAEA,EAAEzM,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,MAAMyM,GAAG,KAAKA,EAAE,MAAM,IAAIhC,MAAM,sCAAsC2I,KAAKsjI,IAAIjqI,EAAE2G,KAAKujI,aAAa,IAAG,IAAK32I,GAAGoT,KAAKkY,QAAQ,IAAItrB,EAAEyM,EAAE/L,UAAU,OAAOV,EAAE42I,MAAM,WAAW,OAAOxjI,KAAKsjI,KAAK12I,EAAEslB,KAAK,SAAS7Y,GAAG,OAAOA,EAAE6Y,KAAKlS,KAAKsjI,MAAM12I,EAAE62I,aAAa,WAAW,IAAIpqI,EAAE2G,KAAKA,KAAKujI,aAAap/G,QAAQ,GAAG,IAAIv3B,EAAElB,EAAEwxI,QAAQ5nG,MAAK,SAAU1oC,GAAG,GAAG,mBAAmBA,EAAEslB,KAAK,OAAOtlB,EAAEslB,KAAK7Y,GAAG,GAAGzM,EAAEslB,gBAAgB9b,MAAM,OAAOxJ,EAAEslB,KAAK+vB,MAAK,SAAUr1C,GAAG,OAAOyM,EAAE6Y,KAAKtlB,MAAM,MAAM,IAAIyK,MAAM,2CAA2C,OAAOzK,IAAIoT,KAAKujI,aAAap/G,QAAQv3B,EAAE82I,SAAS1jI,KAAKwjI,UAAUxjI,KAAKujI,aAAap/G,SAASv3B,EAAE+2I,WAAW,WAAW,OAAO3jI,KAAKujI,aAAap/G,QAAQnkB,KAAKujI,aAAap/G,QAAQnkB,KAAKyjI,gBAAgB72I,EAAE63E,eAAe,SAASprE,GAAG,OAAOA,EAAEP,OAAOkH,KAAK2jI,aAAa13I,MAAM0W,eAAe,GAAG3C,KAAK2jI,aAAa13I,MAAM,IAAIW,EAAE83E,kBAAkB,WAAW,OAAO1kE,KAAK2jI,aAAa1/D,SAASr3E,EAAEg3I,MAAM,WAAW,OAAO5jI,KAAKujI,aAAaM,GAAG7jI,KAAKujI,aAAaM,GAAG7jI,KAAK8jI,WAAWl3I,EAAEk3I,QAAQ,WAAW,IAAIzqI,EAAE2G,KAAKA,KAAKujI,aAAaM,GAAG,GAAG,IAAIj3I,EAAEO,EAAE+vI,QAAQ5nG,MAAK,SAAU1oC,GAAG,GAAG,mBAAmBA,EAAEslB,KAAK,OAAOtlB,EAAEslB,KAAK7Y,GAAG,GAAGzM,EAAEslB,gBAAgB9b,MAAM,OAAOxJ,EAAEslB,KAAK+vB,MAAK,SAAUr1C,GAAG,OAAOyM,EAAE6Y,KAAKtlB,MAAM,MAAM,IAAIyK,MAAM,2CAA2C,OAAOzK,IAAIoT,KAAKujI,aAAaM,GAAGj3I,EAAE82I,SAAS1jI,KAAKwjI,UAAUxjI,KAAKujI,aAAaM,IAAIj3I,EAAEm3I,UAAU,SAAS1qI,GAAG,IAAIzM,EAAEoT,KAAK4jI,QAAQ33I,KAAK,OAAOoN,EAAEP,OAAOlM,GAAG+V,eAAe,GAAG/V,GAAG,IAAIA,EAAEo3I,aAAa,WAAW,OAAOhkI,KAAK4jI,QAAQ3/D,SAASr3E,EAAEq3I,YAAY,WAAW,OAAOjkI,KAAKujI,aAAaW,SAASlkI,KAAKujI,aAAaW,SAASlkI,KAAKmkI,iBAAiBv3I,EAAEw3I,gBAAgB,SAAS/qI,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAIzM,EAAEoT,KAAKikI,cAAch9H,KAAK,OAAO5N,EAAEP,OAAOlM,GAAG+V,eAAe,GAAG/V,GAAG,IAAIA,EAAEu3I,cAAc,WAAW,IAAI9qI,EAAE2G,KAAKA,KAAKujI,aAAaW,SAAS,GAAG,IAAIt3I,EAAEa,EAAEyvI,QAAQ5nG,MAAK,SAAU1oC,GAAG,GAAG,mBAAmBA,EAAEslB,KAAK,OAAOtlB,EAAEslB,KAAK7Y,GAAG,GAAGzM,EAAEslB,gBAAgB9b,MAAM,OAAOxJ,EAAEslB,KAAK+vB,MAAK,SAAUr1C,GAAG,OAAOyM,EAAE6Y,KAAKtlB,MAAM,MAAM,IAAIyK,MAAM,2CAA2C,OAAOzK,IAAIoT,KAAKujI,aAAaW,SAASt3I,EAAE82I,SAAS1jI,KAAKwjI,UAAUxjI,KAAKujI,aAAaW,UAAUt3I,EAAEy3I,UAAU,WAAW,OAAOrkI,KAAKujI,aAAae,OAAOtkI,KAAKujI,aAAae,OAAOtkI,KAAKukI,eAAe33I,EAAE43I,cAAc,SAASnrI,GAAG,OAAOA,EAAEP,OAAOkH,KAAKqkI,YAAYp4I,MAAM0W,eAAe,GAAG3C,KAAKqkI,YAAYp4I,MAAM,IAAIW,EAAE23I,YAAY,WAAW,IAAIlrI,EAAE2G,KAAKA,KAAKujI,aAAae,OAAO,GAAG,IAAI13I,EAAET,EAAE+wI,QAAQ5nG,MAAK,SAAU1oC,GAAG,GAAG,mBAAmBA,EAAEslB,KAAK,OAAOtlB,EAAEslB,KAAK7Y,GAAG,GAAGzM,EAAEslB,gBAAgB9b,MAAM,OAAOxJ,EAAEslB,KAAK+vB,MAAK,SAAUr1C,GAAG,OAAOyM,EAAE6Y,KAAKtlB,MAAM,MAAM,IAAIyK,MAAM,2CAA2C,OAAOzK,IAAIoT,KAAKujI,aAAae,OAAO13I,EAAE82I,SAAS1jI,KAAKwjI,UAAUxjI,KAAKujI,aAAae,QAAQ13I,EAAEsrB,MAAM,WAAW,OAAOlY,KAAKyjI,eAAezjI,KAAK8jI,UAAU9jI,KAAKmkI,gBAAgBnkI,KAAKukI,cAAcvkI,MAAMpT,EAAEw2I,UAAU,WAAW,OAAOh3I,OAAO+zC,OAAO,GAAGngC,KAAKujI,eAAe32I,EAAEg5E,UAAU,SAASvsE,GAAG,IAAIzM,EAAEoT,KAAKxT,EAAE,GAAGd,EAAE,EAAEyB,EAAE,GAAGM,EAAE,EAAE,GAAGrB,OAAOmZ,KAAKlM,GAAG+V,SAAQ,SAAUxiB,GAAG,IAAIT,EAAEkN,EAAEzM,GAAG,iBAAiBT,GAAGgB,EAAEP,GAAGT,EAAEsB,GAAG,GAAG,iBAAiBtB,IAAIK,EAAEI,GAAGT,EAAET,GAAG,MAAMA,EAAE,EAAE,CAAC,IAAIS,EAAEC,OAAOmZ,KAAK/Y,GAAGkL,EAAEvL,EAAEmpC,MAAK,SAAUj8B,GAAG,OAAOzM,EAAE63I,KAAKprI,MAAM,GAAG3B,EAAE,CAAC,IAAIq1G,EAAE/sG,KAAK4lE,UAAUp5E,EAAEkL,IAAI,QAAG,IAASq1G,EAAE,OAAOA,EAAE,IAAI/gH,EAAEG,EAAEmpC,MAAK,SAAUj8B,GAAG,OAAOzM,EAAE83I,WAAWrrI,MAAM,GAAGrN,EAAE,CAAC,IAAID,EAAEiU,KAAK4lE,UAAUp5E,EAAER,IAAI,QAAG,IAASD,EAAE,OAAOA,GAAG,GAAG0B,EAAE,EAAE,CAAC,IAAIqsD,EAAE1tD,OAAOmZ,KAAKpY,GAAGmoC,MAAK,SAAUj8B,GAAG,OAAOzM,EAAE+3I,UAAUtrI,GAAE,MAAO,QAAG,IAASygD,EAAE,OAAO95C,KAAK4kI,eAAez3I,EAAE2sD,MAAMltD,EAAE+3I,UAAU,SAAStrI,EAAEzM,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAIJ,EAAEwT,KAAKykE,iBAAiB9hE,cAAcjX,EAAE2N,EAAEsJ,cAAcxV,EAAEuK,EAAEwlI,QAAQY,sBAAsBpyI,GAAG,OAAOkB,GAAGO,IAAIzB,EAAEyB,EAAEwV,eAAejX,IAAIc,GAAGI,EAAEg4I,eAAe,SAASvrI,GAAG,IAAIzM,EAAE,CAAC,GAAGJ,EAAE6M,EAAE3N,GAAE,EAAGyB,EAAE6S,KAAK0kE,oBAAoB,GAAG,iBAAiBv3E,EAAE,MAAM,MAAMkM,EAAE,IAAI,MAAMA,EAAE,IAAI7M,EAAE6M,EAAE+b,OAAO,GAAG,MAAM/b,EAAE,IAAI3N,GAAE,EAAGc,EAAE6M,EAAE+b,OAAO,IAAIxoB,EAAE,GAAG,MAAMyM,EAAE,GAAGzM,EAAEsW,KAAK,GAAGtW,EAAEsW,MAAM,IAAI,MAAM7J,EAAE,GAAG7M,EAAE6M,EAAE+b,OAAO,GAAG,MAAM/b,EAAE,KAAK3N,GAAE,EAAGc,EAAE6M,EAAE+b,OAAO,IAAIxoB,EAAEgX,QAAQlM,EAAEwlI,QAAQS,gBAAgBxwI,EAAEX,EAAEd,KAAK,GAAGkB,EAAE63I,KAAK,SAASprI,GAAG,OAAO2G,KAAK+jI,WAAU,KAAMjrI,OAAOO,GAAGsJ,eAAe/V,EAAE83I,WAAW,SAASrrI,GAAG,OAAO2G,KAAKokI,iBAAgB,KAAMtrI,OAAOO,GAAGsJ,eAAe/V,EAAE8rI,SAAS,SAASr/H,GAAG,OAAO2G,KAAKwkI,eAAc,KAAM1rI,OAAOO,GAAGsJ,eAAe/V,EAAE6sE,GAAG,SAASpgE,GAAG,OAAO2G,KAAK2kI,UAAUtrI,IAAI2G,KAAKykI,KAAKprI,IAAI2G,KAAK0kI,WAAWrrI,IAAIzM,EAAEq1C,KAAK,SAAS5oC,GAAG,IAAIzM,EAAEoT,KAAK,YAAO,IAAS3G,IAAIA,EAAE,IAAIA,EAAE4oC,MAAK,SAAU5oC,GAAG,OAAOzM,EAAE6sE,GAAGpgE,OAAOA,EAAluI,GAAuuIzM,EAAEswI,QAAQlxI,EAAEqN,EAAEnO,QAAQ0B,EAAEswI,SAAS2H,GAAG,SAASxrI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEswI,aAAQ,EAAO,IAAIxxI,EAAEyB,GAAGzB,EAAEc,EAAE,MAAMd,EAAEoB,WAAWpB,EAAE,CAACwxI,QAAQxxI,GAAO+B,EAAE,6BAA6BtB,EAAE,CAAC,CAAC+lB,KAAK,CAAC,cAAcwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,aAAaO,EAAEW,EAAE+vI,QAAQE,cAAc,2BAA2B/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,SAASO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,kCAAkC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,gBAAgBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,SAASO,EAAEW,EAAE+vI,QAAQE,cAAc,2BAA2B/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,mBAAmBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,gCAAgCO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,2CAA2C/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,uBAAuBO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,iCAAiC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,cAAcwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,cAAcO,EAAEW,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,SAASO,EAAEW,EAAE+vI,QAAQE,cAAc,iCAAiC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,SAASO,EAAEW,EAAE+vI,QAAQE,cAAc,iCAAiC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,eAAeO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,kCAAkC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,cAAcwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,kBAAkBO,EAAEW,EAAE+vI,QAAQE,cAAc,sCAAsC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,cAAcwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,cAAcO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,sCAAsC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,kBAAkBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,WAAWO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,0CAA0C/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,YAAYO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,WAAWwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,UAAUO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,mCAAmC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,YAAYO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,YAAYO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,mBAAmBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,UAAUO,EAAEW,EAAE+vI,QAAQE,cAAc,2CAA2C/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,cAAcwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,iBAAiBimB,KAAK7Y,GAAG,kBAAkB,cAAc7M,EAAEW,EAAE+vI,QAAQE,cAAc,kDAAkD/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,iBAAiBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,qBAAqBO,EAAEW,EAAE+vI,QAAQE,cAAc,iCAAiC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,YAAYwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,kBAAkBO,EAAEW,EAAE+vI,QAAQE,cAAc,2BAA2B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,kBAAkBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,kBAAkBO,EAAEW,EAAE+vI,QAAQG,eAAe,mCAAmChkI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,YAAYwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,WAAWO,EAAEW,EAAE+vI,QAAQE,cAAc,6BAA6B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,cAAcwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,aAAaO,EAAEW,EAAE+vI,QAAQE,cAAc,+BAA+B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,YAAYO,EAAEW,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,SAASwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,eAAeO,EAAEW,EAAE+vI,QAAQE,cAAc,0BAA0B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,YAAYwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,aAAaO,EAAEW,EAAE+vI,QAAQE,cAAc,+BAA+B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,YAAYO,EAAEW,EAAE+vI,QAAQE,cAAc,8BAA8B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,sBAAsB,gBAAgBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,cAAcO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,mBAAmBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,iBAAiBO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,IAAIlM,EAAE+vI,QAAQE,cAAc,0CAA0C/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,SAASwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,QAAQO,EAAEW,EAAE+vI,QAAQE,cAAc,4BAA4B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,SAASO,EAAEW,EAAE+vI,QAAQE,cAAc,0CAA0C/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,YAAYO,EAAEW,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,4BAA4BwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,WAAWO,EAAEW,EAAE+vI,QAAQE,cAAc,oDAAoD/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,YAAYO,EAAEW,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,sBAAsBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,UAAUO,EAAEW,EAAE+vI,QAAQE,cAAc,2CAA2C/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,QAAQwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,iBAAiBO,EAAEW,EAAE+vI,QAAQE,cAAc,6BAA6B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,SAAS7Y,GAAG,IAAIzM,GAAGyM,EAAE6Y,KAAK,iBAAiB1lB,EAAE6M,EAAE6Y,KAAK,YAAY,OAAOtlB,GAAGJ,GAAGk3I,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,mBAAmBO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,kBAAkBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,iBAAiBO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,uBAAuBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAK,UAAUO,EAAEW,EAAE+vI,QAAQE,cAAc3vI,EAAE4L,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,OAAOwxH,SAAS,SAASrqI,GAAG,IAAIzM,GAAG,IAAIyM,EAAEwjB,OAAO,OAAO,yBAAyB,eAAe,MAAM,CAAC5wB,KAAKkB,EAAE+vI,QAAQE,cAAcxwI,EAAEyM,GAAG4qE,QAAQ92E,EAAE+vI,QAAQG,eAAezwI,EAAEyM,OAAOzM,EAAEswI,QAAQ/wI,EAAEkN,EAAEnO,QAAQ0B,EAAEswI,SAAS4H,GAAG,SAASzrI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEswI,aAAQ,EAAO,IAAIxxI,EAAEyB,GAAGzB,EAAEc,EAAE,MAAMd,EAAEoB,WAAWpB,EAAE,CAACwxI,QAAQxxI,GAAG+B,EAAEjB,EAAE,IAAQL,EAAE,CAAC,CAAC+lB,KAAK,CAAC,aAAawxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,wBAAwB/jI,GAAG,MAAM,CAACpN,KAAKwB,EAAEywI,OAAO0B,KAAK37D,QAAQr3E,KAAK,CAACslB,KAAK,CAAC,kBAAkBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,yCAAyC/jI,GAAG,MAAM,CAACpN,KAAKwB,EAAEywI,OAAOkE,aAAan+D,QAAQr3E,KAAK,CAACslB,KAAK,CAAC,YAAYwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,iCAAiC/jI,GAAG7M,EAAEW,EAAE+vI,QAAQK,sBAAsB3wI,GAAG,MAAM,CAACX,KAAKwB,EAAEywI,OAAOmE,QAAQp+D,QAAQr3E,EAAEm4I,YAAYv4I,KAAK,CAAC0lB,KAAK,CAAC,cAAcwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,6BAA6B/jI,GAAGuI,QAAQ,SAAS,KAAKpV,EAAEW,EAAE+vI,QAAQM,oBAAoB5wI,GAAGlB,EAAE,CAACO,KAAKwB,EAAEywI,OAAOoE,MAAMr+D,QAAQr3E,GAAG,OAAOJ,IAAId,EAAEq5I,YAAYv4I,GAAGd,IAAI,CAACwmB,KAAK,CAAC,uBAAuBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,qCAAqC/jI,GAAGuI,QAAQ,SAAS,KAAK,MAAM,CAAC3V,KAAKwB,EAAEywI,OAAOqE,IAAIt+D,QAAQr3E,KAAK,CAACslB,KAAK,SAAS7Y,GAAG,IAAIzM,GAAGyM,EAAE6Y,KAAK,iBAAiB1lB,EAAE6M,EAAE6Y,KAAK,YAAY,OAAOtlB,GAAGJ,GAAGk3I,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,8BAA8B/jI,GAAG7M,EAAEW,EAAE+vI,QAAQO,sBAAsB7wI,GAAGlB,EAAE,CAACO,KAAKwB,EAAEywI,OAAOsE,QAAQv+D,QAAQr3E,GAAG,OAAOJ,IAAId,EAAEq5I,YAAYv4I,GAAGd,IAAI,CAACwmB,KAAK,CAAC,mBAAmBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,mCAAmC/jI,GAAG7M,EAAE,CAACP,KAAKwB,EAAEywI,OAAOuE,OAAO,OAAO71I,GAAGA,EAAE2J,SAAS/J,EAAEy3E,QAAQr3E,GAAGJ,IAAI,CAAC0lB,KAAK,CAAC,sBAAsB,gBAAgBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,kCAAkC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc,mCAAmC/jI,IAAIlM,EAAE+vI,QAAQE,cAAc,aAAa/jI,GAAG,MAAM,CAACpN,KAAKwB,EAAEywI,OAAOG,WAAWp6D,QAAQr3E,KAAK,CAACslB,KAAK,CAAC,SAASwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,uBAAuB/jI,GAAG,MAAM,CAACpN,KAAKwB,EAAEywI,OAAOE,KAAKn6D,QAAQr3E,KAAK,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,2BAA2B/jI,GAAG,MAAM,CAACpN,KAAKwB,EAAEywI,OAAOuB,MAAMx7D,QAAQr3E,KAAK,CAACslB,KAAK,CAAC,UAAUwxH,SAAS,WAAW,MAAM,CAACz3I,KAAKwB,EAAEywI,OAAOwE,SAAS,CAACxwH,KAAK,CAAC,QAAQwxH,SAAS,WAAW,MAAM,CAACz3I,KAAKwB,EAAEywI,OAAOyE,YAAY,CAACzwH,KAAK,CAAC,iBAAiBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,mCAAmC/jI,GAAG,MAAM,CAACpN,KAAKwB,EAAEywI,OAAO0E,aAAa3+D,QAAQr3E,MAAMA,EAAEswI,QAAQ/wI,EAAEkN,EAAEnO,QAAQ0B,EAAEswI,SAAS8H,GAAG,SAAS3rI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEswI,aAAQ,EAAO,IAAIxxI,EAAEyB,GAAGzB,EAAEc,EAAE,MAAMd,EAAEoB,WAAWpB,EAAE,CAACwxI,QAAQxxI,GAAG+B,EAAEjB,EAAE,IAAQL,EAAE,CAAC,CAAC+lB,KAAK,CAAC,cAAcwxH,SAAS,WAAW,MAAM,CAACz8H,KAAK,MAAMg+H,OAAO,YAAY,CAAC/yH,KAAK,CAAC,WAAWwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,aAAa/jI,IAAI,OAAO7M,EAAE,CAACya,KAAKxZ,EAAE0wI,cAAc8D,OAAOgD,OAAO,UAAU,OAAOr4I,IAAIJ,EAAEyzG,MAAMrzG,GAAGJ,IAAI,CAAC0lB,KAAK,CAAC,2BAA2BwxH,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc6D,OAAOiD,OAAO,WAAW,CAAC/yH,KAAK,CAAC,SAASwxH,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc6D,OAAOiD,OAAO,QAAQhlC,MAAM,UAAU,CAAC/tF,KAAK,CAAC,eAAewxH,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc6D,OAAOiD,OAAO,SAAShlC,MAAM,sBAAsB,CAAC/tF,KAAK,CAAC,SAASwxH,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc6D,OAAOiD,OAAO,YAAY,CAAC/yH,KAAK,CAAC,kBAAkBwxH,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc6D,UAAU,CAAC9vH,KAAK,SAAS7Y,GAAG,IAAIzM,EAAEyM,EAAE6Y,KAAK,gBAAgB1lB,EAAE6M,EAAE6Y,KAAK,uBAAuB,OAAOtlB,IAAIJ,GAAGk3I,SAAS,SAASrqI,GAAG,IAAIzM,EAAEO,EAAE+vI,QAAQE,cAAc,iBAAiB/jI,GAAG,MAAM,CAAC4N,KAAKxZ,EAAE0wI,cAAc8D,OAAOgD,OAAO,QAAQhlC,MAAMrzG,KAAK,CAACslB,KAAK,CAAC,mBAAmB,iBAAiBwxH,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc8D,OAAOgD,OAAO,WAAW,CAAC/yH,KAAK,CAAC,aAAawxH,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc8D,UAAU,CAAC/vH,KAAK,SAAS7Y,GAAG,MAAM,eAAeA,EAAEorE,gBAAe,IAAKi/D,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc8D,OAAOgD,OAAO,gBAAgB,CAAC/yH,KAAK,SAAS7Y,GAAG,MAAM,SAASA,EAAEorE,gBAAe,IAAKi/D,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc8D,UAAU,CAAC/vH,KAAK,SAAS7Y,GAAG,MAAM,kBAAkBA,EAAEorE,kBAAkBi/D,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc8D,OAAOgD,OAAO,eAAe,CAAC/yH,KAAK,SAAS7Y,GAAG,IAAIzM,EAAE2sB,OAAOzgB,OAAOO,EAAE2qI,gBAAgBjhI,MAAM,KAAK,IAAI,MAAM,YAAY1J,EAAE0qI,WAAU,IAAKn3I,GAAG,GAAG82I,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc6D,UAAU,CAAC9vH,KAAK,SAAS7Y,GAAG,MAAM,YAAYA,EAAE0qI,WAAU,IAAKL,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc8D,UAAU,CAAC/vH,KAAK,SAAS7Y,GAAG,MAAM,UAAUA,EAAE0qI,WAAU,IAAKL,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc+D,QAAQ+C,OAAO,WAAW,CAAC/yH,KAAK,SAAS7Y,GAAG,MAAM,YAAYA,EAAE0qI,WAAU,IAAKL,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc+D,WAAW,CAAChwH,KAAK,SAAS7Y,GAAG,MAAM,UAAUA,EAAE0qI,WAAU,IAAKL,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAc+D,WAAW,CAAChwH,KAAK,SAAS7Y,GAAG,MAAM,kBAAkBA,EAAE0qI,WAAU,IAAKL,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAcgE,MAAM,CAACjwH,KAAK,SAAS7Y,GAAG,MAAM,SAASA,EAAE0qI,WAAU,IAAKL,SAAS,WAAW,MAAM,CAACz8H,KAAKxZ,EAAE0wI,cAAcgE,OAAOv1I,EAAEswI,QAAQ/wI,EAAEkN,EAAEnO,QAAQ0B,EAAEswI,SAASgI,GAAG,SAAS7rI,EAAEzM,EAAEJ,GAAG,aAAaI,EAAEE,YAAW,EAAGF,EAAEswI,aAAQ,EAAO,IAAIxxI,EAAEyB,GAAGzB,EAAEc,EAAE,MAAMd,EAAEoB,WAAWpB,EAAE,CAACwxI,QAAQxxI,GAAG+B,EAAEjB,EAAE,IAAQL,EAAE,CAAC,CAAC+lB,KAAK,SAAS7Y,GAAG,MAAM,mBAAmBA,EAAEorE,gBAAe,IAAKi/D,SAAS,SAASrqI,GAAG,GAAG,WAAW6Y,KAAK7Y,GAAG,MAAM,CAACpN,KAAKwB,EAAEwwI,WAAW6E,OAAO,IAAIl2I,EAAEO,EAAE+vI,QAAQE,cAAc,0BAA0B/jI,GAAG,MAAM,CAACpN,KAAKwB,EAAEwwI,WAAW4E,SAAS5+D,QAAQr3E,KAAK,CAACslB,KAAK,CAAC,YAAYwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAKwB,EAAEwwI,WAAW8E,SAASv2I,EAAEW,EAAE+vI,QAAQE,cAAc,6BAA6B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,SAAS7Y,GAAG,OAAOA,EAAE6Y,KAAK,YAAYwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAKwB,EAAEwwI,WAAW+E,QAAQx2I,EAAEW,EAAE+vI,QAAQE,cAAc,4BAA4B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,SAAS7Y,GAAG,IAAIzM,EAAEyM,EAAE6Y,KAAK,UAAU1lB,EAAE6M,EAAE6Y,KAAK,eAAe,OAAOtlB,IAAIJ,GAAGk3I,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAKwB,EAAEwwI,WAAWgF,OAAOz2I,EAAEW,EAAE+vI,QAAQE,cAAc,2BAA2B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,IAAI,CAACslB,KAAK,CAAC,4BAA4BwxH,SAAS,WAAW,MAAM,CAACz3I,KAAKwB,EAAEwwI,WAAW6E,SAAS,CAAC5wH,KAAK,CAAC,mBAAmBwxH,SAAS,SAASrqI,GAAG,IAAIzM,EAAE,CAACX,KAAKwB,EAAEwwI,WAAWiF,QAAQ12I,EAAEW,EAAE+vI,QAAQE,cAAc,4BAA4B/jI,GAAG,OAAO7M,IAAII,EAAEq3E,QAAQz3E,GAAGI,KAAKA,EAAEswI,QAAQ/wI,EAAEkN,EAAEnO,QAAQ0B,EAAEswI,Y,2LCU3+vB,MAGMn/G,EAASF,oBAAU6E,GAoVV,QAxSf,MAIIzsB,cACI+J,KAAKqI,QAQTA,QAOIrI,KAAKgnG,UAAW,EAMhBhnG,KAAKmlI,kBAAoB,IAAIhgH,IAO7BnlB,KAAK8wD,MAAQ,GAMb9wD,KAAKolI,oBAAsB,GAO3BplI,KAAKqlI,eAAiB,GAEtBrlI,KAAKsmC,uBAAuB,CACxB,WAAchJ,UAAU0mC,UACxB,aAAgB7/C,IAAQs5C,YAOhCh2C,UACI1J,EAAO5Y,KAAK,mCAERnF,KAAKmlI,mBAAqBnlI,KAAKmlI,kBAAkBz9G,KAAO,GACxD1nB,KAAKmlI,kBAAkB/1H,QAAQ7K,IACI,mBAApBA,EAAQkjB,SACfljB,EAAQkjB,YAKpBznB,KAAKslI,qBAAqB,IAC1BtlI,KAAKgnG,UAAW,EAQpBs+B,qBAAqBn8H,GACjB,GAAInJ,KAAKgnG,SACL,OAGJhnG,KAAKmlI,kBAAoB,IAAIhgH,IAAIhc,GAEjCnJ,KAAKulI,qBAGL,MAAMz0E,EAAQ9wD,KAAK8wD,MAEnB9wD,KAAK8wD,MAAQ,KACTA,GACAA,EAAM1hD,QAAQyc,GAAS7rB,KAAKwlI,WAAW35G,IAS/C05G,qBACIvlI,KAAKmlI,kBAAkB/1H,QAAQ7K,IAC3B,IACIA,EAAQkhI,kBAAkBzlI,KAAKolI,qBACjC,MAAOpgI,GACL+Y,EAAO5Y,KAAK,uEACiBH,MAezCshC,uBAAuBxa,GACnB9rB,KAAKolI,oB,sUAAL,IACOplI,KAAKolI,oBACLt5G,GAGP9rB,KAAKulI,qBAQTG,kBAAkBz5I,GACd+T,KAAKqlI,eAAiBp5I,EACtB+T,KAAKsmC,uBAAuB,CAAE,gBAAmBr6C,IAgBrDs/B,UAAUU,EAAWH,EAAa,IAC9B,GAAI9rB,KAAKgnG,SACL,OAGJ,IAAIn7E,EAAQ,KAEa,iBAAdI,EACPJ,EAAQ,CACJ5kB,KAAM0mB,IACNuB,OAAQjD,EACRkD,cAAelD,EACfwD,OAAQxD,EACRhvB,WAAY6uB,GAEY,iBAAdG,IACdJ,EAAQI,GAGPjsB,KAAK2lI,sBAAsB95G,GAOhC7rB,KAAKwlI,WAAW35G,GANZ9N,EAAO/Y,MACF,mCAAkC4H,KAAKwL,UAAUyT,IAoB9D85G,sBAAsB95G,GAClB,IAAKA,EACD,OAAO,EAGNA,EAAM5kB,OACP4kB,EAAM5kB,KAAO0mB,KAGjB,MAAM1mB,EAAO4kB,EAAM5kB,KAEnB,OAAIA,IAAS0mB,KAAoB1mB,IAAS2mB,KACnC3mB,IAAS6mB,KAAW7mB,IAAS4mB,KAChC9P,EAAO/Y,MAAO,uBAAsBiC,IAE7B,GAGPA,IAAS2mB,IACFmM,QAAQlO,EAAM5/B,OAKzB4/B,EAAMqD,OAASrD,EAAMqD,QAAUrD,EAAM5/B,MAAQ4/B,EAAMsD,cACnDtD,EAAMsD,cAAgBtD,EAAMsD,eAAiBtD,EAAM5/B,MAAQ4/B,EAAMqD,OACjErD,EAAM4D,OAAS5D,EAAM4D,QAAU5D,EAAM5/B,MAAQ4/B,EAAMqD,QAC5CrD,EAAMsD,cAERtD,EAAMqD,QAAWrD,EAAMsD,eAAkBtD,EAAM4D,UAQhDxoB,IAAS4mB,MACThC,EAAM+5G,WAAa/5G,EAAM+5G,YAAc,sBACvC/5G,EAAMg6G,cAAgBh6G,EAAMg6G,eAAiB,aACjB,eAAxBh6G,EAAMg6G,eAAmCh6G,EAAM3B,cAC/C2B,EAAM3B,YAAclqB,KAAKqlI,gBAIxBx5G,EAAM+5G,YAAe/5G,EAAMi6G,UACxBj6G,EAAMg6G,eAAkBh6G,EAAM3B,gBAClCnM,EAAO/Y,MACH,gFAGG,IArBX+Y,EAAO/Y,MACH,6DAEG,IAgCf+gI,iBAAiBl6G,GACb,QAAI7rB,KAAK8wD,QACL9wD,KAAK8wD,MAAM5tD,KAAK2oB,GAIZ7rB,KAAK8wD,MAAMv6D,OAxTJ,KAyTPyJ,KAAK8wD,MAAM7sD,OAAO,EAAG,IAGlB,GAYfuhI,WAAW35G,GACH7rB,KAAK+lI,iBAAiBl6G,IAGtB7rB,KAAKmlI,kBAAkB/1H,QAAQ7K,IAC3B,IACIA,EAAQgnB,UAAUM,GACpB,MAAOxyB,GACL0kB,EAAO5Y,KAAM,kCAAiC9L,U,uFCzVlE,yEAKA,MAAM0kB,EAASF,oBAAU6E,GAUlB,MAAMqE,EAOT9wB,YAAY+6C,EAASg1F,GACjBhmI,KAAK6jB,aAAemtB,EACpBhxC,KAAKimI,UAAY,EACjBjmI,KAAKkmI,YAAc,EACnBlmI,KAAKmmI,yBAA2BH,EAChChmI,KAAKgrB,MAAQ,IAAIg3B,IAQrB76B,oBACI,MAAO,CACHi/G,kBA9BI,GA8BepmI,KAAKgrB,MAAMm3B,cAAwBikD,QAAQ,GAC9DigC,cAAermI,KAAKkmI,aAS5Bj/G,gBAEIjnB,KAAKsmI,qBAAuB9zF,IACxB,MAAMqT,EAAUrT,EAAK+zF,aAErB,IAAK,MAAMC,KAAQ3gF,EACf7lD,KAAKimI,YACLjmI,KAAKkmI,YAAc96H,KAAKytB,IAAI74B,KAAKkmI,YAAaM,EAAK7lB,UAAUva,QAAQ,IAK7EroF,EAAO7Y,KAAK,6DACZlF,KAAKymI,SAAW,IAAIlN,oBAAoBv5H,KAAKsmI,sBAC7CtmI,KAAKymI,SAASC,QAAQ,CAAEz/H,KAAM,WAC1B0/H,UAAU,IACd,MAAMpvB,EAAYpvG,KAAKgM,MAGvBnU,KAAK4mI,oBAAsBnpG,YAAY,KACnC,MAAMtpB,EAAMhM,KAAKgM,MACXmxF,EAAWtlG,KAAK6mI,gBACf1yH,EAAMnU,KAAK6mI,gBA/DR,KAgEH1yH,EAAMojG,GAhEH,IAiEJR,EAAO/2G,KAAKimI,UAAY3gC,EAE9BtlG,KAAKgrB,MAAMk3B,QAAQ60D,GACnB/2G,KAAK6jB,aAAa8D,KACd1B,IAAmCjmB,KAAKmnB,qBAG5CnnB,KAAKimI,UAAY,EACjBjmI,KAAK6mI,eAAiB1+H,KAAKgM,OAC5BnU,KAAKmmI,0BAOZj/G,eACIlnB,KAAKymI,UAAYzmI,KAAKymI,SAASl3H,aAC/BvP,KAAKsmI,qBAAuB,KACxBtmI,KAAK4mI,sBACLhrG,cAAc57B,KAAK4mI,qBACnB5mI,KAAK4mI,oBAAsB,U,+FC7FvC,+EAMA,MAAMnqG,EAAuBha,EAAQ,IAE/B1E,EAASF,oBAAU6E,GASzB,SAASokH,EAAoBC,EAAaC,GACtC,OAAKA,GAAgBA,GAAgB,IACzBD,GAAeA,GAAe,EAC/B,EAGJ37H,KAAK67H,MAAOF,EAAcC,EAAgB,KAOrD,SAASE,IACLlnI,KAAKmnI,KAAO,GACZnnI,KAAKonI,QAAU,CACX/sC,SAAU,EACVgtC,OAAQ,GAEZrnI,KAAKy/B,WAAa,GAClBz/B,KAAKsnI,UAAY,EACjBtnI,KAAK62B,MAAQ,GAqDjB,SAAS0wG,IAMLvnI,KAAKsxE,UAAY,GAMjBtxE,KAAKonI,QAAU,GAMfpnI,KAAKwnI,WAAa,KAMlBxnI,KAAK0d,UAAY,GAkBN,SAAS+pH,EAAepiH,EAAgBL,EAAqBghH,EAAeniH,GACvF7jB,KAAKqlB,eAAiBA,EACtBrlB,KAAK0nI,0BAA4B,KACjC1nI,KAAK2nI,yBAA2B,KAChC3nI,KAAK4nI,mBAAqB,KAC1B5nI,KAAK6nI,oBAAsB,KAC3B7nI,KAAK8nI,wBAA0B,GAC/B9nI,KAAK+nI,sBAAwB,KAC7B/nI,KAAK6jB,aAAeA,EACpB7jB,KAAKgoI,gBAAkB,IAAIT,EAG3BvnI,KAAKioI,yBAA2BjjH,EAEhChlB,KAAKsnB,YAAc,GACnBtnB,KAAKkoI,gBAAkB,KACvBloI,KAAKmoI,mBAAqBnC,EAM1BhmI,KAAKooI,WAAa,IAAIxkH,IA9G1BsjH,EAAU55I,UAAU+6I,QAAU,SAASlB,GACnCnnI,KAAKmnI,KAAOA,GAAQ,IAOxBD,EAAU55I,UAAUg7I,cAAgB,SAAS7oG,GACzCz/B,KAAKy/B,WAAaA,GAAc,IAQpCynG,EAAU55I,UAAUi7I,WAAa,SAASnB,GACtCpnI,KAAKonI,QAAQ/sC,UAAY+sC,EAAQ/sC,SACjCr6F,KAAKonI,QAAQC,QAAUD,EAAQC,QAOnCH,EAAU55I,UAAUk7I,aAAe,WAC/BxoI,KAAKonI,QAAQ/sC,SAAW,EACxBr6F,KAAKonI,QAAQC,OAAS,GAO1BH,EAAU55I,UAAUm7I,aAAe,SAASnB,GACxCtnI,KAAKsnI,UAAYA,GAAa,GAGlCJ,EAAU55I,UAAUo7I,SAAW,SAAS7xG,GACpC72B,KAAK62B,MAAQA,GAAS,IA+E1B4wG,EAAen6I,UAAU+5B,eAAiB,SAASC,GAC/CtnB,KAAKsnB,YAAcA,GAMvBmgH,EAAen6I,UAAU86B,KAAO,WACxBpoB,KAAK+nI,wBACLnsG,cAAc57B,KAAK+nI,uBACnB/nI,KAAK+nI,sBAAwB,MAG7B/nI,KAAKkoI,kBACLtsG,cAAc57B,KAAKkoI,iBACnBloI,KAAKkoI,gBAAkB,OAQ/BT,EAAen6I,UAAU0xE,cAAgB,SAASh6D,GAC9Cy3B,EAAqBkG,iBAAiB39B,GACtC+Y,EAAO/Y,MAAM,kBAAmBA,GAChChF,KAAKooB,QAMTq/G,EAAen6I,UAAUyvB,MAAQ,SAAS4rH,GAClCA,IACIxkH,IAAQmkF,yBACRvqF,EAAO7Y,KAAK,6DAEhBlF,KAAK+nI,sBAAwBtqG,YACzB,KACI,GAAItZ,IAAQmkF,wBAAyB,CACjC,MAAMsgC,EAAc5oI,KAAKqlB,eAAewjH,eAAe7oI,KAAKsnB,aAE5D,IAAK,MAAMkC,KAAQo/G,EACf,GAAIA,EAAYr7I,eAAei8B,GAAO,CAGlC,MAAMyf,EAAiC,IAApB2/F,EAAYp/G,GAE/BxpB,KAAK6jB,aAAa8D,KACd1B,IACAjmB,KAAKqlB,eACL9L,OAAOjB,SAASkR,EAAM,IACtByf,GACA,SAKZjpC,KAAKqlB,eAAegvG,WACf32F,KAAKu+B,IACFj8D,KAAK2nI,yBAAqD,mBAAnB1rE,aAAP,EAAOA,EAAQx2D,QACzCw2D,EAAOx2D,SACPw2D,EACNj8D,KAAK8oI,0BACL9oI,KAAK0nI,0BAA4B1nI,KAAK2nI,2BAEzCprG,MAAMv3B,GAAShF,KAAKg/D,cAAch6D,KAG/ChF,KAAKioI,2BAIb,MAAMc,EAAe,KAEjB/oI,KAAKqlB,eAAegvG,WACf32F,KAAKu+B,IACFj8D,KAAK4nI,mBAA+C,mBAAnB3rE,aAAP,EAAOA,EAAQx2D,QACnCw2D,EAAOx2D,SACPw2D,EAEN,IACIj8D,KAAKgpI,qBACP,MAAOhkI,GACLy3B,EAAqBkG,iBAAiB39B,GACtC+Y,EAAO/Y,MAAM,kCAAmCA,GAEpDhF,KAAK6nI,oBAAsB7nI,KAAK4nI,qBAEnCrrG,MAAMv3B,GAAShF,KAAKg/D,cAAch6D,KAG3C+jI,IACA/oI,KAAKkoI,gBAAkBzqG,YAAYsrG,EAAc/oI,KAAKmoI,qBAM1DV,EAAen6I,UAAU27I,sBAAwB,WAE7C,MAAMjC,EAAe,CACjB3sC,SAAU,EACVgtC,OAAQ,GAENN,EAAc,CAChB1sC,SAAU,EACVgtC,OAAQ,GAEZ,IAAI6B,EAAkB,EAClBC,EAAgB,EACpB,MAAMC,EAAc,GACdC,EAAa,GACbl5D,EAAS,GACf,IAEIm5D,EAGAC,EALAC,EAAuB,EACvBC,EAAqB,EAErBC,EAAuB,EACvBC,EAAqB,EAGzB,IAAK,MAAQngH,EAAMogH,KAAe5pI,KAAKooI,WAAY,CAE/C,MAAMjB,EAAOyC,EAAUzC,KACjBlgI,EAAOkgI,EAAK0C,iBAAmB,WAAa,SAElD7C,EAAa//H,IAASkgI,EAAK2C,aAC3B/C,EAAY9/H,IAASkgI,EAAK4C,YAG1Bb,GAAmBU,EAAUxC,QAAQ/sC,SACrC8uC,GAAiBS,EAAUxC,QAAQC,OAGnC,MAAM1mG,EAAQ3gC,KAAKqlB,eAAe6jB,eAAe1f,GAEjD,GAAImX,EAAO,CACHA,EAAMwI,gBACNqgG,GAAwBI,EAAUxC,QAAQ/sC,SAC1CovC,GAAsBG,EAAUxC,QAAQC,OACxCiC,EAAaM,EAAU/yG,QAEvB6yG,GAAwBE,EAAUxC,QAAQ/sC,SAC1CsvC,GAAsBC,EAAUxC,QAAQC,OACxCkC,EAAaK,EAAU/yG,OAG3B,MAAMhH,EAAgB8Q,EAAM82C,mBAE5B,GAAI5nD,EAAe,CACf,MAAM4P,EAAamqG,EAAUnqG,WAE7B,GAAIA,EAAW3G,OACJ2G,EAAW9G,SACW,IAAtB8G,EAAW3G,QACY,IAAvB2G,EAAW9G,OAAe,CACjC,MAAMqxG,EAAkBZ,EAAYv5G,IAAkB,GAEtDm6G,EAAgBxgH,GAAQiW,EACxB2pG,EAAYv5G,GAAiBm6G,EAEjC,GAA4B,IAAxBJ,EAAUtC,UAAiB,CAC3B,MAAM2C,EAAiBZ,EAAWx5G,IAAkB,GAEpDo6G,EAAezgH,GAAQogH,EAAUtC,UACjC+B,EAAWx5G,GAAiBo6G,EAEhC,GAAIX,GAAcC,EAAY,CAC1B,MAAMW,EAAY,CACd,MAASZ,EACT,MAASC,GAGPY,EAAah6D,EAAOtgD,IAAkB,GAE5Cs6G,EAAW3gH,GAAQ0gH,EACnB/5D,EAAOtgD,GAAiBs6G,QAG5BpsH,EAAO/Y,MAAO,iCAAgC27B,GAItDipG,EAAUpB,eAGdxoI,KAAKgoI,gBAAgBZ,QAAU,CAC3B,OAAU+B,EACV,SAAYD,GAGhBlpI,KAAKgoI,gBAAgBZ,QAAQhtG,MAAQ,CACjC,OAAUqvG,EACV,SAAYD,GAGhBxpI,KAAKgoI,gBAAgBZ,QAAQ1uG,MAAQ,CACjC,OAAUixG,EACV,SAAYD,GAGhB1pI,KAAKgoI,gBAAgBR,WAAa,CAC9B56B,MACIk6B,EACIC,EAAY1sC,SAAW0sC,EAAYM,OACnCL,EAAa3sC,SAAW2sC,EAAaK,QAC7ChtC,SACIysC,EAAoBC,EAAY1sC,SAAU2sC,EAAa3sC,UAC3DgtC,OACIP,EAAoBC,EAAYM,OAAQL,EAAaK,SAG7D,MAAM+C,EAAiB,GACvB,IAAIC,EAEJj+I,OAAOmZ,KAAKvF,KAAK8nI,yBAAyB14H,QAAQoa,IAC9C,MAAM,KAAE7vB,EAAF,QAAQowB,GAAY/pB,KAAK8nI,wBAAwBt+G,GACjD8gH,EAAgB3wI,EAAK+L,OAAO,CAAC6kI,EAAKC,IAAiBD,EAAMC,GAAgB7wI,EAAKpD,OAEpF,GAAIwzB,EACAsgH,EAAsBC,MACnB,CACH,MAAM3pG,EAAQ3gC,KAAKqlB,eAAe6jB,eAAe3vB,OAAOiQ,IAExD,GAAImX,EAAO,CACP,MAAM9Q,EAAgB8Q,EAAM82C,mBAExB5nD,IACAu6G,EAAev6G,GAAiBy6G,OAKhDtqI,KAAK8nI,wBAA0B,GAE/B9nI,KAAK6jB,aAAa8D,KACd1B,IACAjmB,KAAKqlB,eACL,CACI,UAAarlB,KAAKgoI,gBAAgB12D,UAClC,QAAWtxE,KAAKgoI,gBAAgBZ,QAChC,WAAcpnI,KAAKgoI,gBAAgBR,WACnC,WAAc4B,EACd,UAAaC,EACb,MAASl5D,EACT,UAAanwE,KAAKgoI,gBAAgBtqH,UAClC2sH,sBACAD,mBAERpqI,KAAKgoI,gBAAgBtqH,UAAY,IAUrC+pH,EAAen6I,UAAUm9I,oBAAsB,SAASv9F,GACpD,IAAIvgD,EAAQugD,EAMZ,MAJqB,iBAAVvgD,IACPA,EAAQ4sB,OAAO5sB,IAGf+sB,MAAM/sB,GACC,EAGJye,KAAKytB,IAAI,EAAGlsC,IAavB86I,EAAen6I,UAAUo9I,kBAAoB,SAASv2H,EAAKw2H,EAAQC,GAC/D,MAAMC,EAAW7qI,KAAKyqI,oBAAoBt2H,EAAIy2H,IACxCE,EAAc9qI,KAAKyqI,oBAAoBE,EAAOC,IAC9CG,EAAiB3/H,KAAKytB,IAAI,EAAGgyG,EAAWC,GAExCjpD,EAAS1tE,EAAI21F,UAAY6gC,EAAO7gC,UACtC,IAAIkhC,EAAc,EAOlB,OALInpD,EAAS,IAETmpD,EAAc5/H,KAAK67H,MAAwB,EAAjB8D,EAAsBlpD,IAG7CmpD,GAMXvD,EAAen6I,UAAU07I,mBAAqB,WAC1C,IAAKhpI,KAAK6nI,oBACN,OAEJ,MAAMoD,EAAgB,GAEtBjrI,KAAK4nI,mBAAmBx4H,QAAQ+E,IAE5B,GAAiB,mBAAbA,EAAIlN,MAA6BkN,EAAI+2H,WAA2B,cAAd/2H,EAAIm9B,MAAuB,CAC7E,MAAM65F,EAA2Bh3H,EAAIg3H,yBAC/BC,EAA2Bj3H,EAAIi3H,0BAEjCD,GAA4BC,KAC5BprI,KAAKgoI,gBAAgB12D,UAAY,CAC7B,SAAYlmE,KAAK67H,MAAMkE,EAA2B,KAClD,OAAU//H,KAAK67H,MAAMmE,EAA2B,OAIxD,MAAMC,EAAsBrrI,KAAK4nI,mBAAmBr7I,IAAI4nB,EAAIm3H,mBACtDC,EAAqBvrI,KAAK4nI,mBAAmBr7I,IAAI4nB,EAAIq3H,kBAI3D,GAAIH,GAAuBE,EAAoB,CAC3C,MAIMp4G,EAAM,GAJYhP,IAAQ0Y,kBAC1BwuG,EAAoBl4G,GACpBk4G,EAAoBx+D,WACPw+D,EAAoBn5G,OAOjCu5G,EAAW,GAJMtnH,IAAQ0Y,kBACzB0uG,EAAmBp4G,GACnBo4G,EAAmB1+D,WACP0+D,EAAmBr5G,OAE/BjrB,EAAOokI,EAAoB3iI,SAG3BgjI,EAA2B1rI,KAAKgoI,gBAAgBtqH,UAEjDguH,EAAyBzpG,KAAKr1C,GAC/BA,EAAEumC,KAAOA,GACNvmC,EAAEqa,OAASA,GACXra,EAAE6+I,UAAYA,IACjBC,EAAyBxoI,KAAK,CAC1BiwB,KACAlsB,OACAwkI,UACAtvF,IAAKn8C,KAAKqlB,eAAemC,MACzBmkH,mBAAoBJ,EAAmBK,cACvCC,oBAAqBR,EAAoBO,cACzCE,YAAaP,EAAmBO,YAChC/7G,IAAgC,IAA3B5b,EAAI43H,6BASlB,GAAiB,gBAAb53H,EAAIlN,MAAuC,iBAAbkN,EAAIlN,KAAyB,CAClE,MAAM0jI,EAAS3qI,KAAK6nI,oBAAoBt7I,IAAI4nB,EAAIjN,IAC1CsiB,EAAOxpB,KAAKyqI,oBAAoBt2H,EAAIqV,MAE1C,IAAKmhH,IAAWnhH,EACZ,OAGJ,IAAIogH,EAAY5pI,KAAKooI,WAAW77I,IAAIi9B,GAE/BogH,IACDA,EAAY,IAAI1C,EAChBlnI,KAAKooI,WAAW3iH,IAAI+D,EAAMogH,IAG9B,IAAIC,GAAmB,EACnB58I,EAAM,kBAEO,iBAAbknB,EAAIlN,OACJ4iI,GAAmB,EACnB58I,EAAM,eAGV,IAAI++I,EAAa73H,EAAIlnB,KAEhB++I,GAAcA,EAAa,KAC5BA,EAAa,GAGjB,MAAMC,EAAgBjsI,KAAKyqI,oBAAoBE,EAAO19I,IAChDi/I,EAAc9gI,KAAKytB,IAAI,EAAGmzG,EAAaC,GAEvCE,EAAiBnsI,KAAKyqI,oBAAoBt2H,EAAI41H,aAC9CqC,EAAoBpsI,KAAKyqI,oBAAoBE,EAAOZ,aACpDsC,EAAkBjhI,KAAKytB,IAAI,EAAGszG,EAAiBC,GAarD,GAXAxC,EAAUvB,QAAQ,CACdyB,aAAcoC,EAAcG,EAC5BtC,YAAasC,EACbxC,qBAQa,gBAAb11H,EAAIlN,KAAwB,CAC5B,MAAMw4B,EAAa,CACf9G,OAAQxkB,EAAIm4H,YACZxzG,MAAO3kB,EAAIo4H,YAEThhE,EAAYp3D,EAAIq4H,gBAElB/sG,EAAW9G,QAAU8G,EAAW3G,OAChC8wG,EAAUtB,cAAc7oG,GAE5BmqG,EAAUnB,aAAar9H,KAAK67H,MAAM17D,GAAa,IAE/Cq+D,EAAUrB,WAAW,CACjB,SAAYvoI,KAAK0qI,kBAAkBv2H,EAAKw2H,EAAQ,iBAChD,OAAU,SAGdM,EAAczhH,GAAQxpB,KAAKyqI,oBAAoBt2H,EAAIs4H,WACnD7C,EAAUrB,WAAW,CACjB,SAAY,EACZ,OAAUvoI,KAAK0qI,kBAAkBv2H,EAAKw2H,EAAQ,eAItD,MAAM9zG,EAAQ72B,KAAK4nI,mBAAmBr7I,IAAI4nB,EAAIu4H,SAE9C,GAAI71G,EAAO,CAMP,MAAM81G,EAAiB91G,EAAMyhF,SAASv1G,MAAM,KAAK,GAEjD4pI,GAAkB/C,EAAUlB,SAASiE,SAMtC,GAAiB,UAAbx4H,EAAIlN,MAAoBkN,EAAIsmB,OAAS+M,MAAoBrzB,EAAIy4H,aAAc,CAClF,MAAMntG,EAAa,CACf9G,OAAQxkB,EAAIm4H,YACZxzG,MAAO3kB,EAAIo4H,YAETM,EAAmB7sI,KAAKqlB,eAAekiB,eAAeC,KAE5D,KAAKqlG,aAAD,EAACA,EAAkBt2I,QACnB,OAGJ,MAAMizB,EAAOxpB,KAAKqlB,eAAe8rG,aAAa0b,EAAiB,IAE/D,IAAKrjH,EACD,OAEJ,IAAIogH,EAAY5pI,KAAKooI,WAAW77I,IAAIi9B,GAE/BogH,IACDA,EAAY,IAAI1C,EAChBlnI,KAAKooI,WAAW3iH,IAAI+D,EAAMogH,IAE1BnqG,EAAW9G,QAAU8G,EAAW3G,OAChC8wG,EAAUtB,cAAc7oG,GAK5B,IAAI8rC,EAAYp3D,EAAIq4H,gBAEpB,IAAKjhE,EAAW,CACZ,MAAMo/D,EAAS3qI,KAAK6nI,oBAAoBt7I,IAAI4nB,EAAIjN,IAEhD,GAAIyjI,EAAQ,CACR,MAAM9oD,EAAS1tE,EAAI21F,UAAY6gC,EAAO7gC,UAEtC,GAAIjoB,EAAS,GAAK1tE,EAAI24H,WAAY,CAG9BvhE,GAFkCp3D,EAAI24H,WAAanC,EAAOmC,YAEjBjrD,EAAU,KAI3D,IAAKtW,EACD,OAKR,MAAMwhE,EAAwB/sI,KAAKqlB,eAAe2nH,4BAGlDzhE,EAAYwhE,EAAwB3hI,KAAK67H,MAAM17D,EAAYwhE,GAAyB,EACpFnD,EAAUnB,aAAal9D,MAI/BvrE,KAAK6jB,aAAa8D,KAAK1B,IAAkCjmB,KAAKqlB,eAAgB4lH,GAC9EjrI,KAAKipI,yBAMTxB,EAAen6I,UAAUw7I,wBAA0B,WAC1C9oI,KAAK0nI,2BAIV1nI,KAAK2nI,yBAAyBv4H,QAAQ+E,IAClC,GAAiB,UAAbA,EAAIlN,KACJ,OAIJ,MAAMgiC,EAAa90B,EAAI80B,WAEvB,IAAKA,EACD,OAGJ,MAAMgkG,EAAkB94H,EAAI84H,gBACtBzjH,EAAOxpB,KAAKqlB,eAAe6nH,iBAAiBD,GAElD,GAAIzjH,EAAM,CACN,MAAMO,EACAP,IAASxpB,KAAKqlB,eAAe8rG,aAC/BnxH,KAAKqlB,eAAekiB,eAAeC,MAEvCxnC,KAAK6jB,aAAa8D,KACd1B,IACAjmB,KAAKqlB,eACLmE,EACAyf,EACAlf,S,wEC9rBhB,SAASytG,EAAsB14G,EAAKquH,GAChC,IAAKruH,IAAQquH,GAAmC,mBAApBruH,EAAIslB,aACJ,mBAAd+oG,EAAKxlH,KACf,MAAM,IAAItwB,MAAM,qDAEpB2I,KAAK8e,IAAMA,EACX9e,KAAKmtI,KAAOA,EAWhB3V,EAAsBlqI,UAAUslE,QAAU,YAAYlwB,GAClD,MAAM0qG,EAAW1qG,EAAK,GAItBA,EAAK,GAAK1iC,KAAKmtI,KAGfntI,KAAK8e,IAAIslB,YACLgpG,EACAv9F,SAASviD,UAAUJ,KAAKuxB,MAAMze,KAAKmtI,KAAKxlH,KAAM+a,KAGtDv3C,EAAOD,QAAUssI,G,6BCpCjB,mEAWe,MAAM3K,EAmBjB52H,YAAY0N,EAAKijB,EAAYglF,EAAayhC,EAAQ5gB,EAAS18G,EAAQypC,EAAU8zF,EAAaC,GACtFvtI,KAAKwtI,KAAO7pI,EACZ3D,KAAKytI,IAAMhyI,UAAQyI,mBAAmBP,GACtC3D,KAAKi6G,YAAcrzF,EACnB5mB,KAAKsuH,aAAe1iB,EACpB5rG,KAAKqtH,eAAgB,EACrBrtH,KAAKuuH,QAAU,GACfvuH,KAAK0tI,MAAQ,OACb1tI,KAAK6gE,QAAU9wD,EACf/P,KAAK2tI,QAAUN,EACfrtI,KAAK4tI,SAAWnhB,EAChBzsH,KAAK6tI,kBAAoBt5D,IAA4B/oB,OACrDxrD,KAAK8tI,YAAc,GACnB9tI,KAAK+tI,UAAYv0F,EACjBx5C,KAAKguI,aAAeV,EACpBttI,KAAKiuI,YAAcV,EACnBvtI,KAAKqyG,UAAY,IAAIltF,IASzB+oH,gBACI,OAAOluI,KAAKi6G,YAMhBgC,YAAYhwH,GACR,OAAO+T,KAAK8tI,YAAY7hJ,GAW5B2rF,8BACI,OACI53E,KAAK2hC,YAAYM,KACbksG,GACIA,EAAWrmG,YAAcN,KAClB2mG,EAAW1mC,sBASlClwB,qBAAqBxnE,GACjB/P,KAAK6tI,kBAAoB99H,EAU7BsnE,sBACI,OAAOr3E,KAAK6tI,kBAShBtgB,YAAYthI,EAAMU,GACd,MAAM8xF,EAAWz+E,KAAK8tI,YAAY7hJ,GAE9BU,IAAU8xF,IACVz+E,KAAK8tI,YAAY7hJ,GAAQU,EACzBqT,KAAKi6G,YAAYp2F,aAAa8D,KAC1BX,+BACAhnB,KACA/T,EACAwyF,EACA9xF,IAQZg1C,YACI,OAAO3hC,KAAKuuH,QAAQzuG,QAQxBk5D,qBAAqB3oD,GACjB,OAAOrwB,KAAK2hC,YAAY3M,OAAO2L,GAASA,EAAMmH,YAAczX,GAMhEinD,QACI,OAAOt3E,KAAKytI,IAMhBtyF,SACI,OAAOn7C,KAAKwtI,KAMhBlhC,iBACI,OAAOtsG,KAAKsuH,aAMhB8D,aACI,OAAOpyH,KAAK4tI,SAMhBx5B,YACI,OAAOp0G,KAAK6gE,QAMhBs5C,cACI,MAAsB,cAAfn6G,KAAK0tI,MAQhBxiB,WACI,OAAOlrH,KAAK2tI,QAOhBL,cACI,OAAOttI,KAAKguI,aAOhBT,aACI,OAAOvtI,KAAKiuI,YAMhBG,eACI,OAAOpuI,KAAKquI,kBAAkB7mG,KAclC6mG,kBAAkBh+G,GACd,OAAOrwB,KAAK2hC,YAAYj8B,OACpB,CAAC4jB,EAAOqX,IACJrX,IAAUqX,EAAMmH,YAAczX,GAAasQ,EAAM04C,YACrD,GAMRxE,eACI,OAAO70E,KAAKquI,kBAAkB7mG,KAMlCyjF,UACI,OAAOjrH,KAAK0tI,MAOhB5gB,QAAQwhB,GACJtuI,KAAK0tI,MAAQY,EAOjBrhB,eAAeshB,GACXvuI,KAAKguI,aAAeO,EAOxBrgB,cAAcsgB,GACVxuI,KAAKiuI,YAAcO,EAMvB3e,eACI,OAAO7vH,KAAKqtH,cAOhBtxC,cACI,OAAOj+C,QAAQC,QAAQ/9B,KAAKqyG,WAShCyhB,WAAWrmB,GACP,OAAOztG,KAAKqyG,UAAU9pF,IAAIklF,GAO9Buf,YAAYyhB,GACRzuI,KAAKqyG,UAAYo8B,GAAe,IAAItpH,IAQxCuoG,aACI,OAAO1tH,KAAK0uI,SAOhB3hB,WAAW4hB,GACP3uI,KAAK0uI,SAAWC,K,6BC9TxB,sDA2De,SAASznB,GAA2B,GAE/ChgH,EAF+C,SAG/CyxC,EAH+C,iBAI/CiC,EAJ+C,kBAQ/Cg0F,EAR+C,aAW/CC,IAEA,IACIC,EADAC,GAAW,EAEXrrH,EAAO,IAAIoxB,IAAK90C,KAAKuU,WAAWpN,SAEpC,MAAMg8C,EAAU,IAAIrlB,QAAQ,CAACC,EAASC,KAIlC8wG,EAAgB9wG,EAGhBta,EAAK0gB,YACDzV,0BACA,KACIjL,OAAOnjB,IAEfmjB,EAAK0gB,YACDl2C,yBACA,KACI,GAAI6gJ,EACA,OAIJH,GAAqBA,IAGRlrH,EAAKi3B,WACd36C,KAAKmH,QAAQlb,KACb+T,KAAKmH,QAAQ0wB,OACb+iB,GAGCwtE,UAAU32G,eACVisB,KAAK,KACFha,GAAQA,EAAKnU,aAETw/H,IAOJ/uI,KAAKmD,KAAK0rI,GAEV9wG,OAEHxB,MAAM,EAAGv3B,QAAOP,cACbif,EAAKnU,aAELyuB,EAAO,CACHgxG,oBAAqBhqI,EACrBP,gBAIpBif,EAAK0gB,YACDhyC,oBACA,CAAC68I,EAAiBxqI,EAASmzC,KACvB5Z,EAAO,CACHixG,kBACAr3F,cACAnzC,YAEJif,OAAOnjB,IAGfwuI,GAAYrrH,EAAKjY,QAAQvE,EAAIyxC,KAgBjC,OANAwK,EAAQoe,OAAS,KACbwtE,GAAW,EACXD,EAAc,IACdprH,GAAQA,EAAKnU,cAGV4zC,I,8BC5JX,yDAIA,MAAMplC,EAASF,oBAAU6E,GAInBwsH,EAAaziJ,OAAO,cAcX,MAAM0iJ,EAIjBl5I,cAGI,IAAIm5I,EAAU,GACd,MAAMC,EAAMh0I,SAAS4b,cAAc,yCAEnC,GAAIo4H,EAAK,CACL,MAAMpjG,EAAMojG,EAAIvwH,IAAIugD,YAAY,KAEhC+vE,EAAaC,EAAIvwH,IAAI4S,UAAU,EAAGua,GAAvB,IAKf,MACMqjG,EACA,IAAIpvD,KAAK,CAAG,kBAFGkvD,EAAF,8CAEkC,CAAEnoI,KAAM,2BACvDsoI,EAAUjkJ,OAAO00F,IAAIC,gBAAgBqvD,GAE3CtvI,KAAKwvI,QAAU,IAAI7tD,OAAO4tD,EAAS,CAAEtjJ,KAAM,gBAC3C+T,KAAKwvI,QAAQ9zH,QAAUriB,GAAK0kB,EAAOrC,QAAQriB,GAS/CsrF,QAAQ90D,GACJ7vB,KAAKwvI,QAAQ5tD,YAAY,CACrB6tD,UAAW,UACX5/G,kBAYR61D,eAAe91C,EAAUnV,EAAM5K,GAC3B,GAAI+f,EAASs/F,GACT,OAIJ,IAAIQ,EAFJ9/F,EAASs/F,IAAc,EAKnBQ,EADA9/F,EAAS+pF,qBACS/pF,EAAS+pF,uBAEA,UAATl/F,EAAmBmV,EAASgqF,4BACxChqF,EAAS+/F,4BAGnB3vI,KAAKwvI,QAAQ5tD,YAAY,CACrB6tD,UAAW,SACXG,eAAgBF,EAAgBG,UAAYH,EAAgBE,eAC5DE,eAAgBJ,EAAgBzpE,UAAYypE,EAAgBI,eAC5DjgH,iBACD,CAAE6/G,EAAgBG,UAAYH,EAAgBE,eAC7CF,EAAgBzpE,UAAYypE,EAAgBI,iBAWpDjqD,aAAaF,EAAQlrD,EAAM5K,GACvB,GAAI81D,EAAOupD,GACP,OAIJ,IAAIa,EAFJpqD,EAAOupD,IAAc,EAKjBa,EADApqD,EAAOg0C,qBACSh0C,EAAOg0C,uBAEE,UAATl/F,EAAmBkrD,EAAOi0C,4BACpCj0C,EAAOgqD,4BAGjB3vI,KAAKwvI,QAAQ5tD,YAAY,CACrB6tD,UAAW,SACXG,eAAgBG,EAAcF,UAAYE,EAAcH,eACxDE,eAAgBC,EAAc9pE,UAAY8pE,EAAcD,eACxDjgH,iBACD,CAAEkgH,EAAcF,UAAYE,EAAcH,eACzCG,EAAc9pE,UAAY8pE,EAAcD,iBAUhD9qD,OAAOn1D,EAAe5iC,EAAKwwF,GACvBz9E,KAAKwvI,QAAQ5tD,YAAY,CACrB6tD,UAAW,SACX5/G,gBACA5iC,MACAwwF,iB,4EC1IZ,0EAQA,MAAM1/D,EAASF,oBAAU6E,GAQV,MAAM29C,EAKjBpqE,YAAY+5I,GACRhwI,KAAKk4C,aAAe83F,EAOpBhwI,KAAKiwI,cAAgB,EAErBjwI,KAAKkwI,iBAAc3vI,EAOvB,iBACI,OAAOP,KAAKkwI,YAQhB3tE,WACIviE,KAAKmwI,gBAELnwI,KAAKiwI,eAAiB,EAEtBjwI,KAAKowI,uBACC72D,IAAY/7C,iBACV87C,IACA,EAAGG,eACKA,EACAz5E,KAAKqwI,kBAELrwI,KAAKmwI,kBAIrB52D,IAAYE,YAAcz5E,KAAKqwI,kBAQnCA,kBACQrwI,KAAKswI,iBAUTtwI,KAAKiwI,cAAgB7kI,KAAKqP,IAAI,EAAGza,KAAKiwI,eACtCjwI,KAAKkwI,YAAcK,YACHvwI,KAAKiwI,cACmB,KAArBjwI,KAAKiwI,cACpB,GAEJlyH,EAAO7Y,KAAM,6CAA4ClF,KAAKwwI,gBAE9DxwI,KAAKswI,eAAiB/lI,WAAW,IAAMvK,KAAKywI,oBAAqBzwI,KAAKwwI,aAS1EL,gBACQnwI,KAAKswI,iBACLvyH,EAAO7Y,KAAK,oCACZuI,aAAazN,KAAKswI,gBAClBtwI,KAAKswI,oBAAiB/vI,EACtBP,KAAKkwI,iBAAc3vI,GAU3BkwI,oBACI,MAAM,iBAAE3uE,GAAqB9hE,KAAKk4C,aAC5Bw4F,EAAc5uE,EAAiBC,iBAGrC,IAAK2uE,EACD,OAGJ3yH,EAAO7Y,KAAK,wCAEZ,MAAM+8D,EAAM,IAAI+d,IAAIhgF,KAAKk4C,aAAa3vC,SACtC,IAAI,OAAEsU,GAAWolD,EACjB,MAAM3P,EAAU,oBACVq+E,EAAW9zH,EAAOvJ,MAAMg/C,GAG1Bq+E,IAA+C,IAAnCA,EAAS/sI,QAAQ8sI,GAC7B7zH,EAASA,EAAOjb,QAAQ0wD,EAAU,KAAIo+E,GAG9BC,IACR9zH,IAAmC,IAAzBA,EAAOjZ,QAAQ,KAAe,WAAU8sI,EAAiB,WAAUA,GAGjFzuE,EAAIplD,OAASA,EAEb7c,KAAKk4C,aAAa3vC,QAAU05D,EAAIvrE,WAEhCorE,EAAiB92D,SASrBu2D,SACIvhE,KAAKmwI,gBACLnwI,KAAKiwI,cAAgB,EACjBjwI,KAAKowI,yBACLpwI,KAAKowI,yBACLpwI,KAAKowI,uBAAyB,U,0EClJnC,SAASG,EAAeK,EAAOC,EAAW,IAAKr7E,EAAO,GACzD,OAAOpqD,KAAKmM,MAAOnM,KAAKC,UAAqC,IAAxBD,KAAKsP,IAAI86C,EAAMo7E,GAAiBC,GAAaA,GAZtF,mC,6BCAA,kCAGe,MAAMC,EAIjB76I,cACI+J,KAAK+wI,aAAe,KACpB/wI,KAAKgxI,mBAAqB,KAS9B7wE,cAAc8wE,EAAgBjB,GAC1B,MAAMkB,EAAmBlB,EAAkB9iI,SAE3C8iI,EAAkB9iI,SAAW,IAAIw1B,KAC7B,MAAMyuG,EAAazuG,EAAK,GAEpByuG,EAAWr5G,SAAS,aACpB93B,KAAKgxI,mBAAqBG,GAK1BF,EAAernI,YACf5J,KAAK+wI,aAAe5oI,KAAKgM,OAE7B+8H,EAAiBzyH,MAAMuxH,EAAmBttG,IASlD4W,uBACI,OAAOt5C,KAAKgxI,mBAQhBx6F,0BACI,OAAOx2C,KAAK+wI,aACN5oI,KAAKgM,MAAQnU,KAAK+wI,aAClB,Q,8BCtDd,yFAQA,MAAMhzH,EAASF,oBAAU6E,GAwBV,MAAM69C,UAA6B6wE,IAW9Cn7I,aAAY,+BAAEuqE,EAAF,wBAAkCC,EAAlC,YAA2DV,EAAc,KACjFtkC,QACAz7B,KAAKqxI,YAAc,EACnBrxI,KAAKsxI,yBAA2B7wE,EAChCzgE,KAAKuxI,gCAAkC/wE,EAEvCxgE,KAAK4jE,aAA+C,iBAAzB7D,EAAYulC,SAAwBvlC,EAAYulC,SApCrD,IAqCtBtlG,KAAKwxI,YAA6C,iBAAxBzxE,EAAYnyD,QAAuBmyD,EAAYnyD,QAhCpD,IAiCrB5N,KAAKyxI,cAAiD,iBAA1B1xE,EAAY2xE,UAClC3xE,EAAY2xE,UA3BK,EA+BvB1xI,KAAK2xI,qBAAuBvmI,KAAK67H,MAAM,KAASjnI,KAAK4jE,cACrD5jE,KAAK4xI,kBAAoB,IAAIx7I,MAAM4J,KAAK2xI,sBAO5C/mI,KAAK2J,GACDknB,MAAM7wB,KAAK2J,GACX9Y,UAAQ+D,aAAa,OAAQ,iBAajC62C,KAAK1yC,EAAK+6D,EAAS15D,EAAO4I,GACtB5N,KAAK6xI,6BAEL,MAAM5+H,EAAKtX,cAAI,CACXsL,KAAM,MACNoiC,GAAI1lC,IAGRsP,EAAGlnB,EAAE,OAAQ,CAAEka,MAAOxK,UAAQK,GAAG08C,OACjCx4C,KAAKuU,WAAW8tD,QAAQpvD,EAAI,CAAErF,YACzB8vB,KAAKghC,EAAS15D,GAWvBw8D,cAAc6kB,GACVzqD,cAAc57B,KAAKulG,YACnBvlG,KAAKulG,WAAaj6G,OAAOmyC,YAAY,KAKjC,MAAMtpB,EAAMhM,KAAKgM,MAEjB,GAAInU,KAAKuxI,kCAAoCp9H,EAAMnU,KAAK8xI,iBAOpD,OALA9xI,KAAK6xI,6BAEL7xI,KAAK8xI,iBAAmB39H,OACxBnU,KAAKqxI,YAAc,GAKvBrxI,KAAKq2C,KAAKgwC,EAAW,KAIjBrmF,KAAK8xI,iBAAmB9xI,KAAKuxI,kCAAoCppI,KAAKgM,MAEtEnU,KAAKqxI,YAAc,GACpBrsI,IACChF,KAAKqxI,aAAe,EACpB,MAAM34F,EAAU,SAAO1zC,EAAQ,QAAU,WAErChF,KAAKqxI,aAAerxI,KAAKyxI,eACzBh1G,IAAqBkG,iBAAiB,IAAItrC,MAAMqhD,IAChD36B,EAAO/Y,MAAM0zC,EAAQ1zC,GACrBhF,KAAKsxI,0BAA4BtxI,KAAKsxI,4BAEtCvzH,EAAO5Y,KAAKuzC,EAAQ1zC,IAEzBhF,KAAKwxI,cACTxxI,KAAK4jE,cACR7lD,EAAO7Y,KAAM,iCAAgClF,KAAK4jE,mBAMtD7qB,eACQ/4C,KAAKulG,aACLj6G,OAAOswC,cAAc57B,KAAKulG,YAC1BvlG,KAAKulG,WAAa,KAClBvlG,KAAKqxI,YAAc,EACnBtzH,EAAO7Y,KAAK,0BAQpB2sI,6BACI7xI,KAAK4xI,kBAAkB1uI,MAAK,IAAIiF,MAAOC,WAGnCpI,KAAK4xI,kBAAkBr7I,OAASyJ,KAAK2xI,sBACrC3xI,KAAK4xI,kBAAkB3/G,QAY/BqkB,qBACI,MAAMy7F,EAAgB/xI,KAAK4xI,kBAAkB9xH,QAM7CiyH,EAAc7uI,MAAK,IAAIiF,MAAOC,WAE9B,IAAI4pI,EAAc,EACdC,EAAaF,EAAc,GAkB/B,OAhBAA,EAAc3iI,QAAQ/V,IAClB,MAAM64I,EAAkB74I,EAAI44I,EAExBC,EAAkBF,IAClBA,EAAcE,GAGlBD,EAAa54I,IAMjB24I,GAAehyI,KAAK4jE,aAGbx4D,KAAKytB,IAAIm5G,EAAa,O,6EC3MrC,mGAUA,MAAMj0H,EAASF,oBAAU6E,GAKV,MAAM45B,UAA4BmjB,IAK7CxpE,YAAYytB,GACR+X,QACAz7B,KAAK0jB,KAAOA,EACZ1jB,KAAKixG,MAAQ,GAOjBrmG,KAAK2J,GACDknB,MAAM7wB,KAAK2J,GAGXvU,KAAKuU,WAAWxG,WAAW/N,KAAKmyI,WAAWjlJ,KAAK8S,MAAO,KACnD,WAAY,KAAM,KAAM,KAAM,MAClCA,KAAKuU,WAAWxG,WAAW/N,KAAKoyI,sBAAsBllJ,KAAK8S,MACvD,KAAM,WAAY,cAAe,MACrCA,KAAKuU,WAAWxG,WAAW/N,KAAKqyI,gBAAgBnlJ,KAAK8S,MAAO,KACxD,WAAY,QAAS,MACzBA,KAAKuU,WAAWxG,WAAW/N,KAAKsyI,UAAUplJ,KAAK8S,MAAO,KAClD,UAAW,KAAM,MACrBA,KAAKuU,WAAWxG,WAAW/N,KAAKuyI,OAAOrlJ,KAAK8S,MACxC,iCAAkC,KAAM,MAAO,KAAM,MACzDA,KAAKuU,WAAWxG,WAAW/N,KAAKwyI,YAAYtlJ,KAAK8S,MAC7C,iCAAkC,KAAM,MAAO,KAAM,MAS7D26C,WAAWh3C,EAAKg1C,EAAUxxC,GACtB,MAAMuiB,EAAUjuB,UAAQsI,kBAAkBJ,GAE1C,GAAI3D,KAAKixG,MAAMvnF,GAAU,CACrB,MAAMgvB,EAAS,+BAGf,MADA36B,EAAO/Y,MAAM0zC,GACP,IAAIrhD,MAAMqhD,GAOpB,OALA14C,KAAKixG,MAAMvnF,GAAW,IAAI+oH,IAASzyI,KAAKuU,WAAY5Q,EAChDg1C,EAAU34C,KAAK0jB,KAAMvc,GACzBnH,KAAK6jB,aAAa8D,KACdqwB,IAAWxlD,gBAAiBwN,KAAKixG,MAAMvnF,IAEpC1pB,KAAKixG,MAAMvnF,GAOtBgpH,QAAQ/uI,GACJ3D,KAAK6jB,aAAa8D,KACdqwB,IAAWvlD,kBAAmBuN,KAAKixG,MAAMttG,WACtC3D,KAAKixG,MAAMttG,GAOtBwuI,WAAW1iI,GACP,MAAM9Y,EAAO8Y,EAAK7M,aAAa,QAG/B,GAAI6M,EAAK7M,aAAa,QAClB,OAAO,EAGX,MAAM+5C,EAAO38C,KAAKixG,MAAMx1G,UAAQsI,kBAAkBpN,IAElD,OAAKgmD,IAKD7N,EAAEr/B,GAAM6lB,KAAK,sEACY/+B,QACzBomD,EAAKg2F,yBAGTh2F,EAAKw1F,WAAW1iI,IAET,GAOX2iI,sBAAsB3iI,GAClB,MAAM9Y,EAAO8Y,EAAK7M,aAAa,QACzB+5C,EAAO38C,KAAKixG,MAAMx1G,UAAQsI,kBAAkBpN,IAElD,OAAKgmD,IAILA,EAAKy1F,sBAAsB3iI,EAAM9Y,IAE1B,GAOX07I,gBAAgB5iI,GACZ,MAAM9Y,EAAO8Y,EAAK7M,aAAa,QACzB+5C,EAAO38C,KAAKixG,MAAMx1G,UAAQsI,kBAAkBpN,IAElD,OAAKgmD,IAILA,EAAK01F,gBAAgB5iI,EAAM9Y,IAEpB,GAOX27I,UAAUxtI,GAEN,MAAMnO,EAAOmO,EAAIlC,aAAa,QACxB+5C,EAAO38C,KAAKixG,MAAMx1G,UAAQsI,kBAAkBpN,IAElD,OAAKgmD,IAILA,EAAK21F,UAAUxtI,EAAKnO,IAEb,GAOX47I,OAAOt/H,GACH,MAAMtc,EAAOsc,EAAGrQ,aAAa,QACvB+5C,EAAO38C,KAAKixG,MAAMx1G,UAAQsI,kBAAkBpN,IAGlD,OAAKgmD,IAILA,EAAK41F,OAAOt/H,IAEL,GAOXu/H,YAAYv/H,GACR,MAAMtc,EAAOsc,EAAGrQ,aAAa,QACvB+5C,EAAO38C,KAAKixG,MAAMx1G,UAAQsI,kBAAkBpN,IAGlD,OAAKgmD,IAILA,EAAK61F,YAAYv/H,IAEV,O,mFCnMf,8KAiBA,MAAM8K,EAASF,oBAAU6E,GAEZgxB,EAAS,CAClBk/F,YAAY3xI,EAAY+pG,GACpB,IAAK,MAAMplG,KAASxP,MAAMO,KAAKsK,EAAW0wG,UAAW,CACjD,MAAMzwG,EAAO,CACTjE,WAAY,GACZ00G,SAAU,GACVxxG,QAASyF,EAAMzF,SAGnB,IAAK,MAAMoB,KAAQnL,MAAMO,KAAKiP,EAAM3I,YAChCiE,EAAKjE,WAAWsE,EAAKtV,MAAQsV,EAAK5U,MAEtC,MAAMgV,EAAOlG,UAAQ4G,QAAQuD,GAEzBjE,IAIAT,EAAKvU,MAAQ8O,UAAQoG,YAAYF,IAErCqpG,EAAM9nG,KAAKhC,GACXlB,KAAK4yI,YAAYhtI,EAAO1E,EAAKywG,YAGrCkhC,YAAY7nC,EAAO8nC,GACf,IAAK,IAAIpnJ,EAAI,EAAGA,EAAIs/G,EAAMz0G,OAAQ7K,IAAK,CACnC,MAAMwV,EAAO8pG,EAAMt/G,GAEfwV,IACA4xI,EAAO/mJ,EAAEmV,EAAKf,QAASe,EAAKjE,YACxBiE,EAAKvU,OACLmmJ,EAAOlmJ,EAAEsU,EAAKvU,OAEduU,EAAKywG,UACL3xG,KAAK6yI,YAAY3xI,EAAKywG,SAAUmhC,GAEpCA,EAAO3sI,SAcvB,SAAS4sI,EAA2BtjI,EAAMjN,GACtC,MAAM25B,EAAM,GAEZ,IAAK,IAAIzwC,EAAI,EAAGA,EAAI+jB,EAAKlZ,OAAQ7K,IACzB+jB,EAAK/jB,GAAGyU,UAAYqC,GACpB25B,EAAIj5B,KAAKuM,EAAK/jB,IAItB,OAAOywC,EAWX,MAAM62G,EAAuB,CAAE,QAAS,QAAS,UAKlC,MAAMP,UAAiBj3G,IAiBlCvlC,YAAYse,EAAY5Q,EAAKg1C,EAAU7D,EAAM3tC,GACzCs0B,QACAz7B,KAAK0jB,KAAOoxB,EACZ90C,KAAKuU,WAAaA,EAClBvU,KAAK66C,QAAUp/C,UAAQsI,kBAAkBJ,GACzC3D,KAAKgqH,UAAYrmH,EACjB3D,KAAK24C,SAAWA,EAChB34C,KAAKgnH,oBAAqB,EAC1BjpG,EAAO7Y,KAAM,iBAAgBlF,KAAKgqH,WAClChqH,KAAK67G,QAAU,GACf77G,KAAK+wH,QAAU,GACf/wH,KAAKizI,aAAe,GACpBjzI,KAAKkzI,qBAAuB,GAC5BlzI,KAAKonH,QAAS,EACdpnH,KAAK4uE,KAAO,KACZ5uE,KAAK80G,YAAc,KACnB90G,KAAKmzI,mBAAoB,EACzBnzI,KAAKmH,QAAUA,GAAW,GAC1BnH,KAAKooH,UACC,IAAIgrB,IAAUpzI,KAAK66C,QAAS76C,KAAK0jB,KAAM1jB,KAAK6jB,aAAc,CACxDtP,WAAYvU,KAAK0jB,KAAKvc,QACtByf,WAAY5mB,KAAKmH,gBAEe,IAA7BnH,KAAKmH,QAAQguH,aAA+Bn1H,KAAKmH,QAAQguH,eAChEn1H,KAAKqzI,MAAQ,IAAIC,IAAMtzI,OAE3BA,KAAKuzI,aAAe,IAAIC,IAAaxzI,MACrCA,KAAKyzI,gBAAgBtsI,GACrBnH,KAAK0zI,cAAgB,GACrB1zI,KAAK2zI,YAAc,KACnB3zI,KAAK4zI,SAAW,KAChB5zI,KAAKk1C,gBAAkB,GACvBl1C,KAAK6zI,4BAA8B,KAEnC7zI,KAAK8zI,QAAS,EACd9zI,KAAK08F,oBAAsBC,MAQ/B82C,gBAAgBtsI,EAAU,IACtBnH,KAAK+wH,QAAQ1nF,GAAKrpC,KAAKgqH,UACvBhqH,KAAK+wH,QAAQgjB,IAAM,iCACnB/zI,KAAK+wH,QAAQ/lB,MAAQ,GAEjB7jG,EAAQ09G,SACR7kH,KAAK+wH,QAAQ/lB,MAAM9nG,KAAK,CACpB,QAAW,WACX,MAASiE,EAAQ09G,UAIrB19G,EAAQ6uC,gBAAkB7uC,EAAQ6uC,eAAe8wE,YACjD9mH,KAAK+wH,QAAQ/lB,MAAM9nG,KAAK,CACpB,QAAW,SACX,WAAc,CACVgE,GAAIC,EAAQ6uC,eAAe8wE,WAC3B7gH,MAAO,iCAKnBjG,KAAKg0I,mBAAqB7rI,KAAKgM,MASnChR,KAAKw1C,EAAUquE,GAIX,OAHAhnH,KAAK24C,SAAWA,EAChB34C,KAAKgnH,mBAAqBA,EAEnB,IAAIlpF,QAAQC,IACf/9B,KAAKmH,QAAQ8sI,cACNl2H,EAAO7Y,KAAM,iCAAgClF,KAAK66C,UAGnD76C,KAAKmH,QAAQ8sI,aACTn2G,QAAQC,UACR/9B,KAAKooH,UAAU8rB,2BAEjBx2G,KAAK,KACT19B,KAAK0N,cAAa,GAClB1N,KAAKkzI,qBAAqBhwI,KACtBlD,KAAKuU,WAAWipB,iBACZqY,IAAeI,OAAO4pB,oBACtB7/D,KAAKm0I,oBAAoBjnJ,KAAK8S,QAEtC+9B,QASZrwB,aAAa0mI,GACT,MAAM/qG,EAAKrpC,KAAK+wH,QAAQ1nF,GAExB,IAAKrpC,KAAKuU,aAAevU,KAAKuU,WAAW3K,YAAcy/B,IAAQrpC,KAAKonH,SAAWgtB,EAE3E,OAGJ,MAAM3kI,EAAO7T,gBAAM,CAAEytC,OAOjB+qG,IACIp0I,KAAKgnH,oBACLv3G,EAAK1jB,EAAE,eAAeoa,KAG1BsJ,EAAK1jB,EAAE,IAAK,CAAEka,MAAOjG,KAAK+wH,QAAQgjB,MAE9B/zI,KAAK24C,UACLlpC,EAAK1jB,EAAE,YAAYa,EAAEoT,KAAK24C,UAAUxyC,KAEpCnG,KAAKmH,QAAQktI,WACb5kI,EAAK1jB,EAAE,aAAaa,EAAEoT,KAAKmH,QAAQktI,WAAWluI,KAGlDsJ,EAAKtJ,MAGTutC,EAAOm/F,YAAY7yI,KAAK+wH,QAAQ/lB,MAAOv7F,GAGvCzP,KAAKs0I,iBAAmBnsI,KAAKgM,MAE7BnU,KAAKuU,WAAWlH,KAAKoC,GACjB2kI,GAKAp0I,KAAKuU,WAAW/G,QAQxBklI,UACI30H,EAAOnZ,IAAI,WAAY5E,KAAKgqH,WAC5B,MAAMv6G,EAAO7T,gBAAM,CAAEytC,GAAIrpC,KAAKgqH,UAC1B/iH,KAAM,gBAEVjH,KAAK+wH,QAAQx6H,OAAS,GAerByJ,KAAKuU,WAAWunC,kBAAoB97C,KAAKuU,WAAW/G,QACrDxN,KAAKuU,WAAWlH,KAAKoC,GACrBzP,KAAKuU,WAAW/G,QAMpB+mI,gBAGI,MAAMC,EACA74I,cAAI,CACFsL,KAAM,MACNoiC,GAAIrpC,KAAK66C,UAER9uD,EAAE,QAAS,CAAEka,MAAOxK,UAAQK,GAAGO,aAExC2D,KAAKuU,WAAWnG,OAAOomI,EAAS/uI,IAC5B,MAAMquI,EAGM,IAFNhlG,EAAErpC,GAAQ6vB,KAAK,+CACZ/+B,OAGLu9I,IAAW9zI,KAAK8zI,SAChB9zI,KAAK6jB,aAAa8D,KAAKqwB,IAAWlkD,iBAAkBggJ,GACpD9zI,KAAK8zI,OAASA,GAGlB,MAAMW,EACA3lG,EAAErpC,GAAQ6vB,KAAK,qEAEjBm/G,EAAel+I,OACfyJ,KAAK00I,aAAaD,EAAe9yI,QAEjCoc,EAAO5Y,KAAK,8BAGhB,MAAMwvI,EAAiF,IAAnE7lG,EAAErpC,GAAQ6vB,KAAK,yCAAyC/+B,OAEtEq+I,EACA9lG,EAAErpC,GAAQ6vB,KAAK,qEAEjBt1B,KAAKqzI,OACLrzI,KAAKqzI,MAAMwB,gBAAgBD,GAAkBA,EAAer+I,OAASq+I,EAAejzI,YAASpB,GAG7Fo0I,IAAgB30I,KAAKk1H,qBACrBl1H,KAAKk1H,mBAAqByf,EAC1B30I,KAAK6jB,aAAa8D,KAAKqwB,IAAWjkD,yBAA0B4gJ,KAGjE3vI,IACCy3B,IAAqBkG,iBAAiB39B,GACtC+Y,EAAO/Y,MAAM,4BAA6BA,KAUlD0vI,aAAa9f,GACL50H,KAAK40H,YAAcA,IACf50H,KAAK40H,WACL72G,EAAO5Y,KAAM,2BAA0BnF,KAAK40H,gBAAgBA,KAEhE50H,KAAK40H,UAAYA,EACjB50H,KAAK6jB,aAAa8D,KAAKqwB,IAAW/kD,eAAgB2hI,IAO1D+d,yBAGI,GAAI3yI,KAAKmH,QAAQ2tI,iBACb,OAGJ,MAAMC,EAAUp5I,cAAI,CAAEsL,KAAM,MACxBoiC,GAAIrpC,KAAK66C,UACR9uD,EAAE,QAAS,CAAEka,MAAO,yCACpBla,EAAE,IAAK,CAAEka,MAAO,gBACbgB,KAAM,WAEdjH,KAAKuU,WAAWnG,OAAO2mI,EAASC,IAC5B,IAAKlmG,EAAEkmG,GAAM1/G,KACL,qEACwC/+B,OAAQ,CACpD,MAAMmiD,EAAS,oCAKf,OAHAjc,IAAqBkG,iBAAiB,IAAItrC,MAAMqhD,SAChD36B,EAAO/Y,MAAM0zC,GAKjB,MAAMu8F,EAAat5I,cAAI,CAAE0tC,GAAIrpC,KAAK66C,QAC9B5zC,KAAM,QACLlb,EAAE,QAAS,CAAEka,MAAO,yCAEzBgvI,EAAWlpJ,EAAE,IAAK,CAAEka,MAAO,gBACvBgB,KAAM,WAEVguI,EAAWlpJ,EAAE,QAAS,CAAE,IAAO,cAC1BA,EAAE,SACFa,EAAE,6CAA6CuZ,KAAKA,KAEzD8uI,EAAWlpJ,EAAE,QAAS,CAAE,IAAO,yBAC1BA,EAAE,SAASa,EAAE,UAAUuZ,KAAKA,KAEjCnG,KAAKuU,WAAWnG,OAAO6mI,IAExBjwI,IACCy3B,IAAqBkG,iBAAiB39B,GACtC+Y,EAAO/Y,MAAM,0CAA2CA,KAShEmvI,oBAAoBpkI,GAEZA,IAAW8lC,IAAep4C,OAAOM,WACjCiC,KAAK0N,eAQbykI,WAAW1iI,GACP,MAAM9Y,EAAO8Y,EAAK7M,aAAa,QACzBk5G,EAAS,GACTo5B,EAAWzlI,EAAKqB,qBAAqB,UAAU,GAEjDokI,IACAp5B,EAAO/rG,OAASmlI,EAASh+H,aAAe,IAE5C,IAAIi+H,GAAkB,EAClBC,GAAmB,EACvB,MAAMC,EACA5lI,EAAK6B,uBACH,sCAAuC,KAAK,GAC9CgkI,EACAD,GAAYA,EAASvkI,qBAAqB,QAAQ,GAExDgrG,EAAO8Q,qBACDn9G,EAAKqB,qBAAqB,eAAeva,OAE/CulH,EAAOy5B,YACDD,GAAeA,EAAY1yI,aAAa,eAC9Ck5G,EAAOltC,KAAO0mE,GAAeA,EAAY1yI,aAAa,QAGtD,MAAMe,EAAM2xI,GAAeA,EAAY1yI,aAAa,OAEpDk5G,EAAOn4G,IAAMA,EACbm4G,EAAOqT,QACDxrH,GAA+D,IAAxDA,EAAIC,QAAW5D,KAAKooH,UAAUotB,kBAAjB,KAC1B15B,EAAO25B,eACD9xI,GAAOA,EAAIC,QAAQ,KAAO,GACrB5D,KAAKmH,QAAQu8D,eACR//D,EAAI+tB,UAAU/tB,EAAIC,QAAQ,KAAO,EAAGD,EAAIC,QAAQ,MAEhE5D,KAAK6jB,aAAa8D,KAAKqwB,IAAW3jD,kBAAmB,CACjDqhJ,iBAAkB55B,EAAO25B,eACzB57D,SAAUpqE,IAGd,MAAMkmI,EAAMlmI,EAAKwH,cAAc,KAE3B0+H,GACAA,EAAIlnD,SAGR,MAAMuc,EAAQ,GAEdt3D,EAAOk/F,YAAYnjI,EAAMu7F,GACzBhrG,KAAK0zI,cAAc/8I,GAAQq0G,EAI3B,MAAM4qC,EAA6B10I,IAC/B,MAAMs4C,EAAW,GACXq8F,EAAW30I,EAAKywG,SAASr8E,KAAKvpC,GAAmB,SAAdA,EAAEoU,SAE3C,GAAI01I,EAAU,CACVr8F,EAASlyC,KAAO,GAChB,IAAK,MAAMlK,IAAO,CAAE,KAAM,OAAQ,UAAY,CAC1C,MAAMwI,EACAiwI,EAASlkC,SAASr8E,KAAKvpC,GAAKA,EAAEoU,UAAY/C,GAE5CwI,IACA4zC,EAASlyC,KAAKlK,GAAOwI,EAAMjZ,QAIvC,MAAMm0D,EAAY5/C,EAAKywG,SAASr8E,KAAKvpC,GAAmB,UAAdA,EAAEoU,SAM5C,OAJI2gD,IACAtH,EAASjkB,MAAQurB,EAAUn0D,OAGxB6sD,GAGX,IAAK,IAAI9tD,EAAI,EAAGA,EAAIs/G,EAAMz0G,OAAQ7K,IAAK,CACnC,MAAMwV,EAAO8pG,EAAMt/G,GAEnB,OAAQwV,EAAKf,SACb,IAAK,MAAO,CACR,MAAM,WAAElD,GAAeiE,EAEvB,IAAKjE,EACD,MAEJ,MAAM,KAAEgK,GAAShK,EAEjB6+G,EAAO4Q,QAAUzlH,EACjB,MAEJ,IAAK,OACD60G,EAAO0Q,KAAOtrH,EAAKvU,MACnB,MACJ,IAAK,SACDmvH,EAAO50G,GAAKhG,EAAKvU,MACjB,MACJ,IAAK,WACDmvH,EAAO2Q,QAAUvrH,EAAKvU,MACtB,MACJ,IAAK,WACDmvH,EAAOtiE,SAAWo8F,EAA2B10I,GAC7C,MACJ,IAAK,WACD46G,EAAOhzG,SAAW9I,KAAK81I,iBAAiB50I,GACxC,MAEJ,IAAK,OAAQ,CACT,MAAM,WAAEjE,GAAeiE,EAEvB,IAAKjE,EACD,MAEJ,MAAM,KAAEhR,GAASgR,EAEJ,YAAThR,IACA6vH,EAAO73C,QAAUhnE,EAAWtQ,OAEhC,QAKR,GAAIgK,IAASqJ,KAAKgqH,UAAW,CACzB,MAAMskB,EACuB,UAAvBxyB,EAAOy5B,YAA0Bz5B,EAAOltC,KAAO,OAQrD,GANI5uE,KAAK4uE,OAAS0/D,IACdtuI,KAAK4uE,KAAO0/D,EACZtuI,KAAK6jB,aAAa8D,KACdqwB,IAAWhlD,mBACXgN,KAAK4uE,QAER5uE,KAAKonH,OAAQ,CACdpnH,KAAKonH,QAAS,EACd,MAAMjzG,EAAMnU,KAAKk1C,gBAAgB,cAC3B5pD,OAAOusD,YAAY1jC,MAEzB4J,EAAOnZ,IAAI,uBAAwBuP,GAG/BnU,KAAK24C,WACL34C,KAAK8zI,QAAS,GAMd9zI,KAAKg0I,oBAAsBh0I,KAAKs0I,kBAChCt0I,KAAK0N,eAGT1N,KAAK6jB,aAAa8D,KAAKqwB,IAAW3kD,aAIjC2M,KAAKmH,QAAQ2tI,kBAAoB90I,KAAKu0I,sBAExC,QAAYh0I,IAARoD,EACPoa,EAAO7Y,KAAK,2CACT,QAA2B3E,IAAvBP,KAAK67G,QAAQllH,GAEpBqJ,KAAK67G,QAAQllH,GAAQmlH,EACrB/9F,EAAOnZ,IAAI,UAAWjO,EAAMmlH,GAC5Bq5B,OAAoC50I,IAAlBu7G,EAAO/rG,OACzBqlI,OAAsC70I,IAAnBu7G,EAAO73C,QACtB63C,EAAOqT,QACPnvH,KAAK+1I,WAAWp/I,EAAMmlH,EAAOhzG,WAK7B9I,KAAK6jB,aAAa8D,KACdqwB,IAAW1kD,kBACXqD,EACAmlH,EAAO0Q,KACP1Q,EAAOltC,KACPktC,EAAO25B,eACP35B,EAAO2Q,QACP3Q,EAAO/rG,OACP+rG,EAAOtiE,SACPsiE,EAAO4Q,QACP5Q,EAAOn4G,IACPm4G,EAAOhzG,SACPgzG,EAAO8Q,sBAIXuoB,GAAkB,OAEnB,CAGH,MAAMa,EAAeh2I,KAAK67G,QAAQllH,GAE9Bq/I,EAAapnE,OAASktC,EAAOltC,OAC7BonE,EAAapnE,KAAOktC,EAAOltC,KAC3B5uE,KAAK6jB,aAAa8D,KACdqwB,IAAWnkD,iBAAkB8C,EAAMmlH,EAAOltC,OAI9ConE,EAAaT,cAAgBz5B,EAAOy5B,cACpCS,EAAaT,YAAcz5B,EAAOy5B,aAIlCS,EAAatpB,UAAY5Q,EAAO4Q,UAChCspB,EAAatpB,QAAU5Q,EAAO4Q,QAC9B1sH,KAAK6jB,aAAa8D,KACdqwB,IAAW7kD,4BACXwD,EACAmlH,EAAO4Q,UAGX5Q,EAAOqT,UAeP6mB,EAAa7mB,SAAU,EACvBnvH,KAAK+1I,WAAWp/I,EAAMmlH,EAAOhzG,WAI7BgzG,EAAOlQ,cACPoqC,EAAapqC,YAAckQ,EAAOlQ,aAIlCoqC,EAAajmI,SAAW+rG,EAAO/rG,SAC/BolI,GAAkB,EAClBa,EAAajmI,OAAS+rG,EAAO/rG,QAG7BimI,EAAa/xE,UAAY63C,EAAO73C,UAChCmxE,GAAmB,EACnBY,EAAa/xE,QAAU63C,EAAO73C,SAG7Bua,IAAQw3D,EAAaltI,SAAUgzG,EAAOhzG,YACvCktI,EAAaltI,SAAWgzG,EAAOhzG,SAC/B9I,KAAK6jB,aAAa8D,KAAKqwB,IAAW7jD,6BAA8BwC,EAAMmlH,EAAOhzG,WAMrF,IAAK,IAAIpd,EAAI,EAAGA,EAAIs/G,EAAMz0G,OAAQ7K,IAAK,CACnC,MAAMwV,EAAO8pG,EAAMt/G,GAEnB,OAAQwV,EAAKf,SACb,IAAK,OACD,IAAK27G,EAAOqT,QAAS,CACjB,MAAMvjB,EACA5rG,KAAK0jB,KAAKvc,QAAQ8uI,YACdx6I,UAAQyI,mBAAmBvN,GAC3BmlH,EAAO0Q,KAEjBxsH,KAAK6jB,aAAa8D,KACdqwB,IAAW1pD,qBACXqI,EACAi1G,GAER,MACJ,IAAK,qBACGkQ,EAAOqT,UAAYnvH,KAAKmzI,oBACxBnzI,KAAKmzI,mBAAoB,EACzBnzI,KAAK6jB,aAAa8D,KAAKqwB,IAAWlmD,cAEtC,MACJ,IAAK,wBACD,GAAIgqH,EAAOqT,QAAS,CAChB,MAAMrjG,EAAa,GAEnB,IAAK,IAAI5yB,EAAI,EAAGA,EAAIgI,EAAKywG,SAASp7G,OAAQ2C,IAAK,CAC3C,MAAM,WAAE+D,GAAeiE,EAAKywG,SAASz4G,GAEjC+D,GAAcA,EAAWhQ,MACzB6+B,EAAW7uB,EAAWhQ,KAAOgQ,EAAWtQ,OAIhDqT,KAAK6jB,aAAa8D,KACdqwB,IAAW7lD,8BAA+B25B,GAE9C9rB,KAAKk2I,4BAA0E,SAA5CpqH,EAAW,6BAC9C/N,EAAO7Y,KAAM,yCAAwClF,KAAK6pF,8BAE9D,MACJ,IAAK,uBAAwB,CACzB,MAAM,WAAE5sF,GAAeiE,EAEvB,IAAKjE,EACD,MAGJ,MAAM,OAAE8S,GAAW9S,EAEf8S,GAAUA,IAAW/P,KAAK08F,sBAC1B18F,KAAK08F,oBAAsB3sF,EAC3B/P,KAAK6jB,aAAa8D,KACdqwB,IAAWrnD,6BACXof,IAKR,MAEJ,IAAK,eAAgB,CACjB,MAAMomI,EAAMj1I,EAAKjE,WAEjB,IAAKk5I,EACD,MAEJn2I,KAAK2zI,YAAcwC,EAAIC,OAAS,KAChCp2I,KAAK4zI,SAAWuC,EAAIE,KAAO,KAC3Br2I,KAAK6jB,aAAa8D,KAAKqwB,IAAWnoD,sBAClC,MAEJ,QACImQ,KAAKs2I,YAAYp1I,EAAMvK,IAK3Bw+I,GACAn1I,KAAK6jB,aAAa8D,KACdqwB,IAAW1jD,gBACXqC,EACAmlH,EAAO/rG,QAGXqlI,GACAr3H,EAAO7Y,KAAM,wBAAuBvB,MAAQm4G,EAAO73C,WAU3D6xE,iBAAiB50I,GACb,MAAM4H,EAAW,IAAIqc,IAErB,IAAK,IAAIjsB,EAAI,EAAGA,EAAIgI,EAAKywG,SAASp7G,OAAQ2C,IAAK,CAC3C,MAAM,WAAE+D,GAAeiE,EAAKywG,SAASz4G,GAEjC+D,GAAcA,EAAWs5I,KACzBztI,EAAS8b,IAAI3nB,EAAWs5I,KAIhC,OAAOztI,EAQXitI,WAAWp/I,EAAMmS,GACb9I,KAAK80G,YAAcn+G,EACnBqJ,KAAKw2I,cAAgB1tI,EAOzB4uH,+BAA+B3xG,GAC3B/lB,KAAK6zI,4BAA8B9tH,EAOvC8jE,6BACI,OAAO7pF,KAAKk2I,4BAQhBI,YAAYp1I,EAAMvK,GAGd,IACI,IAAI8/I,EAAcz2I,KAAKizI,aAAa/xI,EAAKf,SAErCe,EAAKf,QAAQq2B,WAAW,wBACxBigH,EAAc,CAAEz2I,KAAK6zI,8BAGrB4C,GACAA,EAAYrnI,QAAQ7K,IAChBA,EAAQrD,EAAMzF,UAAQyI,mBAAmBvN,GAAOA,KAG1D,MAAO0C,GACLojC,IAAqBkG,iBAAiBtpC,GACtC0kB,EAAO/Y,MAAO,oBAAmB9D,EAAKf,gBAAiB9G,IAS/DiwC,YAAY7kC,EAASukH,GACjB,MAAMlkH,EAAMmY,eAAK,CAAEosB,GAAIrpC,KAAK66C,QACxB5zC,KAAM,cAKU,SAAhB+hH,EACAlkH,EAAI/Y,EAAEi9H,EAAa,GAAIvkH,GAEvBK,EAAI/Y,EAAEi9H,EAAa,CAAE/iH,MAAO,4BAA8BxB,GAG9DzE,KAAKuU,WAAWlH,KAAKvI,GACrB9E,KAAK6jB,aAAa8D,KAAKqwB,IAAW/iD,qBAAsBwP,GAU5DykH,mBAAmBhiH,EAAIzC,EAASukH,GAC5B,MAAMlkH,EAAMmY,eAAK,CAAEosB,GAAK,GAAErpC,KAAK66C,WAAW3zC,IACtCD,KAAM,SAKU,SAAhB+hH,EACAlkH,EAAI/Y,EAAEi9H,EAAavkH,GAAS0B,KAE5BrB,EAAI/Y,EAAEi9H,EAAa,CAAE/iH,MAAO,4BAA8BxB,GACrD0B,KAGTnG,KAAKuU,WAAWlH,KAAKvI,GACrB9E,KAAK6jB,aAAa8D,KACdqwB,IAAW9iD,6BAA8BuP,GAQjD0kH,WAAWC,GACP,MAAMtkH,EAAMmY,eAAK,CAAEosB,GAAIrpC,KAAK66C,QACxB5zC,KAAM,cAEVnC,EAAI/Y,EAAE,UAAWq9H,GACjBppH,KAAKuU,WAAWlH,KAAKvI,GASzB4xI,kBAAkB/yI,EAAKgzI,UACZ32I,KAAK0zI,cAAc/vI,GAEtBgzI,IAIJ32I,KAAK6jB,aAAa8D,KAAKqwB,IAAWzkD,gBAAiBoQ,GAEnD3D,KAAKooH,UAAUwuB,gBAAgBjzI,IAQnCyuI,sBAAsB3iI,EAAM9Y,GAExB,GAAIm4C,EAAEr/B,GAAM6lB,KAAK,8CAA8C/+B,OAC3D,OAAO,EAIX,MAAMsgJ,EAAgB/nG,EAAEr/B,GAAM6lB,KAAK,2DAEnC,GAAIuhH,EAActgJ,OAAQ,CACtB,IAAIiZ,EACJ,MAAMsnI,EACAhoG,EAAEr/B,GAAM6lB,KACN,kEAUR,OAPIwhH,EAAavgJ,SACbiZ,EAASsnI,EAAan1I,QAG1B3B,KAAK6jB,aAAa8D,KAAKqwB,IAAW5kD,cAAeoc,EAAQqnI,EAAct1I,KAAK,QAC5EvB,KAAKuU,WAAW2mC,KAAKw3F,QAAQ1yI,KAAK66C,UAE3B,EAIX,MAAMkzE,EACAj/E,EAAEr/B,GACC6lB,KACG,sEAEH/+B,OACHwgJ,EACAjoG,EAAEr/B,GACC6lB,KACG,sEAEH/+B,OACHygJ,EAAc5qJ,OAAOmZ,KAAKvF,KAAK67G,SAC/B+Q,EAAuB99E,EAAEr/B,GAAM6lB,KAAK,eAAe/+B,OAEzD,GAAIwgJ,EAAQ,CACR,MAAME,EACAnoG,EAAEr/B,GACH6lB,KAAK,8DACV,IAAI4hH,EAMA1nI,EAJAynI,EAAY1gJ,SACZ2gJ,EAAYD,EAAY11I,KAAK,SAIjC,MAAMu1I,EACAhoG,EAAEr/B,GAAM6lB,KACV,+DAGAwhH,EAAavgJ,SACbiZ,EAASsnI,EAAan1I,QAM1B3B,KAAK6jB,aAAa8D,KACdqwB,IAAWnpD,OACXk/H,EACAmpB,EACAz7I,UAAQyI,mBAAmBvN,GAC3B6Y,EACAo9G,GAGJmB,GAIAipB,EAAY5nI,QAAQzL,IAChB,MAAMm4G,EAAS97G,KAAK67G,QAAQl4G,UAErB3D,KAAK67G,QAAQl4G,GACpB3D,KAAK02I,kBAAkB/yI,EAAKm4G,EAAOqT,WAEvCnvH,KAAKuU,WAAW2mC,KAAKw3F,QAAQ1yI,KAAK66C,SAI7Bk8F,GACD/2I,KAAK6jB,aAAa8D,KAAKqwB,IAAWpkD,mBAG/BoM,KAAK67G,QAAQllH,GACpBqJ,KAAK02I,kBAAkB//I,GAAM,IASrC27I,UAAUxtI,EAAKnO,GACX,MAAMsQ,EAAOnC,EAAIlC,aAAa,QAE9B,GAAa,UAATqE,EAAkB,CAClB,MAAM0kE,EAAW78B,EAAEhqC,GAAKwwB,KAAK,eAAe3zB,OAI5C,OAFA3B,KAAK6jB,aAAa8D,KAAKqwB,IAAW9lD,oBAAqBy5E,IAEhD,EAGX,MAAMksD,EAAM/oF,EAAEhqC,GAAKwwB,KAAK,SAAS3zB,OAC3BynH,EAAUt6E,EAAEhqC,GAAKwwB,KAAK,YAE5B,GAAI8zF,EAAQ7yH,OAAQ,CAChB,MAAM4gJ,EAAc/tB,EAAQznH,QAExBw1I,GAA+B,KAAhBA,KACfn3I,KAAK6jB,aAAa8D,KAAKqwB,IAAW5nD,gBAAiB+mJ,GACnDp5H,EAAOnZ,IAAK,yBAAwBuyI,IAK5C,IAAIC,EAAQtoG,EAAEhqC,GAAKwwB,KAAK,UAAU/zB,KAAK,SAEvC,IAAK61I,IAEDA,EAAQtoG,EAAEhqC,GAAKwwB,KAAK,6BAA6B/zB,KAAK,SAElD61I,GAAO,CAEP,MAAMC,EACAD,EAAM9jI,MAAM,2CAElB8jI,EAAS,GAAEC,EAAU,MAAMA,EAAU,MAAMA,EAAU,MAI7D,GAAI1gJ,IAASqJ,KAAK66C,QAAS,CACvB,IAAImyC,EAEJ,GAAIl+C,EAAEhqC,GAAKwwB,KAAK,sEAAsE/+B,OAClFyJ,KAAKu0I,qBACF,IAAKvnD,EAASl+C,EAAEhqC,GAAKwwB,KAAK,4DAClB03D,EAAOz2F,OAAQ,CAC1B,MAAM+gJ,EAAiBxoG,EAAEhqC,GAAKwwB,KAAK,4DACnC,IAAIqjB,EAEA2+F,GAAkBA,EAAe/gJ,SACjCoiD,EAAW2+F,EAAe31I,QAG9B3B,KAAK6jB,aAAa8D,KAAKqwB,IAAW9kD,wBAC9ByD,EAAMq2F,EAAOzrF,KAAK,QAASs2H,EAAKl/E,IAI5C,MAAMoE,EAAcjO,EAAEhqC,GAAKwwB,KAAK,iBAAiB3zB,OAEjD,GAAIo7C,EAAa,CACb,MAAMC,EAAah9C,KAAK0jB,KAAKk5B,sBAAsBG,GAKnD,GAAIC,QAAwBz8C,IAAV62I,EAId,YAHAp3I,KAAK6jB,aAAa8D,KAAKqwB,IAAWtiD,sBAC9BiB,EAAMqmD,GAMd66E,IACa,SAAT5wH,EACAjH,KAAK6jB,aAAa8D,KAAKqwB,IAAWxoD,yBAC1BmH,EAAMkhI,EAAK73H,KAAKgqH,UAAWotB,GACnB,cAATnwI,GACPjH,KAAK6jB,aAAa8D,KAAKqwB,IAAW3oD,iBAC1BsH,EAAMkhI,EAAK73H,KAAKgqH,UAAWotB,IAU/C/E,gBAAgB5iI,EAAM9Y,GAClB,GAAIm4C,EAAEr/B,GACG6lB,KACG,mFAGH/+B,OACLwnB,EAAOnZ,IAAI,uBAAwBjO,GACnCqJ,KAAK6jB,aAAa8D,KAAKqwB,IAAW5jD,wBAC/B,GAAI06C,EAAEr/B,GACJ6lB,KACG,kFAGH/+B,OAAQ,CACIkF,UAAQoI,iBAAiB4L,EAAK7M,aAAa,SAE3C5C,KAAK0jB,KAAKvc,QAAQouC,MAAMiF,gBAKrCx6C,KAAK6jB,aAAa8D,KAAKqwB,IAAWljD,kBAGlCipB,EAAO5Y,KAAK,eAAgBsK,GAC5BzP,KAAK6jB,aAAa8D,KACdqwB,IAAWnjD,sCAEhB,GAAIi6C,EAAEr/B,GAAM6lB,KAAK,8BAA8B/+B,OAClDwnB,EAAO5Y,KAAK,oDACRsK,GACJzP,KAAK6jB,aAAa8D,KAAKqwB,IAAWhjD,2BAC/B,GAAI85C,EAAEr/B,GACR6lB,KACG,0FAEkD/+B,OAAQ,CAG9D,MAAMghJ,EAAgBzoG,EAAEr/B,GAAM6lB,KAAK,cACnC,IAAIkiH,EAEAD,EAAchhJ,SACdihJ,EAAeD,EAAc51I,QAGjC3B,KAAK6jB,aAAa8D,KAAKqwB,IAAWjjD,gCAAiCyiJ,QAEnEz5H,EAAO5Y,KAAK,eAAgBsK,GAC5BzP,KAAK6jB,aAAa8D,KAAKqwB,IAAWpjD,oBAS1Ck3H,eAAenoH,EAAK4xI,GAChB,MAAMkC,EAAU97I,cAAI,CAChB0tC,GAAIrpC,KAAK66C,QACT5zC,KAAM,QAETlb,EAAE,QAAS,CAAEka,MAAO,yCACpBla,EAAE,OAAQ,CACPwpJ,cACA/oB,KAAM/wH,UAAQyI,mBAAmBP,KAEpC5X,EAAE,UAAUa,EAAG,yCAAwC2oJ,OACvDpvI,KAAKA,KAAKA,KAEXnG,KAAKuU,WAAWnG,OACZqpI,EACAhyI,GAAUsY,EAAOnZ,IAAI,4CAA6CjB,EAAK,KAAM4xI,EAAa9vI,GAC1FT,GAAS+Y,EAAOnZ,IAAI,yCAA0CI,IAQtEmnH,KAAKxoH,EAAK6L,EAAS,yBACf,MAAMkoI,EAAS/7I,cAAI,CAAE0tC,GAAIrpC,KAAK66C,QAC1B5zC,KAAM,QACLlb,EAAE,QAAS,CAAEka,MAAO,yCACpBla,EAAE,OAAQ,CAAEygI,KAAM/wH,UAAQyI,mBAAmBP,GAC1CirE,KAAM,SACT7iF,EAAE,UAAUa,EAAE4iB,GAAQrJ,KAAKA,KAAKA,KAErCnG,KAAKuU,WAAWnG,OACZspI,EACAjyI,GAAUsY,EAAOnZ,IAAI,8BAA+BjB,EAAK8B,GACzDT,GAAS+Y,EAAOnZ,IAAI,2BAA4BI,IAYxDomH,SAASn+H,EAAKsmB,EAAWokI,EAASC,GAE9B53I,KAAKuU,WAAWnG,OACZzS,cAAI,CACA0tC,GAAIrpC,KAAK66C,QACT5zC,KAAM,QAELlb,EAAE,QAAS,CAAEka,MAAO,yCACzBk2B,IACI,GAAI2S,EAAE3S,GACG7G,KACG,0EAEH/+B,OAAQ,CACb,MAAMshJ,EACAl8I,cAAI,CACF0tC,GAAIrpC,KAAK66C,QACT5zC,KAAM,QAELlb,EAAE,QAAS,CACRka,MAAO,yCAGnB4xI,EAAW9rJ,EAAE,IAAK,CACdka,MAAO,gBACPgB,KAAM,WAEV4wI,EACK9rJ,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFa,EAAE,6CACFuZ,KACAA,KACL0xI,EACK9rJ,EAAE,QAAS,CAAE,IAAO,8BACpBA,EAAE,SACFa,EAAEK,GACFkZ,KACAA,KACL0xI,EACK9rJ,EAAE,QACE,CAAE,IAAO,yCACbA,EAAE,SACFa,EAAU,OAARK,GAA+B,IAAfA,EAAIsJ,OAAe,IAAM,KAC3C4P,KACAA,KAGDnG,KAAKk1H,oBACL2iB,EACK9rJ,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFa,EAAE,QACFuZ,KACAA,KAKT0xI,EACK9rJ,EAAE,QAAS,CAAE,IAAO,yBACpBA,EAAE,SACFa,EAAE,UACFuZ,KACAA,KAELnG,KAAKuU,WAAWnG,OACZypI,EACA,KAII73I,KAAK24C,SAAW1rD,EAChBsmB,KAEJokI,QAEJC,KAGRD,GAYRG,eAAe3jF,EAAS5gD,EAAWokI,GAC3BxjF,GAAW/nE,OAAOm7B,OAAOvnB,KAAK67G,SAAS7mF,OAAOlpC,IAAMA,EAAEqjI,SAAS54H,QAI/DnK,OAAOm7B,OAAOvnB,KAAK67G,SAASzsG,QAAQtjB,IAC5BA,EAAE6X,MAAQqvI,EAAqBl7G,SAAShsC,EAAEypJ,cAC1Cv1I,KAAK0jB,KAAKnP,WAAWnG,OACjBzS,cAAI,CACA0tC,GAAIrpC,KAAK66C,QACT5zC,KAAM,QACTlb,EAAE,QAAS,CACRka,MAAO,yCACVla,EAAE,OAAQ,CACP,YAAe,SACf,IAAOD,EAAE6X,MACVwC,KAAKA,QAKxB,MAAM64D,EAAgB24E,GAAoB,SAE1C33I,KAAK0jB,KAAKnP,WAAWnG,OACjBzS,cAAI,CACA0tC,GAAIrpC,KAAK66C,QACT5zC,KAAM,QACPlb,EAAE,QAAS,CAAEka,MAAO,yCACvBk2B,IACI,GAAI2S,EAAE3S,GAAK7G,KAAK,2EAA2E/+B,OAAQ,CAC/F,MAAMwhJ,EACAp8I,cAAI,CACF0tC,GAAIrpC,KAAK66C,QACT5zC,KAAM,QACPlb,EAAE,QAAS,CAAEka,MAAO,yCAE3B8xI,EAAahsJ,EAAE,IAAK,CAChBka,MAAO,gBACPgB,KAAM,WAEV8wI,EACKhsJ,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFa,EAAE,6CACFuZ,KACAA,KACL4xI,EACKhsJ,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFa,EAAEunE,EAAU,OAAS,SACrBhuD,KACAA,KAGDnG,KAAK8zI,QACLiE,EACKhsJ,EAAE,QACC,CAAE,IAAO,yCACZA,EAAE,SACFa,EAAE,KACFuZ,KACAA,KAGTnG,KAAK0jB,KAAKnP,WAAWnG,OAAO2pI,EAAcxkI,EAAWyrD,QAErDA,EAAc,IAAI3nE,MAAM,8CAGhC2nE,GAaRg5E,cAAc/qJ,EAAKs6B,GACf,OAAOvnB,KAAK4xG,uBAAuB3kH,EAAKs6B,GAU5CqqF,uBAAuB3kH,EAAKs6B,GACxBA,EAAOpnB,QAAUlT,EAEjB,MAAMgrJ,EAAgBj4I,KAAK+wH,QAAQ/lB,MAAMh2E,OAAO9zB,GAAQjU,IAAQiU,EAAKf,SAGrE,OAA6B,IAAzB83I,EAAc1hJ,SAAgBioF,IAAQy5D,EAAc,GAAI1wH,MAI5DvnB,KAAK0xG,mBAAmBzkH,GACxB+S,KAAK+wH,QAAQ/lB,MAAM9nG,KAAKqkB,GACxBvnB,KAAKg0I,mBAAqB7rI,KAAKgM,OAExB,GASXy2G,gBAAgB39H,GACZ,OAAO+S,KAAK+wH,QAAQ/lB,MAAM11E,KAAKp0B,GAAQjU,IAAQiU,EAAKf,SAOxDuxG,mBAAmBzkH,GACf,MAAM+9G,EAAQhrG,KAAK+wH,QAAQ/lB,MAAMh2E,OAAO9zB,GAAQjU,IAAQiU,EAAKf,SAE7DH,KAAK+wH,QAAQ/lB,MAAQA,EACrBhrG,KAAKg0I,mBAAqB7rI,KAAKgM,MAQnCy0G,oBAAoB38H,EAAMsY,GACtB,GAAuB,mBAAZA,EACP,MAAM,IAAIlN,MAAM,+BAEpB,IAAIo/I,EAAcz2I,KAAKizI,aAAahnJ,GAE/BwqJ,IACDz2I,KAAKizI,aAAahnJ,GAAQwqJ,EAAc,KAEN,IAAlCA,EAAY7yI,QAAQW,GACpBkyI,EAAYvzI,KAAKqB,GAEjBwZ,EAAO5Y,KACF,sDAAqDlZ,GASlE68H,uBAAuB78H,EAAMsY,GACzB,MAAMkyI,EAAcz2I,KAAKizI,aAAahnJ,GAChCisJ,EAAazB,EAAcA,EAAY7yI,QAAQW,IAAY,GAG7C,IAAhB2zI,EACAzB,EAAYxyI,OAAOi0I,EAAY,GAE/Bn6H,EAAO5Y,KAAM,gBAAelZ,wBAYpCkjI,QAAQoC,GACJ,MAAMzV,EAAS97G,KAAK67G,QAAQ0V,GAE5B,OAAIzV,EACOA,EAAOqT,QAGX,KAMXhV,cACI,MAAqB,cAAdn6G,KAAK4uE,KAOhBupE,cAAcjkB,GACV,OAAIl0H,KAAK67G,QAAQqY,GACNl0H,KAAK67G,QAAQqY,GAAStlD,KAG1B,KAQXpmC,aAAaH,EAAM78B,GACfxL,KAAKo4I,sBAAsB/vG,GACvB78B,GACAA,EAAS68B,GASjBH,aAAaG,EAAM78B,GACf,OAAOxL,KAAKq4I,sBAAsBhwG,EAAM78B,GAO5C8sI,uBAAuBjwG,GAInB,QAAIA,IAASroC,KAAK4qH,gBAHQ,gBAOnB5qH,KAAK4xG,uBAPc,aAStB,CACIjlH,MAAO07C,EAAK3xC,aASxB2hJ,sBAAsBhwG,EAAM78B,GAExBxL,KAAKs4I,uBAAuBjwG,IAASroC,KAAK0N,eACtClC,GACAA,IAQR+sI,uBAAuBlwG,GAInB,QAAIA,IAASroC,KAAK4qH,gBAHQ,gBAOnB5qH,KAAK4xG,uBAPc,aAStB,CACIjlH,MAAO07C,EAAK3xC,aAQxB0hJ,sBAAsB/vG,GAClBroC,KAAKu4I,uBAAuBlwG,IAASroC,KAAK0N,eAc9C8qI,qBAAqBzhE,EAAY1mD,GAE7B,MAAM5gB,EAAOzP,KAAK0zI,cAAe,GAAE1zI,KAAK66C,WAAWk8B,KAEnD,IAAKtnE,EAED,OAAO,KAEX,MAAM9V,EAAO,CACT2vB,OAAO,EACPwX,eAAWvgC,GAEf,IAAIk4I,EAAY,KAEhB,GAAIpoH,IAAcmX,IACdixG,EAAY1F,EAA2BtjI,EAAM,kBAC1C,IAAI4gB,IAAcmX,IAcrB,OAFAzpB,EAAO/Y,MAAO,2BAA0BqrB,GAEjC,KAd+B,CACtCooH,EAAY1F,EAA2BtjI,EAAM,cAC7C,MAAMipI,EAAgB3F,EAA2BtjI,EAAM,+BACjDkpI,EAAgB5F,EAA2BtjI,EAAM,aAEnDkpI,EAAcpiJ,OAAS,IACvBoD,EAAKmnC,UAAY63G,EAAc,GAAGhsJ,OAElC+rJ,EAAcniJ,OAAS,IACvBoD,EAAKi/I,UAAYF,EAAc,GAAG/rJ,QAY1C,OAJI8rJ,EAAUliJ,OAAS,IACnBoD,EAAK2vB,MAA+B,SAAvBmvH,EAAU,GAAG9rJ,OAGvBgN,EAMXu2H,wBACI,QAAIlwH,KAAKooH,WACEpoH,KAAKooH,UAAUywB,sBAU9Bt9F,KAAKzN,GACD,OAAO9tC,KAAKuU,WAAWijC,KAAK+D,KAAKzN,EAAQ,aACrCryC,UAAQsI,kBAAkB/D,KAAKgqH,WAAYhqH,KAAK24C,SAChD34C,KAAK80G,aAMbqb,SACI,OAAOnwH,KAAKuU,WAAWijC,KAAK24E,SAOhC8E,WACI,OAAOj1H,KAAKqzI,MAMhBxd,kBACI,OAAO71H,KAAKuzI,aAOhBjjB,iBACI,OAAOtwH,KAAK2zI,YAMhBpjB,cACI,OAAOvwH,KAAK4zI,SAQhBnjB,eACI,OAAOzwH,KAAK40H,UAShB7K,gBAAgBpmH,EAAK0kC,EAAMhY,GACvBtS,EAAO7Y,KAAK,WAAYmjC,GACxB,MAAMywG,EAAYn9I,cACd,CAAE0tC,GAAIrpC,KAAK80G,YACP7tG,KAAM,QACTlb,EAAE,OAAQ,CACPka,MAAQ,4BAA2BoqB,EACnC1sB,QAEH/W,EAAEy7C,EAAK3xC,YACPyP,KAELnG,KAAKuU,WAAWnG,OACZ0qI,EACArzI,GAAUsY,EAAOnZ,IAAI,WAAYa,GACjCT,GAAS+Y,EAAOnZ,IAAI,iBAAkBI,IAO9CutI,OAAOt/H,GAGH,GAFaA,EAAGrQ,aAAa,UAEhB5C,KAAK80G,YAGd,YAFA/2F,EAAO5Y,KAAK,oCAIhB,MAAMkjC,EAAOyG,EAAE77B,GAAIqiB,KAAK,QAEpB+S,EAAK9xC,QAA0B,SAAhB8xC,EAAK1mC,OACpB3B,KAAK6jB,aAAa8D,KAAKqwB,IAAWrmD,qBAAsB02C,EAAK9mC,KAAK,UAKlEwc,EAAO5Y,KAAK,sFASpBqtI,YAAYv/H,GAGR,GAFaA,EAAGrQ,aAAa,UAEhB5C,KAAK80G,YAGd,YAFA/2F,EAAO5Y,KAAK,oCAIhB,MAAMkjC,EAAOyG,EAAE77B,GAAIqiB,KAAK,QAEpB+S,EAAK9xC,QAA0B,SAAhB8xC,EAAK1mC,OACpB3B,KAAK6jB,aAAa8D,KAAKqwB,IAAWpmD,qBAAsBy2C,EAAK9mC,KAAK,UAKlEwc,EAAO5Y,KAAK,sFAQpB4zI,QACI/4I,KAAKkzI,qBAAqB9jI,QAAQq/E,GAAUA,KAC5CzuF,KAAKkzI,qBAAuB,GAE5BlzI,KAAKonH,QAAS,EASlBI,QACI,OAAO,IAAI1pF,QAAQ,CAACC,EAASC,KACzB,MAAMpwB,EAAUrD,WAAW,IAAMyuI,GAAU,GAAO,KAC5Cn1H,EAAe7jB,KAAK6jB,aAQ1B,SAASm1H,EAAUC,GAAW,GAC1Bp1H,EAAasC,eAAe6xB,IAAWpkD,SAAUolJ,GACjDvrI,aAAaG,GACTqrI,EAEAj7G,EAAO,IAAI3mC,MAAM,qEAGjB0mC,IAdR/9B,KAAK+4I,QAiBLl1H,EAAamC,GAAGgyB,IAAWpkD,SAAUolJ,GACrCh5I,KAAK0yI,gB,+EC9yDjB,uFAMA,MAAM30H,EAASF,oBAAU6E,GAKV,MAAM8wH,EAOjBv9I,YAAY0mD,GACR38C,KAAKk5I,MAAQv8F,EAAKj5B,KAElB1jB,KAAKm5I,UAAYx8F,EAEjB38C,KAAKo5I,0BAA4B,CAC7B,CAAC5xG,MAAkB,EACnB,CAACA,MAAkB,GAGvBxnC,KAAKq5I,gBAAkB,GACvBr5I,KAAKs5I,gBAAkB,GAEvBt5I,KAAKk5I,MAAM90G,YAAY4T,IAAW1iD,uBAAwB0K,KAAKuc,WAAWrvB,KAAK8S,OAQnFu+B,cACI,OAAOxE,QAAQ/5B,KAAKk5I,MAAMz/F,8BAM9BpX,OAAOiP,EAAOjhB,GACV,IAAKrwB,KAAKu+B,gBAAkBv+B,KAAKm5I,UAAUh/B,cAIvC,YAHAp8F,EAAO/Y,MAAO,iBAAgBssC,6BAAiCtxC,KAAKu+B,8CACpDv+B,KAAKm5I,UAAUh/B,iBAKnC,GAAI7oE,IAAUtxC,KAAKo5I,0BAA0B/oH,GAGzC,YAFAtS,EAAO5Y,KAAM,+BAA8BmsC,mBAAuBjhB,KAMtE,MAAMvrB,EAAMmY,eAAK,CAAEosB,GAAIrpC,KAAKk5I,MAAMz/F,+BAElC30C,EAAI/Y,EAAE,gBAAiB,CACnBs2C,OAAQiP,EACRjhB,cACDlqB,KAEHnG,KAAKk5I,MAAM3kI,WAAWlH,KAAKvI,GAM/BmxH,QAAQ5lG,EAAW1sB,GACf,IAAK3D,KAAKu+B,gBAAkBv+B,KAAKm5I,UAAUh/B,cAIvC,YAHAp8F,EAAO/Y,MAAO,6CAA4ChF,KAAKu+B,8CAC/Cv+B,KAAKm5I,UAAUh/B,iBAMnC,MAAMr1G,EAAMmY,eAAK,CAAEosB,GAAIrpC,KAAKk5I,MAAMz/F,+BAElC30C,EAAI/Y,EAAE,gBAAiB,CACnBskC,YACAkpH,eAAgB51I,IAAOwC,KAE3BnG,KAAKk5I,MAAM3kI,WAAWlH,KAAKvI,GAQ/ByX,WAAWxmB,GACP,MAAMyjJ,EAAgBzjJ,EAAI0jJ,WAE1B,GAAID,EAAe,CACf,MAAME,EAAwB,CAACrpH,EAAWspH,EAAS3oI,KAC/CA,EAAQgkB,OAAOh+B,IAAM2iJ,EAAQ7hH,SAAS9gC,IACjCoY,QAAQzL,GAAO3D,KAAKk5I,MAAMr1H,aACtB8D,KAAKqwB,IAAW1mD,mCAAoC++B,EAAW1sB,KAGxE61I,EAAchyG,MACdkyG,EAAsBlyG,IAAiBxnC,KAAKq5I,gBAAiBG,EAAchyG,MAG3EgyG,EAAchyG,MACdkyG,EAAsBlyG,IAAiBxnC,KAAKs5I,gBAAiBE,EAAchyG,gBAExDjnC,IAAhBxK,EAAIo+D,SAAyBn0D,KAAKo5I,0BAA0BrjJ,EAAIs6B,aAAet6B,EAAIo+D,SAC1Fn0D,KAAKo5I,0BAA0BrjJ,EAAIs6B,WAAat6B,EAAIo+D,QAEpDn0D,KAAKk5I,MAAMr1H,aAAa8D,KAAKqwB,IAAW3mD,sBAAuB0E,EAAIo+D,QAASp+D,EAAIs6B,UAAWt6B,EAAI0hI,QACxF1hI,EAAI6jJ,UACX55I,KAAKk5I,MAAMr1H,aAAa8D,KAAKqwB,IAAW5mD,uBAAwB2E,EAAIs6B,e,6ECvHhF,gFAKA,MAAMtS,EAASF,oBAAU6E,GAaV,MAAM4wH,EAOjBr9I,YAAY0mD,GACR38C,KAAK0jB,KAAOi5B,EAAKj5B,KACjB1jB,KAAK65I,SAAWl9F,EAEhB,MAAMm9F,EAAqB95I,KAAK+5I,oBAAoB7sJ,KAAK8S,MAEzDA,KAAK65I,SAASr8G,iBACVwa,IAAWhlD,mBACX8mJ,GAEJ95I,KAAK65I,SAASr8G,iBACVwa,IAAWjkD,yBACX+lJ,GAEJ95I,KAAK65I,SAASr8G,iBACVwa,IAAWjjD,gCACX4O,IACI3D,KAAKw3I,aAAe7zI,IAShC46B,cACI,OAAOv+B,KAAK0jB,KAAKk2B,eAQrBvX,SACI,OAAKriC,KAAKu+B,cAIH,IAAIT,QAAQ,CAACC,EAASC,KACzBh+B,KAAK65I,SAAS/B,gBAAe,EAAM/5G,EAASC,KAJrCF,QAAQE,OAAO,IAAI3mC,MAAM,yBAaxCg+H,UACSr1H,KAAKu+B,eAAkBv+B,KAAK65I,SAAS1/B,eAC9Bn6G,KAAKg6I,WAAch6I,KAAK65I,SAAS3kB,oBAI7Cl1H,KAAK65I,SAAS/B,gBAAe,GAOjCmC,kBACQj6I,KAAKg6I,WACLh6I,KAAKg6I,UAAUxyB,QACV9pF,KAAK,KACF19B,KAAKg6I,eAAYz5I,EACjBwd,EAAO7Y,KAAK,sBAEfq3B,MAAM,QASnBs4G,gBAAgBlxI,GACZ3D,KAAKw3I,aAAe7zI,EAOxBo2I,sBACI,IAAK/5I,KAAKu+B,cACN,OAGgBv+B,KAAK65I,SAASzyB,QAAUpnH,KAAK65I,SAAS1/B,eAEvCn6G,KAAK65I,SAAS3kB,qBAAuBl1H,KAAKg6I,WAEzDh6I,KAAKmD,OACAu6B,KAAK,IAAM3f,EAAO7Y,KAAK,sBACvBq3B,MAAMljC,GAAK0kB,EAAO/Y,MAAM,uBAAwB3L,IAW7D8J,KAAKyoG,EAAa2pB,GACd,MAAMpb,EAAcn6G,KAAK65I,SAASzyB,QAAUpnH,KAAK65I,SAAS1/B,cAE1D,IAAKn6G,KAAKw3I,aACN,OAAO15G,QAAQE,OAAO,IAAI3mC,MAAM,kDAGpC,MAAM29C,EAAWv5C,UAAQiI,eAAe1D,KAAKw3I,cACvC18F,EAAer/C,UAAQoI,iBAAiB7D,KAAKw3I,cAkHnD,OAhHAx3I,KAAKg6I,UAAYh6I,KAAK0jB,KAAKi3B,WACvB3F,EAAU,CACN8F,eACAg6F,kBAAkB,EAClBb,cAAc,EACd9e,aAAa,IAIjBvpB,GAEA5rG,KAAKg6I,UAAUpoC,uBAAuB,OAAQ,CAC1C30G,WAAY,CAAEgJ,MAAO,mCACrBtZ,MAAOi/G,IAIXuO,GACAn6G,KAAKg6I,UAAUpxB,oBAtJL,QAsJwC,CAAC1nH,EAAMvK,KACrDqJ,KAAK65I,SAASh2H,aAAa8D,KAAKqwB,IAAWvkD,yBAA0BkD,EAAM,CAAE4+H,MAAOr0H,EAAKvU,UAE7FqT,KAAKg6I,UAAUx8G,iBACXwa,IAAW1kD,kBAEX,CAACqD,EAAM61H,EAAM59C,EAAM6mE,EAAgBhpB,EAAS18G,EAAQypC,EAAUkzE,EAAS/oH,KAE/DvX,OAAOm7B,OAAOvnB,KAAK65I,SAASh+B,SAASvmF,KAAKxpC,GAAKA,EAAE6X,MAAQA,IAM7D3D,KAAK65I,SAASh2H,aAAa8D,KACvBqwB,IAAWxkD,wBACXiI,UAAQyI,mBAAmBvN,GAC3B61H,EACAhzE,EAAWA,EAAS0gG,YAAS35I,KAGzCP,KAAKg6I,UAAUx8G,iBACXwa,IAAWzkD,gBAAiBoD,IAGxBqJ,KAAK65I,SAASh2H,aAAa8D,KACvBqwB,IAAWtkD,sBACX+H,UAAQyI,mBAAmBvN,MAGvCqJ,KAAKg6I,UAAUx8G,iBACXwa,IAAW5kD,cACX,KAEIhH,OAAOmZ,KAAKvF,KAAKg6I,UAAUn+B,SACtBzsG,QAAQlW,GAAK8G,KAAK65I,SAASh2H,aAAa8D,KACrCqwB,IAAWtkD,sBAAuB+H,UAAQyI,mBAAmBhL,KAErE8G,KAAKg6I,UAAUjB,QAEf/4I,KAAKg6I,eAAYz5I,EACjBwd,EAAO7Y,KAAK,mCAIpBlF,KAAKg6I,UAAUx8G,iBAAiBwa,IAAWnpD,OAAQk/H,IAC/C,GAAIA,EAKA,OAJA/tH,KAAK65I,SAASh2H,aAAa8D,KAAKqwB,IAAWrkD,wBAE3CqM,KAAKg6I,UAAUjB,UASvB/4I,KAAK65I,SAASr8G,iBACVwa,IAAW9kD,wBACX,CAACw2B,EAAS/yB,EAAMkhI,EAAKsiB,KACjBp8H,EAAO9Y,MAAO,6BAA4BykB,KAAW/yB,KAAQkhI,KACzDnuG,IAAY1pB,KAAK65I,SAASh/F,UAE1B76C,KAAK65I,SAAS12I,KAAKg3I,GAEnBn6I,KAAKi6I,qBAGjBj6I,KAAKg6I,UAAUx8G,iBACXwa,IAAW5kD,cACX,CAACoc,EAAQ7L,KAGDA,EACA3D,KAAK65I,SAAS12I,QAKlBnD,KAAKg6I,UAAUjB,QAEf/4I,KAAK65I,SAASh2H,aAAa8D,KAAKqwB,IAAW5kD,cAAeoc,MAKlExP,KAAK65I,SAASr8G,iBACVwa,IAAW3kD,WACX,KACI2M,KAAKi6I,qBAIV,IAAIn8G,QAAQ,CAACC,EAASC,KACzBh+B,KAAKg6I,UAAUx8G,iBAAiBwa,IAAW3kD,WAAY,KACnD0qC,IAGIw3F,IAAUpb,GACVn6G,KAAKg6I,UAAUpoC,uBA1Pb,QA0PmD,CAAEjlH,MAAO4oI,KACvDv1H,KAAKg6I,UAAUtsI,iBAG9B1N,KAAKg6I,UAAUx8G,iBAAiBwa,IAAWljD,gBAAiBkpC,GAC5Dh+B,KAAKg6I,UAAUx8G,iBAAiBwa,IAAWnjD,+BAAgCmpC,GAC3Eh+B,KAAKg6I,UAAUx8G,iBAAiBwa,IAAWpjD,mBAAoBopC,GAE/Dh+B,KAAKg6I,UAAU72I,SASvBsyH,WAAWvuH,GACP,IAAKlH,KAAKu+B,gBAAkBv+B,KAAK65I,SAAS1/B,cACtC,OAGJ,MAAMx2G,EAAMvX,OAAOmZ,KAAKvF,KAAKg6I,UAAUn+B,SAClCvmF,KAAKp8B,GAAKuC,UAAQyI,mBAAmBhL,KAAOgO,GAE7CvD,EACA3D,KAAKg6I,UAAU7tB,KAAKxoH,GAEpBoa,EAAO/Y,MAAO,wBAAuBkC,oBAQ7CyuH,cAAczuH,GACV,IAAKlH,KAAKu+B,gBAAkBv+B,KAAK65I,SAAS1/B,cACtC,OAGJ,MAAMigC,EAAgBhuJ,OAAOmZ,KAAKvF,KAAKg6I,UAAUn+B,SAC5CvmF,KAAKp8B,GAAKuC,UAAQyI,mBAAmBhL,KAAOgO,GAEjD,GAAIkzI,EAAe,CACf,MAAMz2I,EAAM3D,KAAKg6I,UAAUn+B,QAAQu+B,GAAez2I,IAC5C02I,EACAp9H,eAAK,CAAEosB,GAAIrpC,KAAK65I,SAASh/F,UACtB9uD,EAAE,IAAK,CAAEka,MAAO,wCAChBla,EAAE,SAAU,CAAEs9C,GAAI1lC,IAE3B3D,KAAK0jB,KAAKnP,WAAWnG,OAAOisI,EACxB,OACAhhJ,IACI0kB,EAAO/Y,MAAO,4BAA2BrB,EAAOtK,UAGxD0kB,EAAO/Y,MAAO,wBAAuBo1I,wB,sEC/TjD,0EAOA,MAAMxiB,EACAn1G,EAAQ,IACRu1B,EAAav1B,EAAQ,GACrBga,EAAuBha,EAAQ,IAE/B1E,EAASF,oBAAU6E,GAMzB,SAAS43H,EAAsBC,GAC3B,IAAItpG,EAAQ,EAEZ,OAAO,SAAS5oC,GAEZ,GAAIA,EAGA,YAFA4oC,EAAQ,GAMZ,MAAMrjC,EAAUxC,KAAKsP,IAAI,EAAGu2B,EAAQ,GAIpC,OAFAA,GAAS,EAEFrjC,EAAU2sI,GAaV,SAASnH,EAAUp+F,EAAUtxB,EAAMstB,EAAS7pC,GAuBvD,SAAS4e,EAAS8F,GACd,GAAIA,EAAMlyB,MAAQkyB,EAAMlyB,KAAKi1C,UAAW,CACpC,GAAI/iB,EAAM2uH,SAAWlvJ,OAAOyvB,SAASy/H,OAKjC,YAJAz8H,EAAO5Y,KACF,6CACG0mB,EAAM2uH,QAIlBl9C,IAAS1uD,UAAY/iB,EAAMlyB,KAAKi1C,WA/BxC5uC,KAAKg1C,SAAWA,EAChBh1C,KAAKy6I,YAAc/2H,EACnB1jB,KAAK06I,eAAiBJ,EAAsB,KAC5Ct6I,KAAK26I,oBAAsBL,EAAsB,KAGjDt6I,KAAK46I,qBAAsB,EAC3B56I,KAAKmH,QAAUA,EAIfnH,KAAK66I,mBAAoB,EAEzB76I,KAAK6jB,aAAemtB,EAEpBhxC,KAAKuU,WAAavU,KAAKy6I,YAAYlmI,WAuB/BjpB,OAAOkyC,iBACPlyC,OAAOkyC,iBAAiB,UAAWzX,GAAU,GAE7Cz6B,OAAOwvJ,YAAY,YAAa/0H,GAMxCqtH,EAAU9lJ,UAAU66H,sBAAwB,WACxC,OAAOnoH,KAAK46I,qBAGhBxH,EAAU9lJ,UAAUurJ,oBAAsB,WACtC,OAAO74I,KAAK66I,mBAGhBzH,EAAU9lJ,UAAUspJ,gBAAkB,SAASjzI,GAC3Coa,EAAO7Y,KAAM,8BAA6BvB,GAGzB,UAFAlI,UAAQyI,mBAAmBP,KAGxCoa,EAAO7Y,KACH,gDACJlF,KAAK6jB,aAAa8D,KAAKqwB,EAAWplD,cAI1CwgJ,EAAU9lJ,UAAUytJ,gBAAkB,SAASC,GACtCh7I,KAAKi7I,eACNj7I,KAAKi7I,aAAeD,EACpBj9H,EAAO7Y,KAAM,sBAAqBlF,KAAKi7I,gBAI/C7H,EAAU9lJ,UAAUkoJ,gBAAkB,WAClC,OAAOx1I,KAAKi7I,cAGhB7H,EAAU9lJ,UAAU4tJ,kBAAoB,WAEpC,IAAIC,EAAiBn7I,KAAKmH,QAAQoN,WAAWghC,MAAMue,MAQnD,OAJKqnF,IACDA,EAAkB,SAAQn7I,KAAKmH,QAAQoN,WAAWghC,MAAMz6C,QAGrDqgJ,GAGX/H,EAAU9lJ,UAAU8tJ,mBAAqB,WAErC,MAAM17I,EAAO/D,cAAI,CAAE0tC,GAAIrpC,KAAKk7I,oBACxBj0I,KAAM,SAGJ,UAAE2nC,GAAc0uD,IAChB+9C,EAAa/9C,IAASg+C,UACtBzjH,EAAS73B,KAAKmH,QAAQyf,WA0D5B,OAxDA7I,EAAO7Y,KAAM,eAAc0pC,kBAA0BysG,KAErD37I,EAAK3T,EAAE,aAAc,CACjBka,MAAO,kCACP02C,KAAM38C,KAAKg1C,SACX,cAAeqmG,IAGfzsG,GACAlvC,EAAKlE,MAAM,CAAE,aAAcozC,IAG/BlvC,EAAK3T,EACD,WAAY,CACRE,KAAM,aACNU,MAAOotC,QAAQlC,EAAOof,cACvB9wC,UAEyB5F,IAA5Bs3B,EAAO0jH,kBACP77I,EAAK3T,EACD,WAAY,CACRE,KAAM,mBACNU,MAAOkrC,EAAO0jH,mBACfp1I,KAEP0xB,EAAO2jH,cACP97I,EAAK3T,EACD,WAAY,CACRE,KAAM,eACNU,MAAOkrC,EAAO2jH,eACfr1I,KAEP0xB,EAAO4jH,YACP/7I,EAAK3T,EACD,WAAY,CACRE,KAAM,aACNU,MAAOkrC,EAAO4jH,aACft1I,UAGqC5F,IAA5CP,KAAKmH,QAAQyf,WAAWq7F,iBACxBviH,EAAK3T,EACD,WAAY,CACRE,KAAM,kBACNU,MAAOqT,KAAKmH,QAAQyf,WAAWq7F,kBAChC97G,UAEqC5F,IAA5CP,KAAKmH,QAAQyf,WAAWs7F,iBACxBxiH,EAAK3T,EACD,WAAY,CACRE,KAAM,kBACNU,MAAOqT,KAAKmH,QAAQyf,WAAWs7F,kBAChC/7G,KAEXzG,EAAKyG,KAEEzG,GAIX0zI,EAAU9lJ,UAAUouJ,eAAiB,SAASC,GAE1C,MAAM/sG,EAAYE,EAAE6sG,GAAUrmH,KAAK,cAAc/zB,KAAK,cAElDqtC,IACA7wB,EAAO7Y,KAAM,wBAAuB0pC,GACpC0uD,IAAS1uD,UAAYA,IAI7BwkG,EAAU9lJ,UAAUsuJ,mBAAqB,SAASD,GAE9C37I,KAAK+6I,gBAAgBjsG,EAAE6sG,GAAUrmH,KAAK,cAAc/zB,KAAK,aAEzD,MAAMs6I,EACA/sG,EAAE6sG,GAAUrmH,KACV,6DAC+C/+B,OAAS,EAEhEwnB,EAAO7Y,KAAM,2BAA0B22I,GAEvC77I,KAAK46I,oBAAsB9rG,EAAE6sG,GAAUrmH,KACnC,2DACiD/+B,OAAS,EAE9DwnB,EAAO7Y,KACF,oCAAmClF,KAAK46I,qBAExC56I,KAAK46I,qBAEN56I,KAAK07I,eAAeC,GAIxB,MAAM1zB,EAAen5E,EAAE6sG,GAAUrmH,KAAK,eAAe/zB,KAAK,YAE1DvB,KAAK6jB,aAAa8D,KAAKiwG,EAAqBppB,iBACxCqtC,EAAuB5zB,GAGvBn5E,EAAE6sG,GAAUrmH,KACZ,gEACkD/+B,SAClDyJ,KAAK66I,mBAAoB,GAG7B98H,EAAO7Y,KAAM,yBAAwBlF,KAAK66I,oBAa9CzH,EAAU9lJ,UAAU4mJ,wBAA0B,WAC1C,OAAO,IAAIp2G,QAAQC,IAEf/9B,KAAK+6I,gBAAgB/6I,KAAKmH,QAAQoN,WAAW0mI,cAG7Cj7I,KAAKuU,WAAWnG,OACZpO,KAAKo7I,qBACL31I,GAAUzF,KAAK87I,gCAAgCr2I,EAAQs4B,GACvD/4B,GAAShF,KAAK+7I,8BAA8B/2I,EAAO+4B,IAMvD/9B,KAAKuU,WAAW/G,WAaxB4lI,EAAU9lJ,UAAUyuJ,8BAAgC,SAAS/2I,EAAOwG,GAGhE,MAAMwwI,EACAltG,EAAE9pC,GAAOswB,KAAK,0BAA0B/+B,QACnCu4C,EAAE9pC,GAAOswB,KAAK,yBAAyB/+B,OAMlD,GAJIylJ,IACAj+H,EAAO7Y,KAAK,+BACZo4F,IAAS1uD,eAAYruC,GAErBuuC,EAAE9pC,GAAOswB,KAAK,4BAA4B/+B,OAG1C,YAFAyJ,KAAK6jB,aAAa8D,KAAKqwB,EAAWnlD,mBAMtC,MAAMopJ,EAAiBntG,EAAE9pC,GAAOswB,KAAK,4BAErC,GAAI2mH,EAAe1lJ,OAAQ,CAEvB,MAAM2lJ,EAAYD,EAAe16I,KAAK,cAChC46I,EAAgBrtG,EAAE9pC,GAAOswB,KAAK,eACpC,IAAIq2C,EAUJ,OARIwwE,IACAxwE,EAAWwwE,EAAcx6I,aAE7B3B,KAAK6jB,aAAa8D,KACdqwB,EAAWrjD,kBACXunJ,EACAvwE,GAMR,GAAI78B,EAAE9pC,GAAOswB,KAAK,yBAAyB/+B,OAAQ,CAC/CwnB,EAAO5Y,KAAK,uCAAwCH,GAUpD,OATiBvJ,UAAQoI,iBAAiBmB,EAAMpC,aAAa,SAE5C5C,KAAKmH,QAAQoN,WAAWghC,MAAMiF,kBAG3Cx6C,KAAK46I,qBAAsB,QAE/B56I,KAAK6jB,aAAa8D,KAAKqwB,EAAWnmD,yBAItC,MAAMuqJ,EAASp8I,KAAK26I,sBACdjiG,EAAU,4BAA2B0jG,EAE3C3/G,EAAqBkG,iBAAiB,IAAItrC,MAAMqhD,IAChD36B,EAAO/Y,MAAM0zC,EAAQ1zC,GAGrB,MAAMm2I,EAAiBn7I,KAAKk7I,oBACtBmB,EAAWD,EAAS,IAKrBJ,GACDh8I,KAAK6jB,aAAa8D,KACdqwB,EAAWrlD,mBACXwoJ,EACAkB,GAIRr8I,KAAK06I,gBAAe,GACpBpvJ,OAAOif,WACH,IAAMvK,KAAKk0I,0BAA0Bx2G,KAAKlyB,GAC1C4wI,IAYRhJ,EAAU9lJ,UAAUwuJ,gCAAkC,SAC9Cr2I,EACA+F,GAQJ,GANAxL,KAAK47I,mBAAmBn2I,GAGxBzF,KAAK26I,qBAAoB,GAG0B,SAA/C7rG,EAAErpC,GAAQ6vB,KAAK,cAAc/zB,KAAK,SAElCvB,KAAK06I,gBAAe,GAGpBlvI,QACG,CACH,MAAM4wI,EAASp8I,KAAK06I,iBAEpB38H,EAAO7Y,KAAM,4BAA2Bk3I,GACxC9wJ,OAAOif,WACH,IAAMvK,KAAKk0I,0BAA0Bx2G,KAAKlyB,GAC1C4wI,KAIZhJ,EAAU9lJ,UAAUmkB,aAAe,WAC/B,OAAO,IAAIqsB,QAAQ,CAACC,EAASC,KACzBh+B,KAAKuU,WAAWnG,OACZpO,KAAKo7I,qBACL31I,IACIzF,KAAK07I,eAAej2I,GACpBs4B,KAEJm3E,GAAWl3E,EAAO,CACdh5B,MAAO8pC,EAAEomE,GAAS5/E,KAAK,mBAClBmjC,KAAK,WACVh0D,QAASqqC,EAAEomE,GAAS5/E,KAAK,iBACpB3zB,aAMrByxI,EAAU9lJ,UAAUk7H,YAAc,SAAS8zB,EAAaC,GACpDv8I,KAAKw8I,cAAyB,EAAOF,EAAaC,IAUtDnJ,EAAU9lJ,UAAUkvJ,aAAe,SAASC,EAAOC,EAAO3nD,GACtD,MAAM9hF,EAAKtX,cAAI,CAAE0tC,GAAIrpC,KAAKk7I,oBACtBj0I,KAAM,QACJzL,EAAQ,CACVyK,MAAO,kCACP02C,KAAM38C,KAAKg1C,SACX,cAAesoD,IAASg+C,WAE5B,IAAIlkJ,EAAM,WAeV,SAASulE,EAAYjkB,EAAQvoC,GACzBssB,EAAqBkG,iBAAiB,IAAItrC,MAAMqhD,IAChD36B,EAAO/Y,MAAM0zC,EAAQvoC,GACrB4kF,EAAU5kF,GAhBVssI,IACAjhJ,EAAMihJ,OAAQ,EACdrlJ,EAAO,SAAQA,GAEnB6b,EAAGlnB,EAAE,YAAayP,GAclBwE,KAAKuU,WAAWnG,OACZ6E,EACAxN,IAEI,IAAIw8D,EAAMnzB,EAAErpC,GAAQ6vB,KAAK,aAAa/zB,KAAK,OAE3C0gE,EAAM06E,mBAAmB16E,GACrBA,GACAlkD,EAAO7Y,KAAM,OAAM9N,MAAQ6qE,KAC3By6E,EAAMz6E,IAENtF,EAAa,iBAAgBvlE,mBAAsBqO,IAG3Dk3D,EAAYzvE,UAAKqT,EAAY,OAAMnJ,aAI3Cg8I,EAAU9lJ,UAAUi7H,iBAAmB,SAAS+zB,EAAaC,GACzDv8I,KAAKw8I,cAAyB,EAAMF,EAAaC,IAGrDnJ,EAAU9lJ,UAAUsvJ,OAAS,SAASpxI,GAClC,MAAMyH,EAAKtX,cAAI,CAAE0tC,GAAIrpC,KAAKk7I,oBACtBj0I,KAAM,SACJ,UAAE2nC,GAAc0uD,IAEjB1uD,GAKL37B,EAAGlnB,EAAE,SAAU,CACXka,MAAO,kCACP,aAAc2oC,IAElB5uC,KAAKuU,WAAWnG,OACZ6E,EACAxN,IAEI,IAAIo3I,EAAY/tG,EAAErpC,GAAQ6vB,KAAK,UAAU/zB,KAAK,cAE1Cs7I,IACAA,EAAYF,mBAAmBE,IAEnC9+H,EAAO7Y,KAAM,oBAAmB23I,EAAap3I,GAC7C63F,IAAS1uD,eAAYruC,EACrBiL,EAASqxI,IAEb73I,IAGIy3B,EAAqBkG,iBAAiB,IAAItrC,MAF3B,iBAGf0mB,EAAO/Y,MAHQ,eAGMA,MAzBzBwG,O,kEC7eR,MAAMmqB,EAAalT,EAAQ,IASrBnd,EAAQ,CACV,UAAW,QAAS,UAAW,QAAS,QAAS,WAAY,OAC7D,SAAU,QAAS,WAAY,MAAO,OAAQ,WAAY,UAC1D,UAAW,WAAY,QAAS,UAAW,MAAO,OAAQ,YAC1D,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QACpE,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,QAC5D,SAAU,SAAU,WAAY,SAAU,SAAU,SAAU,UAC9D,WAAY,SAAU,SAAU,WAAY,QAAS,QAAS,QAC9D,UAAW,WAAY,QAAS,QAAS,OAAQ,QAAS,QAAS,SACnE,QAAS,SAAU,QAAS,KAAM,SAAU,OAAQ,QAAS,SAC7D,SAAU,SAAU,OAAQ,SAAU,UAAW,WAAY,UAC7D,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,YACrD,aAAc,OAAQ,QAAS,QAAS,aAAc,aACtD,UAAW,SAAU,OAAQ,QAAS,YAAa,YAAa,YAChE,aAAc,aAAc,cAAe,YAAa,UACxD,WAAY,SAAU,SAAU,SAAU,aAAc,MAAO,UAC/D,UAAW,SAAU,SAAU,UAAW,UAAW,MAAO,OAAQ,QACpE,SAAU,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACpE,QAAS,QAAS,QAAS,SAAU,QAAS,UAAW,OAAQ,WACjE,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SAClE,QAAS,QAAS,SAAU,QAAS,SAAU,SAAU,UACzD,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,UACjE,SAAU,SAAU,QAAS,UAAW,UAAW,OAAQ,QAAS,OACpE,QAAS,QAAS,OAAQ,SAAU,MAAO,OAAQ,MAAO,SAC1D,WAAY,QAAS,QAAS,YAAa,YAAa,WAAY,QACpE,WAAY,YAAa,SAAU,SAAU,OAAQ,QAAS,SAC9D,WAAY,WAAY,WAAY,WAAY,SAAU,QAAS,QACnE,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,OACnE,UAAW,WAAY,YAAa,WAAY,UAAW,YAC3D,OAAQ,UAAW,UAAW,QAAS,QAAS,SAAU,UAC1D,aAAc,SAAU,YAAa,YAAa,UAAW,aAC7D,WAAY,UAAW,SAAU,SAAU,OAAQ,QAAS,MAC5D,UAAW,UAAW,OAAQ,YAAa,UAAW,QAAS,SAC/D,QAAS,MAAO,SAAU,UAAW,OAAQ,QAAS,UAAW,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,UAAW,OACrE,OAAQ,SAAU,UAAW,UAAW,OAAQ,MAAO,SAAU,SACjE,QAAS,QAAS,UAAW,UAAW,MAAO,OAAQ,SAAU,WACjE,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAC1D,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,YAC1D,SAAU,SAAU,UAAW,YAAa,WAAY,UACxD,UAAW,UAAW,SAAU,SAAU,SAAU,SAAU,SAC9D,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,OACnE,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,QAC7D,OAAQ,aAAc,SAAU,SAAU,WAAY,OAAQ,UAC9D,OAAQ,QAAS,QAAS,MAAO,WAAY,WAAY,UACzD,SAAU,QAAS,SAAU,WAAY,aAAc,YACvD,UAAW,WAAY,WAAY,WAAY,UAAW,SAC1D,WAAY,UAAW,QAAS,OAAQ,QAAS,SAAU,UAC3D,WAAY,QAAS,SAAU,OAAQ,UAAW,SAAU,QAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,SAAU,OACrE,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,SACzD,UAAW,QAAS,KAAM,SAAU,QAAS,SAAU,SAAU,QACjE,OAAQ,OAAQ,SAAU,WAAY,UAAW,SAAU,QAC3D,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,SAC7D,UAAW,UAAW,UAAW,QAAS,UAAW,UAAW,SAChE,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,UAChE,SAAU,UAAW,UAAW,QAAS,OAAQ,QAAS,OAAQ,QAClE,SAAU,UAAW,QAAS,UAAW,YAAa,SAAU,UAChE,WAAY,UAAW,QAAS,UAAW,WAAY,QAAS,YAChE,QAAS,QAAS,SAAU,WAAY,SAAU,QAAS,QAC3D,SAAU,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,SAC9D,QAAS,WAAY,SAAU,UAAW,SAAU,OAAQ,QAC5D,SAAU,UAAW,OAAQ,QAAS,UAAW,OAAQ,UACzD,SAAU,SAAU,UAAW,SAAU,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,UAAW,aAAc,UACxD,UAAW,UAAW,OAAQ,QAAS,UAAW,SAAU,WAC5D,SAAU,QAAS,SAAU,QAAS,SAAU,WAAY,SAC5D,UAAW,WAAY,UAAW,SAAU,UAAW,QAAS,YAChE,SAAU,WAAY,WAAY,UAAW,WAAY,SACzD,UAAW,SAAU,SAAU,OAAQ,WAAY,QAAS,UAC5D,UAAW,SAAU,YAAa,YAAa,UAAW,SAC1D,WAAY,WAAY,YAAa,YAAa,WAAY,UAC9D,QAAS,QAAS,SAAU,UAAW,QAAS,SAAU,UAC1D,UAAW,YAAa,YAAa,QAAS,SAAU,QAAS,OACjE,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,WAC9D,UAAW,WAAY,UAAW,UAAW,UAAW,YACxD,QAAS,UAAW,WAAY,QAAS,OAAQ,UAAW,UAC5D,UAAW,UAAW,UAAW,OAAQ,WAAY,WAAY,QACjE,QAAS,SAAU,UAAW,aAAc,YAAa,aACzD,YAAa,YAAa,WAAY,aAAc,cACpD,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,QAC1D,WAAY,QAAS,SAAU,QAAS,aAAc,QAAS,WAC/D,QAAS,QAAS,SAAU,UAAW,UAAW,WAAY,OAC9D,UAAW,UAAW,aAAc,aAAc,UAAW,OAC7D,SAAU,QAAS,SAAU,QAAS,YAAa,WAAY,UAC/D,QAAS,UAAW,WAAY,SAAU,QAAS,QAAS,OAAQ,OACpE,QAAS,OAAQ,UAAW,QAAS,UAAW,SAAU,OAAQ,SAClE,SAAU,WAAY,aAAc,SAAU,SAAU,SAAU,QAClE,SAAU,YAAa,aAAc,WAAY,SAAU,OAC3D,UAAW,SAAU,WAAY,UAAW,SAAU,SAAU,SAChE,SAAU,YAAa,UAAW,UAAW,SAAU,UAAW,OAClE,OAAQ,WAAY,MAAO,QAAS,WAAY,SAAU,UAC1D,WAAY,WAAY,YAAa,aAAc,OAAQ,UAC3D,UAAW,SAAU,OAAQ,SAAU,SAAU,UAAW,QAC5D,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,OACnE,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,SAC7D,SAAU,QAAS,MAAO,OAAQ,SAAU,OAAQ,WAAa,UACjE,SAAU,UAAW,WAAY,WAAY,SAAU,SAAU,QACjE,QAAS,SAAU,SAAU,UAAW,UAAW,QAAS,QAC5D,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,UAC5D,QAAS,SAAU,UAAW,SAAU,UAAW,SAAU,UAC7D,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,OAAQ,QACnE,QAAS,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,SAChE,QAAS,QAAS,SAAU,OAAQ,WAAY,SAAU,UAC1D,SAAU,SAAU,UAAW,MAAO,QAAS,OAAQ,QAAS,QAChE,SAAU,UAAW,UAAW,UAAW,QAAS,UAAW,OAC/D,QAAS,SAAU,UAAW,SAAU,UAAW,WAAY,QAC/D,UAAW,WAAY,UAAW,WAAY,YAAa,SAAU,OACrE,QAAS,SAAU,OAAQ,UAAW,UAAW,SAAU,SAC3D,QAAS,SAAU,QAAS,UAAW,UAAW,UAAW,UAC7D,UAAW,SAAU,UAAW,SAAU,WAAY,WAAY,UAClE,UAAW,QAAS,UAAW,QAAS,QAAS,QAAS,UAC1D,QAAS,UAAW,SAAU,SAAU,UAAW,QAAS,SAC5D,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,QAChE,OAAQ,QAAS,UAAW,UAAW,WAAY,WAAY,WAC/D,UAAW,UAAW,YAAa,MAAO,SAAU,SAAU,UAC9D,QAAS,UAAW,SAAU,QAAS,OAAQ,SAAU,SAAU,QACnE,WAAY,UAAW,SAAU,SAAU,SAAU,OAAQ,UAC7D,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAC/D,UAAW,SAAU,QAAS,SAAU,QAAS,OAAQ,UACzD,UAAW,UAAW,aAAc,SAAU,SAAU,OAAQ,QAChE,KAAM,MAAO,MAAO,QAAS,OAAQ,QAAS,UAAW,SAAU,SACnE,SAAU,OAAQ,UAAW,SAAU,UAAW,QAAS,SAC3D,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAClE,SAAU,SAAU,SAAU,OAAQ,QAAS,SAAU,SACzD,WAAY,WAAY,WAAY,UAAW,SAAU,QAAS,SAClE,UAAW,WAAY,WAAY,MAAO,QAAS,SAAU,QAC7D,UAAW,SAAU,SAAU,UAAW,QAAS,YAAa,QAChE,SAAU,SAAU,SAAU,QAAS,YAAa,OAAQ,QAC5D,QAAS,SAAU,UAAW,QAAS,YAAa,QAAS,SAC7D,OAAQ,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UACjE,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SACnE,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,UAC/D,SAAU,SAAU,QAAS,UAAW,UAAW,QAAS,OAAQ,OACpE,QAAS,SAAU,WAAY,SAAU,SAAU,QAAS,OAC5D,UAAW,WAAY,aAAc,QAAS,SAAU,QAAS,SACjE,OAAQ,QAAS,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAC1D,UAAW,UAAW,MAAO,WAAY,OAAQ,QAAS,QAAS,QACnE,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,SAAU,YAC/D,YAAa,UAAW,QAAS,QAAS,QAAS,OAAQ,YAC3D,YAAa,OAAQ,UAAW,YAAa,QAAS,SAAU,UAChE,UAAW,UAAW,SAAU,WAAY,OAAQ,QAAS,QAC7D,UAAW,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,QACpE,UAAW,OAAQ,SAAU,UAAW,MAAO,SAAU,OACzD,aAAc,QAAS,MAAO,UAAW,SAAU,WAAY,UAC/D,WAAY,QAAS,OAAQ,QAAS,QAAS,UAAW,WAC1D,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,SAAU,WACjE,SAAU,SAAU,MAAO,OAAQ,WAAY,UAAW,WAC1D,WAAY,SAAU,SAAU,QAAS,SAAU,SAAU,OAC7D,WAAY,QAAS,QAAS,YAAa,WAAY,OAAQ,QAC/D,SAAU,SAAU,QAAS,WAAY,MAAO,WAAY,YAC5D,UAAW,UAAW,UAAW,UAAW,OAAQ,QAAS,OAC7D,SAAU,UAAW,SAAU,UAAW,YAAa,YACvD,UAAW,YAAa,YAAa,SAAU,QAAS,UAAW,QACnE,OAAQ,QAAS,UAAW,SAAU,WAAY,YAAa,WAC/D,aAAc,WAAY,QAAS,SAAU,UAAW,SAAU,QAClE,SAAU,YAAa,QAAS,SAAU,OAAQ,UAAW,YAC7D,YAAa,UAAW,OAAQ,OAAQ,UAAW,SAAU,WAC7D,UAAW,SAAU,UAAW,SAAU,UAAW,UAAW,WAChE,QAAS,QAAS,SAAU,QAAS,MAAO,QAAS,UAAW,OAChE,UAAW,UAAW,YAAa,UAAW,WAAY,MAAO,WACjE,SAAU,YAAa,YAAa,aAAc,WAAY,WAC9D,UAAW,SAAU,YAAa,SAAU,UAAW,QAAS,UAChE,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,SAC5D,SAAU,UAAW,WAAY,QAAS,QAAS,UAAW,OAC9D,OAAQ,UAAW,WAAY,WAAY,WAAY,WACvD,WAAY,UAAW,SAAU,OAAQ,SAAU,SAAU,UAC7D,SAAU,UAAW,QAAS,SAAU,UAAW,SAAU,QAC7D,SAAU,WAAY,QAAS,SAAU,QAAS,YAAa,SAC/D,UAAW,QAAS,OAAQ,QAAS,WAAY,WAAY,UAC7D,QAAS,WAAY,UAAW,UAAW,SAAU,YAAa,SAClE,QAAS,YAAa,WAAY,SAAU,SAAU,MAAO,SAC7D,OAAQ,UAAW,MAAO,OAAQ,YAAa,SAAU,SAAU,SACnE,SAAU,MAAO,UAAW,QAAS,QAAS,QAAS,SAAU,OACjE,QAAS,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SACnE,WAAY,QAAS,SAAU,UAAW,SAAU,SAAU,SAC9D,QAAS,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QACnE,UAAW,SAAU,QAAS,SAAU,QAAS,QAAS,SAC1D,SAAU,QAAS,SAAU,SAAU,UAAW,YAAa,QAC/D,YAAa,QAAS,UAAW,SAAU,UAAW,UAAW,WACjE,WAAY,UAAW,QAAS,SAAU,SAAU,SAAU,UAC9D,UAAW,QAAS,YAAa,UAAW,UAAW,QAAS,SAChE,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,QAC7D,OAAQ,SAAU,UAAW,WAAY,QAAS,UAAW,SAC7D,SAAU,OAAQ,SAAU,SAAU,OAAQ,QAAS,WAAY,SACnE,QAAS,MAAO,UAAW,OAAQ,MAAO,QAAS,SAAU,UAC7D,WAAY,MAAO,MAAO,QAAS,SAAU,MAAO,QAAS,SAC7D,WAAY,UAAW,OAAQ,OAAQ,SAAU,QAAS,QAAS,SACnE,UAAW,WAAY,WAAY,OAAQ,UAAW,OAAQ,SAC9D,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,QAAS,QACnE,MAAO,OAAQ,QAAS,MAAO,WAAY,SAAU,SAAU,OAC/D,QAAS,WAAY,UAAW,OAAQ,YAAa,SAAU,UAC/D,UAAW,QAAS,SAAU,YAAa,UAAW,WAAY,OAClE,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,SAChE,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,QACjE,QAAS,SAAU,QAAS,QAAS,WAAY,QAAS,UAC1D,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,MAAO,OAChE,QAAS,OAAQ,UAAW,UAAW,QAAS,SAAU,SAAU,QACpE,QAAS,SAAU,SAAU,OAAQ,SAAU,WAAY,YAC3D,QAAS,QAAS,QAAS,QAAS,SAAU,UAAW,SACzD,UAAW,SAAU,SAAU,QAAS,SAAU,QAAS,SAC3D,UAAW,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAC3D,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,OACrE,WAAY,SAAU,SAAU,MAAO,WAAY,WAAY,OAC/D,WAAY,UAAW,UAAW,SAAU,OAAQ,UAAW,SAC/D,WAAY,WAAY,WAAY,SAAU,QAAS,SAAU,UACjE,SAAU,QAAS,UAAW,SAAU,UAAW,WAAY,SAC/D,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAC7D,OAAQ,QAAS,UAAW,SAAU,UAAW,QAAS,UAC1D,QAAS,OAAQ,SAAU,QAAS,QAAS,SAAU,UAAW,SAClE,QAAS,KAAM,OAAQ,QAAS,SAAU,SAAU,UAAW,SAC/D,QAAS,UAAW,UAAW,QAAS,OAAQ,MAAO,OAAQ,SAC/D,SAAU,OAAQ,QAAS,SAAU,UAAW,WAAY,OAC5D,YAAa,YAAa,UAAW,SAAU,WAAY,UAC3D,QAAS,MAAO,QAAS,UAAW,WAAY,WAAY,SAC5D,UAAW,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAClE,WAAY,SAAU,YAAa,OAAQ,SAAU,UAAW,SAChE,UAAW,WAAY,QAAS,QAAS,QAAS,SAAU,UAC5D,SAAU,MAAO,QAAS,QAAS,UAAW,QAAS,OAAQ,OAC/D,QAAS,SAAU,OAAQ,QAAS,QAAS,SAAU,UACvD,WAAY,QAAS,SAAU,SAAU,QAAS,SAAU,OAC5D,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,QAAS,QAAS,OAAQ,QAAS,OAClE,QAAS,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,SACjE,UAAW,UAAW,OAAQ,QAAS,UAAW,QAAS,OAAQ,SACnE,UAAW,UAAW,SAAU,SAAU,SAAU,OAAQ,OAC5D,SAAU,UAAW,QAAS,OAAQ,UAAW,WAAY,SAC7D,SAAU,OAAQ,SAAU,SAAU,QAAS,SAAU,WACzD,SAAU,WAAY,QAAS,YAAa,WAAY,UACxD,UAAW,WAAY,YAAa,YAAa,WAAY,WAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,UAAW,UAClE,SAAU,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,SAC/D,SAAU,WAAY,SAAU,QAAS,SAAU,SAAU,SAC7D,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,SAClE,SAAU,SAAU,MAAO,UAAW,SAAU,WAAY,QAC5D,UAAW,UAAW,UAAW,UAAW,QAAS,SAAU,QAC/D,WAAY,SAAU,OAAQ,UAAW,UAAW,QAAS,QAC7D,QAAS,QAAS,WAAY,SAAU,SAAU,OAAQ,QAAS,SACnE,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,MAAO,WAC9D,OAAQ,MAAO,OAAQ,OAAQ,UAAW,UAAW,QAAS,OAC9D,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OACrE,SAAU,WAAY,UAAW,WAAY,YAAa,aAC1D,aAAc,SAAU,UAAW,UAAW,WAAY,OAAQ,SAClE,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9D,OAAQ,WAAY,YAAa,QAAS,SAAU,QAAS,UAC7D,SAAU,QAAS,SAAU,OAAQ,QAAS,UAAW,QAAS,QAClE,QAAS,QAAS,SAAU,SAAU,WAAY,WAAY,WAC9D,YAAa,SAAU,UAAW,QAAS,SAAU,SAAU,SAC/D,UAAW,UAAW,SAAU,UAAW,QAAS,UAAW,WAC/D,SAAU,QAAS,QAAS,SAAU,MAAO,QAAS,SAAU,SAChE,SAAU,OAAQ,MAAO,OAAQ,QAAS,UAAW,OAAQ,QAC7D,SAAU,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAClE,SAAU,MAAO,QAAS,OAAQ,UAAW,WAAY,QAAS,SAClE,SAAU,SAAU,UAAW,UAAW,WAAY,QAAS,OAC/D,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,UAClE,OAAQ,MAAO,QAAS,OAAQ,QAAS,QAAS,MAAO,OAAQ,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,UAAW,QAC3D,UAAW,WAAY,SAAU,QAAS,OAAQ,SAAU,OAC5D,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,UAC9D,SAAU,OAAQ,WAAY,UAAW,QAAS,OAAQ,SAC1D,SAAU,YAAa,QAAS,QAAS,OAAQ,OAAQ,SAAU,OACnE,MAAO,SAAU,QAAS,SAAU,QAAS,QAAS,OAAQ,UAC9D,QAAS,SAAU,SAAU,UAAW,UAAW,OAAQ,SAC3D,QAAS,SAAU,MAAO,QAAS,SAAU,UAAW,WACxD,SAAU,MAAO,QAAS,QAAS,QAAS,UAAW,QAAS,WAChE,SAAU,UAAW,QAAS,UAAW,SAAU,OAAQ,QAC3D,SAAU,MAAO,SAAU,QAAS,OAAQ,QAAS,QAAS,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,SAAU,MAAO,OAAQ,QACpE,OAAQ,OAAQ,QAAS,UAAW,QAAS,UAAW,QAAS,MACjE,QAAS,OAAQ,QAAS,OAAQ,YAAa,OAAQ,WACvD,UAAW,WAAY,WAAY,UAAW,WAAY,QAAS,QACnE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,MAClE,SAAU,QAAS,UAAW,SAAU,WAAY,YAAa,SACjE,WAAY,SAAU,OAAQ,QAAS,QAAS,QAAS,UACzD,UAAW,WAAY,UAAW,UAAW,SAAU,UAAW,SAClE,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,OAC9D,OAAQ,SAAU,YAAa,YAAa,WAAY,WACxD,YAAa,UAAW,SAAU,QAAS,SAAU,SAAU,WAC/D,YAAa,YAAa,aAAc,aAAc,YAAa,QACnE,SAAU,SAAU,UAAW,aAAc,QAAS,SAAU,SAChE,SAAU,UAAW,UAAW,WAAY,WAAY,UACxD,UAAW,QAAS,UAAW,WAAY,WAAY,UAAW,UAClE,WAAY,SAAU,QAAS,SAAU,SAAU,UAAW,UAC9D,aAAc,WAAY,UAAW,OAAQ,SAAU,SAAU,SACjE,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,WAC/D,WAAY,QAAS,SAAU,UAAW,UAAW,QAAS,SAC9D,OAAQ,SAAU,WAAY,SAAU,QAAS,QAAS,SAC1D,UAAW,WAAY,UAAW,UAAW,OAAQ,SAAU,SAC/D,OAAQ,QAAS,SAAU,UAAW,UAAW,WAAY,UAC7D,WAAY,QAAS,MAAO,QAAS,SAAU,aAAc,aAC7D,cAAe,SAAU,UAAW,SAAU,UAAW,MAAO,OAChE,UAAW,WAAY,OAAQ,SAAU,UAAW,QAAS,QAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,OAAQ,SAC/D,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,UAC1D,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,WAC9D,WAAY,OAAQ,QAAS,SAAU,UAAW,SAAU,SAC5D,OAAQ,MAAO,UAAW,QAAS,UAAW,WAAY,UAC1D,UAAW,SAAU,UAAW,WAAY,SAAU,UAAW,OACjE,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,OAAQ,SAClE,OAAQ,UAAW,SAAU,UAAW,WAAY,SAAU,SAC9D,WAAY,QAAS,UAAW,WAAY,SAAU,UAAW,UACjE,UAAW,WAAY,WAAY,SAAU,SAAU,QAAS,OAChE,SAAU,UAAW,SAAU,YAAa,aAAc,UAC1D,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,SAC5D,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,WACzD,SAAU,OAAQ,SAAU,SAAU,UAAW,MAAO,OAAQ,SAChE,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,SACjE,WAAY,UAAW,OAAQ,QAAS,MAAO,UAAW,UAC1D,UAAW,SAAU,YAAa,YAAa,YAAa,SAC5D,SAAU,OAAQ,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,QACpE,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,OAAQ,SACjE,SAAU,MAAO,WAAY,YAAa,UAAW,OAAQ,WAC7D,WAAY,OAAQ,SAAU,UAAW,SAAU,YAAa,QAChE,SAAU,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,OAC/D,QAAS,MAAO,OAAQ,SAAU,QAAS,SAAU,QAAS,OAC9D,QAAS,OAAQ,OAAQ,UAAW,WAAY,SAAU,QAAS,SACnE,SAAU,UAAW,OAAQ,UAAW,MAAO,OAAQ,SAAU,OACjE,SAAU,OAAQ,UAAW,MAAO,QAAS,SAAU,OAAQ,SAC/D,OAAQ,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAC/D,QAAS,MAAO,QAAS,OAAQ,MAAO,OAAQ,OAAQ,UAAW,MACnE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAAU,UAC3D,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,QACpE,UAAW,SAAU,UAAW,OAAQ,OAAQ,SAAU,OAAQ,UAClE,QAAS,OAAQ,MAAO,OAAQ,SAAU,QAAS,QAAS,QAC5D,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,WAAY,MACtE,WAAY,WAAY,UAAW,QAAS,SAAU,OAAQ,QAC9D,UAAW,SAAU,SAAU,QAAS,UAAW,WAAY,QAC/D,SAAU,WAAY,WAAY,QAAS,QAAS,OAAQ,QAC5D,QAAS,SAAU,SAAU,SAAU,UAAW,SAAU,SAC5D,SAAU,OAAQ,SAAU,QAAS,QAAS,SAAU,WACxD,UAAW,UAAW,QAAS,SAAU,WAAY,YACrD,aAAc,WAAY,QAAS,UAAW,UAAW,SAAU,QACnE,UAAW,UAAW,UAAW,SAAU,WAAY,MAAO,SAC9D,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,UAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,QACpE,SAAU,QAAS,UAAW,YAAa,SAAU,SAAU,UAC/D,UAAW,OAAQ,QAAS,MAAO,UAAW,WAAY,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,UAAW,QAAS,OACrE,QAAS,QAAS,SAAU,WAAY,OAAQ,SAAU,QAC1D,WAAY,YAAa,OAAQ,QAAS,SAAU,OAAQ,QAC5D,QAAS,SAAU,OAAQ,MAAO,MAAO,QAAS,WAAY,QAC9D,UAAW,OAAQ,QAAS,UAAW,WAAY,QAAS,UAC5D,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,QAC7D,OAAQ,YAAa,QAAS,OAAQ,QAAS,OAAQ,SAAU,SACjE,UAAW,UAAW,QAAS,QAAS,QAAS,QAAS,MAAO,WACjE,SAAU,UAAW,UAAW,UAAW,OAAQ,UAAW,QAC9D,SAAU,UAAW,SAAU,OAAQ,UAAW,QAAS,MAAO,UAClE,QAAS,YAAa,OAAQ,OAAQ,UAAW,UAAW,WAC5D,YAAa,UAAW,WAAY,UAAW,UAAW,SAAU,OACpE,UAAW,UAAW,YAAa,WAAY,UAAW,UAC1D,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,UAClE,SAAU,UAAW,MAAO,QAAS,QAAS,UAAW,QAAS,QAClE,OAAQ,QAAS,UAAW,OAAQ,SAAU,OAAQ,SAAU,UAChE,QAAS,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAC9D,QAAS,UAAW,QAAS,SAAU,UAAW,UAAW,QAC7D,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,WACtD,YAAa,MAAO,UAAW,WAAY,SAAU,QAAS,SAC9D,QAAS,SAAU,SAAU,WAAY,QAAS,UAAW,QAC7D,WAAY,UAAW,UAAW,SAAU,QAAS,QAAS,SAC9D,QAAS,OAAQ,UAAW,UAAW,WAAY,SAAU,WAC7D,WAAY,OAAQ,UAAW,SAAU,SAAU,OAAQ,YAC3D,UAAW,SAAU,SAAU,SAAU,SAAU,WAAY,OAC/D,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,WACzD,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAC9D,QAAS,SAAU,QAAS,QAAS,SAAU,UAAW,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,UAC7D,WAAY,UAAW,SAAU,UAAW,QAAS,MAAO,SAC5D,SAAU,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,SACnE,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,QAC1D,UAAW,QAAS,QAAS,QAAS,QAAS,SAAU,SACzD,UAAW,SAAU,QAAS,OAAQ,WAAY,UAAW,UAC7D,SAAU,WAAY,SAAU,UAAW,YAAa,YACxD,WAAY,UAAW,UAAW,WAAY,QAAS,SAAU,UACjE,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UAAW,QACpE,UAAW,OAAQ,QAAS,SAAU,SAAU,QAAS,SAAU,SACnE,YAAa,SAAU,UAAW,MAAO,QAAS,QAAS,SAC3D,QAAS,QAAS,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAC9D,UAAW,UAAW,UAAW,OAAQ,SAAU,SAAU,MAAO,QACpE,UAAW,SAAU,WAAY,UAAW,WAAY,UAAW,QACnE,OAAQ,SAAU,QAAS,OAAQ,WAAY,SAAU,OAAQ,SACjE,OAAQ,WAAY,WAAY,UAAW,UAAW,WAAY,SAClE,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QAAS,SACjE,UAAW,UAAW,WAAY,QAAS,UAAW,OAAQ,OAC9D,QAAS,QAAS,OAAQ,MAAO,MAAO,QAAS,SAAU,SAC3D,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAAU,MAAO,QAC/D,SAAU,QAAS,SAAU,SAAU,MAAO,WAAY,WAC1D,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,UAC5D,SAAU,OAAQ,UAAW,SAAU,WAAY,UAAW,UAC9D,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,QAAS,OACnE,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAC3D,QAAS,SAAU,SAAU,SAAU,MAAO,SAAU,QAAS,QACjE,QAAS,SAAU,OAAQ,WAAY,YAAa,YAAa,UACjE,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,QAAS,QAChE,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,QAAS,SAChE,OAAQ,QAAS,SAAU,UAAW,SAAU,SAAU,SAC1D,WAAY,QAAS,UAAW,UAAW,SAAU,QAAS,SAC9D,WAAY,OAAQ,QAAS,QAAS,QAAS,UAAW,WAC1D,WAAY,SAAU,QAAS,SAAU,WAAY,SAAU,SAC/D,WAAY,WAAY,OAAQ,OAAQ,OAAQ,SAAU,UAC1D,WAAY,SAAU,WAAY,WAAY,OAAQ,QAAS,QAC/D,SAAU,UAAW,SAAU,SAAU,QAAS,OAAQ,SAC1D,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,aAC1D,UAAW,QAAS,SAAU,UAAW,SAAU,UAAW,SAC9D,UAAW,UAAW,QAAS,UAAW,UAAW,WAAY,UACjE,UAAW,aAAc,OAAQ,QAAS,UAAW,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAC1D,WAAY,WAAY,YAAa,SAAU,UAAW,UAC1D,QAAS,QAAS,SAAU,SAAU,UAAW,SAAU,UAC3D,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UACjE,SAAU,SAAU,YAAa,UAAW,UAAW,OAAQ,UAC/D,UAAW,SAAU,SAAU,OAAQ,QAAS,YAAa,QAC7D,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAClE,QAAS,OAAQ,OAAQ,QAc7Bna,EAAOD,QAAU,CACb0zD,iBARJ,WAII,MAAQ,GAHKjpB,EAAWgtC,cAAcr9D,MACvBqwB,EAAWktC,kBAAkB,Q,8BCjbhD,kJAkBA,MAAM9kD,EAASF,oBAAU6E,GASV,MAAM65B,UAA+B60F,IAQhDn7I,YAAYytB,EAAMG,EAAcuiB,GAC5B3K,QACAz7B,KAAK0jB,KAAOA,EACZ1jB,KAAK6jB,aAAeA,EACpB7jB,KAAK07C,SAAW,GAChB17C,KAAK88I,aAAe12G,EAAU6V,IAC9Bj8C,KAAK+8I,aAAe32G,EAAU+V,IAC9Bn8C,KAAKsmF,iBAAmB,CACpB02D,qBAAqB,EACrBC,qBAAqB,GAQ7BryI,KAAK2J,GACDknB,MAAM7wB,KAAK2J,GACXvU,KAAKuU,WAAWxG,WAAW/N,KAAKk9I,SAAShwJ,KAAK8S,MAC1C,oBAAqB,KAAM,MAAO,KAAM,MAOhDk9I,SAASjqI,GACL,MAAM5G,EAAMyiC,EAAE77B,GAAIqiB,KAAK,UAAU/zB,KAAK,OAChC2tB,EAAS4f,EAAE77B,GAAIqiB,KAAK,UAAU/zB,KAAK,UACnC47I,EAAUlqI,EAAGrQ,aAAa,QAG1Bo7E,EAAMriF,cAAI,CAAEsL,KAAM,SACpBoiC,GAAI8zG,EACJj2I,GAAI+L,EAAGrQ,aAAa,QAGxBmb,EAAOnZ,IAAK,aAAYsqB,UAAeiuH,IAAWlqI,GAClD,IAAImqI,EAAOp9I,KAAK07C,SAASrvC,GAEzB,GAAe,qBAAX6iB,EAA+B,CAC/B,IAAKkuH,EAaD,OAZAp/D,EAAIxiF,MAAM,CAAEyL,KAAM,UAClB+2E,EAAIjyF,EAAE,QAAS,CAAEkb,KAAM,WAClBlb,EAAE,iBAAkB,CACjBka,MAAO,wCAEVE,KACApa,EAAE,kBAAmB,CAClBka,MAAO,6BAEf8X,EAAO5Y,KAAK,qBAAsB8N,GAClCjT,KAAKuU,WAAWlH,KAAK2wE,IAEd,EAIX,GAAIm/D,IAAYC,EAAK/2D,UAcjB,OAbAtoE,EAAO5Y,KACH,8BAA+BkH,EAAK+wI,EAAK/2D,UAAWpzE,GACxD+qE,EAAIxiF,MAAM,CAAEyL,KAAM,UAClB+2E,EAAIjyF,EAAE,QAAS,CAAEkb,KAAM,WAClBlb,EAAE,iBAAkB,CACjBka,MAAO,wCAEVE,KACApa,EAAE,kBAAmB,CAClBka,MAAO,6BAEfjG,KAAKuU,WAAWlH,KAAK2wE,IAEd,OAER,QAAaz9E,IAAT68I,EAYP,OATAp/D,EAAIxiF,MAAM,CAAEyL,KAAM,UAClB+2E,EAAIjyF,EAAE,QAAS,CAAEkb,KAAM,WAClBlb,EAAE,sBAAuB,CACtBka,MAAO,wCAEVE,KACL4X,EAAO5Y,KAAK,uBAAwBkH,EAAK4G,GACzCjT,KAAKuU,WAAWlH,KAAK2wE,IAEd,EAEX,MAAM7pE,EAAM7oB,OAAOusD,YAAY1jC,MAKzBqT,EAAgD,UAAxC/rB,UAAQyI,mBAAmBi5I,GAIzC,OAAQjuH,GACR,IAAK,mBAAoB,CACrBnR,EAAOnZ,IAAI,sCAAuCuP,GAClD,MAAMkpI,EAAavuG,EAAE77B,GAAIqiB,KAAK,qBAE9B,GAAI+nH,GAAcA,EAAW9mJ,OAAS,EAAG,CACrC,MAAM6hI,EAAailB,EAAW97I,KAAK,SAC7B82H,EAAaglB,EAAW97I,KAAK,SAEnCvB,KAAK6jB,aAAa8D,KACdqwB,IAAWziD,uBACI,SAAf6iI,EACe,SAAfC,GAGRt6G,EAAO7Y,KACF,wBAAuBi4I,QACjB31H,EAAQ,GAAK,eAExB,MAAM4e,EAAY5e,EAAQxnB,KAAK+8I,aAAe/8I,KAAK88I,aAEnDM,EACM,IAAIr3D,IACFj3C,EAAE77B,GAAIqiB,KAAK,UAAU/zB,KAAK,OAC1ButC,EAAE77B,GAAI1R,KAAK,MACX47I,EACAn9I,KAAKuU,WACLvU,KAAKsmF,iBAIL15E,KAAKsL,MAAMtL,KAAKwL,UAAUguB,IAC1B5e,GACgB,GAExBxnB,KAAK07C,SAAS0hG,EAAK/wI,KAAO+wI,EAE1Bp9I,KAAK6jB,aAAa8D,KAAKqwB,IAAWhmD,cAC9BorJ,EAAMtuG,EAAE77B,GAAIqiB,KAAK,WAAYnhB,GACjC,MAEJ,IAAK,iBACDnU,KAAK6jB,aAAa8D,KACdqwB,IAAWjmD,cAAeqrJ,EAAMtuG,EAAE77B,GAAIqiB,KAAK,YAC/C,MAEJ,IAAK,iBACD8nH,EAAKlpD,eAAeplD,EAAE77B,GAAIqiB,KAAK,YAC/B,MAEJ,IAAK,iBACDt1B,KAAK6jB,aAAa8D,KACdqwB,IAAWxiD,eAAgB4nJ,EAAMtuG,EAAE77B,GAAIqiB,KAAK,YAChD,MAEJ,IAAK,oBAAqB,CACtBvX,EAAOnZ,IAAI,iBAAkBw4I,EAAK/wI,KAClC,IAAI0jF,EAAkB,KAClBC,EAAa,KAEblhD,EAAE77B,GAAIqiB,KAAK,kBAAkB/+B,SAC7Bw5F,EACMjhD,EAAE77B,GAAIqiB,KAAK,yBAAyB,GAAGn1B,QAC7C6vF,EAAalhD,EAAE77B,GAAIqiB,KAAK,uBAAuB3zB,QAEnD3B,KAAK+hF,UAAUq7D,EAAK/wI,IAAK0jF,EAAiBC,GAC1ChwF,KAAK6jB,aAAa8D,KAAKqwB,IAAW/lD,WAC9BmrJ,EAAMrtD,EAAiBC,GAC3B,MAEJ,IAAK,oBACDjyE,EAAO7Y,KAAK,oCAAqCiP,GACjDsP,IAAWuI,cAAcmE,YACrB/B,IACA,CACI+tB,IAAK30B,EACL76B,MAAOwnB,KAGfipI,EAAKhvD,iBAAiBt/C,EAAE77B,GAAIqiB,KAAK,WAAY,KACzC,MAAMgoH,EAAchyJ,OAAOusD,YAAY1jC,MAEvC4J,EAAO7Y,KAAK,sCAAuCo4I,GACnD75H,IAAWuI,cAAcmE,YACrB9B,IACA,CACI8tB,IAAK30B,EACL76B,MAAO2wJ,MAEhBt4I,IACCy3B,IAAqBkG,iBAAiB39B,GACtC+Y,EAAO/Y,MAAM,2BAA4BA,GACzCo4I,EAAKnuD,wBAET,MACJ,IAAK,YACL,IAAK,aACDmuD,EAAK7sD,gBAAgBzhD,EAAE77B,GAAIqiB,KAAK,oBAChC,MACJ,IAAK,eACL,IAAK,gBACD8nH,EAAK3sD,mBAAmB3hD,EAAE77B,GAAIqiB,KAAK,oBACnC,MACJ,QACIvX,EAAO5Y,KAAK,gCAAiC+pB,GAC7C8uD,EAAIxiF,MAAM,CAAEyL,KAAM,UAClB+2E,EAAIjyF,EAAE,QAAS,CAAEkb,KAAM,WAClBlb,EAAE,cACC,CAAEka,MAAO,wCACZE,KAKT,OAFAnG,KAAKuU,WAAWlH,KAAK2wE,IAEd,EAUXs1C,oBAAoBiqB,EAAIn/E,GACpB,MAAMg/E,EACA,IAAIr3D,IACFpwD,IAAWslB,gBAAgB,IAC3BsiG,EACAn/E,EACAp+D,KAAKuU,WACLvU,KAAKsmF,iBACLtmF,KAAK+8I,cACK,GACM,GAIxB,OAFA/8I,KAAK07C,SAAS0hG,EAAK/wI,KAAO+wI,EAEnBA,EASXr7D,UAAU11E,EAAK0jF,EAAiBC,GACxBhwF,KAAK07C,SAASnuD,eAAe8e,KACI,UAA7BrM,KAAK07C,SAASrvC,GAAKilC,OACnBtxC,KAAK07C,SAASrvC,GAAKyjF,aAAaC,EAAiBC,UAE9ChwF,KAAK07C,SAASrvC,IAO7B+rC,4BAcIp4C,KAAKuU,WAAWnG,OACZzS,cAAI,CAAEsL,KAAM,MACRoiC,GAAIrpC,KAAK0jB,KAAKvc,QAAQouC,MAAMz6C,SAC3B/O,EAAE,WAAY,CAAEka,MAAO,wBAC5Bu3I,GAASx9I,KAAKq6C,gCAAgCmjG,GAC9CC,IACI1/H,EAAO5Y,KAAK,qEAAsEs4I,GAClFz9I,KAAKuU,WAAWnG,OACZzS,cAAI,CAAEsL,KAAM,MACRoiC,GAAIrpC,KAAK0jB,KAAKvc,QAAQouC,MAAMz6C,SAC3B/O,EAAE,WAAY,CAAEka,MAAO,wBAC5By3I,GAAS19I,KAAKq6C,gCAAgCqjG,GAC9CC,IACI5/H,EAAO5Y,KAAK,kCAAmCw4I,GAC/C5/H,EAAO5Y,KAAK,mEAYhCk1C,gCAAgCle,GAC5B,MAAMyhH,EAAa,GAEnB9uG,EAAE3S,GAAK7G,KAAK,qBAAqBlV,KAAK,CAAC6rB,EAAK/rC,KAGxC,MAAM29I,EAAO,GACP52I,GAFN/G,EAAK4uC,EAAE5uC,IAESqB,KAAK,QAErB,OAAQ0F,GACR,IAAK,OACD42I,EAAKnpG,KAAQ,QAAOx0C,EAAGqB,KAAK,QACxBrB,EAAGqB,KAAK,UACRs8I,EAAKnpG,MAAS,IAAGx0C,EAAGqB,KAAK,SAE7Bq8I,EAAW16I,KAAK26I,GAChB,MACJ,IAAK,OACL,IAAK,QAAS,CACVA,EAAKnpG,KAAUztC,EAAF,IACb42I,EAAKn/F,SAAWx+C,EAAGqB,KAAK,YACxBs8I,EAAKnpG,MAAQx0C,EAAGqB,KAAK,QACRrB,EAAGqB,KAAK,UAGjBs8I,EAAKnpG,MAAS,IAAGx0C,EAAGqB,KAAK,SAE7B,MAAMmc,EAAYxd,EAAGqB,KAAK,aAEtBmc,GAA2B,QAAdA,IACbmgI,EAAKnpG,MAAS,cAAah3B,GAG/BmgI,EAAKC,WAAa59I,EAAGqB,KAAK,aACfs8I,EAAKC,WAChBF,EAAW16I,KAAK26I,GAChB,UAKR,MAAM12I,EAAUnH,KAAK0jB,KAAKvc,QAG1B,IAAK,IAAIzb,EAAIkyJ,EAAWrnJ,OAAS,EAAG7K,EAAI,EAAGA,IAAK,CAC5C,MAAMwN,EAAIkS,KAAKmM,MAAMnM,KAAKC,UAAY3f,EAAI,IACpC6qE,EAAOqnF,EAAWlyJ,GAExBkyJ,EAAWlyJ,GAAKkyJ,EAAW1kJ,GAC3B0kJ,EAAW1kJ,GAAKq9D,EAGpB,IAAIvhC,EAYJ,OATIA,EADA7tB,EAAQ42I,WACCtwJ,GAAKA,EAAEinD,KAAKle,WAAW,QAGvB/oC,GAAKA,EAAEinD,KAAKle,WAAW,SAAY/oC,EAAEinD,KAAK9wC,QAAQ,kBAAoB,EAGnF5D,KAAK88I,aAAa5gG,WAAa0hG,EAAW5oH,OAAOA,GACjDh1B,KAAK+8I,aAAa7gG,WAAa0hG,EAExBA,EAAWrnJ,OAAS,EAM/B8kD,SACI,MAAM1hD,EAAO,GAgBb,OAdAvN,OAAOmZ,KAAKvF,KAAK07C,UAAUtsC,QAAQ/C,IAC/B,MACMgwD,EADUr8D,KAAK07C,SAASrvC,GACXgZ,eAEfg3C,GAAMA,EAAG2hF,YAETrkJ,EAAM,UAAS0S,GAAS,CACpB2xI,UAAW3hF,EAAG2hF,UACdhzH,MAAOqxC,EAAGrxC,MACVi3C,IAAK32E,OAAOyvB,SAASk5C,SAK1Bt6D,M,qFCnaf,2EAKA,MAAMokB,EAASF,oBAAU6E,GAKV,MAAM6kE,EAIjBtxF,cACI+J,KAAKi+I,OAAS97I,IAAM24F,MAAM96F,KAAKk+I,mBAAmBhxJ,KAAK8S,MAAO,GAC9DA,KAAKm+I,UAAW,EAMpBr4F,QACI9lD,KAAKi+I,OAAOG,OAMhBF,mBAAmB1X,EAAMt8C,GACrB,IACIs8C,EAAKt8C,GACP,MAAOllF,GACL+Y,EAAO/Y,MAAO,gBAAeA,GAC7BklF,EAAiBllF,IAqBzB9B,KAAKsjI,EAAMh7H,GACHxL,KAAKm+I,SACL3yI,GAAYA,EAAS,IAAInU,MAAM,+BAInC2I,KAAKi+I,OAAO/6I,KAAKsjI,EAAMh7H,GAO3B8pF,WACIt1F,KAAKm+I,UAAW,M,8DCrExB;;;;;;;IASC,WAEG,IAGInzJ,EAAMqzJ,EAHNl8I,EAAQ,GAeZ,SAASm8I,EAAU9+H,GACf,IAAI++H,GAAS,EACb,OAAO,WACH,GAAIA,EAAQ,MAAM,IAAIlnJ,MAAM,gCAC5BknJ,GAAS,EACT/+H,EAAGf,MAAMzzB,EAAMmW,YAdX,OADZnW,EAAOgV,QAELq+I,EAAiBrzJ,EAAKmX,OAGxBA,EAAMq8I,WAAa,WAEf,OADAxzJ,EAAKmX,MAAQk8I,EACNl8I,GAcX,IAAIs8I,EAAYryJ,OAAOkB,UAAUoJ,SAE7BgoJ,EAAWtoJ,MAAMC,SAAW,SAAUN,GACtC,MAA+B,mBAAxB0oJ,EAAU5yJ,KAAKkK,IAGtB4oJ,EAAQ,SAAUxoJ,EAAKH,GACvB,GAAIG,EAAIiZ,QACJ,OAAOjZ,EAAIiZ,QAAQpZ,GAEvB,IAAK,IAAItK,EAAI,EAAGA,EAAIyK,EAAII,OAAQ7K,GAAK,EACjCsK,EAASG,EAAIzK,GAAIA,EAAGyK,IAIxByoJ,EAAO,SAAUzoJ,EAAKH,GACtB,GAAIG,EAAIqP,IACJ,OAAOrP,EAAIqP,IAAIxP,GAEnB,IAAI6rB,EAAU,GAId,OAHA88H,EAAMxoJ,GAAK,SAAUa,EAAGtL,EAAGgM,GACvBmqB,EAAQ3e,KAAKlN,EAASgB,EAAGtL,EAAGgM,OAEzBmqB,GAaPg9H,EAAQ,SAAU9oJ,GAClB,GAAI3J,OAAOmZ,KACP,OAAOnZ,OAAOmZ,KAAKxP,GAEvB,IAAIwP,EAAO,GACX,IAAK,IAAI9D,KAAK1L,EACNA,EAAIxI,eAAekU,IACnB8D,EAAKrC,KAAKzB,GAGlB,OAAO8D,QAMY,IAAZ49C,GAA6BA,EAAgB,UAgBpDhhD,EAAMm5F,SAAWn4C,EAAQm4C,SAErBn5F,EAAM28I,kBADkB,IAAjBA,EACc,SAAUt/H,GAE7Bs/H,EAAat/H,IAIMrd,EAAMm5F,UAvBH,mBAAjBwjD,GACP38I,EAAMm5F,SAAW,SAAU97E,GAEvBs/H,EAAat/H,IAEjBrd,EAAM28I,aAAe38I,EAAMm5F,WAG3Bn5F,EAAMm5F,SAAW,SAAU97E,GACvBjV,WAAWiV,EAAI,IAEnBrd,EAAM28I,aAAe38I,EAAMm5F,UAgBnCn5F,EAAMie,KAAO,SAAUjqB,EAAKH,EAAUwV,GAElC,GADAA,EAAWA,GAAY,cAClBrV,EAAII,OACL,OAAOiV,IAEX,IAAIuzI,EAAY,EAIhB,SAASxxF,EAAKp9C,GACRA,GACA3E,EAAS2E,GACT3E,EAAW,eAGXuzI,GAAa,IACI5oJ,EAAII,QACjBiV,IAXVmzI,EAAMxoJ,GAAK,SAAUa,GACjBhB,EAASgB,EAAGsnJ,EAAU/wF,QAe9BprD,EAAMiN,QAAUjN,EAAMie,KAEtBje,EAAM68I,WAAa,SAAU7oJ,EAAKH,EAAUwV,GAExC,GADAA,EAAWA,GAAY,cAClBrV,EAAII,OACL,OAAOiV,IAEX,IAAIuzI,EAAY,EACZE,EAAU,WACVjpJ,EAASG,EAAI4oJ,IAAY,SAAU5uI,GAC3BA,GACA3E,EAAS2E,GACT3E,EAAW,eAGXuzI,GAAa,IACI5oJ,EAAII,OACjBiV,IAGAyzI,QAKhBA,KAEJ98I,EAAM+8I,cAAgB/8I,EAAM68I,WAE5B78I,EAAMg9I,UAAY,SAAUhpJ,EAAKipJ,EAAOppJ,EAAUwV,GACrC6zI,EAAWD,GACjB3gI,MAAM,KAAM,CAACtoB,EAAKH,EAAUwV,KAEnCrJ,EAAMm9I,aAAen9I,EAAMg9I,UAE3B,IAAIE,EAAa,SAAUD,GAEvB,OAAO,SAAUjpJ,EAAKH,EAAUwV,GAE5B,GADAA,EAAWA,GAAY,cAClBrV,EAAII,QAAU6oJ,GAAS,EACxB,OAAO5zI,IAEX,IAAIuzI,EAAY,EACZQ,EAAU,EACVC,EAAU,GAEd,SAAUC,IACN,GAAIV,GAAa5oJ,EAAII,OACjB,OAAOiV,IAGX,KAAOg0I,EAAUJ,GAASG,EAAUppJ,EAAII,QAEpCipJ,GAAW,EACXxpJ,EAASG,GAFTopJ,GAAW,GAEY,IAAI,SAAUpvI,GAC7BA,GACA3E,EAAS2E,GACT3E,EAAW,eAIXg0I,GAAW,GADXT,GAAa,IAEI5oJ,EAAII,OACjBiV,IAGAi0I,QApBpB,KA8BJC,EAAa,SAAUlgI,GACvB,OAAO,WACH,IAAIkjB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,WACtC,OAAOqe,EAAGf,MAAM,KAAM,CAACtc,EAAMie,MAAMpmB,OAAO0oC,MAS9Ci9G,EAAW,SAAUngI,GACrB,OAAO,WACH,IAAIkjB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,WACtC,OAAOqe,EAAGf,MAAM,KAAM,CAACtc,EAAM68I,YAAYhlJ,OAAO0oC,MAKpDk9G,EAAY,SAAUC,EAAQ1pJ,EAAKH,EAAUwV,GAI7C,GAHArV,EAAMyoJ,EAAKzoJ,GAAK,SAAUa,EAAGtL,GACzB,MAAO,CAACupC,MAAOvpC,EAAGiB,MAAOqK,MAExBwU,EAME,CACH,IAAIqW,EAAU,GACdg+H,EAAO1pJ,GAAK,SAAUa,EAAGwU,GACrBxV,EAASgB,EAAErK,OAAO,SAAUwjB,EAAK+8B,GAC7BrrB,EAAQ7qB,EAAEi+B,OAASiY,EACnB1hC,EAAS2E,SAEd,SAAUA,GACT3E,EAAS2E,EAAK0R,WAblBg+H,EAAO1pJ,GAAK,SAAUa,EAAGwU,GACrBxV,EAASgB,EAAErK,OAAO,SAAUwjB,GACxB3E,EAAS2E,UAezBhO,EAAMqD,IAAMk6I,EAAWE,GACvBz9I,EAAM29I,UAAYH,EAASC,GAC3Bz9I,EAAM49I,SAAW,SAAU5pJ,EAAKipJ,EAAOppJ,EAAUwV,GAC7C,OAAOw0I,EAAUZ,EAAVY,CAAiB7pJ,EAAKH,EAAUwV,IAG3C,IAAIw0I,EAAY,SAASZ,GACrB,OA3CkB,SAASA,EAAO5/H,GAClC,OAAO,WACH,IAAIkjB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,WACtC,OAAOqe,EAAGf,MAAM,KAAM,CAAC4gI,EAAWD,IAAQplJ,OAAO0oC,KAwC9Cu9G,CAAgBb,EAAOQ,IAKlCz9I,EAAMuD,OAAS,SAAUvP,EAAK+pJ,EAAMlqJ,EAAUwV,GAC1CrJ,EAAM68I,WAAW7oJ,GAAK,SAAUa,EAAGwU,GAC/BxV,EAASkqJ,EAAMlpJ,GAAG,SAAUmZ,EAAK+8B,GAC7BgzG,EAAOhzG,EACP1hC,EAAS2E,SAEd,SAAUA,GACT3E,EAAS2E,EAAK+vI,OAItB/9I,EAAMg+I,OAASh+I,EAAMuD,OAErBvD,EAAMi+I,MAAQj+I,EAAMuD,OAEpBvD,EAAMk+I,YAAc,SAAUlqJ,EAAK+pJ,EAAMlqJ,EAAUwV,GAC/C,IAAI80I,EAAW1B,EAAKzoJ,GAAK,SAAUa,GAC/B,OAAOA,KACRigC,UACH90B,EAAMuD,OAAO46I,EAAUJ,EAAMlqJ,EAAUwV,IAG3CrJ,EAAMo+I,MAAQp+I,EAAMk+I,YAEpB,IAAIG,EAAU,SAAUX,EAAQ1pJ,EAAKH,EAAUwV,GAC3C,IAAIqW,EAAU,GAIdg+H,EAHA1pJ,EAAMyoJ,EAAKzoJ,GAAK,SAAUa,EAAGtL,GACzB,MAAO,CAACupC,MAAOvpC,EAAGiB,MAAOqK,OAEjB,SAAUA,EAAGwU,GACrBxV,EAASgB,EAAErK,OAAO,SAAUugD,GACpBA,GACArrB,EAAQ3e,KAAKlM,GAEjBwU,UAEL,SAAU2E,GACT3E,EAASozI,EAAK/8H,EAAQvgB,MAAK,SAAU5J,EAAGC,GACpC,OAAOD,EAAEu9B,MAAQt9B,EAAEs9B,UACnB,SAAUj+B,GACV,OAAOA,EAAErK,cAIrBwV,EAAM6yB,OAAS0qH,EAAWc,GAC1Br+I,EAAMs+I,aAAed,EAASa,GAE9Br+I,EAAM0uD,OAAS1uD,EAAM6yB,OACrB7yB,EAAMu+I,aAAev+I,EAAMs+I,aAE3B,IAAIE,EAAU,SAAUd,EAAQ1pJ,EAAKH,EAAUwV,GAC3C,IAAIqW,EAAU,GAIdg+H,EAHA1pJ,EAAMyoJ,EAAKzoJ,GAAK,SAAUa,EAAGtL,GACzB,MAAO,CAACupC,MAAOvpC,EAAGiB,MAAOqK,OAEjB,SAAUA,EAAGwU,GACrBxV,EAASgB,EAAErK,OAAO,SAAUugD,GACnBA,GACDrrB,EAAQ3e,KAAKlM,GAEjBwU,UAEL,SAAU2E,GACT3E,EAASozI,EAAK/8H,EAAQvgB,MAAK,SAAU5J,EAAGC,GACpC,OAAOD,EAAEu9B,MAAQt9B,EAAEs9B,UACnB,SAAUj+B,GACV,OAAOA,EAAErK,cAIrBwV,EAAM67B,OAAS0hH,EAAWiB,GAC1Bx+I,EAAMy+I,aAAejB,EAASgB,GAE9B,IAAIt8E,EAAU,SAAUw7E,EAAQ1pJ,EAAKH,EAAU6qJ,GAC3ChB,EAAO1pJ,GAAK,SAAUa,EAAGwU,GACrBxV,EAASgB,GAAG,SAAUyO,GACdA,GACAo7I,EAAc7pJ,GACd6pJ,EAAgB,cAGhBr1I,UAGT,SAAU2E,GACT0wI,QAGR1+I,EAAM2+I,OAASpB,EAAWr7E,GAC1BliE,EAAM4+I,aAAepB,EAASt7E,GAE9BliE,EAAM8/B,KAAO,SAAU9rC,EAAKH,EAAU6qJ,GAClC1+I,EAAMie,KAAKjqB,GAAK,SAAUa,EAAGwU,GACzBxV,EAASgB,GAAG,SAAUk2C,GACdA,IACA2zG,GAAc,GACdA,EAAgB,cAEpBr1I,UAEL,SAAU2E,GACT0wI,GAAc,OAItB1+I,EAAM6+I,IAAM7+I,EAAM8/B,KAElB9/B,EAAM+3F,MAAQ,SAAU/jG,EAAKH,EAAU6qJ,GACnC1+I,EAAMie,KAAKjqB,GAAK,SAAUa,EAAGwU,GACzBxV,EAASgB,GAAG,SAAUk2C,GACbA,IACD2zG,GAAc,GACdA,EAAgB,cAEpBr1I,UAEL,SAAU2E,GACT0wI,GAAc,OAItB1+I,EAAMomC,IAAMpmC,EAAM+3F,MAElB/3F,EAAM8+I,OAAS,SAAU9qJ,EAAKH,EAAUwV,GACpCrJ,EAAMqD,IAAIrP,GAAK,SAAUa,EAAGwU,GACxBxV,EAASgB,GAAG,SAAUmZ,EAAK+wI,GACnB/wI,EACA3E,EAAS2E,GAGT3E,EAAS,KAAM,CAAC7e,MAAOqK,EAAGkqJ,SAAUA,UAG7C,SAAU/wI,EAAK0R,GACd,GAAI1R,EACA,OAAO3E,EAAS2E,GAOhB3E,EAAS,KAAMozI,EAAK/8H,EAAQvgB,MAJnB,SAAU6/I,EAAMC,GACrB,IAAI1pJ,EAAIypJ,EAAKD,SAAUvpJ,EAAIypJ,EAAMF,SACjC,OAAOxpJ,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,MAEE,SAAUX,GAC5C,OAAOA,EAAErK,cAMzBwV,EAAMk/I,KAAO,SAAUC,EAAO91I,GAC1BA,EAAWA,GAAY,aACvB,IAAIjG,EAAOs5I,EAAMyC,GACbC,EAAiBh8I,EAAKhP,OAC1B,IAAKgrJ,EACD,OAAO/1I,IAGX,IAAIqW,EAAU,GAEVuwB,EAAY,GACZhO,EAAc,SAAU5kB,GACxB4yB,EAAUjb,QAAQ3X,IAUlBgiI,EAAe,WACfD,IACA5C,EAAMvsG,EAAUtyB,MAAM,IAAI,SAAUN,GAChCA,QAIR4kB,GAAY,WACR,IAAKm9G,EAAgB,CACjB,IAAIE,EAAcj2I,EAElBA,EAAW,aAEXi2I,EAAY,KAAM5/H,OAI1B88H,EAAMp5I,GAAM,SAAU9D,GAClB,IAAI+kI,EAAOkY,EAAS4C,EAAM7/I,IAAM6/I,EAAM7/I,GAAI,CAAC6/I,EAAM7/I,IAC7CigJ,EAAe,SAAUvxI,GACzB,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAIjD,GAHIuhC,EAAKnsC,QAAU,IACfmsC,EAAOA,EAAK,IAEZvyB,EAAK,CACL,IAAIwxI,EAAc,GAClBhD,EAAME,EAAMh9H,IAAU,SAAS+/H,GAC3BD,EAAYC,GAAQ//H,EAAQ+/H,MAEhCD,EAAYlgJ,GAAKihC,EACjBl3B,EAAS2E,EAAKwxI,GAEdn2I,EAAW,kBAGXqW,EAAQpgB,GAAKihC,EACbvgC,EAAM28I,aAAa0C,IAGvBK,EAAWrb,EAAK1mH,MAAM,EAAG1U,KAAKuP,IAAI6rH,EAAKjwI,OAAS,KAAO,GACvDyjE,EAAQ,WACR,OAlaiBhkE,EAkaQ,SAAU0B,EAAGV,GAClC,OAAQU,GAAKmqB,EAAQt0B,eAAeyJ,IAnabkpJ,GAoaxB,IApaS/pJ,EAkaG0rJ,GAjafn8I,OACGvP,EAAIuP,OAAO1P,EAAUkqJ,IAEhCvB,EAAMxoJ,GAAK,SAAUa,EAAGtL,EAAGgM,GACvBwoJ,EAAOlqJ,EAASkqJ,EAAMlpJ,EAAGtL,EAAGgM,MAEzBwoJ,MA6Zcr+H,EAAQt0B,eAAekU,GApalC,IAAUtL,EAAKH,EAAUkqJ,GAsa/B,GAAIlmF,IACAwsE,EAAKA,EAAKjwI,OAAS,GAAGmrJ,EAAc7/H,OAEnC,CACD,IAAIkE,EAAW,WACPi0C,OA1DK,SAAUx6C,GAC3B,IAAK,IAAI9zB,EAAI,EAAGA,EAAI0mD,EAAU77C,OAAQ7K,GAAK,EACvC,GAAI0mD,EAAU1mD,KAAO8zB,EAEjB,YADA4yB,EAAUnuC,OAAOvY,EAAG,GAwDhBy6B,CAAeJ,GACfygH,EAAKA,EAAKjwI,OAAS,GAAGmrJ,EAAc7/H,KAG5CuiB,EAAYre,QAKxB5jB,EAAMyuI,MAAQ,SAASkR,EAAOtb,EAAMh7H,GAChC,IACIu2I,EAAW,GAEM,mBAAVD,IACPt2I,EAAWg7H,EACXA,EAAOsb,EACPA,EANgB,GASpBA,EAAQxpI,SAASwpI,EAAO,KATJ,EAUpB,IAAIE,EAAc,SAASC,EAAiBC,GAQxC,IAPA,IAAIC,EAAe,SAAS3b,EAAM4b,GAC9B,OAAO,SAASC,GACZ7b,GAAK,SAASr2H,EAAK1K,GACf48I,GAAgBlyI,GAAOiyI,EAAc,CAACjyI,IAAKA,EAAK1K,OAAQA,MACzDy8I,KAGJJ,GACHC,EAAS7+I,KAAKi/I,EAAa3b,IAAQsb,GAAO,KAE9C3/I,EAAMmgJ,OAAOP,GAAU,SAASx0F,EAAM5zD,GAClCA,EAAOA,EAAKA,EAAKpD,OAAS,IACzB0rJ,GAAmBz2I,GAAU7R,EAAKwW,IAAKxW,EAAK8L,YAIrD,OAAO+F,EAAWw2I,IAAgBA,GAGtC7/I,EAAMogJ,UAAY,SAAUjB,EAAO91I,GAE/B,GADAA,EAAWA,GAAY,cAClBkzI,EAAS4C,GAAQ,CACpB,IAAInxI,EAAM,IAAI9Y,MAAM,6DACpB,OAAOmU,EAAS2E,GAElB,IAAKmxI,EAAM/qJ,OACP,OAAOiV,IAEX,IAAIg3I,EAAe,SAAUxsJ,GACzB,OAAO,SAAUma,GACb,GAAIA,EACA3E,EAASiT,MAAM,KAAMtd,WACrBqK,EAAW,iBAEV,CACD,IAAIk3B,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC7C8pB,EAAOj1B,EAASi1B,OAChBA,EACAyX,EAAKx/B,KAAKs/I,EAAav3H,IAGvByX,EAAKx/B,KAAKsI,GAEdrJ,EAAM28I,cAAa,WACf9oJ,EAASyoB,MAAM,KAAMikB,SAKrC8/G,EAAargJ,EAAMnM,SAASsrJ,GAA5BkB,IAGJ,IAAIC,EAAY,SAAS5C,EAAQyB,EAAO91I,GAEpC,GADAA,EAAWA,GAAY,aACnBkzI,EAAS4C,GACTzB,EAAOr6I,IAAI87I,GAAO,SAAU9hI,EAAIhU,GACxBgU,GACAA,GAAG,SAAUrP,GACT,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC7CuhC,EAAKnsC,QAAU,IACfmsC,EAAOA,EAAK,IAEhBl3B,EAAS3f,KAAK,KAAMskB,EAAKuyB,QAGlCl3B,OAEF,CACD,IAAIqW,EAAU,GACdg+H,EAAOz/H,KAAKy+H,EAAMyC,IAAQ,SAAU7/I,EAAG+J,GACnC81I,EAAM7/I,IAAG,SAAU0O,GACf,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC7CuhC,EAAKnsC,QAAU,IACfmsC,EAAOA,EAAK,IAEhB7gB,EAAQpgB,GAAKihC,EACbl3B,EAAS2E,SAEd,SAAUA,GACT3E,EAAS2E,EAAK0R,QAK1B1f,EAAMugJ,SAAW,SAAUpB,EAAO91I,GAC9Bi3I,EAAU,CAAEj9I,IAAKrD,EAAMqD,IAAK4a,KAAMje,EAAMie,MAAQkhI,EAAO91I,IAG3DrJ,EAAMwgJ,cAAgB,SAASrB,EAAOlC,EAAO5zI,GACzCi3I,EAAU,CAAEj9I,IAAKw6I,EAAUZ,GAAQh/H,KAAMi/H,EAAWD,IAAUkC,EAAO91I,IAGzErJ,EAAMmgJ,OAAS,SAAUhB,EAAO91I,GAE5B,GADAA,EAAWA,GAAY,aACnBkzI,EAAS4C,GACTn/I,EAAM29I,UAAUwB,GAAO,SAAU9hI,EAAIhU,GAC7BgU,GACAA,GAAG,SAAUrP,GACT,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC7CuhC,EAAKnsC,QAAU,IACfmsC,EAAOA,EAAK,IAEhBl3B,EAAS3f,KAAK,KAAMskB,EAAKuyB,QAGlCl3B,OAEF,CACD,IAAIqW,EAAU,GACd1f,EAAM68I,WAAWH,EAAMyC,IAAQ,SAAU7/I,EAAG+J,GACxC81I,EAAM7/I,IAAG,SAAU0O,GACf,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC7CuhC,EAAKnsC,QAAU,IACfmsC,EAAOA,EAAK,IAEhB7gB,EAAQpgB,GAAKihC,EACbl3B,EAAS2E,SAEd,SAAUA,GACT3E,EAAS2E,EAAK0R,QAK1B1f,EAAMnM,SAAW,SAAUsrJ,GACvB,IAAIsB,EAAe,SAAU3tH,GACzB,IAAIzV,EAAK,WAIL,OAHI8hI,EAAM/qJ,QACN+qJ,EAAMrsH,GAAOxW,MAAM,KAAMtd,WAEtBqe,EAAGyL,QAKd,OAHAzL,EAAGyL,KAAO,WACN,OAAQgK,EAAQqsH,EAAM/qJ,OAAS,EAAKqsJ,EAAa3tH,EAAQ,GAAI,MAE1DzV,GAEX,OAAOojI,EAAa,IAGxBzgJ,EAAMsc,MAAQ,SAAUe,GACpB,IAAIkjB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GACjD,OAAO,WACH,OAAOqe,EAAGf,MACN,KAAMikB,EAAK1oC,OAAO5D,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,eAKzD,IAAI0hJ,EAAU,SAAUhD,EAAQ1pJ,EAAKqpB,EAAIhU,GACrC,IAAIhf,EAAI,GACRqzJ,EAAO1pJ,GAAK,SAAUa,EAAG8rJ,GACrBtjI,EAAGxoB,GAAG,SAAUmZ,EAAKlZ,GACjBzK,EAAIA,EAAEwN,OAAO/C,GAAK,IAClB6rJ,EAAG3yI,SAER,SAAUA,GACT3E,EAAS2E,EAAK3jB,OAGtB2V,EAAMnI,OAAS0lJ,EAAWmD,GAC1B1gJ,EAAM4gJ,aAAepD,EAASkD,GAE9B1gJ,EAAM6gJ,OAAS,SAAU9wI,EAAMlc,EAAUwV,GACjC0G,IACAlc,GAAS,SAAUma,GACf,GAAIA,EACA,OAAO3E,EAAS2E,GAEpBhO,EAAM6gJ,OAAO9wI,EAAMlc,EAAUwV,MAIjCA,KAIRrJ,EAAM8gJ,SAAW,SAAUjtJ,EAAUkc,EAAM1G,GACvCxV,GAAS,SAAUma,GACf,GAAIA,EACA,OAAO3E,EAAS2E,GAEpB,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC7C+Q,EAAKuM,MAAM,KAAMikB,GACjBvgC,EAAM8gJ,SAASjtJ,EAAUkc,EAAM1G,GAG/BA,QAKZrJ,EAAM+gJ,MAAQ,SAAUhxI,EAAMlc,EAAUwV,GAC/B0G,IASD1G,IARAxV,GAAS,SAAUma,GACf,GAAIA,EACA,OAAO3E,EAAS2E,GAEpBhO,EAAM+gJ,MAAMhxI,EAAMlc,EAAUwV,OAQxCrJ,EAAMghJ,QAAU,SAAUntJ,EAAUkc,EAAM1G,GACtCxV,GAAS,SAAUma,GACf,GAAIA,EACA,OAAO3E,EAAS2E,GAEpB,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC5C+Q,EAAKuM,MAAM,KAAMikB,GAIlBl3B,IAHArJ,EAAMghJ,QAAQntJ,EAAUkc,EAAM1G,OAQ1CrJ,EAAM24F,MAAQ,SAAUsoD,EAAQC,GAI5B,SAASC,EAAQ7rJ,EAAGkC,EAAMgvC,EAAKn9B,GAO7B,GANK/T,EAAE8nJ,UACL9nJ,EAAE8nJ,SAAU,GAETb,EAAS/kJ,KACVA,EAAO,CAACA,IAEM,GAAfA,EAAKpD,OAEL,OAAO4L,EAAM28I,cAAa,WAClBrnJ,EAAE8rJ,OACF9rJ,EAAE8rJ,WAIb5E,EAAMhlJ,GAAM,SAAS6sI,GACjB,IAAI5uG,EAAO,CACPj+B,KAAM6sI,EACNh7H,SAA8B,mBAAbA,EAA0BA,EAAW,MAGtDm9B,EACFlxC,EAAE6pJ,MAAMnqH,QAAQS,GAEhBngC,EAAE6pJ,MAAMp+I,KAAK00B,GAGXngC,EAAE+rJ,WAAa/rJ,EAAE6pJ,MAAM/qJ,SAAWkB,EAAE4rJ,aACpC5rJ,EAAE+rJ,YAENrhJ,EAAM28I,aAAarnJ,EAAE0rD,iBAjCP5iD,IAAhB8iJ,IACAA,EAAc,GAoClB,IAAII,EAAU,EACVhsJ,EAAI,CACJ6pJ,MAAO,GACP+B,YAAaA,EACbG,UAAW,KACXjvF,MAAO,KACPgvF,MAAO,KACPhE,SAAS,EACTx1I,QAAQ,EACR7G,KAAM,SAAUvJ,EAAM6R,GACpB83I,EAAQ7rJ,EAAGkC,GAAM,EAAO6R,IAE1B4yI,KAAM,WACJ3mJ,EAAE8rJ,MAAQ,KACV9rJ,EAAE6pJ,MAAQ,IAEZnqH,QAAS,SAAUx9B,EAAM6R,GACvB83I,EAAQ7rJ,EAAGkC,GAAM,EAAM6R,IAEzB23C,QAAS,WACL,IAAK1rD,EAAEsS,QAAU05I,EAAUhsJ,EAAE4rJ,aAAe5rJ,EAAE6pJ,MAAM/qJ,OAAQ,CACxD,IAAIiwI,EAAO/uI,EAAE6pJ,MAAMrvH,QACfx6B,EAAE88D,OAA4B,IAAnB98D,EAAE6pJ,MAAM/qJ,QACnBkB,EAAE88D,QAENkvF,GAAW,EACX,IAUIX,EAAKxE,GAVE,WACPmF,GAAW,EACPjd,EAAKh7H,UACLg7H,EAAKh7H,SAASiT,MAAM+nH,EAAMrlI,WAE1B1J,EAAE8rJ,OAAS9rJ,EAAE6pJ,MAAM/qJ,OAASktJ,IAAY,GACxChsJ,EAAE8rJ,QAEN9rJ,EAAE0rD,aAGNigG,EAAO5c,EAAK7sI,KAAMmpJ,KAG1BvsJ,OAAQ,WACJ,OAAOkB,EAAE6pJ,MAAM/qJ,QAEnBipJ,QAAS,WACL,OAAOiE,GAEXC,KAAM,WACF,OAAOjsJ,EAAE6pJ,MAAM/qJ,OAASktJ,IAAY,GAExC14I,MAAO,YACc,IAAbtT,EAAEsS,SACNtS,EAAEsS,QAAS,EACXtS,EAAE0rD,YAENn4C,OAAQ,YACa,IAAbvT,EAAEsS,SACNtS,EAAEsS,QAAS,EACXtS,EAAE0rD,aAGV,OAAO1rD,GAGX0K,EAAMwhJ,cAAgB,SAAUP,EAAQC,GAEpC,SAASO,EAAclsJ,EAAGC,GACxB,OAAOD,EAAEma,SAAWla,EAAEka,SAiDxB,IAAIpa,EAAI0K,EAAM24F,MAAMsoD,EAAQC,GAU5B,OAPA5rJ,EAAEyL,KAAO,SAAUvJ,EAAMkY,EAAUrG,IAnCnC,SAAiB/T,EAAGkC,EAAMkY,EAAUrG,GAOlC,GANK/T,EAAE8nJ,UACL9nJ,EAAE8nJ,SAAU,GAETb,EAAS/kJ,KACVA,EAAO,CAACA,IAEM,GAAfA,EAAKpD,OAEL,OAAO4L,EAAM28I,cAAa,WAClBrnJ,EAAE8rJ,OACF9rJ,EAAE8rJ,WAIb5E,EAAMhlJ,GAAM,SAAS6sI,GACjB,IAAI5uG,EAAO,CACPj+B,KAAM6sI,EACN30H,SAAUA,EACVrG,SAA8B,mBAAbA,EAA0BA,EAAW,MAG1D/T,EAAE6pJ,MAAMr9I,OApCd,SAAuB4/I,EAAUjsH,EAAMk1B,GAGrC,IAFA,IAAIg3F,GAAO,EACPljI,EAAMijI,EAASttJ,OAAS,EACrButJ,EAAMljI,GAAK,CAChB,IAAImrB,EAAM+3G,GAAQljI,EAAMkjI,EAAM,IAAO,GACjCh3F,EAAQl1B,EAAMisH,EAAS93G,KAAS,EAClC+3G,EAAM/3G,EAENnrB,EAAMmrB,EAAM,EAGhB,OAAO+3G,EAyBYC,CAActsJ,EAAE6pJ,MAAO1pH,EAAMgsH,GAAiB,EAAG,EAAGhsH,GAE/DngC,EAAE+rJ,WAAa/rJ,EAAE6pJ,MAAM/qJ,SAAWkB,EAAE4rJ,aACpC5rJ,EAAE+rJ,YAENrhJ,EAAM28I,aAAarnJ,EAAE0rD,YASzBmgG,CAAQ7rJ,EAAGkC,EAAMkY,EAAUrG,WAItB/T,EAAE0/B,QAEF1/B,GAGX0K,EAAM6hJ,MAAQ,SAAUZ,EAAQtsH,GAC5B,IAAImtH,GAAc,EACd3C,EAAc,GAEd0C,EAAQ,CACR1C,MAAOA,EACPxqH,QAASA,EACT0sH,UAAW,KACXjvF,MAAO,KACPgvF,MAAO,KACPW,SAAS,EACThhJ,KAAM,SAAUvJ,EAAM6R,GACbkzI,EAAS/kJ,KACVA,EAAO,CAACA,IAEZglJ,EAAMhlJ,GAAM,SAAS6sI,GACjB8a,EAAMp+I,KAAK,CACPvJ,KAAM6sI,EACNh7H,SAA8B,mBAAbA,EAA0BA,EAAW,OAE1Dw4I,EAAME,SAAU,EACZF,EAAMR,WAAalC,EAAM/qJ,SAAWugC,GACpCktH,EAAMR,eAGdrhJ,EAAM28I,aAAakF,EAAM7gG,UAE7BA,QAAS,SAASA,IACd,IAAI8gG,EAAJ,CACA,GAAqB,IAAjB3C,EAAM/qJ,OAGN,OAFGytJ,EAAMT,QAAUS,EAAME,SAASF,EAAMT,aACxCS,EAAME,SAAU,GAIpB,IAAInsB,EAAwB,iBAAZjhG,EACFwqH,EAAMr9I,OAAO,EAAG6yB,GAChBwqH,EAAMr9I,OAAO,EAAGq9I,EAAM/qJ,QAEhC6mC,EAAKwhH,EAAK7mB,GAAI,SAAUyO,GACxB,OAAOA,EAAK7sI,QAGbqqJ,EAAMzvF,OAAOyvF,EAAMzvF,QACtB0vF,GAAU,EACVb,EAAOhmH,GAAI,WACP6mH,GAAU,EAEV,IAAIvhH,EAAOvhC,UACXw9I,EAAM5mB,GAAI,SAAUp+H,GACZA,EAAK6R,UACL7R,EAAK6R,SAASiT,MAAM,KAAMikB,MAIlCygB,SAGR5sD,OAAQ,WACJ,OAAO+qJ,EAAM/qJ,QAEjBipJ,QAAS,WACL,OAAOyE,IAGf,OAAOD,GAGX,IAAIG,EAAc,SAAUl4J,GACxB,OAAO,SAAUuzB,GACb,IAAIkjB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GACjDqe,EAAGf,MAAM,KAAMikB,EAAK1oC,OAAO,CAAC,SAAUmW,GAClC,IAAIuyB,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GAC1B,oBAAZ4D,UACHoL,EACIpL,QAAQC,OACRD,QAAQC,MAAMmL,GAGbpL,QAAQ9Y,IACb0yJ,EAAMj8G,GAAM,SAAU1rC,GAClB+N,QAAQ9Y,GAAM+K,aAOtCmL,EAAMyC,IAAMu/I,EAAY,OACxBhiJ,EAAMytD,IAAMu0F,EAAY,OAKxBhiJ,EAAMiiJ,QAAU,SAAU5kI,EAAI6kI,GAC1B,IAAInE,EAAO,GACPoE,EAAS,GACbD,EAASA,GAAU,SAAUrtJ,GACzB,OAAOA,GAEX,IAAIutJ,EAAW,WACX,IAAI7hH,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,WAClCqK,EAAWk3B,EAAKhyB,MAChBzjB,EAAMo3J,EAAO5lI,MAAM,KAAMikB,GACzBz1C,KAAOizJ,EACP/9I,EAAMm5F,UAAS,WACX9vF,EAASiT,MAAM,KAAMyhI,EAAKjzJ,OAGzBA,KAAOq3J,EACZA,EAAOr3J,GAAKiW,KAAKsI,IAGjB84I,EAAOr3J,GAAO,CAACue,GACfgU,EAAGf,MAAM,KAAMikB,EAAK1oC,OAAO,CAAC,WACxBkmJ,EAAKjzJ,GAAOkU,UACZ,IAAI1J,EAAI6sJ,EAAOr3J,UACRq3J,EAAOr3J,GACd,IAAK,IAAIvB,EAAI,EAAGC,EAAI8L,EAAElB,OAAQ7K,EAAIC,EAAGD,IACnC+L,EAAE/L,GAAG+yB,MAAM,KAAMtd,iBAO/B,OAFAojJ,EAASrE,KAAOA,EAChBqE,EAASC,WAAahlI,EACf+kI,GAGXpiJ,EAAMsiJ,UAAY,SAAUjlI,GAC1B,OAAO,WACL,OAAQA,EAAGglI,YAAchlI,GAAIf,MAAM,KAAMtd,aAI7CgB,EAAM2/I,MAAQ,SAAU7wG,EAAOj7C,EAAUwV,GAErC,IADA,IAAIk5I,EAAU,GACLh5J,EAAI,EAAGA,EAAIulD,EAAOvlD,IACvBg5J,EAAQxhJ,KAAKxX,GAEjB,OAAOyW,EAAMqD,IAAIk/I,EAAS1uJ,EAAUwV,IAGxCrJ,EAAMwiJ,YAAc,SAAU1zG,EAAOj7C,EAAUwV,GAE3C,IADA,IAAIk5I,EAAU,GACLh5J,EAAI,EAAGA,EAAIulD,EAAOvlD,IACvBg5J,EAAQxhJ,KAAKxX,GAEjB,OAAOyW,EAAM29I,UAAU4E,EAAS1uJ,EAAUwV,IAG9CrJ,EAAMyiJ,IAAM,WACR,IAAIC,EAAM1jJ,UACV,OAAO,WACH,IAAIqvC,EAAOxwC,KACP0iC,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,WAClCqK,EAAWk3B,EAAKhyB,MACpBvO,EAAMuD,OAAOm/I,EAAKniH,GAAM,SAAUoiH,EAAStlI,EAAIsjI,GAC3CtjI,EAAGf,MAAM+xB,EAAMs0G,EAAQ9qJ,OAAO,CAAC,WAC3B,IAAImW,EAAMhP,UAAU,GAChB4jJ,EAAW3uJ,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GACrD2hJ,EAAG3yI,EAAK40I,UAGhB,SAAU50I,EAAK0R,GACXrW,EAASiT,MAAM+xB,EAAM,CAACrgC,GAAKnW,OAAO6nB,SAK9C1f,EAAM6iJ,QAAU,WACd,OAAO7iJ,EAAMyiJ,IAAInmI,MAAM,KAAMroB,MAAM9I,UAAU2pC,QAAQprC,KAAKsV,aAG5D,IAAI8jJ,EAAa,SAAUpF,EAAQgF,GAC/B,IAAIK,EAAK,WACL,IAAI10G,EAAOxwC,KACP0iC,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,WAClCqK,EAAWk3B,EAAKhyB,MACpB,OAAOmvI,EAAOgF,GAAK,SAAUrlI,EAAIsjI,GAC7BtjI,EAAGf,MAAM+xB,EAAM9N,EAAK1oC,OAAO,CAAC8oJ,OAEhCt3I,IAEJ,GAAIrK,UAAU5K,OAAS,EAAG,CACtB,IAAImsC,EAAOtsC,MAAM9I,UAAUwyB,MAAMj0B,KAAKsV,UAAW,GACjD,OAAO+jJ,EAAGzmI,MAAMze,KAAM0iC,GAGtB,OAAOwiH,GAGf/iJ,EAAMgjJ,UAAYzF,EAAWuF,GAC7B9iJ,EAAMijJ,gBAAkBzF,EAASsF,GAEjC9iJ,EAAMkjJ,QAAU,SAAU7lI,EAAIhU,IAC1B,SAASyf,EAAK9a,GACV,GAAIA,EAAK,CACL,GAAI3E,EACA,OAAOA,EAAS2E,GAEpB,MAAMA,EAEVqP,EAAGyL,GAEPA,IAIiC9/B,EAAOD,QACxCC,EAAOD,QAAUiX,OAMhB,KAFU,EAAF,WACL,OAAOA,GACV,QAFM,OAEN,aAllCT,K,oDCcAhX,EAAOD,QAAU,CAAEwqG,YAhBnB,SAAqBr5E,GACjB,IAAKA,EACD,OAAO,EAGX,IAAIipI,EAAgB55J,EAAVmN,EAAO,EAEjB,IAAKnN,EAAI,EAAGA,EAAI2wB,EAAO9lB,OAAQ7K,IAC3B45J,EAAOjpI,EAAO9kB,WAAW7L,GACzBmN,GAAQysJ,EAAOl6I,KAAKsP,IAAI,GAAI2B,EAAO9lB,OAAS,EAAI7K,GAChDmN,EAAOuS,KAAKuP,IAAW,EAAP9hB,GAGpB,OAAOA,K,8BCpBX,yEAOA,MAAMklB,EAASF,oBAAU6E,GAOV,MAAMsjE,UAAsBxqD,IAiBvCvlC,YACQoW,EACA+5E,EACAC,EACA9xE,EACA+xE,EACAlgD,EACAmgD,GACJ9qD,QACAz7B,KAAKqM,IAAMA,EACXrM,KAAKomF,SAAWA,EAChBpmF,KAAKqmF,UAAYA,EACjBrmF,KAAKuU,WAAaA,EAClBvU,KAAKsmF,iBAAmBA,EACxBtmF,KAAKomC,UAAYA,EAOjBpmC,KAAKumF,YAAcA,EAMnBvmF,KAAK+qF,SAAU,EAKf/qF,KAAKgrF,cAAgB,GAMrBhrF,KAAK28C,KAAO,KAMZ38C,KAAKsxC,MAAQ,KAMbtxC,KAAKg1E,IAAM,KAOf,mBACI,OAAOh1E,KAAKumF,YAAcvmF,KAAKomF,SAAWpmF,KAAKqmF,UAOnD,mBACI,OAAOrmF,KAAKumF,YAAcvmF,KAAKqmF,UAAYrmF,KAAKomF,SAapD1oB,WAAW/gB,EAAMq4B,EAAK7tE,GAClB,GAAmB,OAAfnH,KAAKsxC,MAAgB,CACrB,MAAMoH,EACC,kCAAiC14C,KAAKqM,oCAC3BrM,KAAKsxC,QAGvB,MADAvzB,EAAO/Y,MAAM0zC,GACP,IAAIrhD,MAAMqhD,GAEpB14C,KAAK28C,KAAOA,EACZ38C,KAAKg1E,IAAMA,EACXh1E,KAAKsxC,MAAQw2C,IACb9nF,KAAK+nF,aAAa5gF,GAStB4gF,aAAa5gF,IAWbykF,iBAAiB78C,IAQjBw2G,WACI,OAAOvlJ,KAAKsxC,MAUhBk0G,WAAWz2G,IAOX02G,cAAc12G,IAiBdgzC,UAAUrjB,EAASmuB,EAAS1lF,IAW5BwlF,YAAYh+C,EAAQ+vB,EAASmuB,IAK7B4I,mBACI,OAAOz1F,KAAKumF,YAAcvmF,KAAKomF,SAAWpmF,KAAKqmF,c,8EC1MvD,iFAQA,MAAMtoE,EAASF,oBAAU6E,GAMV,MAAM2kE,UAA2Bq+D,IAI5CzvJ,cACIwlC,QAUAz7B,KAAK2lJ,WAAa,IAAI/hI,IAMtB5jB,KAAKs3H,SAAW,KAOpB9sC,YAAY7tC,GACR,MAAMipG,EAAc5lJ,KAAKs3H,SAEzBt3H,KAAKs3H,SAAW36E,EACZipG,IACAA,EAAY98B,uBACR,aAAc9oH,KAAK6lJ,mBACvBD,EAAY98B,uBACR,aAAc9oH,KAAK8lJ,mBACvBF,EAAY98B,uBACR,YAAa9oH,KAAK+lJ,oBAEtBppG,IAEA38C,KAAK6lJ,kBAAoB,CAAC3kJ,EAAMvK,KAC5BqJ,KAAK6jB,aAAa8D,KACdq+H,IACArvJ,EAAM6wC,IAAgC,SAAftmC,EAAKvU,QAEpCgwD,EAAKisE,oBAAoB,aAAc5oH,KAAK6lJ,mBAE5C7lJ,KAAK8lJ,kBAAoB,CAAC5kJ,EAAMvK,KAC5BqJ,KAAK6jB,aAAa8D,KACdq+H,IACArvJ,EAAM6wC,IAAgC,SAAftmC,EAAKvU,QAEpCgwD,EAAKisE,oBAAoB,aAAc5oH,KAAK8lJ,mBAE5C9lJ,KAAK+lJ,kBAAoB,CAAC7kJ,EAAMvK,KAC5BqJ,KAAK6jB,aAAa8D,KACdq+H,IACArvJ,EAAMuK,EAAKvU,QAEnBgwD,EAAKisE,oBAAoB,YAAa5oH,KAAK+lJ,oBAOnDE,iBAAiBz5D,EAAOn8D,GACpB,GAAIrwB,KAAKs3H,SACL,OAAOt3H,KAAKs3H,SAASkhB,qBAAqBhsD,EAAOn8D,GAErDtS,EAAO/Y,MAAM,kDAMjBkhJ,aAAa18H,GACT,OAAOxpB,KAAK2lJ,WAAWp5J,IAAIi9B,GAS/B6iE,aAAa7iE,EAAMutD,GACf,GAAoB,iBAATvtD,EACP,MAAM,IAAI3yB,UAAW,QAAO2yB,uBAEhCxpB,KAAK2lJ,WAAWlgI,IAAI+D,EAAMutD,O,kFCzGlC,8CAgBe,MAAM2uE,UAAuBlqH,IAOxC0qH,aAAa18H,GACT,MAAM,IAAInyB,MAAM,mBAcpB4uJ,iBAAiBz5D,EAAOn8D,GACpB,MAAM,IAAIh5B,MAAM,sB,6BCxCxB,mBAOA,MAAM8uJ,UAAsB/U,IAIxBn7I,cACIwlC,QACAz7B,KAAK4E,IAAM,GAOfgG,KAAK2J,GACDknB,MAAM7wB,KAAK2J,GACXvU,KAAKuU,WAAWrH,SAAWlN,KAAKomJ,YAAYl5J,KAAK8S,MACjDA,KAAKuU,WAAWpH,UAAYnN,KAAKqmJ,YAAYn5J,KAAK8S,MAOtDomJ,YAAYp4I,GACRhO,KAAK4E,IAAI1B,KAAK,EAAE,IAAIiF,MAAOC,UAAW,WAAY4F,IAOtDq4I,YAAYr4I,GACRhO,KAAK4E,IAAI1B,KAAK,EAAE,IAAIiF,MAAOC,UAAW,WAAY4F,KAO3C,eACXvS,UAAQsK,oBAAoB,SAAU,IAAIogJ,K,8BC/C9C,0EAOA,MAAMpoI,EAASF,oBAAU6E,GAOV,MAAM85B,UAA6B40F,IAK9CxmI,KAAK2J,GACDknB,MAAM7wB,KAAK2J,GAEXvU,KAAKuU,WAAWxG,WACZ/N,KAAKsmJ,OAAOp5J,KAAK8S,MAdV,kBAc6B,KAAM,MAAO,KAAM,MAO/DsmJ,OAAOrzI,GACH8K,EAAO7Y,KAAK,UAAW+N,GAa3BsoC,KAAKlS,EAAI1yC,EAAMq+C,EAAUuxG,EAAUzxC,GAC/B,OAAO,IAAIh3E,QAAQ,CAACC,EAASC,KACzB,IAAK82E,EAGD,YAFA92E,EAAO,IAAI3mC,MAAM,oBAIrB,MAAMgZ,EAAM1U,cAAI,CACZsL,KAAM,MACNoiC,GAAIyrE,IAGRzkG,EAAItkB,EAAE,OAAQ,CACVka,MAhDG,kBAiDHojC,KACA1yC,SAEJ0Z,EAAItkB,EAAE,SAAU,CACZE,KAAM,cACNU,MAAOqoD,IACR7uC,KAECogJ,GAAYA,EAAShwJ,QACrB8Z,EAAItkB,EAAE,SAAU,CACZE,KAAM,kBACNU,MAAO45J,IACRpgJ,KAGPnG,KAAKuU,WAAWnG,OACZiC,EACA5K,IACIsY,EAAO7Y,KAAK,eAAgBO,GAG5B,MAAMoO,EAAWi7B,EAAErpC,GAAQ6vB,KAAK,OAAO/zB,KAAK,OAE5CvB,KAAKwmJ,aAAe3yI,EAASuB,OAAO,QAAQ7e,QAC5CwnB,EAAO7Y,KAAM,2BAA0BlF,KAAKwmJ,cAC5CzoH,KAEJ/4B,IACI+Y,EAAO7Y,KAAK,cAAeF,GAC3Bg5B,EAAOh5B,OAUvBmrH,SACI,OAAO,IAAIryF,QAAQ,CAACC,EAASC,KACzB,IAAKh+B,KAAKwmJ,aAIN,OAHAxoH,EAAO,IAAI3mC,MAAM,6BACjB0mB,EAAO5Y,KAAK,uBAKhB,MAAMkL,EAAM1U,cAAI,CACZsL,KAAM,MACNoiC,GAAIrpC,KAAKwmJ,eAGbn2I,EAAItkB,EAAE,SAAU,CACZka,MAvGG,oBA0GPjG,KAAKuU,WAAWnG,OAAOiC,EAAK5K,IACxBsY,EAAO7Y,KAAK,iBAAkBO,GAC9BzF,KAAKwmJ,aAAe,KACpBzoH,KACD/4B,IACC+Y,EAAO7Y,KAAK,gBAAiBF,GAC7BhF,KAAKwmJ,aAAe,KACpBxoH,EAAO,IAAI3mC,MAAM,0B,mFC1HjC,+CASA,MAAM0mB,EAASF,oBAAU6E,GAkBzB,IAAIy2B,GAAmB,EAQvB,MAAMstG,EAA8B,6BAO9BC,EACA,wDAKS,eAEXjrJ,UAAQmJ,IAAM,SAASC,EAAOC,GAe1B,OATAiZ,EAAO4oI,MAAM,UAAW9hJ,EAAOC,GACZ,iBAARA,IAC6B,IAA7BA,EAAIlB,QAAQ,cAC0C,IAAtDkB,EAAIlB,QAAQ,uCAEnBiB,EAAQpJ,UAAQmD,SAASG,MAIrB8F,GACR,KAAKpJ,UAAQmD,SAASC,OAGO,IAArBs6C,GACOstG,EAA4Bv0I,KAAKpN,KACxCiZ,EAAO9Y,MAAM,yBACbk0C,GAAmB,GAEvB,MACJ,KAAK19C,UAAQmD,SAASG,KAClBgf,EAAO5Y,KAAM,YAAWL,GACxB,MAAM8hJ,EAAmBF,EAAuBxsG,KAAKp1C,GAEjD8hJ,GAAgD,IAA5BA,EAAiBrwJ,SACrC4iD,EAAkB7gC,SAASsuI,EAAiB,GAAI,IAChD7oI,EAAO9Y,MAAO,2BAA0Bk0C,IAE5C,MACJ,KAAK19C,UAAQmD,SAASlB,MACtB,KAAKjC,UAAQmD,SAASI,MAElB8F,EAAO,YAAWA,EAClB23B,IAAqBkG,iBAAiB,IAAItrC,MAAMyN,IAChDiZ,EAAO/Y,MAAMF,KAarBrJ,UAAQ29C,mBAAqB,WACzB,OAAOD,GAGX19C,UAAQs8C,gBAAkB,SAAShoC,GAC/B,OAAQA,GACR,KAAKtU,UAAQgC,OAAOY,aAChB,MAAO,eACX,KAAK5C,UAAQgC,OAAOC,MAChB,MAAO,QACX,KAAKjC,UAAQgC,OAAOE,WAChB,MAAO,aACX,KAAKlC,UAAQgC,OAAOG,SAChB,MAAO,WACX,KAAKnC,UAAQgC,OAAOI,eAChB,MAAO,iBACX,KAAKpC,UAAQgC,OAAOK,SAChB,MAAO,WACX,KAAKrC,UAAQgC,OAAOM,UAChB,MAAO,YACX,KAAKtC,UAAQgC,OAAOO,aAChB,MAAO,eACX,KAAKvC,UAAQgC,OAAOQ,cAChB,MAAO,gBACX,KAAKxC,UAAQgC,OAAOS,SAChB,MAAO,WACX,QACI,MAAO,e,6EChInB,+FAOA,MAAM6f,EAASF,oBAAU6E,GASlB,MAAM+hG,EAcTxuH,YAAY2wB,EAAYzf,GACpBnH,KAAK4mB,WAAaA,EAClB5mB,KAAKmH,QAAUA,EAGfnH,KAAKokH,cAAgBj9G,EAAQi9G,gBAAkB3sF,IAAc8b,SACvDhzC,EACAP,KAAK6mJ,kBAAkB1/I,EAAQi9G,eAGrC,MAAME,EAAWtkH,KAAK6mJ,kBAAkB1/I,EAAQm9G,UAC1CC,EAAWvkH,KAAK6mJ,kBAAkB1/I,EAAQo9G,UAEhDvkH,KAAK8mJ,kBAAoBxiC,GAAYtkH,KAAK+mJ,kBAAkBziC,GAAYA,EAAW7sF,IAAc8b,IACjGvzC,KAAKgnJ,kBAAoBziC,GAAYvkH,KAAK+mJ,kBAAkBxiC,GAAYA,EAAW9sF,IAAc8b,IACjGx1B,EAAO9Y,MAAO,iDAAgDjF,KAAK8mJ,wCACxD9mJ,KAAKgnJ,qBAIZ7iI,IAAQuQ,aAAe10B,KAAK8mJ,oBAAsBrvH,IAAc+b,MAChExzC,KAAK8mJ,kBAAoBrvH,IAAc8b,KAG3CvzC,KAAK4mB,WAAWZ,GACZgB,cACA,IAAMhnB,KAAKinJ,yBACfjnJ,KAAK4mB,WAAWZ,GACZgB,YACA,IAAMhnB,KAAKinJ,yBACfjnJ,KAAK4mB,WAAWZ,GACZgB,yBACA/O,GAAWjY,KAAKknJ,sBAAsBjvI,IAU9C4uI,kBAAkBhwH,GACd,MAAqB,iBAAVA,EACAzqC,OAAOm7B,OAAOkQ,KAAenC,KAAK3oC,GAASA,IAAUkqC,EAAMl0B,eAG/D,KAUXokJ,kBAAkBh+D,GAGd,SAAI5kE,IAAQuQ,cAAevQ,IAAQC,kBAI5B94B,OAAO6tI,gBACP7tI,OAAO6tI,eAAeC,iBACtB9tI,OAAO6tI,eAAeC,gBAAgB,SAASjpD,OACjDluC,KAAKpL,GAASA,EAAMyhF,SAAS31G,gBAAmB,SAAQomF,GAWjEm+D,sBAAsBC,GAClB,MAAMp+D,EAAiBo+D,EAAa3/H,MAAQxnB,KAAKgnJ,kBAAoBhnJ,KAAK8mJ,kBACpE1iC,EAAgBpkH,KAAKokH,eAAiBpkH,KAAK+mJ,kBAAkB/mJ,KAAKokH,eAClEpkH,KAAKokH,cACL,KAENpkH,KAAKinJ,sBAAsBE,EAAcp+D,EAAgBq7B,GAW7D6iC,sBAAsBE,EAAe,KAAMp+D,EAAiB,KAAMq7B,EAAgB,MAC9E,MAAMnsG,EAAUkvI,GAA8BnnJ,KAAK4mB,WAAWg7F,iBACxD/qF,EAAQkyD,GAAkC/oF,KAAK8mJ,kBACrD,IAAIM,EAAgBvwH,EAEpB,GAAI5e,IAAYA,EAAQuP,QAAUxnB,KAAKmH,QAAQk9G,sBAAuB,CAClE,MAAMgjC,EAAqBrnJ,KAAK4mB,WAAWkxD,kBAAkBtyE,IAAI2xE,GAAeA,EAAYG,SAE5F,IAAK,MAAMgwE,KAAUD,EAAoB,CACrC,MAAME,EAAgBtvI,EAAQmvE,eAAe6+D,iBAAiBqB,EAAQ9/G,KAElE+/G,GAAiBA,EAAc3O,WAAa2O,EAAc3O,YAAc/hH,IACxEuwH,EAAgBG,EAAc3O,YAI1C3gI,GAAWA,EAAQg2E,eAAem5D,EAAehjC,GAUrD2C,oBACI,OAAO/mH,KAAK8mJ,sB,snBClJpB,MAAM/oI,EAASF,oBAAU6E,GAMV,MAAMgiB,EAWjBzuC,YAAYovB,EAAgBof,EAAOuM,GAC/B,IAAK3rB,IAAmBof,EACpB,MAAM,IAAI5tC,UAAU,kDACjB,GAAIwuB,GAAkBof,EACzB,MAAM,IAAI5tC,UAAU,qDA4BxB,GAzBIwuB,EACAtH,EAAO9Y,MAAM,qCAEb8Y,EAAO9Y,MAAO,6BAA4Bw/B,MAK9CzkC,KAAKyjC,SAAW,KAGhBzjC,KAAK2tG,cAAgB38D,EAIrBhxC,KAAK0zG,MAAQ,KAGb1zG,KAAKwnJ,oBAAqB,EAG1BxnJ,KAAKynJ,mBAAoB,EAIrBpiI,EAAgB,CAChB,MAAMqiI,EACAriI,EAAesiI,kBACb,mBAAoB,CAChBj/I,SAAU,uCAItB1I,KAAK4nJ,eAAeF,GACpB1nJ,KAAK0zG,MAAQ,mBAGNjvE,IACPzkC,KAAKwnJ,oBAAqB,EAC1BxnJ,KAAK6nJ,OAASpjH,EACdzkC,KAAK8nJ,kBASbA,iBAEI,MAAMC,EAAK,IAAIxsI,UAAUvb,KAAK6nJ,QAG9B7nJ,KAAK4nJ,eAAeG,GACpB/nJ,KAAK0zG,MAAQ,YAQjBs0C,0BACI,IAAIC,EAAW,EAEf,MAAMC,EAAS,KACPloJ,KAAK2lC,WAGT3lC,KAAK8nJ,eAAe9nJ,KAAK6nJ,QACzBI,EAAW78I,KAAKqP,IAAe,EAAXwtI,EAAc,IAClCjoJ,KAAKmoJ,cAAgB59I,WAAW29I,EAAmB,IAAXD,KAG5CjoJ,KAAKmoJ,cAAgB59I,WAAW29I,EAAmB,IAAXD,GAQ5CG,yBACQpoJ,KAAKmoJ,gBACL16I,aAAazN,KAAKmoJ,eAClBnoJ,KAAKmoJ,mBAAgB5nJ,GAU7B8nJ,0BAA0BC,GACtB,IAAKtoJ,KAAKwnJ,mBACN,OAEJ,MAAM,KAAE7qI,EAAF,OAAQnN,GAAW84I,EAEzB7kI,IAAWuI,cAAc8E,YAA+BnU,EAAMnN,IAC9DxP,KAAKwnJ,oBAAqB,EAC1BxnJ,KAAK2tG,cAAcr7D,KAAKjY,IAAU/N,kBAAmB,KACjDtsB,KAAKooJ,yBACLpoJ,KAAKwnJ,oBAAqB,IAE9BxnJ,KAAKgoJ,0BAOT,WACI,OAAOhoJ,KAAK0zG,MAMhBj3F,QAII,GAHAzc,KAAKynJ,mBAAoB,EACzBznJ,KAAKooJ,yBACLpoJ,KAAKwnJ,oBAAqB,EACtBxnJ,KAAKyjC,SAAU,CACf,IACIzjC,KAAKyjC,SAAShnB,QAChB,MAAOzX,IAEThF,KAAKyjC,SAAW,MASxBkC,SACI,OAAO3lC,KAAKyjC,WAA0C,SAA7BzjC,KAAKyjC,SAASzqB,YAChChZ,KAAKyjC,SAASzqB,aAAeuC,UAAUulD,MAQlDv3B,yBAAyBzS,GACrB92B,KAAKuN,MAAL,GACIg7I,aAAc,iBACXzxH,IAaXwS,YAAYD,EAAIvS,GACZ92B,KAAKuN,MAAM,CACPg7I,aAAc,kBACdC,WAAY1xH,EACZuS,OAQRnE,oBAAoBv4C,GAChBoxB,EAAOnZ,IAAK,iBAAgBjY,MAE5BqT,KAAKuN,MAAM,CACPg7I,aAAc,oBACd/8B,MAAO7+H,IAYfo4C,6BAA6B0jH,GACzB1qI,EAAOnZ,IAAK,+BAA8B6jJ,MAE1CzoJ,KAAKuN,MAAM,CACPg7I,aAAc,gCACdG,kBAAmBD,IAS3BxjH,mCAAmC0jH,GAC/B5qI,EAAOnZ,IAAK,uDAAsD+jJ,OAClE3oJ,KAAKuN,MAAM,CACPg7I,aAAc,0BACd1iH,eAAgB8iH,IASxB7jH,uCAAuCva,GACnCxM,EAAOnZ,IAAK,yCAAwCgI,KAAKwL,UAAUmS,IACnEvqB,KAAKuN,MAAL,GACIg7I,aAAc,4BACXh+H,IASX4a,qBAAqBrE,GACjB/iB,EAAO9Y,MAAO,+CAA8C67B,GAC5D9gC,KAAKuN,MAAM,CACPg7I,aAAc,mBACdznH,cAOR8mH,eAAegB,GACX,MAAM53G,EAAUhxC,KAAK2tG,cAErBi7C,EAAQptI,OAAS,KACbuC,EAAO7Y,KAAQlF,KAAK0zG,MAAP,mBAQb1iE,EAAQrpB,KAAK0S,IAAU/N,oBAG3Bs8H,EAAQltI,QAAUmQ,IAGK,cAAf7rB,KAAK0zG,OACL31F,EAAO/Y,MAAO,kBAAiB6mB,EAAMpnB,UAI7CmkJ,EAAQ9sI,UAAY,EAAGniB,WAEnB,IAAI5D,EAEJ,IACIA,EAAM6W,KAAKsL,MAAMve,GACnB,MAAOqL,GAIL,OAHAy3B,IAAqBkG,iBAAiB39B,QACtC+Y,EAAO/Y,MAAM,4CAA6CrL,EAAMqL,GAKpE,MAAMujJ,EAAexyJ,EAAIwyJ,aAEzB,OAAQA,GACR,IAAK,qCAAsC,CACvC,MAAM,wBAAEM,EAAF,iBAA2BC,EAAmB,IAAO/yJ,EAE3DgoB,EAAO9Y,MAAO,qBAAoB4jJ,yBAA+CC,KACjF93G,EAAQrpB,KAAK0S,IAAU9rC,yBAA0Bs6J,EAAyBC,GAC1E,MAEJ,IAAK,wCAAyC,CAC1C,MAAMC,EAAWhzJ,EAAIgzJ,SACf/xE,EAA0B,SAAfjhF,EAAIiiG,OAErBj6E,EAAO7Y,KAAM,uCAAsC6jJ,YAAmB/xE,KACtEhmC,EAAQrpB,KAAK0S,IAAU9N,6BAA8Bw8H,EAAU/xE,GAE/D,MAEJ,IAAK,kBACDhmC,EAAQrpB,KAAK0S,IAAU3rC,0BAA2BqH,EAAIY,KAAMZ,EAAIyyJ,YAEhE,MAEJ,IAAK,gBACDx3G,EAAQrpB,KAAK0S,IAAU1rC,wBAAyBoH,EAAIY,KAAMZ,GAE1D,MAEJ,IAAK,4BAA6B,CAE9B,MAAMqvC,EAAiBrvC,EAAIqvC,eAE3BrnB,EAAO7Y,KAAM,4BAA2BkgC,GACxC4L,EAAQrpB,KAAK0S,IAAU7N,uBAAwB4Y,GAE/C,MAEJ,IAAK,yBAA0B,CAC3B,MAAMmvF,EAAmBx+H,EAAIw+H,iBAEzBA,IACAx2G,EAAO7Y,KAAM,2BAA0B0H,KAAKwL,UAAUm8G,IACtDvjF,EAAQrpB,KAAK0S,IAAU3N,iCAAkC6nG,IAE7D,MAEJ,IAAK,cACDx2G,EAAO7Y,KAAM,iCAAgCnP,EAAIkuE,YACjD,MAEJ,QACIlmD,EAAO9Y,MAAM,mCAAoClP,GAMjDi7C,EAAQrpB,KAAM,mBAAkB4gI,EAAgBxyJ,KAKxD6yJ,EAAQhtI,QAAUiQ,IACd9N,EAAO7Y,KAAM,sBAAoBlF,KAAKynJ,kBAAoB,SAAW,WAElD,cAAfznJ,KAAK0zG,QACA1zG,KAAKynJ,oBACN1pI,EAAO/Y,MAAO,mBAAkB6mB,EAAMlP,QAAQkP,EAAMrc,UACpDxP,KAAKqoJ,0BAA0Bx8H,KAKvC7rB,KAAKyjC,SAAW,MAIpBzjC,KAAKyjC,SAAWmlH,EAUpBr7I,MAAMy7I,GACF,MAAMJ,EAAU5oJ,KAAKyjC,SAErB,IAAKzjC,KAAK2lC,SAEN,MADA5nB,EAAO/Y,MAAM,2CACP,IAAI3N,MAAM,qBAGpBuxJ,EAAQv7I,KAAKT,KAAKwL,UAAU4wI,Q,6ECzZpC,+KA6BA,MAAMjrI,EAASF,oBAAU6E,GAMV,MAAM0gB,UAAwBwjE,IAoBzC3wG,aAAY,SACR6kC,EADQ,WAER8E,EAFQ,UAGRvP,EAHQ,WAIRoP,EAJQ,MAKR4D,EALQ,SAMR9C,EANQ,WAORnB,EAPQ,OAQRxZ,EARQ,MASR+a,EATQ,UAURG,EAVQ,QAWRM,EAAU,KAEV3F,MACqB,KACjB7V,EACA+a,EAC4B,IAAM3gC,KAAK2nB,KAAK2iB,uBAC5Cja,EACAyQ,GAEJ9gC,KAAKipJ,sBAAuB,EAC5B,MAAMC,EAAS9nH,EAAQ9L,KAAKj8B,GAAKA,EAAE6lF,UAAUl/E,OAEzCkpJ,GACAlpJ,KAAKmpJ,mBAAmBD,GAQ5BlpJ,KAAKqjC,MAAQA,EACbrjC,KAAKugC,SAAWA,EAChBvgC,KAAKo/B,WAAaA,EAIlBp/B,KAAKy/B,WAAakB,EAAMuC,cAAcvK,OACtC34B,KAAKopJ,qBAAuB3pH,EAI5Bz/B,KAAKqpJ,aAAe1oH,EAAMN,iBAGrBj0C,OAAOmZ,KAAKvF,KAAKqpJ,cAAc9yJ,QAAUuqC,IAAcC,IAAUQ,SAClEvhC,KAAKqpJ,aAAe,CAChB1wH,OAAQgI,EAAMuC,cAAcvK,OAC5BG,MAAO6H,EAAMuC,cAAcpK,QAInC94B,KAAK86B,SAAWA,EAUhB96B,KAAKspJ,cAAgBxrH,QAAQC,UAS7B/9B,KAAKupJ,YAAc3pH,EAMnB5/B,KAAKwpJ,aAAc,EAKnBxpJ,KAAKypJ,cAAe,EAOpBzpJ,KAAK0pJ,eAAgB,EAQrB1pJ,KAAK2pJ,cAAkC,KAAlB3pJ,KAAK86B,cAAkBv6B,EAAYP,KAAK86B,SAE7D96B,KAAK4pJ,cAAgB,EAErB5pJ,KAAK6pJ,wBAA0BlsH,IAC3B,MAAMmsH,EAAkB9pJ,KAAK2pJ,cAE7B3pJ,KAAKy+F,+BAA+B9gE,SAMO,IAA/B39B,KAAKm5F,WAAWngF,iBACa,IAAvBhZ,KAAK2pJ,gBACXhsH,EAAQrI,KAAKtpC,GAAKA,EAAE8uC,WAAa96B,KAAK2pJ,qBAOf,IAApBG,QAAiE,IAAvB9pJ,KAAK2pJ,iBAE1D3pJ,KAAKwpJ,aAAc,IAQvBxpJ,KAAKmpC,gBAAkB5N,IAASc,wBAAwB,YACxDr8B,KAAK+pJ,4BAA8B/pJ,KAAK0pC,eAAex8C,KAAK8S,MAC5Du7B,IAAS6I,YACL/J,IAAUhN,4BACVrtB,KAAK+pJ,8BAGbxuH,IAAS6I,YAAY/J,IAAU9M,wBAAyBvtB,KAAK6pJ,yBAE7D7pJ,KAAKgqJ,gCAQTC,UACI,OAAIjqJ,KAAKyhF,gBAAkBzhF,KAAKq5E,UAGrBr5E,KAAKwpJ,YAGsB,UAA/BxpJ,KAAKm5F,WAAWngF,YAA0BhZ,KAAKwpJ,YAO1DQ,gCACShqJ,KAAKkqJ,qCAIVlqJ,KAAKsnG,YAAY,aAAc,KAC3BtnG,KAAK4pJ,cAAgBt+J,OAAOusD,YAAY1jC,MACxCnU,KAAKmqJ,+BAGTnqJ,KAAKsnG,YAAY,eAAgB,KAC7BtnG,KAAKmqJ,6BACL1mI,IAAWmI,oBACPoD,IACA,CACI,WAAchvB,KAAK8nC,UACnB,WAAc,QACdn7C,MAAOrB,OAAOusD,YAAY1jC,MAAQnU,KAAK4pJ,kBAI/C5pJ,KAAKyhF,gBAAkBzhF,KAAK8gC,YAAcC,IAAUQ,QACpDvhC,KAAKsnG,YAAY,cAAe,KACvBtnG,KAAKoqJ,mBACNpqJ,KAAKmqJ,gCAWrBD,mCAEI,OAAQlqJ,KAAKyhF,gBAAkBzhF,KAAK8gC,YAAcC,IAAUC,QAMhEmpH,6BACI,MAAMx9J,GAASqT,KAAKoqJ,kBAEpBpqJ,KAAK2nB,KAAK8iB,sBAAqB99C,GAG/B82B,IAAWuI,cAAcoE,YAA4BpwB,KAAK8nC,UAAWn7C,IACrE82B,IAAWqH,QAAQle,KAAKwL,UAAU,CAC9BnsB,KAAMw+C,sBACN7lC,IAAKjY,KAYb8xG,+BAA+B9gE,GAC3B,MAAMgD,EAAQ3gC,KAAKm5F,WACb1+D,EAAUkG,EAAMlG,KAAR,QACd,IAAII,EAAS8C,EAAQrI,KAAKtpC,GAAKA,EAAEyuC,OAASA,GAAQzuC,EAAEgvC,QAAU2F,EAAM3F,OAEpE,IAAKH,GAAiC,YAAvB76B,KAAK2pJ,cAA6B,CAI7C,MAAM3uH,GAAS2F,EAAM3F,OAAS,IAAIp5B,QAAQ,aAAc,IAExDi5B,EAAS8C,EAAQrI,KAAKtpC,GAAKA,EAAEyuC,OAASA,GAAQzuC,EAAEgvC,QAAUA,GAI1Dh7B,KAAK2pJ,cADL9uH,EACqBA,EAAOC,cAEPv6B,EAW7B2mG,WAAWthF,GACP6V,MAAMyrE,WAAWthF,GAEbA,GAEA5lB,KAAKqqJ,WAAarqJ,KAAKuoG,UACvBxqF,EAAO9Y,MAAO,qBAAoBjF,KAAKqqJ,iBAAiBrqJ,SAExD+d,EAAO9Y,MAAO,4BAA2BjF,MAWjDmpJ,mBAAmBD,GACflpJ,KAAKsqJ,cAAgBpB,EACrBlpJ,KAAKq/E,gBAAkBr/E,KAAK4lB,OAC5B5lB,KAAKknG,WAAWlnG,KAAKsqJ,cAAclrE,YAAYp/E,KAAKq/E,kBACpDr/E,KAAK2gC,MAAQ3gC,KAAK4lB,OAAO+b,YAAY,GASzC4oH,oBACQvqJ,KAAKsqJ,gBACLtqJ,KAAKsqJ,cAAcxqE,aACnB9/E,KAAKknG,WAAWlnG,KAAKq/E,iBACrBr/E,KAAKq/E,gBAAkB,KACvBr/E,KAAK2gC,MAAQ3gC,KAAK4lB,OAAS5lB,KAAK4lB,OAAO+b,YAAY,GAAK,MAShE6oH,oBAAoBtB,GACZlpJ,KAAKsqJ,gBACLtqJ,KAAKuqJ,oBACLvqJ,KAAKsqJ,mBAAgB/pJ,GAErB2oJ,GACAlpJ,KAAKmpJ,mBAAmBD,GAUhCuB,UAAUvB,GACN,QAAkC,IAAvBlpJ,KAAKsqJ,oBAAmD,IAAXpB,EACpD,OAAOprH,QAAQC,UAGnB,QAAsB,IAAXmrH,IAA2BA,EAAOhqE,UAAUl/E,MACnD,OAAO89B,QAAQE,OAAO,IAAI3mC,MAAM,kCAGpC,IAAkC,IAA9B2I,KAAKipJ,qBACL,OAAOnrH,QAAQE,OAAO,IAAI3mC,MAAM,mCAKpC,GAAI2I,KAAKq5E,YAAcr5E,KAAKmpC,eAGxB,OAFAnpC,KAAKsqJ,cAAgBpB,EAEdprH,QAAQC,UAGnB,MAAMnX,EAAa5mB,KAAK4mB,WAExB,OAAKA,GASL5mB,KAAKipJ,sBAAuB,EAGrBriI,EAAW6xF,YAAYz4G,MACzB09B,KAAK,KACF19B,KAAKwqJ,oBAAoBtB,GACrBlpJ,KAAKyhF,gBACLzhF,KAAK+mG,WAAW33F,QAAQs7I,GAAQnvH,IAASQ,kBAAkB2uH,EAAM1qJ,KAAK4lB,SAGnEgB,EAAWumE,SAASntF,QAE9B09B,KAAK,KACF19B,KAAKipJ,sBAAuB,IAE/B1sH,MAAMv3B,IAMH,MAHAhF,KAAKipJ,sBAAuB,EAC5BjpJ,KAAKwqJ,sBACLzsI,EAAO/Y,MAAM,sCAAuCA,GAC9CA,MA7BVhF,KAAKwqJ,oBAAoBtB,GACrBlpJ,KAAKyhF,gBACLzhF,KAAK+mG,WAAW33F,QAAQs7I,GAAQnvH,IAASQ,kBAAkB2uH,EAAM1qJ,KAAK4lB,SAGnEkY,QAAQC,WAiCvBsK,OACI,OAAOroC,KAAK2qJ,gBAAe,GAQ/BriH,SACI,OAAOtoC,KAAK2qJ,gBAAe,GAY/BA,eAAerhI,GACX,MAAM4qD,EAAWl0E,KAAK4qJ,UAAU19J,KAAK8S,KAAMspB,GAI3C,OAFAtpB,KAAKspJ,cAAgBtpJ,KAAKspJ,cAAc5rH,KAAKw2C,EAAUA,GAEhDl0E,KAAKspJ,cAWhBsB,UAAUthI,GACN,GAAItpB,KAAKq5E,YAAc/vD,EACnB,OAAOwU,QAAQC,UAGnB,GAAI/9B,KAAKgnG,SACL,OAAOlpE,QAAQE,OAAO,IAAI5T,IAAgB+f,sBAG9C,IAAIxN,EAAUmB,QAAQC,UAGtB,MAAM8sH,EAAc,IAAM9sI,EAAO7Y,KAAM,QAAOlF,SAASspB,KAEvD,GAAItpB,KAAKmpC,gBACEnpC,KAAK8gC,YAAcC,IAAUC,UAC5B7c,IAAQ2hE,8BAChB+kE,IAKI7qJ,KAAKsqJ,eAAiBtqJ,KAAKsqJ,cAAcp2E,SACzCl0E,KAAKsqJ,cAAcp2E,SAAS5qD,GACrBtpB,KAAK2gC,QACZ3gC,KAAK2gC,MAAMwzB,SAAW7qC,QAEvB,GAAIA,EACPqT,EAAU,IAAImB,QAAQ,CAACC,EAASC,KAC5B6sH,IACA7qJ,KAAK8qJ,kCACD,KACQ9qJ,KAAKsqJ,eACLtqJ,KAAKuqJ,oBAMTvqJ,KAAKunG,sBACLvnG,KAAKuqG,aACLvqG,KAAKknG,WAAW,MAChBnpE,KAEJC,SAEL,CACH6sH,IAGA,MAAME,EAAgB,CAClBprH,eAAgB3/B,KAAKiqG,cACrBtsE,QAAS,CAAE6J,KACXpG,QAASphC,KAAKsqJ,cAAgB,CAAEtqJ,KAAKsqJ,eAAkB,GACvD1qH,WAAY5/B,KAAKgrJ,uBAGrBruH,EACMpB,IAASuD,+BAA+B1yC,OAAO+zC,OAC7C,GACA4qH,EACA,CAAExgI,YAAa,CAAEmO,MAAO14B,KAAKqpJ,iBAErC1sH,EAAUA,EAAQe,KAAKutH,IAEnB,MAAM56H,EAAYrwB,KAAK8nC,YAAcN,IAAsBA,IAAkBxnC,KAAK8nC,UAC5EojH,EAAaD,EAAY31H,KAAKpwB,GAAQA,EAAKy7B,MAAMlG,OAASpK,GAEhE,IAAI66H,EAaA,MAAM,IAAI9gI,IAAgBggB,yBAU9B,OAtBIpqC,KAAKknG,WAAWgkD,EAAWtlI,QAC3B5lB,KAAK2gC,MAAQuqH,EAAWvqH,MAIpB3gC,KAAK8gC,YAAcoqH,EAAWpqH,YAC9B/iB,EAAO5Y,KACAnF,KAAF,yCACDA,KAAK8gC,UAAWoqH,EAAWpqH,WAC/B9gC,KAAK8gC,UAAYoqH,EAAWpqH,WAMhC9gC,KAAKsqJ,eACLtqJ,KAAKmpJ,mBAAmBnpJ,KAAKsqJ,eAGjCtqJ,KAAK+mG,WAAWvhG,IACZklJ,GAAQnvH,IAASQ,kBAAkB2uH,EAAM1qJ,KAAK4lB,SAE3C5lB,KAAKmrJ,mCAIpB,OAAOxuH,EACFe,KAAK,IAAM19B,KAAKorJ,gBAAgB9hI,IAChCoU,KAAK,IAAM19B,KAAK2nB,KAAKl3B,qBAAoBuP,OASlDmrJ,iCACI,OAAKnrJ,KAAK4mB,WAcH,IAAIkX,QAAQ,CAACC,EAASC,KACzBh+B,KAAK4mB,WAAWikG,uBAAuB7qH,MAClC09B,KAAKK,EAAS/4B,GAASg5B,EAAO,IAAI3mC,MAAM2N,OAftC84B,QAAQC,UA0BvB+sH,kCAAkCO,EAAiBrsF,GAC1Ch/D,KAAK4mB,WAKV5mB,KAAK4mB,WAAWmkG,wBAAwB/qH,MAAM09B,KAC1C2tH,EACArmJ,GAASg6D,EAAc,IAAI3nE,MAAM2N,KANjCqmJ,IAgBRD,gBAAgB/iH,GACZ,OAAKroC,KAAK4mB,YAAe5mB,KAAK4mB,WAAW+1B,KAIlC,IAAI7e,QAAQC,IACf/9B,KAAK4mB,WAAW+1B,KACZ38C,KAAKmpC,eACC,eACA,gBAAgBd,EAAMtK,KAPzBD,QAAQC,UAoBvBtW,UACI,IAAIkV,EAAUmB,QAAQC,UAwBtB,OApBI/9B,KAAKsqJ,gBACL3tH,EAAU38B,KAAKyqJ,aAGfzqJ,KAAK4mB,aACL+V,EAAUA,EAAQe,KAAK,IAAM19B,KAAK4mB,WAAW6xF,YAAYz4G,QAGzDA,KAAK4lB,SACL5lB,KAAKuqG,aACLvqG,KAAKkoG,UAGT3sE,IAASpV,eAAekU,IAAU9M,wBAAyBvtB,KAAK6pJ,yBAE5D7pJ,KAAK+pJ,6BACLxuH,IAASpV,eAAekU,IAAUhN,4BAC9BrtB,KAAK+pJ,6BAGNptH,EAAQe,KAAK,IAAMjC,MAAMhU,WAUpC4xD,UAEI,OAAKr5E,KAAK4lB,YAGN5lB,KAAKyhF,gBAAmBzhF,KAAKg3E,cAK7Bh3E,KAAKsqJ,eAAiBtqJ,KAAKsqJ,cAAcjxE,QAClCr5E,KAAKsqJ,cAAcjxE,WAGtBr5E,KAAK2gC,QAAU3gC,KAAK2gC,MAAMwzB,UAStCk2D,eAAezjG,GACX5mB,KAAK4mB,WAAaA,EAMlB,IAAK,IAAIl7B,EAAI,EAAGA,EAAIsU,KAAK+mG,WAAWxwG,OAAQ7K,IACxCsU,KAAK8nG,wBAAwB9nG,KAAK+mG,WAAWr7G,IASrDq+B,UACI,OAAO,EAQXkgF,cACI,OAAOjqG,KAAK2pJ,eAAiB3pJ,KAAK86B,SAStC28C,mBACI,OAAOz3E,KAAK4mB,YAAc5mB,KAAK4mB,WAAWghB,WAU9C6wF,yBAAyB3wG,EAAK2kH,GACtBA,EAAY,IACZzsI,KAAKypJ,cAAe,GAExB,MAAMhgE,EAAqB3hE,EAAIutE,qBAE3Br1F,KAAK0pJ,eAAwC,cAAvBjgE,IACtBl/E,WAAW,KACFvK,KAAKypJ,eACN1rI,EAAO5Y,KAAM,GAAEnF,mDACTysI,KAENhpH,IAAWyB,UAAUqG,UAAUwD,IAAe,CAAE,WAAc/uB,KAAK8nC,cAExE,KACH9nC,KAAK0pJ,eAAgB,GAU7BsB,sBACI,GAAIhrJ,KAAKyhF,gBAAkBzhF,KAAK8gC,YAAcC,IAAUQ,OAAQ,SAQ5D,MAAM+pH,EAAa,WAAG,EAAAtrJ,KAAK2gC,OAAMuC,mBAAd,aAAG,UAEtB,OAAIooH,GAAiB,eAAgBA,EAC1BA,EAAc1rH,gBAGO,IAArB5/B,KAAKupJ,YACLvpJ,KAAKupJ,YAMT1pH,IAAiBC,MAShCyqE,aASIvqG,KAAKurJ,uBAAwB,EAE7B,IACIhwH,IAASiG,gBAAgBxhC,KAAK4lB,QADlC,QAGI5lB,KAAKurJ,uBAAwB,GAiBrCC,gBACQxrJ,KAAKyhF,gBACEzhF,KAAK8gC,YAAcC,IAAUQ,QACO,mBAA7BvhC,KAAK2gC,MAAM6qH,gBACzBxrJ,KAAK2gC,MAAM6qH,gBAEXxrJ,KAAKupJ,YACCvpJ,KAAKupJ,cAAgB1pH,IAAiBgsC,YAClChsC,IAAiBC,KACjBD,IAAiBgsC,aAenCu+E,kBACI,GAAIpqJ,KAAKyhF,iBACDzhF,KAAKq5E,WAAar5E,KAAKurJ,uBAAyBvrJ,KAAK8gC,YAAcC,IAAUC,SACjF,OAAO,EAGX,IAAKhhC,KAAK4lB,OACN,OAAO,EAcX,OAFe5lB,KAAKyrJ,eAAiBzrJ,KAAKq/E,gBAAkBr/E,KAAK4lB,QAEnD+b,YAAYM,KAAKtB,KACxB,eAAgBA,GAA+B,SAArBA,EAAM3nB,YACzB,UAAW2nB,IAA0B,IAAhBA,EAAMrX,QAQ7C5yB,WACI,MAAQ,cAAasJ,KAAKqjC,SAASrjC,KAAK8nC,iB,+EC73BhD,sPA4BA,MAAM/pB,EAASF,oBAAU6E,GAmCV,SAASukB,EAChB+tC,EACA9tE,EACAkgF,EACAhhD,EACA7b,EACA/C,EACArgB,GAUJnH,KAAK0rJ,uBAAgD,IAAxBvkJ,EAAQ6hF,aAQrChpF,KAAK2rJ,iBAAcprJ,EAkBnBP,KAAK4rJ,gBAAkB,GAUvB5rJ,KAAK6rJ,qBAAsB,EAO3B7rJ,KAAKg1E,IAAMA,EAMXh1E,KAAKkH,GAAKA,EAOVlH,KAAKwnB,MAAQA,EASbxnB,KAAKgoC,aAAe,IAAIpkB,IAMxB5jB,KAAKwjC,YAAc,IAAI5f,IAQvB5jB,KAAK25F,cAAgB,GAoBrB35F,KAAK05F,WAAa,IAAI91E,IAKtB5jB,KAAK8rJ,WAAa,KAKlB9rJ,KAAK+rJ,YAAc,KAMnB/rJ,KAAKonF,eAAiBA,EAGtBpnF,KAAKgsJ,sBAAwBhsJ,KAAKgsJ,sBAAsB9+J,KAAK8S,MAC7DA,KAAKonF,eAAephE,GAChBggI,IACAhmJ,KAAKgsJ,uBAEThsJ,KAAKisJ,kBAAoBjsJ,KAAKisJ,kBAAkB/+J,KAAK8S,MACrDA,KAAKonF,eAAephE,GAChBggI,IACAhmJ,KAAKisJ,mBACTjsJ,KAAKmH,QAAUA,EAIf,MAAM+kJ,EAAkB3hI,GAAe,GAEvC2hI,EAAgBpvH,SAAWovH,EAAgBpvH,UAAY,GAInD1mC,MAAMC,QAAQ61J,EAAgBpvH,UAC9BovH,EAAgBpvH,SAAS55B,KAAK,CAAEipJ,eAAgBnsJ,KAAKwnB,QAErDzJ,EAAO5Y,KAAK,iEAGhBnF,KAAKqlB,eACC,IAAIkW,IAASM,sBAAsBuK,EAAW8lH,GAIpD,MAAME,EAAwB,CAC1Bn0D,IApMW,IAqMXE,SApMW,IAqMX7oC,KAvMW,MA4MftvD,KAAK83F,cAAgB93F,KAAKmH,QAAQqhF,cAAgBxoF,KAAKmH,QAAQqhF,aAAa6jE,iBACtErsJ,KAAKmH,QAAQqhF,aAAa6jE,iBAC1BD,EAENpsJ,KAAKssJ,SAAW,IAAIz0D,IAAS73F,KAAMA,KAAK83F,eACxC93F,KAAKg+I,UAAY,GACjBh+I,KAAKgrB,MAAQ,GACbhrB,KAAKusJ,cAAgB,KAKrBvsJ,KAAKwsJ,iBAAmBrlJ,EAAQw/B,gBAMhC3mC,KAAKysJ,iCAAmCtoI,IAAQ80G,4BAA8Bj5H,KAAKwsJ,iBACnFxsJ,KAAKysJ,kCACE1uI,EAAO7Y,KAAK,mEAMnBlF,KAAKsoF,SAAWnhF,EAAQmhF,SAExBtoF,KAAK0sJ,QAAU,IAAIC,IACnB,MAAMC,EAAYnqI,EAAQ,KAE1BziB,KAAKi5F,UAAY,IAAI2zD,EACjB,CACIC,YAAaj1D,IAAerhG,OAC5Bu2J,wBAAwB,EACxBnmH,gBAAiB3mC,KAAKwsJ,mBAE9BxsJ,KAAK+sJ,eAAiB,IAAIC,IAAehtJ,KAAKtJ,YAO9CsJ,KAAKitJ,eAAiB,IAAIC,IAAeltJ,KAAMA,KAAKg1E,IAAIrtC,sBAMxD3nC,KAAK6jB,aAAemxD,EAAInxD,aACxB7jB,KAAKmtJ,YAAc,IAAIC,IAKvBptJ,KAAKqtJ,qBAAuB,KAG5BrtJ,KAAK2mJ,MAAQ,CAACl0F,EAAMvtD,KAChB6Y,EAAO9Y,MAAMwtD,EAAMvtD,GAEnBlF,KAAKg+I,UAAU96I,KAAK,CAChB2sG,KAAM,IAAI1nG,KACVlB,KAAMwrD,EACN9lE,MAAOuY,GAAQ,MAGvBlF,KAAKipF,eAAiB,KACtBjpF,KAAKqlB,eAAe4jE,eAAiBp9D,IACjC7rB,KAAK2mJ,MACD,iBACA/5I,KAAKwL,UAAUyT,EAAMmH,UAAW,KAAM,MAEd,OAAxBhzB,KAAKipF,gBACLjpF,KAAKipF,eAAep9D,IAKxB7rB,KAAKwsJ,kBACLxsJ,KAAKstJ,QAAUC,IACX,MAAM3nI,EAAS2nI,EAAIx/G,QAAQ,GAE3B/tC,KAAKwtJ,kBAAkB5nI,EAAQ2nI,EAAI5sH,MAAO4sH,EAAIl1D,aAC9CzyE,EAAO4X,iBAAiB,cAAenkC,IACnC2G,KAAKytJ,oBAAoB7nI,EAAQvsB,EAAEsnC,UAG3C3gC,KAAKqlB,eAAemY,iBAAiB,QAASx9B,KAAKstJ,WAEnDttJ,KAAKqlB,eAAeqoI,YAAc7hI,GAAS7rB,KAAK2tJ,mBAAmB9hI,EAAMjG,QACzE5lB,KAAKqlB,eAAeuoI,eAAiB/hI,GAAS7rB,KAAK6tJ,qBAAqBhiI,EAAMjG,SAElF5lB,KAAKopF,uBAAyB,KAC9BppF,KAAKqlB,eAAe+jE,uBAAyBv9D,IACzC7rB,KAAK2mJ,MAAM,yBAA0B3mJ,KAAKqpF,gBACN,OAAhCrpF,KAAKopF,wBACLppF,KAAKopF,uBAAuBv9D,IAGpC7rB,KAAKupF,2BAA6B,KAClCvpF,KAAKqlB,eAAekkE,2BAA6B19D,IAC7C7rB,KAAK2mJ,MAAM,6BAA8B3mJ,KAAKypF,oBACN,OAApCzpF,KAAKupF,4BACLvpF,KAAKupF,2BAA2B19D,IAGxC7rB,KAAK+pF,oBAAsB,KAC3B/pF,KAAKqlB,eAAe0kE,oBAAsBl+D,IACtC7rB,KAAK2mJ,MAAM,uBACsB,OAA7B3mJ,KAAK+pF,qBACL/pF,KAAK+pF,oBAAoBl+D,IAGjC7rB,KAAK8tJ,cAAgB,KACrB9tJ,KAAKqlB,eAAeyoI,cAAgBjiI,IAChC7rB,KAAK2mJ,MAAM,iBACgB,OAAvB3mJ,KAAK8tJ,eACL9tJ,KAAK8tJ,cAAcjiI,IAIvB7rB,KAAKsoF,WACLtoF,KAAKusJ,cAAgBjhK,OAAOmyC,YAAY,KACpCz9B,KAAKq0H,WAAW32F,KAAK1S,IACjB,GAA6B,mBAAlBA,aAAP,EAAOA,EAAOvlB,QAAuB,CACrC,MAAMoc,EAAUmJ,EAAMvlB,SAEtB,IAAK,IAAI/Z,EAAI,EAAGA,EAAIm2B,EAAQtrB,SAAU7K,EAAG,CACrC,MAAMywC,EAAMta,EAAQn2B,GAEpBywC,EAAI72B,QAAQ8J,QAAQnjB,IAChB+T,KAAK+tJ,aAAa5xH,EAAKlwC,EAAMkwC,EAAI6xH,KAAK/hK,YAI9C++B,EAAM5b,QAAQ5iB,GAAKwT,KAAK+tJ,aAAavhK,EAAG,GAAIA,OAGrD,MAGPuxB,EAAO7Y,KAAM,cAAalF,MAY9BinC,EAAwB35C,UAAUygK,aAC5B,SAAS9xF,EAAQhwE,EAAMgiK,GACrB,MAAM/mJ,EAAM,GAAE+0D,EAAO/0D,MAAMjb,IAC3B,IAAIwB,EAAIuS,KAAKgrB,MAAM9jB,GACnB,MAAMiN,EAAM,IAAIhM,KAEX1a,IACDuS,KAAKgrB,MAAM9jB,GAAMzZ,EAAI,CACjB8pH,UAAWpjG,EACX+5I,QAAS/5I,EACToT,OAAQ,GACRu6H,MAAO,KAGfr0J,EAAE85B,OAAOrkB,KAAK+qJ,GACdxgK,EAAEq0J,MAAM5+I,KAAKiR,EAAI/L,WACb3a,EAAE85B,OAAOhxB,OAASyJ,KAAKsoF,WACvB76F,EAAE85B,OAAO0K,QACTxkC,EAAEq0J,MAAM7vH,SAEZxkC,EAAEygK,QAAU/5I,GAMpB,MAAMg6I,EAAU,SAASj+E,GACrB,OAAI,MAAOA,EACA,GAGH,SAAQA,EAAYjpE,WAAWipE,EAAY75C,OAYvD4Q,EAAwB35C,UAAU+nG,mBAAqB,WACnD,MAAM/jD,EAAQtxC,KAAKqlB,eAAeokE,mBAElC,MAAc,cAAVn4C,EACO,YAGJA,GAcXrK,EAAwB35C,UAAUokG,yBAA2B,SAASrhE,EAAW+9H,GAAiB,GAC9F,MAAMC,EAAiBruJ,KAAKsuJ,mBAAmBj+H,GAE/C,GAAIrwB,KAAKwsJ,iBACL,OAAO4B,EACDC,EAAiBn2H,IAAeK,SAAWL,IAAeI,SAC1D+1H,EAAiBn2H,IAAeG,SAAWH,IAAeC,SAKpE,OAF4B9H,IAAcmX,IAAkBxnC,KAAK0rJ,oBAAsB1rJ,KAAK6rJ,qBAGjFwC,EAAiBn2H,IAAeK,SAAWL,IAAeG,SAG9DH,IAAeC,UAU1B8O,EAAwB35C,UAAUihK,2BAA6B,SAASC,EAAWn+H,GAC/E,IAAI2X,EAAe,GACfymH,EAAY,GAEhB,IAAK,MAAM1F,KAAYyF,EACnBxmH,EAAeA,EAAahuC,OAAOgG,KAAK+nC,gBAAgBghH,EAAU14H,IAItE,MAAMq+H,EAAiB1mH,EAAaxiC,IAAI8hJ,IAAM,uBAAIA,EAAO3mH,aAAX,aAAI,EAAcz5B,KAOhE,OALAunJ,EAAYzuJ,KAAKqlB,eAAespI,eAC3B35H,OAAO4a,GAAYA,EAASjP,OACtBiP,EAASjP,MAAMlG,OAASpK,GACxBq+H,EAAep5H,KAAKkzE,GAAWA,IAAY54D,EAASjP,MAAMz5B,KAE9DunJ,GAQXxnH,EAAwB35C,UAAUmrG,cAAgB,WAC9C,OAAQz4F,KAAKmH,QAAQwhF,kBASzB1hD,EAAwB35C,UAAU0+J,sBAAwB,SAClDj1E,EACAj2C,GAEJ,IAAKi2C,EAGD,YAFAh5D,EAAO/Y,MAAShF,KAAF,0CAIlB,MAAMyoC,EAAazoC,KAAK+nC,gBAAgBgvC,EAAYvvC,KAEhDiB,EAAWlyC,QAEXkyC,EAAW,GAAGmmH,cAAc9tH,IAWpCmG,EAAwB35C,UAAU2+J,kBAAoB,SAC9Cl1E,EACA1mD,EACAgpD,GAEJ,IAAKtC,EAGD,YAFAh5D,EAAO/Y,MAAShF,KAAF,wCAIlB,MAAM2gC,EAAQ3gC,KAAK+nC,gBAAgBgvC,EAAY1mD,GAE3CsQ,EAAMpqC,QAENoqC,EAAM,GAAGkuH,QAAQx1E,IAUzBpyC,EAAwB35C,UAAUu7I,eAAiB,SAASvhH,EAAc,IACtE,MAAMshH,EAAc,GAkBpB,OAjBuBthH,EAAY/wB,OAC7ByJ,KAAKuuJ,2BAA2BjnI,EAAakgB,KAC7CxnC,KAAKqlB,eAAespI,eACjB35H,OAAO4a,GAAYA,EAASjP,OAASiP,EAASjP,MAAMlG,OAAS+M,KAAmBoI,EAASjP,MAAMwzB,UAEzF/kD,QAAQk4I,IACnB,MAAM99H,EAAO89H,EAAOwH,4BAEhBtlI,GAAQA,EAAKjzB,SAKbqyI,EAAYp/G,EAAK,GAAGiG,QAAUjG,EAAK,GAAGyf,cAIvC2/F,GASX3hG,EAAwB35C,UAAUi6C,eAAiB,SAASlX,GACxD,IAAIwX,EAASzxC,MAAMO,KAAKqJ,KAAKwjC,YAAYjc,UAMzC,YAJkBhnB,IAAd8vB,IACAwX,EAASA,EAAO7S,OAAO2L,GAASA,EAAMmH,YAAczX,IAGjDwX,GAQXZ,EAAwB35C,UAAU+5C,mBAAqB,WACnD,OAAOrnC,KAAKunC,eAAeC,KAAiB,IAShDP,EAAwB35C,UAAUghK,mBAAqB,SAASj+H,GAC5D,IAAKA,EACD,MAAM,IAAIh5B,MAAM,2BAGpB,OAAO2I,KAAKunC,eAAelX,GAAW95B,OAAS,GAUnD0wC,EAAwB35C,UAAUy6C,gBAAkB,SAC5CgvC,EACA1mD,GACJ,MAAM2X,EAAe,GACfwmH,EACAz3E,EAAa,CAAEA,GAAe/2E,KAAKgoC,aAAaziC,OAEtD,IAAK,MAAMwjJ,KAAYyF,EAAW,CAC9B,MAAMO,EAAmB/uJ,KAAKgoC,aAAaz7C,IAAIw8J,GAE/C,GAAKgG,EAOL,IAAK,MAAMjoD,KAAkBioD,EAAiBxpJ,OAE1C,IAAK8qB,GAAaA,IAAcy2E,EAAgB,CAC5C,MAAMkoD,EAAaD,EAAiBxiK,IAAIu6G,GAEpCkoD,GACAhnH,EAAa9kC,KAAK8rJ,IAMlC,OAAOhnH,GASXf,EAAwB35C,UAAUujG,iCAAmC,SAAS3pF,GAC1E,MAAM0pF,EAAiB,GACjB5oD,EAAehoC,KAAK+nC,gBAAgB7gC,GAE1C,KAAK8gC,aAAD,EAACA,EAAczxC,QACf,OAAOq6F,EAEX,MAAMq+D,EAAejnH,EAAaxiC,IAAIm7B,GAASA,EAAMywF,WAC/C/6F,EAAM,IAAIkV,IAAIvrC,KAAKgqF,kBAAkB3zD,KA2B3C,OAzBA44H,EAAa7/I,QAAQ,CAACoa,EAAMyiB,KACxB,IAAK,MAAMja,KAASqE,EAAIrE,MAAO,CAC3B,IAAI4B,EAAQ,GACR6+D,EAAYzhE,IAAQsD,UAAUtC,EAAQ,UAASxI,GAEnD,GAAIipE,EAAUl8F,OAAQ,CACbq6F,EAAe3kD,KAChB2kD,EAAe3kD,GAAO,IAI1B,MAAMijH,EAAWl+H,IAAQsD,UAAUtC,EAAQ,oBAAmBxI,GAE9D,GAAI0lI,EAAS34J,OAAQ,CACjB,MAAMoqD,EAAgBuuG,EAAS,GAAGnsJ,MAAM,KAAK,GAE7C6wB,GAAYs7H,EAAS,GAAX,OACVz8D,EAAYA,EAAUz4F,OAAOg3B,IAAQsD,UAAUtC,EAAQ,UAAS2uB,IAEpEiwC,EAAe3kD,IAAWwmD,EAAUtvF,KAAK,QAAjB,OACxBytF,EAAe3kD,IAAQrY,MAK5Bg9D,GAQX3pD,EAAwB35C,UAAU6hK,uBAAyB,WACvD,MAAMC,EAAepvJ,KAAK0sF,0BAE1B,OAAO1sF,KAAK83F,cAAcs3D,EAAajiF,gBAAkBntE,KAAK83F,eASlE7wD,EAAwB35C,UAAU47C,eAAiB,SAAS1f,GACxD,GAAoB,iBAATA,EACP,MAAM,IAAInyB,MAAO,QAAOmyB,qBAE5B,IAAK,MAAM0jE,KAAcltF,KAAKwjC,YAAYjc,SACtC,GAAIvnB,KAAKmxH,aAAajkC,KAAgB1jE,EAClC,OAAO0jE,EAGf,IAAK,MAAM1V,KAAex3E,KAAK+nC,kBAC3B,GAAIyvC,EAAY45C,YAAc5nG,EAC1B,OAAOguD,EAIf,OAAO,MASXvwC,EAAwB35C,UAAU4/I,iBAAmB,SAAShmI,GAE1D,MAAMmoJ,EAAgB1uH,GAASA,EAAMw4D,WAAWjyF,KAAOA,EACjDgmF,EAAaltF,KAAKunC,iBAAiBjS,KAAK+5H,GAE9C,GAAIniE,EACA,OAAOltF,KAAKmxH,aAAajkC,GAG7B,MAAM1V,EAAcx3E,KAAK+nC,kBAAkBzS,KAAK+5H,GAEhD,OAAI73E,EACOA,EAAY45C,UAGhB,MAOXnqF,EAAwB35C,UAAUqgK,mBAAqB,SAAS/nI,GAC5D,MAAMkjB,EAAWxF,IAAItH,YAAYpW,GAEjC,IAAK0d,IAAIuF,iBAAiBC,GAGtB,YAFA/qB,EAAO7Y,KAAM,GAAElF,mEAAmE8oC,MAMlF3kB,IAAQ0Y,oBACRjX,EAAO0pI,WAAazjI,IAChB7rB,KAAKwtJ,kBAAkB5nI,EAAQiG,EAAM8U,QAEzC/a,EAAO2pI,cAAgB1jI,IACnB7rB,KAAKytJ,oBAAoB7nI,EAAQiG,EAAM8U,SAK/C,MAAM6uH,EAAoB5pI,EAAOoU,iBAEjC,IAAK,MAAMoO,KAAconH,EACrBxvJ,KAAKwtJ,kBAAkB5nI,EAAQwiB,GAEnC,MAAMqnH,EAAoB7pI,EAAOsU,iBAEjC,IAAK,MAAMuO,KAAcgnH,EACrBzvJ,KAAKwtJ,kBAAkB5nI,EAAQ6iB,IAgBvCxB,EAAwB35C,UAAUkgK,kBAAoB,SAAS5nI,EAAQ+a,EAAO03D,EAAc,MACxF,MAAMvvD,EAAWxF,IAAItH,YAAYpW,GAC3ByK,EAAYsQ,EAAMlG,KAExB,IAAKz6B,KAAKwnB,QAAU8b,IAAIuF,iBAAiBC,GAGrC,YAFA/qB,EAAO7Y,KAAM,GAAElF,mEAAmE8oC,MAOtF,GAHA/qB,EAAO7Y,KAAM,GAAElF,0CAA0C8oC,UAAiBzY,OAGrEA,EAOD,YANAoM,mBACI,IAAIplC,MACC,oDAAmDyxC,IAOhE,MAAM4mH,EAAY1vJ,KAAKwsJ,iBACjB,IAAIjhH,IAAIvrC,KAAKqlB,eAAe2kE,kBAAkB3zD,KAC9C,IAAIkV,IAAIvrC,KAAKgqF,kBAAkB3zD,KACrC,IAAIs5H,EAIJ,GAAI3vJ,KAAKwsJ,iBACL,GAAIn0D,GAAeA,EAAYtsD,IAAK,CAChC,MAAMA,EAAMssD,EAAYtsD,IAExB4jH,EAAaD,EAAU19H,MAAMgD,OAAO46H,GAAO5+H,IAAQO,SAASq+H,EAAM,SAAQ7jH,SAE1E4jH,EAAaD,EAAU19H,MAAMgD,OAAO46H,IAChC,MAAM3vG,EAAOjvB,IAAQO,SAASq+H,EAAK,WAEnC,YAAuB,IAAT3vG,GAAwBnX,IAAamX,EAAKvuB,UAAU,GAAG3uB,MAAM,KAAK,UAIxF4sJ,EAAaD,EAAU19H,MAAMgD,OAAO46H,GAAOA,EAAIp5H,WAAY,KAAInG,IAGnE,IAAKs/H,EAAWp5J,OAKZ,YAJAkmC,mBACI,IAAIplC,MAAO,2DAA0DyxC,UAAiBzY,OAM9F,IAAIoiE,EAAYzhE,IAAQsD,UAAUq7H,EAAW,GAAI,WAIjD,GAFAl9D,EACMA,EAAUz9D,OAAOxwB,IAA8C,IAAtCA,EAAKZ,QAAS,QAAOklC,KAC/C2pD,EAAUl8F,OAKX,YAJAkmC,mBACI,IAAIplC,MAAO,4DAA2DyxC,UAAiBzY,OAQ/F,MAAM8F,EAAUs8D,EAAU,GAAG/gE,UAAU,GAAG3uB,MAAM,KAAK,GAC/C8sJ,EAAYt2I,OAAO4c,GACnB25H,EAAkB9vJ,KAAKonF,eAAe8+D,aAAa2J,GAEzD,GAAIn2I,MAAMm2I,IAAcA,EAAY,EAMhC,YALApzH,mBACI,IAAIplC,MACC,uCAAsCw4J,QAAgB/mH,UAAiBzY,OAI7E,IAAKy/H,EAMR,YALArzH,mBACI,IAAIplC,MACC,8CAA6Cw4J,QAAgB/mH,UAAiBzY,OAM3FtS,EAAO7Y,KAAM,GAAElF,uCAAuC8vJ,UAAwBD,UAAkBx/H,MAEhG,MAAMk3H,EACAvnJ,KAAKonF,eAAe6+D,iBAAiB6J,EAAiBz/H,GAE5D,IAAKk3H,EAID,YAHA9qH,mBACI,IAAIplC,MAAO,GAAE2I,0CAA0C8vJ,MAK/D,MAAMxmI,EAAQi+H,EAAcj+H,MACtBwX,EAAYymH,EAAczmH,UAEhC9gC,KAAK+vJ,mBACDD,EAAiBlqI,EAAQ+a,EAAOtQ,EAAWyQ,EAAW+uH,EAAWvmI,IAkBzE2d,EAAwB35C,UAAUyiK,mBAAqB,SAC/CD,EACAlqI,EACA+a,EACAtQ,EACAyQ,EACAtX,EACAF,GACJ,IAAI0mI,EAAkBhwJ,KAAKgoC,aAAaz7C,IAAIujK,GAEvCE,IACDA,EAAkB,IAAIpsI,IACtB5jB,KAAKgoC,aAAaviB,IAAIqqI,EAAiBE,IAG3C,MAAMC,EAAgBD,EAAgBzjK,IAAI8jC,GAE1C,GAAI4/H,GAAiBA,EAAc92D,aAAex4D,EAI9C,YAFA5iB,EAAO7Y,KAAM,GAAElF,0DAA0D8vJ,UAAwBz/H,MAG1F4/H,IACPlyI,EAAO/Y,MAAO,GAAEhF,0DAA0D8vJ,UAAwBz/H,iCAUlGrwB,KAAKytJ,oBAAoBwC,EAActwE,oBAAqBswE,EAAc92D,aAG9E,MAAM3hB,EACA,IAAI04E,IACElwJ,KAAKg1E,IACLh1E,KAAKg1E,IAAIpuD,WACTkpI,EACAlqI,EACA+a,EACAtQ,EACAyQ,EACAtX,EACAF,EACAtpB,KAAKwnB,OAEjBwoI,EAAgBvqI,IAAI4K,EAAWmnD,GAE/Bx3E,KAAK6jB,aAAa8D,KAAK0S,IAAUtN,mBAAoByqD,EAAax3E,OAUtEinC,EAAwB35C,UAAUugK,qBAAuB,SAASjoI,GAC9D,IAAK0d,IAAI6sH,aAAavqI,GAAS,CAC3B,MAAM1e,EAAKo8B,IAAItH,YAAYpW,GAI3B,YAFA7H,EAAO7Y,KAAM,uDAAsDgC,MAMvE,MAAMuoJ,EAAoB7pI,EAAOsU,iBAEjC,IAAK,MAAMuO,KAAcgnH,EACrBzvJ,KAAKytJ,oBAAoB7nI,EAAQ6iB,GAErC,MAAM+mH,EAAoB5pI,EAAOoU,iBAEjC,IAAK,MAAMoO,KAAconH,EACrBxvJ,KAAKytJ,oBAAoB7nI,EAAQwiB,IAWzCnB,EAAwB35C,UAAUmgK,oBAAsB,SAChD7nI,EACA+a,GACJ,MAAMmI,EAAWxF,IAAItH,YAAYpW,GAC3B4iF,EAAU7nE,GAAS2C,IAAIrH,WAAW0E,GAEnC2C,IAAIuF,iBAAiBC,IAK1B/qB,EAAO7Y,KAAM,GAAElF,uCAAuC8oC,aAAoB0/D,MAErE1/D,EAMA0/D,EAMAxoG,KAAKowJ,uBAAuBtnH,EAAU0/D,IAWvCzqF,EAAO5Y,KAAM,GAAEnF,8CAA8C8oC,aAAoB0/D,MAhBjF/rE,mBAAsC,IAAIplC,MAAS2I,KAAF,+CANjDy8B,mBAAsC,IAAIplC,MAAS2I,KAAF,iDAPjD+d,EAAO7Y,KAAM,GAAElF,qEAAqE8oC,OAyC5F7B,EAAwB35C,UAAU+iK,oBAAsB,SAChDvnH,EACA0/D,GAEJ,IAAK,MAAMumD,KAAoB/uJ,KAAKgoC,aAAazgB,SAC7C,IAAK,MAAMynI,KAAcD,EAAiBxnI,SAGtC,GAAIynI,EAAWrnD,eAAiB7+D,GACzBkmH,EAAWz2D,cAAgBiQ,EAC9B,OAAOwmD,GAiBvB/nH,EAAwB35C,UAAUyjG,mBAAqB,SAASvE,GAC5D,MAAMqhC,EAAgB,GAChBmiC,EAAkBhwJ,KAAKgoC,aAAaz7C,IAAIigG,GAE9C,GAAIwjE,EAAiB,CACjB,MAAMM,EAAoBN,EAAgBzjK,IAAIi7C,KACxC+oH,EAAoBP,EAAgBzjK,IAAIi7C,KAE9C8oH,GAAqBziC,EAAc3qH,KAAKotJ,GACxCC,GAAqB1iC,EAAc3qH,KAAKqtJ,GAExCvwJ,KAAKgoC,aAAa9f,OAAOskE,GAI7B,OAFAzuE,EAAO9Y,MAAO,GAAEjF,uCAAuCwsF,WAAeqhC,EAAct3H,UAE7Es3H,GAQX5mF,EAAwB35C,UAAUkjK,mBAAqB,SAASC,GAC5DA,EAAYhpI,UACZ,MAAMoI,EAAgB4gI,EAAYh5E,mBAC5Bu4E,EAAkBhwJ,KAAKgoC,aAAaz7C,IAAIsjC,GAEzCmgI,EAEOA,EAAgB9nI,OAAOuoI,EAAY3oH,YAC3C/pB,EAAO/Y,MAAO,GAAEhF,yBAAyBywJ,gCAFzC1yI,EAAO/Y,MAAO,GAAEhF,6DAA6D6vB,KAIjF7vB,KAAK6jB,aAAa8D,KAAK0S,IAAUpN,qBAAsBwjI,IAa3DxpH,EAAwB35C,UAAU8iK,uBAAyB,SACnDtnH,EACA0/D,GACJ,MAAMioD,EAAczwJ,KAAKqwJ,oBAAoBvnH,EAAU0/D,GAMvD,OAJIioD,GACAzwJ,KAAKwwJ,mBAAmBC,GAGrBA,GAQXxpH,EAAwB35C,UAAUojK,gBAAkB,SAAS/8H,GAKzD,MAAMkZ,EAAU,IAAIjpB,IAMd+sI,EAAY,IAAI/sI,IAEtB,GAAoB,iBAAT+P,GAA8B,OAATA,GACL,iBAAbA,EAAK0C,IAGf,OAFAtY,EAAO5Y,KAAK,kDAEL0nC,EAGX,MAAM50B,EAAUspC,IAAUrpC,MAAMyb,EAAK0C,KAErC,IAAKjgC,MAAMC,QAAQ4hB,EAAQ+Z,OACvB,OAAO6a,EAGX,IAAI7a,EAAQ/Z,EAAQ+Z,MAIhBhyB,KAAKwsJ,mBACLx6H,EAAQ,GACR,CAAEwV,IAAiBA,KAAkBp4B,QAAQihB,IACzC2B,EAAM9uB,KAAK+U,EAAQ+Z,MAAMsD,KAAKxpC,GAAKA,EAAEmb,OAASopB,OAItD,IAAK,MAAMyF,KAAS9D,EAAO,CACvB,IAAK57B,MAAMC,QAAQy/B,EAAMhB,OACrB,SAGJ,GAAI1+B,MAAMC,QAAQy/B,EAAMX,YACpB,IAAK,MAAMI,KAASO,EAAMX,WACtB,QAA+B,IAApBI,EAAMC,gBACa,IAAhBD,EAAMT,MAAuB,CAEvC,MAAM87H,EAAar7H,EAAMT,MAAM/xB,MAAM,KAAKyC,IAAI2wB,GAAW7d,SAAS6d,EAAS,KACrE4pB,EAAc6wG,EAAW,GAG/Br7H,EAAMT,MAAQ87H,EAGTD,EAAUpoI,IAAIw3B,IACf4wG,EAAUlrI,IAAIs6B,EAAa,IAE/B4wG,EAAUpkK,IAAIwzD,GAAa78C,KAAKqyB,GAK5C,IAAIT,EAAQgB,EAAMhB,MAGlBA,EAAQ90B,KAAKwsJ,iBACP13H,EAAME,OAAOvnC,GAAqB,UAAhBA,EAAE6P,WACpBw3B,EAAME,OAAOvnC,GAAqB,SAAhBA,EAAE6P,WAE1B,IAAK,MAAMksB,KAAQsL,EAAO,CAKtB,MAAM7nC,EAAM+S,KAAKwsJ,iBAAmB12H,EAAM7uB,KAAOuiB,EAAK78B,MAChD2yD,EAAa91B,EAAKtiB,GACxB,IAAI6tB,EAAW8X,EAAQtgD,IAAIU,GAY3B,GAVK8nC,IACDA,EAAW,CACPD,MAAO,GACP+Z,OAAQ,GACRoR,KAAMhzD,GAEV4/C,EAAQpnB,IAAIx4B,EAAK8nC,IAErBA,EAASD,MAAM5xB,KAAKo8C,GAEhBqxG,EAAUpoI,IAAI+2B,GAAa,CAC3B,MAAMnqB,EAAaw7H,EAAUpkK,IAAI+yD,GAEjC,IAAK,MAAM/pB,KAASJ,EAChBJ,EAAS8Z,OAAO3rC,KAAKqyB,KAMrC,OAAOsX,GAQX,MAAMgkH,EAAiB,SAASl9H,GAC5B,GAAoB,iBAATA,GAA8B,OAATA,GACL,iBAAbA,EAAK0C,IAGf,OAFAtY,EAAO5Y,KAAK,kDAELwuB,EAIX,MAAM4tB,EAAY9+B,EAAQ,IACpBxK,EAAUspC,EAAUrpC,MAAMyb,EAAK0C,UAEd,IAAZpe,QACyB,IAAlBA,EAAQ+Z,OACf57B,MAAMC,QAAQ4hB,EAAQ+Z,QAC7B/Z,EAAQ+Z,MAAM5iB,QAAQ0mB,IASlB,MAAMg7H,EAAa,GACbC,EAAe,GAcrB,QAZgC,IAArBj7H,EAAMX,YACV/+B,MAAMC,QAAQy/B,EAAMX,aACvBW,EAAMX,WAAW/lB,QAAQmmB,SACU,IAApBA,EAAMC,WACU,QAApBD,EAAMC,gBACkB,IAAhBD,EAAMT,OACbg8H,EAAW5tJ,KAAKqW,OAAOgc,EAAMT,MAAM/xB,MAAM,KAAK,OAM1D3M,MAAMC,QAAQy/B,EAAMhB,OAAQ,CAC5B,IAAIppC,EAEJ,IAAKA,EAAI,EAAGA,EAAIoqC,EAAMhB,MAAMv+B,OAAQ7K,IACF,iBAAnBoqC,EAAMhB,MAAMppC,SACa,IAAtBoqC,EAAMhB,MAAMppC,GAAGwb,IACtB4pJ,EAAWltJ,QAAQkyB,EAAMhB,MAAMppC,GAAGwb,KAAO,IAC5C6pJ,EAAa7tJ,KAAK4yB,EAAMhB,MAAMppC,WACvBoqC,EAAMhB,MAAMppC,IAI3B,IAAKA,EAAI,EAAGA,EAAIoqC,EAAMhB,MAAMv+B,OAAQ7K,SACF,IAAnBoqC,EAAMhB,MAAMppC,IACnBqlK,EAAa7tJ,KAAK4yB,EAAMhB,MAAMppC,IAItCoqC,EAAMhB,MA0BtB,SAAuC29D,EAAY,IAC/C,IAAKtuE,IAAQghD,aAAehhD,IAAQ0hD,qBAAqB,IACrD,OAAO4sB,EAGX,IAAIu+D,EAAgB,IAAKv+D,GAsBzB,OApB2BA,EAAUz9D,OAAOgB,GACxCA,EAAS14B,YAAc,WAAa04B,EAASrpC,QAAU,KACtD6Y,IAAIwwB,GAAYA,EAAS9uB,IAEXkI,QAAQ6hJ,IAEvB,MAAMC,EAAYF,EAAc17H,KAAK9wB,GACjCA,EAAK0C,KAAO+pJ,GAA6B,UAAnBzsJ,EAAKlH,WAE/B4zJ,EAAUvkK,MAAS,GAAEurC,IAAeG,YAAY44H,IAGhDD,EACMA,EAAch8H,OAAOxwB,GAAQA,EAAK0C,KAAO+pJ,GAI/CD,EAAc9tJ,KAAKguJ,KAGhBF,EArDmBG,CAA8BJ,MAKxD,MAAMK,EAAS7vG,EAAU3N,MAAM37B,GAG/B,OAAO,IAAI25E,sBAAsB,CAC7B3qF,KAAM0sB,EAAK1sB,KACXovB,IAAK+6H,KA2FbnqH,EAAwB35C,UAAU6jI,aAAe,SAASjkC,GACtD,MAAMn4D,EAAW/0B,KAAKqxJ,SAASnkE,EAAW7pD,OAE1C,OAAOtO,GAAYA,EAASD,MAAM,IAatCmS,EAAwB35C,UAAUgkK,oCAC5B,SAAS39H,GACP,MAAM0C,EAAMkrB,IAAUrpC,MAAMyb,EAAK0C,KAC3BqC,EAAQrC,EAAIrE,MAAMsD,KAAKjD,GAAwB,UAAfA,EAAMprB,MAI5CyxB,EAAMvD,WAAauD,EAAMvD,YAAc,GACvC,MAAMo8H,EAAY74H,EAAMvD,WAAWH,OAAOO,GAA6B,QAApBA,EAAMC,WAEzD,GAAIkD,EAAMugE,WAAavgE,EAAMsgE,aAAc,CACvC,MAAMlkE,EAAQ,GAad,GAXIy8H,GAAaA,EAAUh7J,OACvBg7J,EAAUniJ,QAAQmmB,IACdT,EAAM5xB,KAAKqyB,EAAMT,MAAM/xB,MAAM,KAAK,MAGtC21B,EAAM5D,MAAM1lB,QAAQoa,IACO,SAAnBA,EAAKlsB,WACLw3B,EAAM5xB,KAAKsmB,EAAKtiB,MAIxBwxB,EAAMvD,WAAWG,KAAKC,GAA6B,QAApBA,EAAMC,WAErC,OAAO7B,EAEX+E,EAAMvD,WAAWjyB,KAAK,CAClBsyB,UAAW,MACXV,MAAOA,EAAM3xB,KAAK,OAI1B,OAAO,IAAIyuF,sBAAsB,CAC7B3qF,KAAM0sB,EAAK1sB,KACXovB,IAAKkrB,IAAU3N,MAAMvd,MAKjC,MAAMm7H,EAAU,CACZnoE,iBACI,OAAOrpF,KAAKqlB,eAAegkE,gBAE/BI,qBACI,OAAOzpF,KAAKqlB,eAAeokE,oBAE/BW,mBACI,IAAIz2D,EAAO3zB,KAAKqlB,eAAe+kE,iBAE/B,OAAKz2D,GAML3zB,KAAK2mJ,MAAM,oCAAqCwH,EAAQx6H,IAIpD3zB,KAAKwsJ,mBAAqBxsJ,KAAKwnB,OAC/BmM,EAAO3zB,KAAK0sJ,QAAQ+E,QAAQ99H,GAC5B3zB,KAAK2mJ,MAAM,8CACPwH,EAAQx6H,IAEZA,EAAO3zB,KAAKsxJ,oCAAoC39H,GAChD3zB,KAAK2mJ,MAAM,yDACPwH,EAAQx6H,KACJ3zB,KAAKwsJ,mBACTroI,IAAQ2hE,gCACRnyD,EAAO3zB,KAAKitJ,eAAeyE,mCAAmC/9H,GAC9D5V,EAAO9Y,MACH,uDAAwD0uB,IAWhEA,EA5IY,SAASy2D,EAAkBjjF,GAC/C,IAAKijF,EACD,MAAM,IAAI/yF,MAAM,mCAGpB,MAAMs6J,EAAc,IAAIvwG,IAAiBgpC,EAAiB/zD,KACpDu7H,EAAaD,EAAYnwG,YAAYha,KAC3C,IAAIurF,GAAU,EAEV6+B,GAAcA,EAAW39H,YAAciE,IAAeK,WAClDpxB,EAAQ6hF,YACR4oE,EAAW39H,UAAYiE,IAAeC,SAEtCy5H,EAAW39H,UAAYiE,IAAeK,SAG1Cw6F,GAAU,GAGd,MAAM8+B,EAAaF,EAAYnwG,YAAYha,KAO3C,OALIqqH,GAAcA,EAAW59H,YAAciE,IAAeK,WACtDs5H,EAAW59H,UAAYiE,IAAeK,SACtCw6F,GAAU,GAGVA,EACO,IAAInhC,sBAAsB,CAC7B3qF,KAAMmjF,EAAiBnjF,KACvBovB,IAAKs7H,EAAYjwG,aAIlB0oC,EA2GQ0nE,CAAgBn+H,EAAM3zB,KAAKmH,UAItCwsB,EAAO3zB,KAAKitJ,eAAe8E,2BAA2Bp+H,GAE/CA,IAtCH5V,EAAO9Y,MAASjF,KAAF,kDAEP,KAsCfgqF,oBACI,IAAIr2D,EAAO3zB,KAAKqlB,eAAe2kE,kBAE/B,OAAKr2D,GAKL3zB,KAAK2mJ,MAAM,qCAAsCwH,EAAQx6H,IAErD3zB,KAAKwsJ,mBACDxsJ,KAAKwnB,MAELmM,EAAO3zB,KAAKgyJ,4BAA4Br+H,IAGxCA,EAAO3zB,KAAK0sJ,QAAQ+E,QAAQ99H,GAC5B3zB,KAAK2mJ,MAAM,+CAAgDwH,EAAQx6H,MAIpEA,IAjBH5V,EAAO9Y,MAASjF,KAAF,oDAEP,MAmBnB5T,OAAOmZ,KAAKisJ,GAASpiJ,QAAQqpD,IACzBrsE,OAAOC,eACH46C,EAAwB35C,UACxBmrE,EAAM,CACFlsE,IAAKilK,EAAQ/4F,OAKzBxxB,EAAwB35C,UAAU+jK,SAAW,SAAShuH,GAClD,OAAOrjC,KAAK05F,WAAWntG,IAAI82C,IAS/B4D,EAAwB35C,UAAU2kK,iBAAmB,WACjD,MAAMtxH,EAAQ3gC,KAAKqnC,qBAEnB,OAAO1G,GAASA,EAAMG,YAAcC,WAYxCkG,EAAwB35C,UAAU4kK,iBAAmB,SAAShiF,GAC1D,IAAKlwE,KAAKmyJ,iBAAmBnyJ,KAAKysJ,iCAC9B,OAAOv8E,EAGX,MAAMyoB,EAAYp3C,IAAUrpC,MAAMg4D,EAAY75C,KAE9C,IAAK,MAAMP,KAAS6iE,EAAU3mE,MAC1B,GAAIhyB,KAAKmyJ,gBAAgB9vH,QAAUvM,EAAM7uB,OAASjH,KAAKmyJ,gBAAgB9hI,UAcnE,GAbAW,IAAQyF,YAAYX,EAAO91B,KAAKmyJ,gBAAgB75C,UAO5Ct4G,KAAKmyJ,gBAAgB75C,WAAa7gF,QAAsBtT,IAAQC,iBAAmBpkB,KAAKwnB,OACxFwJ,IAAQoG,WAAWtB,EAAO91B,KAAKmyJ,gBAAgB75C,UAAU,GAKzDt4G,KAAKmyJ,gBAAgB75C,WAAa7gF,MAAmB,CACrD,MAAM26H,EAAWpyJ,KAAK83F,cAActkD,KAAOxzC,KAAK83F,cAC1Cu6D,EAAYD,EAAS9iG,KAAO8iG,EAAS9iG,KAjjDxC,KAkjDG8vF,EAAQh0I,KAAKmM,OAAOvX,KAAKiyJ,mBAljD5B,KAkjD8DI,GAAa,KAI9Ev8H,EAAMw7C,UAAY,CAAE,CAChBrqE,KAAM,KACNm4I,eAOJtpH,EAAMw7C,eAAY/wE,OAEfu1B,EAAM7uB,OAASjH,KAAKmyJ,gBAAgB9hI,WAC3CW,IAAQoG,WAAWtB,EAAO91B,KAAKmyJ,gBAAgB75C,UAIvD,OAAO,IAAI1mB,sBAAsB,CAC7B3qF,KAAMipE,EAAYjpE,KAClBovB,IAAKkrB,IAAU3N,MAAM+kD,MAU7B1xD,EAAwB35C,UAAUglK,cAAgB,SAAS3xH,GACvD,GAAIA,EAAM5W,UACN,OAAO/pB,KAAKwjC,YAAYjb,IAAIoY,EAAM0C,OAGtC,MAAMxT,EAAgB8Q,EAAM82C,mBACtBu4E,EAAkBhwJ,KAAKgoC,aAAaz7C,IAAIsjC,GAE9C,OAAOkK,QAAQi2H,GAAmBA,EAAgBzjK,IAAIo0C,EAAMmH,aAAenH,IAS/EsG,EAAwB35C,UAAU6/F,SAAW,SAASxsD,EAAO4lD,GAAc,GACvE,MAAMljD,EAAQ1C,EAAM0C,MAIpB,GAFAtlB,EAAO7Y,KAAM,GAAElF,eAAe2gC,KAE1B3gC,KAAKwjC,YAAYjb,IAAI8a,GAErB,OAAOvF,QAAQE,OAAO,IAAI3mC,MAAO,GAAEspC,mBAAuB3gC,SAK9D,GAFAA,KAAKwjC,YAAY/d,IAAI4d,EAAO1C,GAExB3gC,KAAKwsJ,iBACL,IACIxsJ,KAAKssJ,SAASn/D,SAASxsD,EAAO4lD,GAChC,MAAOvhF,GAGL,OAFA+Y,EAAO/Y,MAAO,GAAEhF,qBAAqB2gC,aAAiB37B,aAAzC,EAAyCA,EAAOP,WAEtDq5B,QAAQE,OAAOh5B,OAEvB,CAMH,MAAMutJ,EAAe5xH,EAAMg/C,oBAE3B,GAAI4yE,EACAvyJ,KAAKwyJ,WAAWD,QAGb,IAAKpuI,IAAQ2hE,+BACLnlD,EAAMwI,gBACLxI,EAAM8gD,iBAAmB9gD,EAAM04C,UAC3C,OAAOv7C,QAAQE,OAAO,IAAI3mC,MAAO,GAAE2I,mCAAmC2gC,MAI1E,GAAIxc,IAAQ2hE,+BAAiCnlD,EAAM8gD,gBAAkB9gD,EAAM04C,UAAW,CAClF,MAAMtkD,EAAW/0B,KAAKyyJ,0BAA0B9xH,GAEhD3gC,KAAK+sJ,eAAe2F,eAAe39H,EAASD,MAAM,IAClD,MAAMW,EACAV,EAAS8Z,OAAOvZ,KAAKwrB,GAAqC,QAAxBA,EAAUtrB,WAE9CC,GACAz1B,KAAKi5F,UAAU05D,aAAal9H,EAASX,OAEzC,MAAMy8H,EACAx8H,EAAS8Z,OAAO7Z,OACd8rB,GAAqC,QAAxBA,EAAUtrB,WAE/B,GAAI+7H,EAAW,CACX,MAAMqB,EAAiB,IAAIhvI,IAE3B2tI,EAAUniJ,QAAQimB,IACd,MAAMD,EAAcC,EAASP,MAAM,GAC7B+9H,EAAUx9H,EAASP,MAAM,GAE/B89H,EAAentI,IAAI2P,EAAay9H,KAEpC7yJ,KAAKmtJ,YAAYwF,aAAaC,KAI1C,IAAIE,EAAeh1H,QAAQC,UAO3B,OAJI5Z,IAAQuQ,cACRo+H,EAAeA,EAAap1H,KAAK,IAAM19B,KAAKssJ,SAAS1yD,aAAaj5D,KAG/DmyH,GAWX7rH,EAAwB35C,UAAUmmG,eAAiB,SAAS9yD,GACxD,IAAK3gC,KAAK+yJ,oBAAoB,iBAAkBpyH,GAE5C,OAAO7C,QAAQE,OAAO,yCAG1BjgB,EAAO7Y,KAAM,GAAElF,qBAAqB2gC,eACpC,MAAMqyH,EAAeryH,EAAMg/C,oBAE3B,OAAKqzE,EAMDhzJ,KAAKwsJ,iBACExsJ,KAAKssJ,SAAS74D,eAAe9yD,IAGxC3gC,KAAKwyJ,WAAWQ,GAETl1H,QAAQC,SAAQ,KAXnBhgB,EAAO/Y,MAAO,GAAEhF,4BAA4B2gC,kCAErC7C,QAAQE,OAAO,sBAiB9BiJ,EAAwB35C,UAAUklK,WAAa,SAAS9wH,GACpD1hC,KAAKqlB,eAAe4tI,UAAUvxH,GAC9B1hC,KAAK25F,cAAcz2F,KAAKw+B,IAO5BuF,EAAwB35C,UAAU4lK,cAAgB,SAASxxH,GACvD1hC,KAAKqlB,eAAe8tI,aAAazxH,GACjC1hC,KAAK25F,cACC35F,KAAK25F,cAAc3kE,OAAOpP,GAAUA,IAAW8b,IAczDuF,EAAwB35C,UAAUylK,oBAAsB,SAChDj2F,EACAowB,GACJ,MAAMkmE,EAAapzJ,KAAKwjC,YAAYjb,IAAI2kE,EAAW7pD,OAMnD,OAJK+vH,GACDr1I,EAAO/Y,MAAO,GAAEhF,QAAQ88D,YAAqBowB,2BAG1CkmE,GAUXnsH,EAAwB35C,UAAUo/F,wBAA0B,WAAW,MACnE,MAAMr2D,EAAG,UAAGr2B,KAAKqlB,eAAe+kE,wBAAvB,aAAG,EAAsC/zD,IAC5Cg9H,EAAe57H,MAErB,IAAKpB,EACD,OAAOg9H,EAEX,MAEMx8H,EAFY0qB,IAAUrpC,MAAMme,GACVrE,MAAMsD,KAAKxpC,GAAKA,EAAEmb,OAASugC,KAC/B5Q,IAAI,GAAGC,MAE3B,OAAIA,EACOzqC,OAAOm7B,OAAOkQ,GAAenC,KAAK3oC,GAASA,IAAUkqC,EAAMl0B,eAG/D0wJ,GAWXpsH,EAAwB35C,UAAU2gG,eAAiB,SAASlF,EAAiB,KAAMq7B,EAAgB,MAE/F,MAAM/hF,EAA2B,OAAlB+hF,EACT9L,EAAW8L,GAAgCr7B,EAE7C/oF,KAAKmyJ,kBAAoBppE,GAAkBq7B,IAC3CpkH,KAAKmyJ,gBAAgB9vH,OAASA,EAC9BriC,KAAKmyJ,gBAAgB75C,SAAWA,GACzBvvB,GAAkBq7B,EACzBpkH,KAAKmyJ,gBAAkB,CACnB9vH,SACAhS,UAAWmX,IACX8wE,YAGJv6F,EAAO5Y,KAAM,GAAEnF,yCAAyC+oF,cAA2Bq7B,iDAW3Fn9E,EAAwB35C,UAAUgmK,kBAAoB,SAAS5xH,GAC3D,OAAO1hC,KAAK25F,cAAc/1F,QAAQ89B,IAAgB,GAUtDuF,EAAwB35C,UAAUmrH,YAAc,SAASvrB,GACrD,MAAM8lE,EAAe9lE,EAAWvN,oBAEhC3/E,KAAK2mJ,MACD,eACAz5D,EAAW7pD,MAAO2vH,EAAeA,EAAa9rJ,QAAK3G,GAElDP,KAAK+yJ,oBAAoB,eAAgB7lE,KAI9CltF,KAAKwjC,YAAYtb,OAAOglE,EAAW7pD,OACnCrjC,KAAK05F,WAAWxxE,OAAOglE,EAAW7pD,OAE9B2vH,GACAhzJ,KAAKqlB,eAAe8tI,aAAaH,KAUzC/rH,EAAwB35C,UAAUimK,iBAAmB,SAASljI,GAC1D,OAAOrwB,KAAKqlB,eAAemuI,aAAal+H,KAAK7nC,GAAKA,EAAEkzC,OAASlzC,EAAEkzC,MAAMlG,OAASpK,IAUlF4W,EAAwB35C,UAAUm4F,qBAAuB,SAAS9kD,GAC9D,OAAO3gC,KAAKqlB,eAAespI,eAAer5H,KAAK9oC,GAAKA,EAAEm0C,QAAUA,IAUpEsG,EAAwB35C,UAAUs4F,mBAAqB,SAASjlD,GAC5D,OAAO3gC,KAAKqlB,eAAemuI,aAAal+H,KAAK7nC,GAAKA,EAAEkzC,QAAUA,IAelEsG,EAAwB35C,UAAU6kG,aAAe,SAASC,EAAUC,GAChE,GAAIryF,KAAKwsJ,iBAGL,OAFAzuI,EAAO9Y,MAASjF,KAAF,wCAEPA,KAAKssJ,SAASn6D,aAAaC,EAAUC,GAGvC30D,KAAK,IAAM19B,KAAKy4F,iBAAmBt0E,IAAQ40E,8BAGpDh7E,EAAO9Y,MAASjF,KAAF,kCAEd,IAAI8yJ,EAAeh1H,QAAQC,UAS3B,OAPIq0D,GACApyF,KAAKy4G,YAAYrmB,GAEjBC,IACAygE,EAAe9yJ,KAAKmtF,SAASkF,IAG1BygE,EAAap1H,KAAK,KAAM,IAWnCuJ,EAAwB35C,UAAUkmG,gBAAkB,SAAStG,GACzD,MAAM8lE,EAAe9lE,EAAWvN,oBAMhC,OAJA3/E,KAAK2mJ,MACD,mBACAz5D,EAAW7pD,MAAO2vH,EAAeA,EAAa9rJ,GAAK,MAElDlH,KAAK+yJ,oBAAoB,mBAAoB7lE,GAK9CltF,KAAKwsJ,iBACExsJ,KAAKssJ,SAAS94D,gBAAgBtG,GAGrC8lE,GACAj1I,EAAO7Y,KAAM,GAAElF,uBAAuBktF,aACtCltF,KAAKkzJ,cAAcF,GAEZl1H,QAAQC,SAAQ,KAG3BhgB,EAAO/Y,MAAO,GAAEhF,sDAAsDktF,KAE/DpvD,QAAQE,OAAO,qBAhBXF,QAAQE,OAAO,0CAmB9BiJ,EAAwB35C,UAAUq6J,kBAAoB,SAAS3sH,EAAOy4H,GAGlE,OAFAzzJ,KAAK2mJ,MAAM,oBAAqB3rH,EAAOy4H,GAEhCzzJ,KAAKqlB,eAAesiI,kBAAkB3sH,EAAOy4H,IAWxDxsH,EAAwB35C,UAAUomK,4BAA8B,SACxDC,GACJ,IAAIC,EAASD,EAASt9H,IAEtB,MAAMw9H,EAAkBD,EAAOhwJ,QAAQ,WACjCkwJ,EAAgBF,EAAOhwJ,QAAQ,mBAAoBiwJ,GACzD,IAAIE,EAAkBH,EAAOv0F,YAAY,gBAEzC,IAAuB,IAAnBy0F,IACwB,IAArBC,GACAA,IAAoBD,EACvB,OAAOH,EAGX,MAAMK,EAAcJ,EAAOhwJ,QAAQ,OAAQkwJ,GACrCG,EAASL,EAAOliI,UAAUoiI,EAAeE,EAAc,GAE7DJ,EAASA,EAAOhyJ,QAAQqyJ,EAAQ,IAChCF,EAAkBH,EAAOv0F,YAAY,gBACrC,MAAM60F,EAAgBN,EAAOhwJ,QAAQ,OAAQmwJ,GACvCI,EAAUP,EAAO9zI,MAAM,EAAGo0I,GAC1BE,EAAgBH,EAAOv3G,OACvB23G,EAAUT,EAAO9zI,MAAMo0I,GAI7B,OAFAN,EAAU,GAAEO,QAAcC,IAAgBC,IAEnC,IAAIziE,sBAAsB,CAC7B3qF,KAAM0sJ,EAAS1sJ,KACfovB,IAAKu9H,KAYb3sH,EAAwB35C,UAAUgnK,2BAA6B,SAASlqE,GACpE,MAAMunE,EAAc,IAAIvwG,IAAiBgpC,EAAiB/zD,KAC1D,IAAIk+H,GAAoB,EACxB,MAAM3C,EAAaD,EAAYnwG,YAAYha,KAE3C,GAAIoqH,EAAY,CACZ,MAAM4C,EAAwBx0J,KAAK0xF,yBAAyBlqD,KAExDoqH,EAAW39H,YAAcugI,IACzB5C,EAAW39H,UAAYugI,EACvBz2I,EAAO7Y,KAAM,GAAElF,0CAA0Cw0J,KACzDD,GAAoB,QAGxBx2I,EAAO5Y,KAAQnF,KAAF,oDAGjB,MAAM6xJ,EAAaF,EAAYnwG,YAAYha,KAE3C,GAAIqqH,EAAY,CACZ,MAAM4C,EAAwBz0J,KAAK0xF,yBAAyBlqD,KAExDqqH,EAAW59H,YAAcwgI,IACzB5C,EAAW59H,UAAYwgI,EACvB12I,EAAO7Y,KAAM,GAAElF,0CAA0Cy0J,KACzDF,GAAoB,QAGxBx2I,EAAO5Y,KAAQnF,KAAF,oDAGjB,OAAIu0J,EACO,IAAI3iE,sBAAsB,CAC7B3qF,KAAMmjF,EAAiBnjF,KACvBovB,IAAKs7H,EAAYjwG,aAIlB0oC,GAWXnjD,EAAwB35C,UAAU0kK,4BAA8B,SAAShoE,GACrE,MAAM2nE,EAAc,IAAIvwG,IAAiB4oC,EAAkB3zD,KAY3D,MAVA,CAAEmR,IAAiBA,KAAkBp4B,QAAQihB,IACzC,MAAM2B,EAAQ2/H,EAAYnwG,YAAYnxB,GAChCg+H,EAAiBruJ,KAAKsuJ,mBAAmBj+H,GACzCqkI,EAAkB10J,KAAK+nC,gBAAgB,KAAM1X,GAAW95B,OAAS,EAEvEy7B,EAAMiC,UAAYo6H,GAAkBqG,EAC9Bx8H,IAAeK,SACf81H,EAAiBn2H,IAAeG,SAAWH,IAAeI,WAG7D,IAAIs5D,sBAAsB,CAC7B3qF,KAAM+iF,EAAkB/iF,KACxBovB,IAAKs7H,EAAYjwG,cAWzBza,EAAwB35C,UAAUqnK,WAAa,SAASzkF,GACpD,MAAM,aAAEv0C,GAAiB37B,KAAKmH,QAE9B,KAAKw0B,aAAD,EAACA,EAActC,WAAWsC,aAAD,EAACA,EAAci5H,uBACxC,OAAO1kF,EAGX,MAAMyoB,EAAYp3C,IAAUrpC,MAAMg4D,EAAY75C,KACxCw+H,EAASl8D,EAAU3mE,MAEzB,IAAK,MAAM8D,KAAS++H,EAChB,GAAmB,UAAf/+H,EAAM7uB,KAAkB,CACxB,MAAM,QAAE6vB,GAAYhB,EAAMc,IAAItB,KAAK5sB,GAAYA,EAASmuB,QAAUY,QAElE,IAAKX,EAED,SAGJ,IAAIg+H,EAAWh/H,EAAM6B,KAAKrC,KAAK5sB,GAAYA,EAASouB,UAAYA,GAE3Dg+H,IACDA,EAAW,CACPh+H,UACAe,OAAQ,KAIhB,MAAMk9H,EAAaxzG,IAAUzN,YAAYghH,EAASj9H,QAClD,IAAIm9H,GAAa,EAYjB,IAVIr5H,aAAJ,EAAIA,EAActC,UACd07H,EAAW17H,OAAS,EACpB27H,GAAa,IAGbr5H,aAAJ,EAAIA,EAAci5H,yBACdG,EAAWE,kBAAoBt5H,EAAai5H,sBAC5CI,GAAa,IAGZA,EAED,SAGJ,IAAIE,EAAe,GAEnB,IAAK,MAAMjoK,KAAOb,OAAOmZ,KAAKwvJ,GAC1BG,GAAiB,GAAEjoK,KAAO8nK,EAAW9nK,OAGzC6nK,EAASj9H,OAASq9H,EAAax4G,OAIvC,OAAO,IAAIk1C,sBAAsB,CAC7B3qF,KAAMipE,EAAYjpE,KAClBovB,IAAKkrB,IAAU3N,MAAM+kD,MAI7B1xD,EAAwB35C,UAAUggG,oBAAsB,SAASpd,GAC7D,IAAIyjF,EAAWzjF,EAsBf,OApBAlwE,KAAK2mJ,MAAM,oCAAqCwH,EAAQwF,IAGxDA,EAAW3zJ,KAAKkyJ,iBAAiByB,GAGjCA,EAAW3zJ,KAAK20J,WAAWhB,GAEtB3zJ,KAAKwsJ,iBAGExsJ,KAAKwnB,QAGbmsI,EAAW3zJ,KAAK0sJ,QAAQyI,cAAcxB,GACtC3zJ,KAAK2mJ,MACD,oDACAwH,EAAQwF,MARZA,EAAW3zJ,KAAKs0J,2BAA2BX,GAC3CA,EAAW3zJ,KAAK0zJ,4BAA4BC,IAUzC,IAAI71H,QAAQ,CAACC,EAASC,KACzBh+B,KAAKqlB,eAAeioE,oBAAoBqmE,GACnCj2H,KAAK,KACF19B,KAAK2mJ,MAAM,gCACX,MAAMmF,EAAa96H,IAAQsF,SAASq9H,EAASt9H,KAEzCy1H,IAAe9rJ,KAAK8rJ,aACpB9rJ,KAAK8rJ,WAAaA,EAClB9rJ,KAAK6jB,aAAa8D,KACd0S,IAAU5M,oBAAqBztB,KAAM8rJ,IAE7C/tH,KACD5tB,IACCnQ,KAAK2mJ,MAAM,+BAAgCx2I,GAC3CnQ,KAAK6jB,aAAa8D,KACd0S,IAAUlN,6BACVhd,EAAKnQ,MACTg+B,EAAO7tB,QAkBvB82B,EAAwB35C,UAAUymG,uBAAyB,SAASiE,GAChEj6E,EAAO9Y,MAAO,GAAEjF,+BAA+Bg4F,KAC/C,MAAM+6B,EAAU/yH,KAAK0rJ,sBAAwB1zD,EAI7C,OAFAh4F,KAAK0rJ,oBAAsB1zD,EAEvBh4F,KAAKwsJ,kBACLxsJ,KAAKssJ,SAASv4D,uBAAuBiE,IAG9B,GAGJ+6B,GAUX9rF,EAAwB35C,UAAUkiG,oCAAsC,WACpE,IAAKxvF,KAAKqlB,eAAemuI,WAGrB,OAFAz1I,EAAO9Y,MAASjF,KAAF,0CAEP89B,QAAQC,UAEnB,MAAMq3H,EAAkBp1J,KAAKqnC,qBACvBguH,EAAcr1J,KAAKuzJ,iBAAiB/rH,KAE1C,IAAK6tH,EACD,OAAOv3H,QAAQC,UAEnB,MAAMgwC,EAAasnF,EAAYx7D,gBACzBy7D,EAAaF,EAAgBt0H,YAAcC,SA3tEf,qBA6tE5B/gC,KAAKmH,QAAQohF,wBAA0BvoF,KAAKwsJ,iBA5tEf,sBADD,qBAyuElC,OAJAzuI,EAAO7Y,KAAM,GAAElF,qDAAqDs1J,WAAoBF,KACxFrnF,EAAWwnF,sBAAwBD,EACnCt1J,KAAKssJ,SAASryD,0BAA0BlsB,GAEjCsnF,EAAYt7D,cAAchsB,IAYrC9mC,EAAwB35C,UAAU8hG,cAAgB,WAG9C,GAAIpvF,KAAK0sF,4BAA8Bj1D,QAAsBnsC,OAAOouI,aAChE,OAAO57F,QAAQC,UAEnB,MAAMq3H,EAAkBp1J,KAAKqnC,qBAE7B,IAAK+tH,EACD,OAAOt3H,QAAQC,UAGnB,MAAM+C,EAAYs0H,EAAgBt0H,UAC5B00H,GAAsBx1J,KAAKwsJ,kBAAoB1rH,IAAcC,UAMnE,KAAO/gC,KAAKmH,QAAQqhF,cAAgBxoF,KAAKmH,QAAQqhF,aAAa6jE,kBACtDmJ,GAAsBx1J,KAAKmH,QAAQohF,uBACpCvoF,KAAKwsJ,kBACR,OAAO1uH,QAAQC,UAGnB,MAAM03H,EAAmBL,EAAgB/1E,iBAClC+1E,EAAgB/1E,gBAAgBn4E,KAAOkuJ,EAAgBztD,cACxD0tD,EAAcr1J,KAAKuzJ,iBAAiB/rH,KAE1C,IAAK6tH,EACD,OAAOv3H,QAAQC,UAEnB,MAAMgwC,EAAasnF,EAAYx7D,gBAE/B,IAAM9rB,EAAW+rB,YAAa/rB,EAAW+rB,UAAUvjG,OAC/C,OAAOunC,QAAQC,UAGnB,GAAI/9B,KAAKy4F,iBACL,IAAK,MAAMgB,KAAY1rB,EAAW+rB,UAC9B,GAAI/rB,EAAW+rB,UAAUvsG,eAAeksG,GAAW,CAC/C,IAAI2tC,EAOAA,EALAouB,EAKUx1J,KAAKmH,QAAQohF,sBACjBktE,EAnyEP,KADQ,SA0yEDl1J,EAEIP,KAAKssJ,SAASv0D,2BAA2B0B,GAAUloB,WAGjExzD,EAAO7Y,KAAM,GAAElF,iCAAiConI,kBACvCpnI,KAAKssJ,SAASv0D,2BAA2B0B,GAAUntF,KAC5DyhE,EAAW+rB,UAAUL,GAAUloB,WAAa61D,OAGjD,OAEH,IAAIA,EAAO,UAAGpnI,KAAKmvJ,gCAAR,aAAG,EAA+B7/F,KAE7C,GAAIxuB,IAAcC,SAAkB,CAEhC,MAAM20H,EAAc11J,KAAKqtJ,qBACnBjiJ,KAAKmM,MAAM69I,EAAgB31H,WAAaz/B,KAAKqtJ,sBAC7C,EACA5zD,EAAWz5F,KAAKssJ,SAASv0D,2BAC1BziE,KAAKqgI,GAASA,EAAMz9D,wBAA0Bw9D,GAE/Cj8D,IACA17E,EAAO7Y,KAAM,GAAElF,4BAA4By5F,EAASloB,2BAA2B6jF,KAC/EhuB,EAAU3tC,EAASloB,YAG3BxD,EAAW+rB,UAAU,GAAGvoB,WAAa61D,EAIzC,OAFApnI,KAAKssJ,SAASryD,0BAA0BlsB,GAEjCsnF,EAAYt7D,cAAchsB,IAGrC9mC,EAAwB35C,UAAUykG,qBAAuB,SAAS7hB,GAa9D,GAZAlwE,KAAK2mJ,MAAM,qCAAsCwH,EAAQj+E,IAKzDA,EAAclwE,KAAKkyJ,iBAAiBhiF,GAGpCA,EAAclwE,KAAK20J,WAAWzkF,GAIzBlwE,KAAKwsJ,kBAYH,IAAKxsJ,KAAKwnB,MAAO,CACpB,MAAMouI,EAAqB51J,KAAKqlB,eAAe2kE,kBAG/C9Z,EAAclwE,KAAK0sJ,QAAQyI,cAAcjlF,EAAa0lF,GACtD51J,KAAK2mJ,MACD,gDACAwH,EAAQj+E,IAERlwE,KAAKy4F,kBAELvoB,EAAclwE,KAAKi5F,UAAU48D,uBAAuB3lF,GAGpDA,EAAclwE,KAAKssJ,SAASxzD,kCAAkC5oB,GAC9DlwE,KAAK2mJ,MACD,oDACAwH,EAAQj+E,WA3BZlwE,KAAKy4F,kBAELvoB,EAAclwE,KAAKi5F,UAAU48D,uBAAuB3lF,GAAa,GACjElwE,KAAK2mJ,MACD,kDACAwH,EAAQj+E,KAIhBA,EAAc2gF,EAAe3gF,GA2BjC,OALIlwE,KAAKwsJ,mBAELt8E,EAAclwE,KAAKssJ,SAAS5zD,0BAA0BxoB,IAGnD,IAAIpyC,QAAQ,CAACC,EAASC,KACzBh+B,KAAKqlB,eAAe0sE,qBAAqB7hB,GACpCxyC,KAAK,KACF19B,KAAK2mJ,MAAM,iCACX,MAAMoF,EAAc/6H,IAAQsF,SAAS45C,EAAY75C,KAE7C01H,IAAgB/rJ,KAAK+rJ,cACrB/rJ,KAAK+rJ,YAAcA,EACnB/rJ,KAAK6jB,aAAa8D,KACd0S,IAAU3M,qBAAsB1tB,KAAM+rJ,IAE9ChuH,KACD5tB,IACCnQ,KAAK2mJ,MAAM,gCAAiCx2I,GAC5CnQ,KAAK6jB,aAAa8D,KACd0S,IAAUjN,8BACVjd,EACAnQ,MACJg+B,EAAO7tB,QAevB82B,EAAwB35C,UAAU+hG,yBAA2B,SAASi9C,EAAc,MAChF,GAAIA,EAAc,EACd,MAAM,IAAIj1I,MAAO,wBAAuBi1I,GAI5C,GAAInoH,IAAQC,gBACR,OAAO0Z,QAAQC,UAInB,MAAM+3H,EAA4B,OAAhBxpB,EAAuBtsI,KAAKqtJ,qBAAuB/gB,EAOrE,GALAtsI,KAAKqtJ,qBAAuByI,EAKV,OAAdA,EACA,OAAOh4H,QAAQC,UAGnBhgB,EAAOnZ,IAAK,GAAE5E,8BAA8B81J,KAE5C,MAAMV,EAAkBp1J,KAAKqnC,qBAE7B,IAAK+tH,GAAmBA,EAAgB/7E,UACpC,OAAOv7C,QAAQC,UAEnB,MAAMs3H,EAAcr1J,KAAKuzJ,iBAAiB/rH,KAE1C,IAAK6tH,EACD,OAAOv3H,QAAQC,UAEnB,MAAMgwC,EAAasnF,EAAYx7D,gBAE/B,IAAK9rB,IAAeA,EAAW+rB,YAAc/rB,EAAW+rB,UAAUvjG,OAC9D,OAAOunC,QAAQC,UAGnB,GAAI/9B,KAAKy4F,gBAAiB,CAEtBz4F,KAAK+1J,sBAAwB/1J,KAAKssJ,SAAS/yD,gCAAgC67D,EAAgBz0H,OACtFn7B,IAAImzB,GAAUA,GAAUm9H,GAM7B,MAAME,EAAgBh2J,KAAKssJ,SAASv0D,2BAC/BvG,UAAUmkE,GAAyC,IAAhCA,EAAMz9D,uBAE1B49D,EAAY,IAAwB,IAAnBE,IACjBh2J,KAAK+1J,sBAAsBC,IAAiB,GAEhD,IAAK,MAAMv8D,KAAY1rB,EAAW+rB,UAC1B/rB,EAAW+rB,UAAUvsG,eAAeksG,KACpC1rB,EAAW+rB,UAAUL,GAAUzB,OAASh4F,KAAK+1J,sBAAsBt8D,IAG3Ez5F,KAAKssJ,SAASryD,0BAA0BlsB,QACjC+nF,EAAY,GAInB/nF,EAAW+rB,UAAU,GAAG5B,sBAClBk9D,EAAgBt0H,YAAcC,WAAqBq0H,EAAgB31H,YAAcq2H,EAC7E,EACA1qJ,KAAKmM,MAAM69I,EAAgB31H,WAAaq2H,GAClD/nF,EAAW+rB,UAAU,GAAG9B,QAAS,IAEjCjqB,EAAW+rB,UAAU,GAAG5B,2BAAwB33F,EAChDwtE,EAAW+rB,UAAU,GAAG9B,QAAS,GAKrC,OAFAj6E,EAAO7Y,KAAM,GAAElF,2BAA2B81J,eAAuBlpJ,KAAKwL,UAAU21D,EAAW+rB,cAEpFu7D,EAAYt7D,cAAchsB,GAAYrwC,KAAK,KAM9C,GALA03H,EAAgBhM,qBAAuB0M,EACvC91J,KAAK6jB,aAAa8D,KAAK0S,IAAUxN,2CAA4CuoI,GAIzEp1J,KAAKwnB,QAAUxnB,KAAKy4F,gBACpB,OAAOz4F,KAAKovF,mBAkBxBnoD,EAAwB35C,UAAU2mG,uBAAyB,SAAS+D,GAChEj6E,EAAO9Y,MAAO,GAAEjF,+BAA+Bg4F,KAC/C,MAAM+6B,EAAU/yH,KAAK6rJ,sBAAwB7zD,EAI7C,OAFAh4F,KAAK6rJ,oBAAsB7zD,EAEvBh4F,KAAKwsJ,kBACLxsJ,KAAKssJ,SAASr4D,uBAAuB+D,IAG9B,GAGJ+6B,GAYX9rF,EAAwB35C,UAAUyiI,UAAY,SAASC,EAAOrP,EAAW,IAAKs1C,EAAe,KACzF,IAAKj2J,KAAK2rJ,YAAa,CACnB,GAAI3rJ,KAAKqlB,eAAemuI,WAAY,CAChC,MAAM0C,EAAYl2J,KAAKqlB,eAAemuI,aAAal+H,KAAK7nC,GAAKA,EAAE0oK,MAE/Dn2J,KAAK2rJ,YAAcuK,GAAaA,EAAUC,KAC1Cn2J,KAAK2rJ,aAAe5tI,EAAO7Y,KAAQlF,KAAF,4CAGrC,IAAKA,KAAK2rJ,YAAa,CACnB,MAAMyK,EAAkBhgK,MAAMO,KAAKqJ,KAAKwjC,YAAYjc,UAAU+N,KAAK1oC,GAAKA,EAAEu8C,gBAEtEnpC,KAAKqlB,eAAegxI,kBAAoBD,IACxCp2J,KAAK2rJ,YAAc3rJ,KAAKqlB,eAAegxI,iBAAiBD,EAAgBj9D,aAE5En5F,KAAK2rJ,aAAe5tI,EAAO7Y,KAAQlF,KAAF,6DAGjCA,KAAK2rJ,cACL3rJ,KAAK2rJ,YAAY2K,aAAet2J,KAAKu2J,cAAcrpK,KAAK8S,OAIhE,GAAIA,KAAK2rJ,YAAa,CAClB,GAAI3rJ,KAAK2rJ,YAAY6K,WAOjB,YANAx2J,KAAK4rJ,gBAAgB1oJ,KAAK,CACtB8sH,QACArP,WACAs1C,iBAMRj2J,KAAK2rJ,YAAY8K,WAAWzmC,EAAOrP,EAAUs1C,QAE7Cl4I,EAAO5Y,KAAQnF,KAAF,6CAarBinC,EAAwB35C,UAAUipK,cAAgB,SAAS1qI,GAGvD,GAAI7rB,KAAK2rJ,aAA8B,KAAf9/H,EAAM6qI,MAAe12J,KAAK4rJ,gBAAgBr1J,OAAQ,CACtE,MAAM,MAAEy5H,EAAF,SAASrP,EAAT,aAAmBs1C,GAAiBj2J,KAAK4rJ,gBAAgB35H,QAE/DjyB,KAAK2rJ,YAAY8K,WAAWzmC,EAAOrP,EAAUs1C,KAQrDhvH,EAAwB35C,UAAUm/F,qBAAuB,WACrD,MAAMvrC,EAAUlwB,IAAQ0E,eAExB3X,EAAO7Y,KAAM,GAAElF,oCAAoCkhD,KACnDlhD,KAAK+sJ,eAAe2F,eAAexxG,IAOvCja,EAAwB35C,UAAUglG,kBAAoB,WAClDv0E,EAAO7Y,KAAQlF,KAAF,iCACbA,KAAK+sJ,eAAe4J,uBAQxB1vH,EAAwB35C,UAAUmvB,MAAQ,WACtCzc,KAAK2mJ,MAAM,QAGX3mJ,KAAKonF,eAAex0C,IAAIozG,IAAoChmJ,KAAKisJ,mBACjEjsJ,KAAKonF,eAAex0C,IAAIozG,IAAyChmJ,KAAKgsJ,uBACtEhsJ,KAAKwsJ,kBAAoBxsJ,KAAKqlB,eAAeouB,oBAAoB,QAASzzC,KAAKstJ,SAE/E,IAAK,MAAMsJ,KAAc52J,KAAKgoC,aAAazgB,SACvC,IAAK,MAAMiwD,KAAeo/E,EAAWrvI,SACjCvnB,KAAKwwJ,mBAAmBh5E,GAGhCx3E,KAAKgoC,aAAa8d,QAElB9lD,KAAK25F,cAAgB,GAErB35F,KAAK2rJ,YAAc,KACnB3rJ,KAAK4rJ,gBAAkB,GAElB5rJ,KAAKg1E,IAAI9tC,sBAAsBlnC,OAChC+d,EAAO/Y,MAAShF,KAAF,6CAES,OAAvBA,KAAKusJ,gBACLjhK,OAAOswC,cAAc57B,KAAKusJ,eAC1BvsJ,KAAKusJ,cAAgB,MAEzBxuI,EAAO7Y,KAAQlF,KAAF,2BACbA,KAAKqlB,eAAe5I,SAGxBwqB,EAAwB35C,UAAU0kG,aAAe,SAASznE,GACtD,OAAOvqB,KAAK62J,sBAAqB,EAAoBtsI,IAGzD0c,EAAwB35C,UAAU8/F,YAAc,SAAS7iE,GACrD,OAAOvqB,KAAK62J,sBAAqB,EAAkBtsI,IAGvD0c,EAAwB35C,UAAUupK,qBAAuB,SACjDC,EACAvsI,GACJ,MAAMioG,EAAUskC,EAAU,QAAU,SAEpC92J,KAAK2mJ,MAAO,SAAQn0B,EAAW5lH,KAAKwL,UAAUmS,EAAa,KAAM,MAEjE,MAAMwsI,EAAgB,CAACC,EAAWC,EAAWC,KACzC,IACIl3J,KAAK2mJ,MACA,SAAQn0B,2BAAkC27B,EAAQ6I,IAElDh3J,KAAKwsJ,mBAGDxsJ,KAAKsuJ,mBAAmB9mH,MACrBxnC,KAAK+sJ,eAAeoK,wBACxBn3J,KAAKysF,uBAITuqE,EAAY,IAAIplE,sBAAsB,CAClC3qF,KAAM+vJ,EAAU/vJ,KAChBovB,IAAKr2B,KAAK+sJ,eAAeqK,gCACrBJ,EAAU3gI,OAGlBr2B,KAAK2mJ,MACA,SAAQn0B,wEAET27B,EAAQ6I,KAKZh3J,KAAKy4F,iBAAmBt0E,IAAQ40E,gCAC3B/4F,KAAKmH,QAAQohF,uBACdvoF,KAAKmH,QAAQohF,wBAA0BvoF,KAAKiyJ,sBAEhD+E,EAAYh3J,KAAKi5F,UAAUo+D,sBAAsBL,GACjDh3J,KAAK2mJ,MACA,SAAQn0B,EACH,uCACN27B,EAAQ6I,MAGXh3J,KAAKmH,QAAQ8vC,YAAc9yB,IAAQ40E,+BAEpCi+D,EAAY,IAAIplE,sBAAsB,CAClC3qF,KAAM+vJ,EAAU/vJ,KAChBovB,IAAKr2B,KAAKmtJ,YAAYmK,eAAeN,EAAU3gI,OAGnDr2B,KAAK2mJ,MACA,SAAQn0B,EACF,0CACP27B,EAAQ6I,KAGhB,MAAMnqH,EAAU7sC,KAAK0wJ,gBAAgBsG,GAErCh3J,KAAKu3J,sBAAsB1qH,GAE3BoqH,EAAUD,GACZ,MAAO39J,GACL2G,KAAK2mJ,MAAO,SAAQn0B,WAAkBn5H,GACtC2G,KAAK2mJ,MAAO,SAAQn0B,WAAkB27B,EAAQ6I,IAC9Cj5I,EAAO/Y,MAAO,GAAEhF,cAAcwyH,WAAkBn5H,EAAG80J,EAAQ6I,IAE3DE,EAAS79J,KAIXm+J,EAAgB,CAACrnJ,EAAK+mJ,KACxBl3J,KAAK2mJ,MAAO,SAAQn0B,aAAoBriH,GACxC,MAAM81B,EACA6wH,EACIz8H,IAAUhO,oBACVgO,IAAUjO,qBAEpBpsB,KAAK6jB,aAAa8D,KAAKse,EAAW91B,EAAKnQ,MAEvCk3J,EAAS/mJ,IAKb,GAAInQ,KAAKysJ,iCAAkC,CACvC,MAAMp0D,EAAcr4F,KAAKqlB,eAAeizE,kBACnChjE,KAAK1oC,IAAC,eAAIA,EAAEgjD,WAAY,UAAAhjD,EAAEgjD,gBAAF,mBAAYjP,aAAZ,eAAmBlG,QAAS+M,MAEzD,GAAI6wD,EAAa,WACb,IAAIo/D,EAAY,UAAGt+B,eAAeC,gBAAgB5xF,YAAlC,aAAG,EAAiD2oC,OACpE,MAAMmoC,EAAQ,UAAGt4G,KAAKmyJ,uBAAR,aAAG,EAAsB75C,SACjCj2E,EAAM,UAAGriC,KAAKmyJ,uBAAR,aAAG,EAAsB9vH,OAEjCo1H,GAAgBn/C,GAAYj2E,EAG5Bo1H,EAAan2J,KAAKs1C,GACPA,EAAK0hE,SAAS31G,gBAAmB,GAAE6kC,OAAmB8wE,KAAc,EAAI,GAE5Em/C,GAAgBn/C,IACvBm/C,EAAeA,EACVziI,OAAO4hB,GAAQA,EAAK0hE,SAAS31G,gBAAmB,GAAE6kC,OAAmB8wE,MAG9E,IACIjgB,EAAY6gC,oBAAoBu+B,GAClC,MAAOtnJ,GACL4N,EAAO5Y,KAAM,GAAEnF,iCAAiCs4G,YAAmBj2E,YAAkBlyB,KAKjG,OAAO,IAAI2tB,QAAQ,CAACC,EAASC,KACzB,IAAI05H,EAGAA,EADAZ,EACY92J,KAAKqlB,eAAe+nE,YAAY7iE,GAEhCvqB,KAAKqlB,eAAe2sE,aAAaznE,GAGjDmtI,EACKh6H,KACGrH,GAAO0gI,EAAc1gI,EAAK0H,EAASC,GACnCh5B,GAASwyJ,EAAcxyJ,EAAOg5B,OAS9CiJ,EAAwB35C,UAAUqqK,oBAAsB,SAASn4G,GAC7D,OAAIA,GAAWA,EAAQ3Q,QAAU2Q,EAAQ3Q,OAAOt4C,OACrCipD,EAAQ3Q,OAAO,GAAG/Z,MAAM,GACxB0qB,GAAWA,EAAQ1qB,OAAS0qB,EAAQ1qB,MAAMv+B,OAC1CipD,EAAQ1qB,MAAM,GAGlB,MAUXmS,EAAwB35C,UAAUiqK,sBAAwB,SAAS1qH,GAC/D,IAAK,MAAMlM,KAAS3gC,KAAKwjC,YAAYjc,SAAU,CAC3C,MAAMqwI,EAAmB53J,KAAKwsJ,iBAAmB7rH,EAAMmH,UAAYnH,EAAM0pH,WAEzE,GAAIx9G,EAAQtkB,IAAIqvI,GAAmB,CAC/B,MAAM12G,EAAUrU,EAAQtgD,IAAIqrK,GAE5B,IAAK12G,EAGD,YAFAnjC,EAAO/Y,MAAO,GAAEhF,iCAAiC43J,KAIrD,MAAM32G,EAAUjhD,KAAK05F,WAAWntG,IAAIo0C,EAAM0C,OACpCw0H,EAAa73J,KAAK23J,oBAAoBz2G,GACtC42G,EAAa93J,KAAK23J,oBAAoB12G,GAGxC42G,IAAeC,IACfA,GAAc/5I,EAAO/Y,MAAO,GAAEhF,mCAAmC2gC,gBAAoBugB,KACrFlhD,KAAK05F,WAAWj0E,IAAIkb,EAAM0C,MAAO6d,GACjClhD,KAAK6jB,aAAa8D,KAAK0S,IAAUzN,yBAA0B+T,EAAOk3H,SAE9Dl3H,EAAM8gD,gBAAmB9gD,EAAM04C,WAIvCt7D,EAAO5Y,KAAM,GAAEnF,kDAAkD2gC,aAAiBi3H,OAK9F3wH,EAAwB35C,UAAU4+F,gBAAkB,SAASl5D,GAQzD,OAPAhzB,KAAK2mJ,MAAM,kBAAmB/5I,KAAKwL,UAAU,CACzC4a,UAAWA,EAAUA,UACrBq4D,OAAQr4D,EAAUq4D,OAClBT,cAAe53D,EAAU43D,cACzB3d,iBAAkBj6C,EAAUi6C,kBAC7B,KAAM,MAEFjtE,KAAKqlB,eAAe6mE,gBAAgBl5D,IAQ/CiU,EAAwB35C,UAAU0/I,0BAA4B,WAC1D,IAAI+qB,EAAgB,EAEoC,MAApD/3J,KAAKy4F,iBAAmBz4F,KAAK+1J,sBAC7BgC,EAAa,UAAG/3J,KAAK+1J,sBAAsB/gI,OAAOpP,GAAUmU,QAAQnU,WAAvD,aAAG,EAA8DrvB,OACvEyJ,KAAKy4F,kBACZs/D,EAAgBngE,IAAerhG,QAGnC,OAAOwhK,GASX9wH,EAAwB35C,UAAU+mI,SAAW,WACzC,OAAOr0H,KAAKqlB,eAAegvG,YAU/BptF,EAAwB35C,UAAUmlK,0BAA4B,SAAS9xH,GACnE,MAAM0C,EAAQ1C,EAAM0C,MACpB,IAAItO,EAAW/0B,KAAKqxJ,SAAShuH,GAQ7B,GANItO,GACAhX,EAAO/Y,MAAO,GAAEhF,6CAA6CqjC,KAK7DrjC,KAAKy4F,mBACAz4F,KAAKmH,QAAQohF,uBACdvoF,KAAKmH,QAAQohF,wBAA0BvoF,KAAKiyJ,oBAAsB,CACtEl9H,EAAW,CACPD,MAAO,GACP+Z,OAAQ,IAEZ,IAAK,IAAInjD,EAAI,EAAGA,EAAIksG,IAAerhG,OAAQ7K,IACvCqpC,EAASD,MAAM5xB,KAAK8tB,IAAQ0E,gBAEhCX,EAAS8Z,OAAO3rC,KAAK,CACjB4xB,MAAOC,EAASD,MAAMhV,QACtB0V,UAAW,aAGfT,EAAW,CACPD,MAAO,CAAE9D,IAAQ0E,gBACjBmZ,OAAQ,IAGhB,IAAK7uC,KAAKmH,QAAQ8vC,WAAY,CAK1B,MAAM+gH,EAAejjI,EAASD,MAAMv+B,OAEpC,IAAK,IAAI7K,EAAI,EAAGA,EAAIssK,IAAgBtsK,EAAG,CACnC,MAAM0pC,EAAcL,EAASD,MAAMppC,GAC7BmnK,EAAU7hI,IAAQ0E,eAExBX,EAASD,MAAM5xB,KAAK2vJ,GACpB99H,EAAS8Z,OAAO3rC,KAAK,CACjB4xB,MAAO,CAAEM,EAAay9H,GACtBr9H,UAAW,SAOvB,OAHAT,EAASkrB,KAAOtf,EAAM0pH,WACtBrqJ,KAAK05F,WAAWj0E,IAAI4d,EAAOtO,GAEpBA,GAQXkS,EAAwB35C,UAAUoJ,SAAW,WACzC,MAAQ,UAASsJ,KAAKkH,WAAWlH,KAAKwnB,MAAQ,MAAQ,Y,uFC19F1D,yFASA,MAAMzJ,EAASF,oBAAU6E,GAUV,MAAMwqI,EAQjBj3J,YAAY6xB,EAAKmwI,GACbj4J,KAAK8nB,IAAMA,EACX9nB,KAAKi4J,gBAAkBA,EAkB3BC,+BAA+BvG,GAE3B,MAAMwG,EAAcn4J,KAAK8nB,IAAIyf,eAAeC,KAE5C,IAAK2wH,EAAY5hK,OACb,OAAO,EACuB,IAAvB4hK,EAAY5hK,QACnBwnB,EAAO/Y,MACAhF,KAAK8nB,IAAP,kEACoCqwI,GAG7C,MAAMvjI,EAAa+8H,EAAYnwG,YAAY,SAE3C,IAAK5sB,EAKD,OAJA7W,EAAO9Y,MACAjF,KAAK8nB,IAAP,4DAGE,EAGX,IAAI2vE,GAAW,EAEf,IAAK,MAAMhvD,KAAc0vH,EAAa,CAClC,MAAM7uI,EAAQmf,EAAW4wC,UACnB33C,EAAc+G,EAAWk3C,oBAKzBy4E,EACA12H,GAAe1hC,KAAK8nB,IAAIwrI,kBAAkB5xH,GAGhD,KAFsBpY,IAAU8uI,GAG5B,SAIJ,MAAMC,EACAr4J,KAAK8nB,IAAI2wE,gBACLz4F,KAAK8nB,IAAImxE,UAAUq/D,UACnB,CAAEt4J,KAAK8nB,IAAIilI,eAAewL,mBAEpC,IAAKF,EAAc9hK,OAAQ,CACvBwnB,EAAO/Y,MAAO,wBAAuByjC,QAAiBzoC,KAAK8nB,OAE3D,SAGJ2vE,GAAW,EAMX7iE,EAAWX,UAAYiE,IAAeK,SAGtC,MAMMigI,EAAgB,YANFH,EAAc,GAQlC,IAAK,MAAM34G,KAAW24G,EAElBzjI,EAAW6qB,WAAWC,GAGtB9qB,EAAW+qB,iBAAiB,CACxBz4C,GAAIw4C,EACJpiD,UAAW,QACX3Q,MAAO6rK,IAEX5jI,EAAW+qB,iBAAiB,CACxBz4C,GAAIw4C,EACJpiD,UAAW,OACX3Q,MAAO87C,EAAW4hH,aAG1B,GAAIgO,EAAc9hK,OAAS,EAAG,CAC1B,MAAMg/B,EAAQ,CACVT,MAAOujI,EAAcl1J,KAAK,KAC1BqyB,UAAW,OAGVZ,EAAWgrB,UAAUrqB,EAAMC,UAAWD,EAAMT,QAE7CF,EAAWusB,aAAa5rB,GAQ3Bv1B,KAAK8nB,IAAI3gB,QAAQ8vC,YAClBj3C,KAAK8nB,IAAIqlI,YAAYsL,gBAAgB7jI,GAI7C,OAAO6iE,EAWXihE,uBAAuBroI,EAAWm4E,EAAS1/D,EAAW,MAClD,IAAMzY,IAAam4E,EAGf,OAFAzqF,EAAO5Y,KAAM,yCAAwCqjG,mBAAyBn4E,gBAEvE,KAEX,MAAMsoI,EAAO34J,KAAK8nB,IAAI5gB,GAKtB,MAAiB,MAAb4hC,GAAqBA,EAIjB,GAAEA,KAAY6vH,KAAQnwD,KAAWmwD,IAH7B,GAAE34J,KAAKi4J,mBAAmB5nI,KAAasoI,KAAQnwD,KAAWmwD,IAgB1EC,2BAA2BnqF,GAAc,UACrC,MAAMkqF,EAAO34J,KAAK8nB,IAAI5gB,GAEtB,IAAK,MAAM8uB,KAAYy4C,EAAa35C,MAChC,OAAQkB,EAAS14B,WACjB,IAAK,QACL,IAAK,QACL,IAAK,UACD04B,EAASrpC,MAAQqpC,EAASrpC,OAAU,GAAEqpC,EAASrpC,SAASgsK,IACxD,MACJ,IAAK,OACD,GAAI3iI,EAASrpC,MAAO,CAChB,MAAMksK,EAAoB7iI,EAASrpC,MAAMoW,MAAM,KAEX,MAApC,GAAiC,IAA7B81J,EAAkBtiK,OAClBy/B,EAASrpC,MACHqT,KAAK04J,uBAAL,UACEjqF,EAAa34C,aADf,aACE,EAAoB7uB,KACpB4xJ,EAAkB,GAClBA,EAAkB,SAE1B96I,EAAO5Y,KAAM,uDAAsD6wB,EAASrpC,QAW5F,MAAMszD,EAAOwuB,EAAa35C,MAAMQ,KAAK7nC,GAAqB,SAAhBA,EAAE6P,WAE5C,GAAK0C,KAAK8nB,IAAIN,OACLy4B,IACE,UAAAwuB,EAAa34C,aAAb,eAAoB7B,aAAciE,IAAeG,WACjD,UAAAo2C,EAAa34C,aAAb,eAAoB7B,aAAciE,IAAeC,UAMrD,GAAIn4B,KAAK8nB,IAAIN,QAAS,UAAAinD,EAAa34C,aAAb,eAAoB7B,aAAciE,IAAeK,SAAU,WACpF,MAAMugI,EAAQ,UAAGrqF,EAAa34C,aAAhB,aAAG,EAAoBmqB,KAC/BuoD,EAAUswD,GAAYA,EAAS/1J,MAAM,KAAK,GAC1C81F,EAAU,IAAK,IAAI1zE,IAAJ,UAAQspD,EAAa34C,aAArB,iBAAQ,EAAoBhB,aAA5B,aAAQ,EAA2BtvB,IAAI/X,GAAKA,EAAEyZ,MAEnE,IAAK,MAAMuoB,KAAUopE,EAAS,CAI1B,IAHmBpqB,EAAa35C,MAC3BQ,KAAK9L,GAAQA,EAAKtiB,KAAOuoB,GAA6B,SAAnBjG,EAAKlsB,WAE5B,OACb,MAAMy7J,EAAgB/4J,KAAK04J,uBAAL,UAA4BjqF,EAAa34C,aAAzC,aAA4B,EAAoB7uB,KAAMuhG,GAE5E/5B,EAAa35C,MAAM5xB,KAAK,CACpBgE,GAAIuoB,EACJnyB,UAAW,OACX3Q,MAAOosK,YApBnBtqF,EAAa35C,WAAQv0B,EACrBkuE,EAAat5C,gBAAa50B,EAkClCmxJ,mCAAmC/9H,GAC/B,IAAKA,EACD,MAAM,IAAIt8B,MAAM,mCAGpB,MAAMs6J,EAAc,IAAIvwG,IAAiBztB,EAAK0C,KAE9C,OAAIr2B,KAAKk4J,+BAA+BvG,GAC7B,IAAI//D,sBAAsB,CAC7B3qF,KAAM0sB,EAAK1sB,KACXovB,IAAKs7H,EAAYjwG,aAIlB/tB,EAkBXo+H,2BAA2BiH,GAEvB,IAAKA,IAAgBA,EAAY3iI,MAAQ2iI,EAAY/xJ,KACjD,OAAO+xJ,EAGX,MAAMrH,EAAc,IAAIvwG,IAAiB43G,EAAY3iI,KAC/C4iI,EAAatH,EAAYnwG,YAAY,SAEvCy3G,GACAj5J,KAAK44J,2BAA2BK,GAGpC,MAAMrkI,EAAa+8H,EAAYnwG,YAAY,SAM3C,OAJI5sB,GACA50B,KAAK44J,2BAA2BhkI,GAG7B,IAAIg9D,sBAAsB,CAC7B3qF,KAAM+xJ,EAAY/xJ,KAClBovB,IAAKs7H,EAAYjwG,iB,8EC7T7B,yEAOA,MAAM3jC,EAASF,oBAAU6E,GAezB,SAASw2I,EAA0BpjI,EAAOqjI,EAAiBtG,GACvD,MAAMz9H,EAAc+jI,EAAgBjyJ,GAC9BkyJ,EAAkBD,EAAgBl5G,KAClCo5G,EAAmBF,EAAgBxnF,MAEnC2nF,EAAkBxjI,EAAMwqB,WAAWlrB,GAErCkkI,IAAoBzG,IAGpByG,IAGAxjI,EAAM2pB,WAAW65G,GACjBxjI,EAAM+qB,qBAAqBy4G,IAE/BxjI,EAAM6pB,iBAAiB,CACnBz4C,GAAI2rJ,EACJv1J,UAAW,QACX3Q,MAAO0sK,IAEXvjI,EAAM6pB,iBAAiB,CACnBz4C,GAAI2rJ,EACJv1J,UAAW,OACX3Q,MAAOysK,IAEXtjI,EAAMqrB,aAAa,CACf3rB,UAAW,MACXV,MAAQ,GAAEM,KAAey9H,OAYlB,MAAMzF,EAIjBn3J,cAKI+J,KAAKu5J,sBAAwB,IAAI31I,IAQrC41I,iBACIx5J,KAAKu5J,sBAAsBzzG,QAS/B6sG,aAAa8G,GACT17I,EAAO9Y,MAAM,yBAA0Bw0J,GACvCz5J,KAAKu5J,sBAAwBE,EAUjCnC,eAAe1D,GACX,MAAM8F,EAAiB,IAAIt4G,IAAiBwyG,GACtCh/H,EAAa8kI,EAAel4G,YAAY,SAE9C,OAAK5sB,EAME50B,KAAKy4J,gBAAgB7jI,GACtB8kI,EAAeh4G,WAAakyG,GAN9B71I,EAAO9Y,MAAO,sCAAqC2uJ,GAE5CA,GAcf6E,gBAAgB7jI,GACZ,GAA6B,aAAzBA,EAAWX,UAEX,OAAO,EAEX,GAAIW,EAAWsrB,eAAiB,EAE5B,OAAO,EAEX,MAAMy5G,EAAoB/kI,EAAW4rB,uBAErC,IAAK,MAAMh3B,KAAQmwI,EAAmB,CAClC,MAAM15G,EAAOrrB,EAAWyqB,iBAAiB71B,EAAM,QACzCmoD,EAAQ/8C,EAAWyqB,iBAAiB71B,EAAM,SAChD,IAAIowI,EAAuB55J,KAAKu5J,sBAAsBhtK,IAAIi9B,GAE1D,IAAKowI,EAAsB,CAGvB,MAAMC,EAA8BjlI,EAAW0rB,WAAW92B,GAGtDowI,EADAC,GAGuB7oI,IAAQ0E,eAEnC11B,KAAKu5J,sBAAsB9zI,IAAI+D,EAAMowI,GAEzCV,EACItkI,EACA,CACI1tB,GAAIsiB,EACJmoD,QACA1xB,QAEJ25G,GAKR,OAAO,EAQXE,SAASlG,GACL,MAAM8F,EAAiB,IAAIt4G,IAAiBwyG,GACtCh/H,EAAa8kI,EAAel4G,YAAY,SAE9C,IAAK5sB,EAGD,OAFA7W,EAAO9Y,MAAO,sCAAqC2uJ,GAE5CA,EAEX,GAA6B,aAAzBh/H,EAAWX,UAGX,OAFAlW,EAAO9Y,MAAM,uDAEN2uJ,EAEX,GAAIh/H,EAAWsrB,eAAiB,EAG5B,OAFAniC,EAAO9Y,MAAM,qDAEN2uJ,EAEX,IAAKh/H,EAAWurB,wBAIZ,OAHApiC,EAAO9Y,MAAM,0DAGN2uJ,EAEX,MAAMrC,EAAY38H,EAAWirB,WAAW,OAIxCjrB,EAAWmsB,wBAAwB,OAGnC,IAAK,MAAM1rB,KAAYk8H,EAAW,CAC9B,MAAMsB,EAAU3zG,YAAmB7pB,GAEnCT,EAAW6qB,WAAWozG,GAG1B,OAAO6G,EAAeh4G,e,2EChN9B,iEAUA,MAAM3jC,EAASF,oBAAU6E,GASV,MAAMsqI,EAOjB/2J,YAAYi7F,GACRlxF,KAAK22J,sBACL32J,KAAKkxF,UAAYA,EAQrBylE,sBACI32J,KAAKu4J,kBAAoB,KACzBv4J,KAAK+5J,gBAAiB,EAU1BrH,eAAet9H,GACX,GAA2B,iBAAhBA,EACP,MAAM,IAAI/9B,MAAM,kCAEpB2I,KAAKu4J,kBAAoBnjI,EAO7B+hI,uBACI,OAAOp9H,QAAQ/5B,KAAKu4J,mBAcxBnB,gCAAgCxD,GAC5B,MAAM8F,EAAiB,IAAIt4G,IAAiBwyG,GACtCh/H,EAAa8kI,EAAel4G,YAAY,SAE9C,IAAK5sB,EAGD,OAFA7W,EAAO9Y,MAAO,GAAEjF,KAAKkxF,gDAAgD0iE,KAE9DA,EAGX,GAA6B,aAAzBh/H,EAAWX,UAGPj0B,KAAKu4J,mBAAqBv4J,KAAK+5J,eAC/BnlI,EAAW+qB,iBAAiB,CACxBz4C,GAAIlH,KAAKu4J,kBACTj7J,UAAW,QACX3Q,MAAQ,YAAWqT,KAAKu4J,oBAG5Bx6I,EAAO7Y,KAAQlF,KAAKkxF,UAAP,qDAEd,CACH,MAAM8oE,EAAiBplI,EAAWwrB,sBAElC,IAAK45G,EAGD,OAFAj8I,EAAO7Y,KAAQlF,KAAKkxF,UAAP,oDAEN0iE,EAEX,GAAI5zJ,KAAKu4J,kBAAmB,CACxB3jI,EAAWosB,YAAYg5G,EAAgBh6J,KAAKu4J,mBAC5C,IAAK,MAAMhjI,KAASX,EAAWO,WAC3B,GAAwB,QAApBI,EAAMC,UAAqB,CAC3B,MAAMJ,EAAc6pB,YAAiB1pB,GAC/Bs9H,EAAU3zG,YAAmB3pB,GAG/BH,IAAgB4kI,IAChBzkI,EAAMT,MACC,GAAE90B,KAAKu4J,qBAAqB1F,WAK/C7yJ,KAAKu4J,kBAAoByB,EAE7Bh6J,KAAK+5J,gBAAiB,EAG1B,OAAOL,EAAeh4G,e,8EC5H9B,gFAMA,MAAM3jC,EAAS0E,EAAQ,GAAqB5E,UAAU6E,GAEhD2X,EAAY5X,EAAQ,GAE1B,IAAIw3I,GAA2B,EAC3BC,GAA2B,EAM/B,MAAMC,EAAkB,CACpB,QAAS,UAAW,iBAAkB,UAAW,QAAS,QAAS,aAAc,iBAAkB,YACnG,QAAS,OAAQ,UAAW,aAAc,UAAW,UAAW,WAQrD,MAAMjK,UAAyBtpD,IAmB1C3wG,YACQ++E,EACApuD,EACAkpI,EACAlqI,EACA+a,EACAtQ,EACAyQ,EACAtX,EACAF,EACA9B,GAaJ,GAZAiU,MACI7U,EACAhB,EACA+a,EACA,OAGAtQ,EACAyQ,GACJ9gC,KAAKg1E,IAAMA,EAGS,iBAATxrD,EACP,MAAM,IAAI3yB,UAAW,QAAO2yB,qBAEhCxpB,KAAKwpB,KAAOA,EACZxpB,KAAK8vJ,gBAAkBA,EACvB9vJ,KAAKspB,MAAQA,EACbtpB,KAAKwnB,MAAQA,EAEbzJ,EAAO9Y,MAAO,2BAA0BjF,MAKxCA,KAAKo6J,aAAe9wI,EAGhBtpB,KAAKg1E,KAAOh1E,KAAK2gC,OACjB3gC,KAAKq6J,qBAETr6J,KAAKs6J,mBAAqB,GAC1BH,EAAgB/qJ,QAAQyc,IACpB7rB,KAAKs6J,mBAAmBzuI,GAAS7rB,KAAKu6J,uBAAuBrtK,KAAK8S,KAAM6rB,KAUhFwuI,qBACIr6J,KAAK2gC,MAAMnD,iBAAiB,OAAQ,IAAMx9B,KAAKw6J,gBAC/Cx6J,KAAK2gC,MAAMnD,iBAAiB,SAAU,IAAMx9B,KAAKy6J,kBACjDz6J,KAAK2gC,MAAMnD,iBAAiB,QAAS,KACjCzf,EAAO9Y,MAAO,mBAAkBkD,KAAKgM,WAAWnU,UAWxDw6J,eACIz8I,EAAO9Y,MAAO,kBAAiBkD,KAAKgM,WAAWnU,QAE/CA,KAAKg1E,IAAInxD,aAAa8D,KAAK0S,EAAUrN,kBAAmBhtB,MAU5Dy6J,iBACI18I,EAAO9Y,MAAO,oBAAmBkD,KAAKgM,WAAWnU,QAEjDA,KAAKg1E,IAAInxD,aAAa8D,KAAK0S,EAAUnN,oBAAqBltB,MAO9D6uJ,QAAQliK,GACAqT,KAAKspB,QAAU38B,IAIfA,IACAqT,KAAKo6J,cAAe,GAIpBp6J,KAAK4lB,SACL5lB,KAAK4lB,OAAO0D,MAAQ38B,GAGxBqT,KAAKspB,MAAQ38B,EACbqT,KAAK2nB,KAAK+vD,qBAAqC13E,OAQnDq5E,UACI,OAAOr5E,KAAKspB,MAShBmuD,mBACI,OAAOz3E,KAAK8vJ,gBAMhB/lI,UACI,OAAO,EASXqnG,UACI,OAAOpxH,KAAKwpB,KAQhBolI,cAAc3nJ,GACNjH,KAAK8gC,YAAc75B,IAGvBjH,KAAK8gC,UAAY75B,EACjBjH,KAAK2nB,KAAK+vD,0BAA0CzwE,IAMxDyzJ,gBACI,MAAMzzJ,EAAOjH,KAAKyhF,eAAiB,QAAU,QAEvCttE,EAAM7oB,OAAOusD,YAAY1jC,MAE/BpP,QAAQH,IAAK,iBAAgBqC,OAAWkN,GACxCnU,KAAK4mB,WAAWw6F,qBAAwBn6G,EAAF,WAAmBkN,EAKzD,MAAMwmJ,EAAWrvK,OAAO4pD,gBAAgB,2BAClC0lH,EAAStvK,OAAO4pD,gBAAgB,yBAChC2lH,EACCnhJ,MAAMkhJ,IAAYlhJ,MAAMihJ,GAAgC,EAApBC,EAASD,EAI9CG,EAAO3mJ,GACNnU,KAAK4mB,WAAWw6F,qBAAqB,oBAClCphH,KAAK4mB,WAAWw6F,qBAAqB,eACzCy5C,EAEN76J,KAAK4mB,WAAWw6F,qBAAwBn6G,EAAF,SAAiB6zJ,EACvD/1J,QAAQH,IAAK,eAAcqC,OAAW6zJ,GAEtCr3I,IAAWuI,cAAc+E,YACrB,CACI,WAAc9pB,EACdqiB,MAAOtpB,KAAKo6J,aACZztK,MAAOmuK,KAYnB7yD,mBAAmBF,GACVkyD,GAA4Bj6J,KAAKmpC,gBAC9B+wH,GAA4Bl6J,KAAKyhF,iBAIrCzhF,KAAKmpC,iBACL8wH,GAA2B,GAE3Bj6J,KAAKyhF,iBACLy4E,GAA2B,GAG/BnyD,EAAUvqE,iBAAiB,UAAWx9B,KAAK06J,cAAcxtK,KAAK8S,QAUlEgoG,eAAeD,GACXhqF,EAAO9Y,MAAO,2CAA0CjF,MAExDm6J,EAAgB/qJ,QAAQyc,IACpBk8E,EAAUvqE,iBAAiB3R,EAAO7rB,KAAKs6J,mBAAmBzuI,MAWlEs8E,eAAeJ,GACXhqF,EAAO9Y,MAAO,6CAA4CjF,MAE1Dm6J,EAAgB/qJ,QAAQyc,IACpBk8E,EAAUt0D,oBAAoB5nB,EAAO7rB,KAAKs6J,mBAAmBzuI,MASrE0uI,uBAAuBtzJ,GACnB8W,EAAO9Y,MAAO,GAAEgC,sDAAyDjH,QAQ7E+6J,aACI,MAAM,QAAE5mG,EAAF,MAAW7qC,EAAX,WAAkBtQ,GAAehZ,KAAK2gC,MAE5C,MAAQ,eAAc3nB,aAAsBsQ,eAAmB6qC,IAOnEz9D,WACI,MAAQ,uBAAsBsJ,KAAKy3E,6BAA6Bz3E,KAAK8nC,oBACjE9nC,KAAKoxH,mBAAmBpxH,KAAKwnB,kBAAkBxnB,KAAK+6J,oB,gFClUhE,uGAQA,MAAMv7H,EAAc/c,EAAQ,IACtBse,EAAYte,EAAQ,IACpBu1B,EAAav1B,EAAQ,GAErB1E,EAASF,oBAAU6E,GAQnBs4I,EAAoB,CACtB,CAAEliI,MAAO,KACLH,OAAQ,KACRsiI,OAAQ,EACRh6I,OAAQ,OACRi6I,SAAU,KACd,CAAEpiI,MAAO,KACLH,OAAQ,IACRsiI,OAAQ,EACRh6I,OAAQ,OACRi6I,SAAU,MACd,CAAEpiI,MAAO,IACLH,OAAQ,IACRsiI,OAAQ,EACRh6I,OAAQ,WACRi6I,SAAU,KACd,CAAEpiI,MAAO,IACLH,OAAQ,IACRsiI,OAAQ,EACRh6I,OAAQ,WACRi6I,SAAU,KACd,CAAEpiI,MAAO,IACLH,OAAQ,IACRsiI,OAAQ,EACRh6I,OAAQ,MACRi6I,SAAU,MACd,CAAEpiI,MAAO,IACLH,OAAQ,IACRsiI,OAAQ,EACRh6I,OAAQ,MACRi6I,SAAU,OAalB,IAAI1f,EAAe,IASnB,SAAS2f,EAAUliE,EAAWx5D,EAAY27H,EAAkBC,GAIxD,GAAID,EAAmB,KACnB,OAAO,EAGX,IAAIn6I,EAAS,EACT0X,EAASvtB,KAAKqP,IAAIglB,EAAW9G,OAAQ8G,EAAW3G,OAGhDwiI,EAAkBN,EAAkB1lI,KAAKwkB,GAAKA,EAAEnhB,QAAUA,GAE9D,GAAI2iI,GAAmBriE,GAAaoiE,EAAqBxkI,QAAUY,IAAc8b,IAG7E,IAAK5a,EAAS2iI,EAAgB3iI,OAAQA,GAAU,IAAKA,GAAU,EAAG,CAC9D,MAAM4iI,EAAe5iI,EAGrB,GADA2iI,EAAkBN,EAAkB1lI,KAAKwkB,GAAKA,EAAEnhB,SAAW4iI,IACvDD,EAKA,MAJAr6I,GAAUkD,IAAQC,gBACZk3I,EAAgBJ,SAChBG,EAAqBC,EAAgBr6I,aAK5Cq6I,IAGPr6I,EAASkD,IAAQC,gBACXk3I,EAAgBJ,SAChBG,EAAqBC,EAAgBr6I,SAK/C,OAAO7V,KAAKqP,IAAIwG,EAAS,IAS7B,SAAgBm6I,GACZ,GAAIA,EAAmB,IACnB,OAAO7hJ,OAAOqoC,iBAMlB,OAAO45F,EAAepwI,KAAKsP,IAAI,KAAM0gJ,EAAmB,KAjBzBI,CAAOpwJ,KAAKytB,IAAI,EAAGuiI,EAAmB,OA0B1D,MAAM34C,EAOjBxsH,YAAY2wB,EAAY/C,EAAc1c,GAClCnH,KAAK6jB,aAAeA,EAKpB7jB,KAAKi6G,YAAcrzF,EAKnB5mB,KAAKy7J,YAAc,CACf1+D,kBAAmB,IACnB2+D,YAAQn7J,GAMZP,KAAK27J,8BAAgC,EAMrC37J,KAAK47J,aAAe,GAMpB57J,KAAK67J,mBAAqB,EAM1B77J,KAAK87J,mBAAqB,EAGtB30J,EAAQ0wB,OAAO2jH,cAAgBr0I,EAAQ0wB,OAAO2jH,aAAe,IAC7DA,EAAer0I,EAAQ0wB,OAAO2jH,cAKlC50H,EAAWZ,GACP+1I,yBACA,KACI/7J,KAAKg8J,8BAA8B,GACnCh8J,KAAK6jB,aAAa8D,KACdq1E,sBACAh9F,KAAKy7J,aACTz7J,KAAKi8J,yBAGbr1I,EAAW+1B,KAAKvY,YACZ4T,EAAWviD,6BACX,CAACo5H,EAAet2C,KACPs2C,EAAcrnG,OAAsB,cAAb+wD,IACxBv4E,KAAK67J,kBAAoBvwK,OAAOusD,YAAY1jC,SAQxDyS,EAAWZ,GACP+1I,4BACA,CAAC5kF,EAAargD,KApMC,UAqMPA,EAAQ7vB,MACRjH,KAAKk8J,mBACD/kF,EAAYG,QAASxgD,EAAQvP,UAI7CX,EAAWZ,GACP+1I,0BACA,CAAC5kF,EAAargD,KACV92B,KAAKk8J,mBAAmB/kF,EAAYG,QAASxgD,KAIrDlQ,EAAW+B,WAAWrC,2BAA2BtmB,KAAKm8J,kBAAkBjvK,KAAK8S,OAG7E4mB,EAAWZ,GACP+1I,qBACAp7H,IACQA,EAAM8gD,iBACF9gD,EAAM04C,UACNr5E,KAAK87J,mBAAqB,EAE1B97J,KAAKo8J,4BAIrBx1I,EAAWZ,GACP+1I,cACAp7H,IACQA,EAAM8gD,iBAAmB9gD,EAAM04C,WAC/Br5E,KAAKo8J,2BAGjBx1I,EAAWouD,IAAIhvD,GACXqU,6CACAsG,IACI3gC,KAAKy7J,YAAYrS,qBAAuBzoH,EAAMyoH,uBAGtDxiI,EAAWZ,GACP+1I,wBACA1sC,IACIrvH,KAAKy7J,YAAYpsC,aAAeA,IAGxCzoG,EAAWZ,GACP+1I,qBACAjwI,IACI9rB,KAAKy7J,YAAYY,YACX9iJ,QAAQuS,GAAc,IAAI,mBAS5CswI,yBACQp8J,KAAK87J,kBAAoB,IACzB97J,KAAK87J,kBAAoBxwK,OAAOusD,YAAY1jC,OAWpDmoJ,4BAA4Bx7H,EAAWu4C,EAASkjF,GAI5C,MAAM98H,EAAaD,EAAY+8H,GAE/B,IACI/0B,EADAg1B,EAAU,IA2Bd,GAtBIx8J,KAAKy7J,YAAYj0B,aACjBA,EAAaxnI,KAAKy7J,YAAYj0B,WAAWH,OAgBrChuD,IACAmuD,GAAc,KAIlBnuD,IAAY55C,GAAcqB,IAAcC,EAAUC,SAC/ChhC,KAAK67J,kBAAoB,GACzB77J,KAAK87J,kBAAoB,OAGTv7J,IAAfinI,GACAzpH,EAAO/Y,MAAM,6DAEbw3J,EAAU,KAEVA,EADOh1B,GAAc,EACX,IACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,GACX,GAEA,MAEX,CAEH,MAAMi1B,EAAYz8J,KAAKi6G,YAAY2P,0BAEnC,GAAI6yC,EAAW,CACX,MAAMhkE,EAAgBgkE,EAAUhkE,gBAC1B4iE,EAAuBoB,EAAUtN,yBAGvCkM,EAAqBxkI,MAAQ4lI,EAAU/vE,0BAOvC,IAAIzrE,EAASk6I,EAAU1iE,EAAeh5D,EAJbn0C,OAAOusD,YAAY1jC,MACtC/I,KAAKytB,IAAI74B,KAAK87J,kBAAmB97J,KAAK67J,mBAGwBR,GAEpEp6I,EAAS7V,KAAKqP,IAAIwG,EA9SP,MA+SXu7I,EAAU,IAAMx8J,KAAKy7J,YAAYr0B,QAAQC,OAASpmH,EAIlDumH,GAAcA,GAAc,KAC5Bg1B,EAAUpxJ,KAAKqP,IAAI+hJ,EAAS,KAKpC,GAAIx8J,KAAK27J,6BAA+B,EAAG,CACvC,MAAMe,EAAuB,EACvBC,EAAwB38J,KAAKy7J,YAAY1+D,kBACzC6/D,GAAetxK,OAAOusD,YAAY1jC,MAAQnU,KAAK27J,8BAAgC,IAErFa,EAAUpxJ,KAAKqP,IAAI+hJ,EAASG,EAAyBC,EAAcF,GAGvE,OAAOtxJ,KAAKqP,IAAI,IAAK+hJ,GAOzBR,8BAA8BrvK,GAC1BqT,KAAKy7J,YAAY1+D,kBAAoBpwG,EACrCqT,KAAK27J,6BAA+BrwK,OAAOusD,YAAY1jC,MAO3D8nJ,uBAEI,MAAMtiK,EAAO,CACTytI,QAASpnI,KAAKy7J,YAAYr0B,QAC1BI,WAAYxnI,KAAKy7J,YAAYj0B,WAC7BzqC,kBAAmB/8F,KAAKy7J,YAAY1+D,kBACpC2+D,OAAQ17J,KAAKy7J,YAAYC,OACzBrsC,aAAcrvH,KAAKy7J,YAAYpsC,aAC/B+5B,qBAAsBppJ,KAAKy7J,YAAYrS,qBACvChf,eAAgBpqI,KAAKy7J,YAAYpxB,qBAGrC,IACIrqI,KAAKi6G,YAAY1wE,yBAAyB5vC,GAC5C,MAAOwW,KAYbgsJ,kBAAkBr0I,EAAKnuB,GAEnB,IAAKmuB,EAAIN,MAAO,CACZ,MAAMk0I,EACA/hK,EAAK+jB,WACA/jB,EAAK+jB,UAAUnnB,QAAUoD,EAAK+jB,UAAU,GAAGqS,IAEtD/vB,KAAKy7J,YAAYC,OAASA,QAAkBn7J,EAKhD,GAAIunB,IAAQ9nB,KAAKi6G,YAAY2P,0BACzB,OAGJ,IAAI38H,EACJ,MAAM4vK,GACC78J,KAAKi6G,YAAY6X,0BAClBsjC,EACAp1J,KAAKi6G,YAAY5yE,qBACjBvG,EACAs0H,EAAkBA,EAAgBt0H,eAAYvgC,EAC9C84E,GAAU+7E,GAAkBA,EAAgB/7E,UAC5C55C,EAAa21H,EACbhqJ,KAAKqP,IAAI26I,EAAgB31H,WAAY21H,EAAgBhM,sBAAwB,KAOnF,IAAKn8J,KALAosF,GACDr5E,KAAKo8J,yBAIGziK,EACJA,EAAKpM,eAAeN,KACpB+S,KAAKy7J,YAAYxuK,GAAO0M,EAAK1M,IAKjC4vK,GACA78J,KAAKg8J,8BACDh8J,KAAKs8J,4BACDx7H,EACAu4C,EACA55C,IAGZz/B,KAAK6jB,aAAa8D,KACdq1E,sBACAh9F,KAAKy7J,aACTz7J,KAAKi8J,uBAQTC,mBAAmBh1J,EAAIvN,GAEnBqG,KAAK47J,aAAa10J,GAAM,CACpBkgI,QAASztI,EAAKytI,QACdI,WAAY7tI,EAAK6tI,WACjBzqC,kBAAmBpjG,EAAKojG,kBACxB2+D,OAAQ/hK,EAAK+hK,OACbrsC,aAAc11H,EAAK01H,aACnB+5B,qBAAsBzvJ,EAAKyvJ,qBAC3Bhf,eAAgBzwI,EAAKywI,gBAGzBpqI,KAAK6jB,aAAa8D,KACdq1E,uBACA91F,EACAlH,KAAK47J,aAAa10J,IAO1BmtH,WACI,OAAOr0H,KAAKy7J,gB,0FCtfpB,wEAMA,MAAM19I,EAASF,oBAAU6E,GAaV,MAAMwvG,EAKjBj8H,YAAY2wB,GACR5mB,KAAKi6G,YAAcrzF,EASvBk2I,kBACI,MAAM,mBAAExuE,EAAF,iBAAsB1E,GAAqB5pF,KAAKi6G,YAAY9yG,QAAQ0wB,OACpEklI,OAAiD,IAArBnzE,IAAqCA,EACjEC,EAA6B7pF,KAAKi6G,YAAYt9D,KAAKktC,6BACnDmzE,EAAyBnzE,IAA+BD,EACxDqzE,EAAej9J,KAAKi6G,YAAY+X,mBAAqB1jC,EAQ3D,GANAvwE,EAAO7Y,KACA,mCAAuBopF,wBACF1E,yBACC5pF,KAAKi6G,YAAY+X,qDACLnoC,GAErCkzE,IAAwBnzE,IAAqBC,GAA+BozE,EAM5E,OALAl/I,EAAO7Y,KAAK,kDACZlF,KAAKi6G,YAAYp2F,aAAa8D,KAC1BX,oBACAk2E,cAKR,MAAMggE,EAAgBl9J,KAAKi6G,YAAY2H,iBACjCu7C,EAAkBD,GAAiBA,EAAc9nE,wBAElD8nE,EAE0B,cAApBC,EACPp/I,EAAO7Y,KAAK,qDAEZ6Y,EAAO7Y,KACA,mEAAai4J,+BACcH,GAC9BA,EACAh9J,KAAKi6G,YAAY2H,iBAAiB7/B,UAC9B,KACIhkE,EAAO7Y,KAAK,6CAEhBF,IACI+Y,EAAO/Y,MAAO,8CAA6CA,EAAMP,UAClE,CACC+K,OAAQ,qBACRmgF,kBAAmB,aACnBE,gBAAgB,EAChBJ,sBAAsB,IAG9BzvF,KAAKi6G,YAAY2H,iBAAiBl2B,6BArBtC3tE,EAAO5Y,KAAK,8CA6BpB4X,QAUI/c,KAAKi6G,YAAYv2F,KAAK2yB,KAAK,MAAO3Y,KAC9B,KACS19B,KAAKo9J,YACNp9J,KAAKq9J,kBAAoB/xK,OAAOif,WAAW,KACvCvK,KAAKq9J,uBAAoB98J,EACzBP,KAAK88J,mBACN,OAGX93J,IACI+Y,EAAO/Y,MAAM,8CAA+CA,KAOxEu8D,SACIvhE,KAAKo9J,WAAY,EACjB9xK,OAAOmiB,aAAazN,KAAKq9J,uB,yFCtHjC,qFAoBe,MAAM92C,UAA+BziG,IAOhD7tB,YAAY2wB,GACR6U,QAEAz7B,KAAKi6G,YAAcrzF,EACnB5mB,KAAKs9J,gBAAkB,KACvBt9J,KAAKu9J,eAAiB,KAEjBp5I,IAAQmkF,yBACT1hF,EAAW+B,WAAW7C,sBAAsB9lB,KAAKw9J,YAAYtwK,KAAK8S,OAEtE4mB,EAAWZ,GAAGgB,cAAmChnB,KAAK8yG,YAAY5lH,KAAK8S,OAM3Ey9J,uBACIhwJ,aAAazN,KAAKs9J,iBAClBt9J,KAAKs9J,gBAAkB,KAU3BI,6BAA6Bz0H,GAGzB,MAAMl5B,EAAwB,IAAfk5B,EAIa,OAAxBjpC,KAAKu9J,gBAA2Bv9J,KAAKu9J,iBAAmBxtJ,IACxD/P,KAAKu9J,eAAiBxtJ,EACtB/P,KAAK2nB,KAAKk1E,2BAA0C78F,KAAKu9J,iBAUjEI,6BAA6B10H,GACrBjpC,KAAK49J,cAIU,IAAf30H,GAAqBjpC,KAAKs9J,gBAMJ,IAAfr0H,GAAoBjpC,KAAKs9J,iBAChCt9J,KAAKy9J,uBANLz9J,KAAKs9J,gBAAkB/yJ,WAAW,KAC9BvK,KAAK49J,aAAc,EAEnB59J,KAAK2nB,KAAKk1E,mBAvEA,MAuFtB2gE,YAAY11I,EAAK0B,EAAMyf,EAAYlf,GAE/B,IAAKA,IAAY/pB,KAAK69J,YAClB,OAIJ,MAAMnkE,EAAa5xE,EAAI4xE,WAAWntG,IAAIyT,KAAK69J,YAAYx6H,OAIlDq2D,GAAeA,EAAW5kE,MAAMgD,SAAStO,KAM9CxpB,KAAK09J,6BAA6Bz0H,GAClCjpC,KAAK29J,6BAA6B10H,IAStC6pE,YAAYnyE,GACJA,EAAM+mE,sBAEN1nG,KAAK69J,YAAcl9H,EACnB3gC,KAAK49J,aAAc,EACnB59J,KAAKy9J,uBAGDt5I,IAAQmkF,0BACR3nE,EAAM3a,GACF0xD,iBACAzuC,IACIjpC,KAAK29J,6BAA6B10H,KAG1CtI,EAAM3a,GACF0xD,4BACAzuC,IACIjpC,KAAK29J,6BAA6B10H,GAClCjpC,KAAK09J,6BAA6Bz0H,U,6BCjJ1D,6DAkBe,MAAM49E,EAMjB5wH,YAAY2wB,GACR5mB,KAAK4mB,WAAaA,EAElBA,EAAW4W,iBACPxW,4BACAhnB,KAAKw9J,YAAYtwK,KAAK8S,OAE1BA,KAAK89J,SAAW99J,KAAK4mB,WAAWghB,WASpC41H,YAAYt2J,EAAI+hC,IAKPjpC,KAAK4mB,WAAWqxD,eACdhvC,GAtCiB,IAuChB/hC,IAAOlH,KAAK89J,UACL99J,KAAK4mB,WAAW6gB,qBAAqB4xC,WAIpDr5E,KAAK4mB,WAAWouD,IAAInxD,aAAa8D,KAC7B0S,IAAU9rC,yBACV2Y,M,6BCtDZ,8DAuCe,MAAMm/G,UAA0BviG,eAM3C7tB,cACIwlC,QAMAz7B,KAAK+9J,aAAc,EAKnB/9J,KAAKg+J,YAAc,GAKnBh+J,KAAKi+J,eAAiB,GAKtBj+J,KAAKk+J,SAAU,EAEfl+J,KAAKm+J,qBAAuBn+J,KAAKm+J,qBAAqBjxK,KAAK8S,MAS/Dm+J,uBACI,MAAMC,EAAWv8G,YAAiB7hD,KAAKg+J,aACjCK,EAAgBx8G,YAAiB7hD,KAAKi+J,gBAExCG,EAxEoB,IAwEkBC,EAlEd,MAmExBr+J,KAAK2nB,KAAKysB,oBAEVp0C,KAAKs+J,iBAAgB,IAIzBt+J,KAAKqI,QASTk2J,cAAc10D,EAAU20D,GACpBx+J,KAAKg+J,YAAY96J,KAAK2mG,GACtB7pG,KAAKi+J,eAAe/6J,KAAKs7J,GAS7BF,gBAAgBtmE,GACZh4F,KAAKk+J,QAAUlmE,EACfh4F,KAAK2nB,KAAKwsB,wBAAuBn0C,KAAKk+J,SAQ1C3qD,gBAAgBl6B,GAEZr5E,KAAKs+J,iBAAiBjlF,GACtBr5E,KAAKqI,QAQT2uE,WACI,OAAOh3E,KAAKk+J,QAQhB71J,QACIrI,KAAK+9J,aAAc,EACnB/9J,KAAKg+J,YAAc,GACnBh+J,KAAKi+J,eAAiB,GACtBxwJ,aAAazN,KAAKy+J,iBAatBprD,gBAAgBxJ,GACZ,GAAK7pG,KAAKk+J,QAKV,GAAIl+J,KAAK+9J,YAAT,CAEI,MAAMW,EAAiB38G,YAAqB8nD,EAASG,SAErDhqG,KAAKu+J,cAAc10D,EAASE,MAAOloD,YAAiB68G,SAOxD,GAAI70D,EAASE,MAvJK,GAuJsB,CACpC,MAAM20D,EAAiB38G,YAAqB8nD,EAASG,SAC/Cw0D,EAAc38G,YAAiB68G,GAEjCF,EArJkB,MAsJlBx+J,KAAK+9J,aAAc,EACnB/9J,KAAKu+J,cAAc10D,EAASE,MAAOy0D,GAGnCx+J,KAAKy+J,gBAAkBl0J,WAAWvK,KAAKm+J,qBApJpB,W,6BClCnC,8DAkCe,MAAMh4C,UAA8BriG,eAK/C7tB,cACIwlC,QAMAz7B,KAAK+9J,aAAc,EAKnB/9J,KAAKg+J,YAAc,GAKnBh+J,KAAKk+J,SAAU,EAEfl+J,KAAK2+J,mBAAqB3+J,KAAK2+J,mBAAmBzxK,KAAK8S,MAQ3D2+J,qBACkB98G,YAAiB7hD,KAAKg+J,aAxDlB,KA2Ddh+J,KAAK2nB,KAAK4sB,wBAIVv0C,KAAKs+J,iBAAgB,IAIzBt+J,KAAKqI,QASTi2J,gBAAgBtmE,GACZh4F,KAAKk+J,QAAUlmE,EACfh4F,KAAK2nB,KAAKwsB,wBAAuBn0C,KAAKk+J,SAQ1C3qD,gBAAgBl6B,GAEZr5E,KAAKs+J,gBAAgBjlF,GACrBr5E,KAAKqI,QAQT2uE,WACI,OAAOh3E,KAAKk+J,QAYhB7qD,gBAAgBxJ,GACP7pG,KAAKk+J,UAKNl+J,KAAK+9J,YACL/9J,KAAKg+J,YAAY96J,KAAK2mG,EAASE,OAO/BF,EAASE,MArHG,KAsHZ/pG,KAAK+9J,aAAc,EACnB/9J,KAAKg+J,YAAY96J,KAAK2mG,EAASE,OAG/B/pG,KAAKy+J,gBAAkBl0J,WAAWvK,KAAK2+J,mBA/GhB,OAwH/Bt2J,QACIrI,KAAK+9J,aAAc,EACnB/9J,KAAKg+J,YAAc,GACnBvwJ,aAAazN,KAAKy+J,oB,8BCxJ1B,sFASA,MAAM1gJ,EAASF,oBAAU6E,GAiBzB,MAAMk8I,EAOF3oK,YAAYkhF,EAAaxT,GAErB3jE,KAAKm3E,YAAcA,EAGnBn3E,KAAK2jE,QAAUA,EAGf3jE,KAAKkH,GAAKiwE,EAAYG,QAGtBt3E,KAAK6+J,SAAW,GAIhB7+J,KAAK8+J,cAAgB,EAErB9+J,KAAK++J,eAAiB/+J,KAAK++J,eAAe7xK,KAAK8S,MAC/CA,KAAKg/J,YAAch/J,KAAKg/J,YAAY9xK,KAAK8S,MACzCA,KAAKi/J,eAAiBj/J,KAAKi/J,eAAe/xK,KAAK8S,MAC/CA,KAAKk/J,mBAAqBl/J,KAAKk/J,mBAAmBhyK,KAAK8S,MACvDA,KAAKgsB,cAAgBhsB,KAAKgsB,cAAc9+B,KAAK8S,MAIzC2jE,EAAQw7F,mBACRn/J,KAAKg/J,cAGTh/J,KAAK4jE,aAAet4E,OAAOmyC,YACvBz9B,KAAKg/J,YAAar7F,EAAQy7F,gBAC9Bp/J,KAAKq/J,kBAAoB/zK,OAAOif,WAC5BvK,KAAKk/J,mBAAoBl/J,KAAK2jE,QAAQ27F,qBAO9CP,iBACQ/+J,KAAK4jE,cACLt4E,OAAOswC,cAAc57B,KAAK4jE,cAE1B5jE,KAAKq/J,mBACL/zK,OAAOswC,cAAc57B,KAAKq/J,mBAQlCL,cACI,MAAMO,EAAYv/J,KAAK8+J,gBACjBU,EAAiB,CACnBv4J,KAzEa,mBA0EbC,GAAIq4J,GAGRv/J,KAAK2jE,QAAQr6B,YAAYk2H,EAAgBx/J,KAAKkH,IAC9ClH,KAAK6+J,SAASU,GAAa,CACvBr4J,GAAIq4J,EACJE,SAAUn0K,OAAOusD,YAAY1jC,OAQrC8qJ,eAAetsJ,GACX,MAAMmiF,EAAU90F,KAAK6+J,SAASlsJ,EAASzL,IAEnC4tF,IACAA,EAAQ/kE,IAAMzkC,OAAOusD,YAAY1jC,MAAQ2gF,EAAQ2qE,SACjDz/J,KAAK2jE,QAAQ9/C,aAAa8D,KACtBs1E,kBACAj9F,KAAKm3E,YACL2d,EAAQ/kE,MAGhB/vB,KAAKk/J,qBASTA,qBACI,MAAM/qJ,EAAM7oB,OAAOusD,YAAY1jC,MAI/B,IACI2gF,EAASyqE,EADTxvI,EAAM2vI,IAIV,IAAKH,KAAav/J,KAAK6+J,SACf7+J,KAAK6+J,SAAStxK,eAAegyK,KAC7BzqE,EAAU90F,KAAK6+J,SAASU,GAEpBzqE,EAAQ2qE,SAAWtrJ,EAAMnU,KAAK2jE,QAAQ27F,2BAE/Bt/J,KAAK6+J,SAASU,GACdzqE,EAAQ/kE,MACfA,EAAM3kB,KAAKqP,IAAIsV,EAAK+kE,EAAQ/kE,OAKpCA,EAAM2vI,KACN1/J,KAAKgsB,cAAc+D,GAQ3B/D,cAAc+D,GACVtM,IAAWuI,cAAc4D,YACrB5vB,KAAKkH,GACLlH,KAAKm3E,YAAY8kC,YAAY,UAC7BlsF,KAmBG,MAAMo1F,EAMjBlvH,YAAY2wB,EAAYzf,EAASmiC,GAC7BtpC,KAAK4mB,WAAaA,EAClB5mB,KAAK6jB,aAAe+C,EAAW/C,aAC/B7jB,KAAKspC,YAAcA,EAGnBtpC,KAAKo/J,eAAiB,IAGtBp/J,KAAKs/J,oBAAsB,IAG3Bt/J,KAAK63E,aAAe,GAGpB73E,KAAKm/J,mBAAoB,EAErBh4J,GAAWA,EAAQw8D,UACyB,iBAAjCx8D,EAAQw8D,QAAQC,eACvB5jE,KAAKo/J,eAAiBj4J,EAAQw8D,QAAQC,cAEO,iBAAtCz8D,EAAQw8D,QAAQ07F,oBACvBr/J,KAAKs/J,oBAAsBn4J,EAAQw8D,QAAQ07F,mBAI3Cr/J,KAAKs/J,oBAAsB,GAAKt/J,KAAKs/J,oBACnCt/J,KAAKo/J,iBACPp/J,KAAKs/J,oBAAsBt/J,KAAKo/J,iBAGxCrhJ,EAAO7Y,KACF,uCACGlF,KAAKo/J,qCACLp/J,KAAKs/J,wBAEbt/J,KAAK2/J,kBAAoB3/J,KAAK2/J,kBAAkBzyK,KAAK8S,MACrD4mB,EAAWZ,GACPgB,cACAhnB,KAAK2/J,mBAET3/J,KAAK4/J,gBAAkB5/J,KAAK4/J,gBAAgB1yK,KAAK8S,MACjD4mB,EAAWZ,GACPgB,YACAhnB,KAAK4/J,iBAET5/J,KAAK6/J,gBAAkB7/J,KAAK6/J,gBAAgB3yK,KAAK8S,MACjD4mB,EAAWZ,GACPgB,4BACAhnB,KAAK6/J,iBAET7/J,KAAK8/J,kBAAoB9/J,KAAK8/J,kBAAkB5yK,KAAK8S,MACrD4mB,EAAWZ,GACPgB,sBACAhnB,KAAK8/J,mBAObA,oBACI9/J,KAAKm/J,mBAAoB,EASzB,IAAK,MAAMj4J,KAAMlH,KAAK63E,aAClB,GAAI73E,KAAK63E,aAAatqF,eAAe2Z,GAAK,CACtC,MAAM64J,EAAqB//J,KAAK63E,aAAa3wE,GAE7C5b,OAAOif,WAAWw1J,EAAmBf,YAAa,MAW9Da,gBAAgB1oF,EAAargD,GA9PR,qBAiQbA,EAAQ7vB,KACRjH,KAAKggK,cAAc7oF,EAAYG,QAASxgD,GA5P1B,sBA6PPA,EAAQ7vB,MACfjH,KAAKi/J,eAAe9nF,EAAYG,QAASxgD,GAWjD6oI,kBAAkBz4J,EAAIiwE,GACdn3E,KAAKo/J,gBAAkB,IAIvBp/J,KAAK63E,aAAa3wE,KAClB6W,EAAO7Y,KACF,0CAAyCgC,gBAC9ClH,KAAK63E,aAAa3wE,GAAI63J,wBACf/+J,KAAK63E,aAAa3wE,IAG7BlH,KAAK63E,aAAa3wE,GAAM,IAAI03J,EAAmBznF,EAAan3E,OAQhE4/J,gBAAgB14J,GACRlH,KAAKo/J,gBAAkB,GAIvBp/J,KAAK63E,aAAa3wE,KAClBlH,KAAK63E,aAAa3wE,GAAI63J,wBACf/+J,KAAK63E,aAAa3wE,IAWjC84J,cAAcnwI,EAAeilE,GAEzB,GAAIA,GAAWA,EAAQ5tF,GAAI,CACvB,MAAMyL,EAAW,CACb1L,KAnTU,oBAoTVC,GAAI4tF,EAAQ5tF,IAGhBlH,KAAKspC,YAAY32B,EAAUkd,QAE3B9R,EAAO7Y,KACF,6CAA4C2qB,MAUzDovI,eAAepvI,EAAeld,GAC1B,MAAMotJ,EAAqB//J,KAAK63E,aAAahoD,GAEzCkwI,GACAA,EAAmBd,eAAetsJ,GAO1CyV,OACIrK,EAAO7Y,KAAK,oBAEZlF,KAAK4mB,WAAWgsB,IACZ5rB,cACAhnB,KAAK2/J,mBACT3/J,KAAK4mB,WAAWgsB,IACZ5rB,YACAhnB,KAAK4/J,iBACT5/J,KAAK4mB,WAAWgsB,IACZ5rB,4BACAhnB,KAAK6/J,iBACT7/J,KAAK4mB,WAAWgsB,IACZ5rB,sBACAhnB,KAAK8/J,mBAET,IAAK,MAAM54J,KAAMlH,KAAK63E,aACd73E,KAAK63E,aAAatqF,eAAe2Z,IACjClH,KAAK63E,aAAa3wE,GAAI63J,iBAI9B/+J,KAAK63E,aAAe,O,2EC1X5B,gEAMA,MAAM95D,EAASF,oBAAU6E,GAOV,MAAMikG,EAKjB1wH,YAAY2wB,GACR5mB,KAAKi6G,YAAcrzF,EASnB5mB,KAAKigK,SAAU,EAEfjgK,KAAKi6G,YAAYz8E,iBACbxW,cAAmC,IAAMhnB,KAAKkgK,kBAClDlgK,KAAKi6G,YAAYz8E,iBACbxW,YAAiC,IAAMhnB,KAAKkgK,kBAChDlgK,KAAKi6G,YAAYz8E,iBACbxW,aAAkC,IAAMhnB,KAAKkgK,kBAOrDA,iBACI,MAAMC,EAAYngK,KAAKigK,QACjB7oF,GACCp3E,KAAKi6G,YAAYhiC,eACbj4E,KAAKi6G,YAAY0R,uBAAyB,EAEjDw0C,IAAc/oF,IACdp3E,KAAKigK,QAAU7oF,EACfr5D,EAAO9Y,MAAO,iBAAgBk7J,QAAgB/oF,KAC9Cp3E,KAAKi6G,YAAYp2F,aAAa8D,KAC1BX,gBAAqCm5I,EAAW/oF,Q,sFCpDhE,iFAKA,MAAMr5D,EAASF,oBAAU6E,GASlB,MAAM09I,EAITnqK,cAGI+J,KAAKqgK,oBAAsB,CAAE,UAdR,KAiBrBrgK,KAAK0jC,QAhBW,EAmBhB1jC,KAAK4jC,gBArBc,KAwBnB5jC,KAAK6jC,mBAAqB,GAE1B7jC,KAAK6kC,0BAA4B,CAC7Bta,YAAa,GACb+1I,mBAAoBtgK,KAAKsgK,mBACzB90C,MAAOxrH,KAAK0jC,OACZ68H,iBAAkB,GAClB7X,kBAAmB1oJ,KAAK6jC,oBAOhC,kBAGI,OAFA7jC,KAAK6kC,0BAA0B2mF,MAAQxrH,KAAK0jC,OAEvC1jC,KAAK6jC,mBAAmBttC,QAM7ByJ,KAAK6kC,0BAA0Bta,YAAc,GACzCvqB,KAAK6jC,mBAAmBttC,OAAS,GASjCyJ,KAAK6kC,0BAA0By7H,mBAAqB,CAAE,UAAatgK,KAAK4jC,iBACxE5jC,KAAK6kC,0BAA0B07H,iBAAmB,GAClDvgK,KAAK6kC,0BAA0B6jH,kBAAoB,KAenD1oJ,KAAK6kC,0BAA0Bta,YAAYvqB,KAAK6jC,mBAAmB,IAAM,CACrE,UAAa7jC,KAAK4jC,iBAEtB5jC,KAAK6kC,0BAA0By7H,mBAAqBtgK,KAAKqgK,oBACzDrgK,KAAK6kC,0BAA0B07H,iBAAmBvgK,KAAK6jC,mBACvD7jC,KAAK6kC,0BAA0B6jH,kBAAoB,IAGhD1oJ,KAAK6kC,2BAxCD7kC,KAAK6kC,0BAiDpB27H,YAAY7zK,GACR,MAAMomI,EAAU/yH,KAAK0jC,SAAW/2C,EAOhC,OALIomI,IACA/yH,KAAK0jC,OAAS/2C,EACdoxB,EAAO9Y,MAAO,2CAA0CtY,OAGrDomI,EAUX0tC,wBAAwB56H,GACpB,MAAMktF,EAAU/yH,KAAK4jC,kBAAoBiC,EAOzC,OALIktF,IACA/yH,KAAK4jC,gBAAkBiC,EACvB9nB,EAAO9Y,MAAO,oCAAmC4gC,IAG9CktF,EASX2tC,+BAA+BnsC,GAC3B,MAAMxB,GAAWv0C,IAAQx+E,KAAK6kC,0BAA2B0vF,GAOzD,OALIxB,IACA/yH,KAAK6kC,0BAA4B0vF,EACjCx2G,EAAO9Y,MAAO,qCAAoC2H,KAAKwL,UAAUm8G,KAG9DxB,EASX4tC,wBAAwB36H,GACpBjoB,EAAO9Y,MAAO,gCAA+B2H,KAAKwL,UAAU4tB,IAC5DhmC,KAAK6jC,mBAAqBmC,GAS3B,MAAMs/E,EAQTrvH,YAAY2wB,EAAYouD,GAAK,QACzBh1E,KAAKi6G,YAAcrzF,EACnB5mB,KAAK4gK,KAAO5rF,EAEZ,MAAM,OAAEn9C,GAAWjR,EAAWzf,QAG9BnH,KAAK0jC,OAAL,UAAc7L,aAAd,EAAcA,EAAQgpI,kBAAtB,SAAqChpI,aAAA,EAAAA,EAAQ4uF,gBAvK7B,EA0KhBzmH,KAAK4jC,gBA5Kc,KAiLnB,GAF+B,UAAG/L,aAAH,EAAGA,EAAQipI,yCAAX,SAEA,CAC3B9gK,KAAK6kC,0BAA4B,IAAIu7H,EAChBpgK,KAAK6kC,0BAA0B27H,YAAYxgK,KAAK0jC,SAErD1jC,KAAK4gK,KAAKl7H,+BAA+B1lC,KAAK6kC,0BAA0Bta,kBAExFvqB,KAAK4gK,KAAKp3H,SAASxpC,KAAK0jC,QAI5B1jC,KAAK6jC,mBAAqB,GAE1B7jC,KAAKi6G,YAAYj0F,GACbgB,yBACA/O,GAAWjY,KAAKgkF,uBAAuB/rE,IAW/C+rE,uBAAuBmjE,GACfA,EAAa3/H,QAAUxnB,KAAK6kC,0BAC5BsiH,EAAavhH,2BAA2B5lC,KAAK4jC,kBAE7C5jC,KAAK6kC,0BAA0B47H,wBAAwBzgK,KAAK4jC,iBAC5D5jC,KAAK4gK,KAAKl7H,+BAA+B1lC,KAAK6kC,0BAA0Bta,cAShF8tD,WACI,OAAOr4E,KAAK0jC,OAUhBqC,gBAAgBC,GAGZ,GAFAhmC,KAAK6jC,mBAAqBmC,EAEtBhmC,KAAK6kC,0BAAT,CAEI,MAAMk8H,EAAoB/6H,EAAIhR,OAAO9tB,GAAMA,IAAOlH,KAAKi6G,YAAYryE,YAC7Do5H,EAAiBp0J,KAAKsL,MAAMtL,KAAKwL,UAAUpY,KAAK6kC,0BAA0Bta,cAEhFw2I,EAAkBxqK,QAAUyJ,KAAK6kC,0BAA0B87H,wBAAwBI,GACnF,MAAME,EAAiBjhK,KAAK6kC,0BAA0Bta,YAGjDi0D,IAAQyiF,EAAgBD,IACzBhhK,KAAK4gK,KAAKl7H,+BAA+Bu7H,QAKjDjhK,KAAK4gK,KAAK76H,gBAAgBC,GAU9BwD,SAAS78C,GACL,GAAIqT,KAAK0jC,SAAW/2C,EAAO,CAGvB,GAFAqT,KAAK0jC,OAAS/2C,EAEVqT,KAAK6kC,0BAA2B,CAMhC,YALqB7kC,KAAK6kC,0BAA0B27H,YAAY7zK,IAGhDqT,KAAK4gK,KAAKl7H,+BAA+B1lC,KAAK6kC,0BAA0Bta,cAI5FvqB,KAAK4gK,KAAKp3H,SAAS78C,IAU3B6nI,kCAAkC3uF,GAC9B7lC,KAAK4jC,gBAAkBiC,EAEvB,IAAK,MAAM5tB,KAAWjY,KAAKi6G,YAAY90B,oBACnC,GAAIltE,EAAQuP,QAAUxnB,KAAK6kC,0BACvBgB,GAAkB5tB,EAAQ2tB,2BAA2BC,OAClD,CACuB7lC,KAAK6kC,0BAA0B47H,wBAAwB56H,IAG1E7lC,KAAK4gK,KAAKl7H,+BAA+B1lC,KAAK6kC,0BAA0Bta,cAU3F+pG,uBAAuB/pG,GACdvqB,KAAK6kC,4BACN7kC,KAAK6kC,0BAA4B,IAAIu7H,GAKzC,GAF2BpgK,KAAK6kC,0BAA0B67H,+BAA+Bn2I,GAEjE,SACpBvqB,KAAK0jC,OAAL,UAAcnZ,EAAYihG,aAA1B,QAAmCxrH,KAAK0jC,OACxC1jC,KAAK6jC,mBAAL,UAA0BtZ,EAAYm+H,yBAAtC,QAA2D1oJ,KAAK6jC,mBAChE7jC,KAAK4gK,KAAKl7H,+BAA+Bnb,GAEzC,MAAM22I,EAAalhK,KAAKi6G,YAAY90B,oBAAoB7vD,KAAKrd,GAAWA,EAAQuP,OAEhF,GAAI05I,EAAY,OACZ,IAAIr7H,EAAc,UAAGz5C,OAAOm7B,OAAOgD,EAAYA,aAAa,UAA1C,aAAG,EAA2C8gD,UAE3C,MAArB,IAAKxlC,EACDA,EAAc,UAAGtb,EAAY+1I,0BAAf,aAAG,EAAgCj1F,UAErDxlC,GAAkBq7H,EAAWt7H,2BAA2BC,S,gGCnUxE,qEAWO,MAAM2/E,EAQTvvH,YAAY2wB,EAAYouD,GAAK,QACzBh1E,KAAK4mB,WAAaA,EAClB5mB,KAAKmhK,uBAAL,UAA8Bv6I,EAAWzf,eAAzC,iBAA8B,EAAoB0wB,cAAlD,aAA8B,EAA4BupI,sBAC1DphK,KAAKg1E,IAAMA,EACXh1E,KAAK4mB,WAAWZ,GACZgB,yBACA/O,GAAWjY,KAAKgkF,uBAAuB/rE,IAC3CjY,KAAK4mB,WAAWZ,GACZgB,gCACA,IAAMhnB,KAAKqhK,gCACfrhK,KAAKg1E,IAAIhvD,GACLqU,IAAU3N,iCACV6nG,IAAoB,OAEZ,UAAAv0H,KAAKshK,+BAAL,eAA8BC,eAAgBhtC,EAAiBgtC,cAC/DvhK,KAAKshK,wBAA0B/sC,EAC/Bv0H,KAAKqhK,kCAarBr9E,uBAAuBmjE,GACnBA,EAAa/iH,YACTmwD,IAAmBC,iCACnBv8E,IACQA,IAAYjY,KAAK4mB,WAAWkhG,0BAC5B9nH,KAAKqhK,iCAKjBla,EAAa33D,sCAGb23D,EAAah4D,uBAUjBkyE,+BACI,MAAMG,EAAqBxhK,KAAKyhK,2BAC1B5lF,EAAW,GAEjB,GAAI2lF,GAAsB,EACtB,IAAK,MAAMvpJ,KAAWjY,KAAK4mB,WAAWu+D,oBAClCtJ,EAAS34E,KAAK+U,EAAQo3E,yBAAyBmyE,IAIvD,OAAO1jI,QAAQyK,IAAIszC,GASvB4lF,2BAA2B,MACvB,MAAMC,EAAqB1hK,KAAK4mB,WAAWkhG,yBACrC3gC,EAA2Bu6E,EAC3BA,EAAmBl6I,MACfk6I,EAAmBj3E,8BACnBzqF,KAAKmhK,uBAAL,UAA8BnhK,KAAKshK,+BAAnC,aAA8B,EAA8BC,iBAAchhK,OAC9EA,EAEN,OAAIP,KAAK2hK,6BAA+B,GAAKx6E,GAA4B,EAC9D/7E,KAAKqP,IAAIza,KAAK2hK,4BAA6Bx6E,GAC3CA,GAA4B,EAC5BA,EAGJnnF,KAAK2hK,4BAShBltC,+BAA+B5uF,GAG3B,OAFA7lC,KAAK2hK,4BAA8B97H,EAE5B7lC,KAAKqhK,kC,6MC7GpB,MAAMtjJ,EAASF,oBAAU6E,GA+PVghG,IAzPf,MAQIztH,YAAYqhI,GAIRt3H,KAAK4hK,UAAY,GAEjB5hK,KAAK6hK,UAAYvqC,EAEjBt3H,KAAKmyI,WAAanyI,KAAKmyI,WAAWjlJ,KAAK8S,MAEvCA,KAAK6hK,UAAUh+I,aAAaugB,YACxB4T,IAAW3jD,kBAAmB2L,KAAKmyI,YAS3C2vB,WAAW7nF,GACP,OAAOj6E,KAAK4hK,UAAU3nF,GAe1Bk4D,YAAW,iBAAEuD,EAAF,SAAoB77D,IACvBm7B,IAAkBr6B,YAAYd,GAC9B75E,KAAK+hK,qBAAqBloF,GACnB67D,GACP11I,KAAKgiK,qBAAqBnoF,GAoBlC4gC,eAAetzG,GACX,MAAM8Q,EAAU,IAAIw7F,I,sUAAJ,IACTtsG,EADS,CAEZoN,WAAYvU,KAAK6hK,UAAUttJ,cAG/B,OAAO0D,EAAQ8E,MAAM,CACjB63F,QAASztG,EAAQytG,QACjBC,YAAa1tG,EAAQ0tG,YACrBC,YAAa90G,KAAK6hK,UAAU/sD,YAC5BhsE,SAAU3hC,EAAQ2hC,WAEjBpL,KAAK,KAKG19B,KAAK8hK,WAAW7pJ,EAAQ67F,WACzB9zG,KAAKiiK,YAAYhqJ,GACjBjY,KAAKkiK,mBAAmBjqJ,IAGrBA,IAEVskB,MAAMv3B,IACHhF,KAAKkiK,mBAAmBjqJ,GAEjB6lB,QAAQE,OAAOh5B,KAYlCg2G,cAAc/gC,GACV,MAAMhiE,EAAUjY,KAAK8hK,WAAW7nF,GAEhC,OAAIhiE,EACOA,EAAQmQ,KAAK,CAAE0sF,YAAa90G,KAAK6hK,UAAU/sD,cAG/Ch3E,QAAQE,OAAO,IAAI3mC,MAAM,2BASpC4qK,YAAYhqJ,GACRjY,KAAK4hK,UAAU3pJ,EAAQ67F,SAAW77F,EAYtCkqJ,eAAeloF,EAAWlqE,EAAQljB,GAC9B,MAAMorB,EAAU,IAAIw7F,IAAa,CAC7Bl/F,WAAYvU,KAAK6hK,UAAUttJ,WAC3BugG,YAAa90G,KAAK6hK,UAAU/sD,YAC5BjoH,OACAotF,YACAlqE,WAKJ,OAFA/P,KAAKiiK,YAAYhqJ,GAEVA,EASXiqJ,mBAAmBjqJ,EAAS8hE,GACxB/5E,KAAK6hK,UAAUh+I,aAAa8D,KACxBqwB,IAAWjoD,uBAAwBkoB,EAAS8hE,GAUpDgoF,qBAAqBloF,GACjB,MAAMC,EAAck7B,IAAkBp7B,wBAAwBC,GAE9D,IAAKC,EACD,OAGJ,MAAM,MAAE90E,EAAF,UAAS+0E,EAAT,cAAoBC,EAApB,UAAmCC,EAAnC,OAA8ClqE,GAAW+pE,EAI/D,IAAI7hE,EAAUjY,KAAK8hK,WAAW7nF,GAKzBhiE,GAAsB,QAAXlI,EAaZkI,GACGA,EAAQm8F,cAAgBrkG,GACxBkI,EAAQ47F,aAAe7uG,EAC1B+Y,EAAO5Y,KAAK,uCACRyH,KAAKwL,UAAU0hE,KAKlB7hE,IACDA,EAAUjY,KAAKmiK,eAAeloF,EAAWlqE,EAAQiqE,IAGrD/hE,EAAQ27F,UAAU7jG,GAEd/K,GACAiT,EAAQu8F,SAASxvG,GAGrBhF,KAAKkiK,mBAAmBjqJ,EAAS8hE,IA/B7Bh8D,EAAO5Y,KACH,qCACA,2CAuCZ68J,qBAAqBnoF,GACjB,MAAM,kBAAEO,EAAF,KAAqBvtF,EAArB,UAA2BotF,GAC3B+6B,IAAkB96B,sBAAsBL,GAE9C,IAAKI,EAID,YAHAl8D,EAAO5Y,KACH,2DAKR,IAAI8S,EAAUjY,KAAK8hK,WAAW7nF,GAEzBhiE,IACDA,EAAUjY,KAAKmiK,eAAeloF,EAAW,GAAIptF,IAGjDorB,EAAQw8F,qBAAqBr6B,GAE7Bp6E,KAAKkiK,mBAAmBjqJ,O,sFClQhC,6FASA,MAAM8F,EAASF,oBAAU6E,GAWV,MAAMogG,EAOjB7sH,YAAY2wB,GACR5mB,KAAKi6G,YAAcrzF,EACnB5mB,KAAKoiK,sBAAwB,GAC7BpiK,KAAKqiK,sBAAwB,GAC7BriK,KAAKsiK,wBAA0B,GAC/BtiK,KAAKuiK,mCAAqC,GAC1CviK,KAAKwiK,0BAA4BxiK,KAAKwiK,0BAA0Bt1K,KAAK8S,MACrEA,KAAKyiK,4BAA8BziK,KAAKyiK,4BAA4Bv1K,KAAK8S,MACzEA,KAAK0iK,eAAiB1iK,KAAK0iK,eAAex1K,KAAK8S,MAC/CA,KAAKi6G,YAAYj0F,GAAGg3E,uBAA8Ch9F,KAAKyiK,6BACvEziK,KAAKi6G,YAAYtxF,WAAWrC,2BAA2BtmB,KAAKwiK,2BAC5DxiK,KAAKi6G,YAAYj0F,GAAG+1I,YAA4B/7J,KAAK0iK,gBAUzDD,4BAA4B9xI,GAAQ,eAAEy5G,IAClC,MAAMu4B,EAAmB3iK,KAAKuiK,mCAAmC5xI,GAAU,GAAM,EAIjF,GAFA3wB,KAAKuiK,mCAAmC5xI,GAAUgyI,GAEE,IAAhD3iK,KAAKqiK,sBAAsBz+J,QAAQ+sB,IAAmBA,KAAU3wB,KAAKsiK,yBAC9Dl4B,GAAkB,GAAKu4B,EAAkB,EAChD,OAGJ,MAAMxrF,EAAcn3E,KAAKi6G,YAAYliC,mBAAmBpnD,GAExD,GAAIwmD,EAAa,CAGb,GAFeA,EAAY6B,qBAAqBxxC,KAErCjxC,OAAS,GAAK4gF,EAAYi3D,eAIjC,OAIR,MAAMx9G,EAAmB5wB,KAAKoiK,sBAAsBzxI,GAE/Cv6B,MAAMC,QAAQu6B,KAAqBA,EAAiBspE,MAAMjxD,GAA6B,IAAfA,KACzEjpC,KAAKsiK,wBAAwB3xI,GAAU,CACnCE,kBAAmBu5G,EACnBx5G,iBAAkB,KAY9B4xI,0BAA0B16I,GAAK,eAAEsiH,IACzBtiH,IAAQ9nB,KAAKi6G,YAAY2P,4BAI7Bx9H,OAAOmZ,KAAK6kI,GAAgBh7H,QAAQuhB,IAChC,IAAoD,IAAhD3wB,KAAKqiK,sBAAsBz+J,QAAQ+sB,GACnC,OAGJ,MAAMC,EAAmB5wB,KAAKoiK,sBAAsBzxI,GAE/Cv6B,MAAMC,QAAQu6B,GAERA,EAAiBr6B,QAxFR,GAyFhBq6B,EAAiBqB,QAFjBjyB,KAAKoiK,sBAAsBzxI,GAAU,GAKzC3wB,KAAKoiK,sBAAsBzxI,GAAQztB,KAAKknI,EAAez5G,MAI3DvkC,OAAOmZ,KAAKvF,KAAKsiK,yBAAyBlzJ,QAAQuhB,IAC9C,MAAM,iBAAEC,EAAF,kBAAoBC,GAAsB7wB,KAAKsiK,wBAAwB3xI,GAI7E,GAFAC,EAAiB1tB,KAAKknI,EAAez5G,IAnGjB,IAqGhBC,EAAiBr6B,OAAoC,CACrD,GAAIq6B,EAAiBspE,MAAMjxD,QAAoC,IAAfA,GAA6C,IAAfA,GAAmB,CAC7F,MAAM25H,EAAyBh2J,KAAKwL,UAAUwY,GAE9CnN,IAAWuI,cACP0E,YAA8BC,EAAQiyI,EAAwB/xI,IAClE9S,EAAO5Y,KAAM,yEACTwrB,0BAA+BiyI,2BAC/B/xI,KACJ7wB,KAAKqiK,sBAAsBn/J,KAAKytB,GAChC3wB,KAAK0iK,eAAe/xI,UAGjB3wB,KAAKsiK,wBAAwB3xI,OAWhD+xI,eAAe/xI,UACJ3wB,KAAKoiK,sBAAsBzxI,GAQtClJ,UACIznB,KAAKi6G,YAAYrnE,IAAIoqD,uBAA8Ch9F,KAAKyiK,6BACxEziK,KAAKi6G,YAAYrnE,IAAImpH,YAA4B/7J,KAAK0iK,gBACtD1iK,KAAKi6G,YAAYtxF,WAAWpC,8BAA8BvmB,KAAKwiK,2BAC/DxiK,KAAKoiK,2BAAwB7hK,EAC7BP,KAAKsiK,6BAA0B/hK,EAC/BP,KAAKqiK,2BAAwB9hK,EAC7BP,KAAKuiK,wCAAqChiK,EAC1CP,KAAKi6G,iBAAc15G,M,iGC5J3B,6HAkBA,MAAMwd,EAASF,oBAAU6E,GAMzB,MAAMmgJ,EAMF5sK,YAAYhK,GACR+T,KAAK/T,KAAOA,EACZ+T,KAAKixC,MAAQ,EACbjxC,KAAKuqI,IAAM,EACXvqI,KAAKimG,QAAU,GAQnB/jD,QAAQP,GACqB,iBAAdA,EACP5jC,EAAO/Y,MACF,GAAEhF,KAAK/T,iCAAiC+T,KAAKixC,QAC9C0Q,GACIjoC,MAAMioC,KACd3hD,KAAKuqI,KAAO5oF,EACZ3hD,KAAKimG,QAAQ/iG,KAAKy+C,GAClB3hD,KAAKixC,OAAS,GAStB6xH,YACI,OAAO9iK,KAAKuqI,IAAMvqI,KAAKixC,MAQ3B8xH,aAAa9mG,GACTA,EAAUj8D,KAAK/T,KAAP,QAAqB+T,KAAK8iK,YAClC7mG,EAAUj8D,KAAK/T,KAAP,YAAyB2gB,KAAKwL,UAAUpY,KAAKimG,SAOzD59F,QACIrI,KAAKimG,QAAU,GACfjmG,KAAKuqI,IAAM,EACXvqI,KAAKixC,MAAQ,GASrB,MAAM+xH,EAQF/sK,YAAYysH,EAAqBl7F,EAAOr6B,GAKpC6S,KAAKwnB,MAAQA,EAObxnB,KAAKijK,GAAK91K,EAQV6S,KAAKkjK,WAAa,EAMlBljK,KAAKmjK,QAAU,IAAIN,EAAkB,OAYrC7iK,KAAKojK,iBAAmB,IAAIx/I,IAO5B5jB,KAAKqjK,qBAAuB3gD,EAU5B1iH,KAAKsjK,oBAAiB/iK,EAEtBP,KAAKujK,mBAAqB,CAACz7I,EAAKkD,KACxBhrB,KAAKwnB,QAAUM,EAAIN,OACnBxnB,KAAKwjK,mBAAmBx4I,IAIhC,MAAMpE,EAAa87F,EAAoBzI,YAEvCrzF,EAAW+B,WAAWrC,2BAClBtmB,KAAKujK,oBAEJvjK,KAAKwnB,QACNxnB,KAAK81E,YAAc5uE,GAAMlH,KAAKojK,iBAAiBl7I,OAAOhhB,GACtD0f,EAAWZ,GAAG+1I,YAA4B/7J,KAAK81E,aAE/C91E,KAAKyjK,sBACC,CAACv8J,EAAIvN,IAASqG,KAAK0jK,oBAAoBx8J,EAAIvN,GACjDitB,EAAWZ,GACPg3E,uBACAh9F,KAAKyjK,wBASjBD,mBAAmB7pK,GACf,GAAKA,GAcL,GARIwqB,IAAQs1G,yBACJ9/H,EAAK+jB,WAAa/jB,EAAK+jB,UAAUnnB,QACjCyJ,KAAKmjK,QAAQjhH,QAAQvoD,EAAK+jB,UAAU,GAAGqS,KAI/C/vB,KAAKkjK,YAAc,EAEfljK,KAAKkjK,YAAcljK,KAAKijK,GAAI,CAC5B,GAAI9+I,IAAQs1G,wBAAyB,CACjC,MAAM7yG,EAAa5mB,KAAKqjK,qBAAqBppD,YAEvC0pD,EAAc,CAChBxnH,IAAKn8C,KAAKwnB,MACV,gBAAmBZ,EAAW+kG,uBAelC,GAZIhyH,EAAK+jB,WAAa/jB,EAAK+jB,UAAUnnB,QACjCnK,OAAO+zC,OAAOwjI,EAAa,CACvB,qBACIhqK,EAAK+jB,UAAU,GAAGiuH,mBACtB,sBACIhyI,EAAK+jB,UAAU,GAAGmuH,oBACtB,eAAkBlyI,EAAK+jB,UAAU,GAAGzW,OAI5CjH,KAAKmjK,QAAQJ,aAAaY,GAEtB3jK,KAAKwnB,MAAO,CAEZ,MAAMo8I,EAAgB5jK,KACjBqjK,qBAAqBQ,gBAAgBP,eAErC5pJ,MAAMkqJ,KAEPD,EAAW,SACL3jK,KAAKmjK,QAAQL,YAAcc,OAElC,CAEH,MAAME,EAAe9jK,KAAK+jK,yBACpBC,EAAchkK,KAAKmjK,QAAQL,YAEjC9iK,KAAKsjK,eAAiBU,EAAcF,EAE/BpqJ,MAAMsqJ,IAAiBtqJ,MAAMoqJ,KAE9BH,EAAW,gBAAsB3jK,KAAKsjK,gBAI9C7/I,IAAWuI,cAAcwE,YAAoBmzI,IAGjD3jK,KAAKikK,uBA5DLlmJ,EAAO/Y,MAAM,YAsErB++J,yBACI,IAAI9yH,EAAQ,EAAGs5F,EAAM,EAIrB,IAAK,MAAM25B,KAAalkK,KAAKojK,iBAAiB77I,SAAU,CACpD,MAAM48I,EAAMD,EAAUpB,YAEjBppJ,MAAMyqJ,KACP55B,GAAO45B,EACPlzH,GAAS,EACTizH,EAAU77J,SAIlB,OAAOkiI,EAAMt5F,EAUjByyH,oBAAoBx8J,EAAIvN,GACpB,MAAMyqK,EAAmC,iBAAhBzqK,EAAK+hK,OAC9B,IAAI2I,EAASrkK,KAAKojK,iBAAiB72K,IAAI2a,IAElCm9J,GAAUD,IACXC,EAAS,IAAIxB,EAAqB37J,EAAF,aAChClH,KAAKojK,iBAAiB39I,IAAIve,EAAIm9J,IAG9BD,EACAC,EAAOniH,QAAQvoD,EAAK+hK,QACb2I,GACPrkK,KAAKojK,iBAAiBl7I,OAAOhhB,GAQrC+8J,iBACIjkK,KAAKmjK,QAAQ96J,QACTrI,KAAKojK,kBACLpjK,KAAKojK,iBAAiBt9G,QAE1B9lD,KAAKkjK,WAAa,EAMtBz7I,UAEI,MAAMb,EAAa5mB,KAAKqjK,qBAAqBppD,YAE7CrzF,EAAW+B,WAAWpC,8BAClBvmB,KAAKujK,oBACJvjK,KAAKwnB,QACNZ,EAAWgsB,IACPoqD,uBACAh9F,KAAKyjK,uBACT78I,EAAWgsB,IACPmpH,YACA/7J,KAAK81E,eAaN,MAAM6sC,EAOjB1sH,YAAY2wB,EAAYz5B,GAOpB6S,KAAKijK,GAAK91K,EAENA,EAAI,GACJ4wB,EAAO7Y,KAAM,0CAAyC/X,aAc1D6S,KAAKkjK,WAAa,EAOlBljK,KAAKi6G,YAAcrzF,EAQnB5mB,KAAKskK,mBACC,IAAIzB,EAAkB,wBAQ5B7iK,KAAKukK,qBACC,IAAI1B,EAAkB,0BAQ5B7iK,KAAKwkK,mBACC,IAAI3B,EAAkB,wBAQ5B7iK,KAAKykK,qBACC,IAAI5B,EAAkB,0BAQ5B7iK,KAAK0kK,gBACC,IAAI7B,EAAkB,oBAQ5B7iK,KAAK2kK,kBACC,IAAI9B,EAAkB,sBAQ5B7iK,KAAK4kK,oBACC,IAAI/B,EAAkB,qBAQ5B7iK,KAAK6kK,iBACC,IAAIhC,EAAkB,sBAQ5B7iK,KAAK8kK,mBACC,IAAIjC,EAAkB,wBAO5B7iK,KAAK+kK,cAAgB,IAAIlC,EAAkB,oBAQ3C7iK,KAAKglK,oBACC,IAAInC,EAAkB,2BAO5B7iK,KAAKilK,aAAe,IAAIpC,EAAkB,mBAQ1C7iK,KAAKklK,mBACC,IAAIrC,EAAkB,0BAQ5B7iK,KAAKmlK,uBACC,IAAItC,EAAkB,iBAQ5B7iK,KAAKolK,uBACC,IAAIvC,EAAkB,wBAO5B7iK,KAAKqlK,sBACC,IAAIxC,EAAkB,gBAQ5B7iK,KAAKslK,sBACC,IAAIzC,EAAkB,uBAQ5B7iK,KAAKulK,OAAS,IAAI1C,EAAkB,sBAEpC7iK,KAAKwlK,2BAAwBjlK,EAE7BP,KAAKylK,qBAAuB9rK,IACxBqG,KAAKwjK,mBAAmB7pK,GACxBqG,KAAK0lK,kCAAkC/rK,IAE3CitB,EAAWZ,GACPg3E,sBACAh9F,KAAKylK,sBAETzlK,KAAK2lK,oBAAsB,KACvB5nJ,EAAO9Y,MAAM,uCACbjF,KAAKikK,iBACLjkK,KAAK6jK,gBAAgBI,iBACrBjkK,KAAK4lK,gBAAgB3B,kBAEzBr9I,EAAWZ,GACP+1I,aACA/7J,KAAK2lK,qBAET3lK,KAAK6lK,uBAAyB,CAAC1F,EAAW/oF,MAIpB,IAAdA,IACAr5D,EAAO7Y,KAAK,+BACZlF,KAAK8lK,sBAGbl/I,EAAWZ,GACP+1I,gBACA/7J,KAAK6lK,wBAET7lK,KAAK6jK,gBACC,IAAIb,EAAmBhjK,MAAM,EAAiB7S,GAEpD6S,KAAK4lK,gBACC,IAAI5C,EAAmBhjK,MAAM,EAAgB7S,IAtN/C4wB,EAAO7Y,KAAK,uCA+NpBs+J,mBAAmB7pK,GAEf,IAAKA,EAGD,YAFAokB,EAAO/Y,MAAM,YAKjB,MAAMwiB,EAAQxnB,KAAKi6G,YAAYhiC,cACzB8tF,EAAW/lK,KAAKi6G,YAAY0R,sBAElC,IAAKnkG,GAASu+I,EAAW,EAKrB,OAUJ,MAAM3+B,EAAUztI,EAAKytI,QACf91D,EAAY33E,EAAK23E,UACjBk2D,EAAa7tI,EAAK6tI,WAClBj8D,EAAY5xE,EAAK2tI,UACjB7nG,EAAa9lC,EAAK8lC,WAExB,GAAK2nG,EAIE,GAAK91D,EAIL,GAAKk2D,EAIL,GAAKj8D,EAIL,GAAK9rC,GA2DZ,GArDAz/B,KAAKskK,mBAAmBpiH,QAAQklF,EAAQhtG,MAAMitG,QAC9CrnI,KAAKukK,qBAAqBriH,QAAQklF,EAAQhtG,MAAMigE,UAEhDr6F,KAAKwkK,mBAAmBtiH,QAAQklF,EAAQ1uG,MAAM2uG,QAC9CrnI,KAAKykK,qBAAqBviH,QAAQklF,EAAQ1uG,MAAM2hE,UAE5Cl2E,IAAQ60G,gCACRh5H,KAAK0kK,gBAAgBxiH,QAAQovB,EAAU+1D,QACvCrnI,KAAK2kK,kBAAkBziH,QAAQovB,EAAU+oB,WAG7Cr6F,KAAK6kK,iBAAiB3iH,QAAQslF,EAAWH,QACzCrnI,KAAK8kK,mBAAmB5iH,QAAQslF,EAAWntC,UAC3Cr6F,KAAK4kK,oBAAoB1iH,QAAQslF,EAAW56B,OAE5C5sG,KAAKulK,OAAOrjH,QAAQvoD,EAAKojG,mBAErBxxB,IACAvrE,KAAK+kK,cAAc7iH,QACfliD,KAAKgmK,sBACDz6F,GAAW,EAAoBxqC,WACvC/gC,KAAKglK,oBAAoB9iH,QACrBliD,KAAKgmK,sBACDz6F,GAAW,EAAoBxqC,YAEvC/gC,KAAKilK,aAAa/iH,QACdliD,KAAKgmK,sBACDz6F,GAAW,EAAkBxqC,WACrC/gC,KAAKklK,mBAAmBhjH,QACpBliD,KAAKgmK,sBACDz6F,GAAW,EAAkBxqC,aAGrCtB,IACAz/B,KAAKmlK,uBAAuBjjH,QACxBliD,KAAKimK,yBACDxmI,GAAY,EAAoBsB,WAExC/gC,KAAKolK,uBAAuBljH,QACxBliD,KAAKimK,yBACDxmI,GAAY,EAAoBsB,YAExC/gC,KAAKqlK,sBAAsBnjH,QACvBliD,KAAKimK,yBACDxmI,GAAY,EAAkBsB,WAEtC/gC,KAAKslK,sBAAsBpjH,QACvBliD,KAAKimK,yBACDxmI,GAAY,EAAkBsB,aAG1C/gC,KAAKkjK,YAAc,EAEfljK,KAAKkjK,YAAcljK,KAAKijK,GAAI,CAE5B,MAAMU,EAAc,CAChBxnH,IAAK30B,EACL,gBAAmBu+I,GAGnBpsK,EAAK+jB,WAAa/jB,EAAK+jB,UAAUnnB,QACjCnK,OAAO+zC,OAAOwjI,EAAa,CACvB,qBACIhqK,EAAK+jB,UAAU,GAAGiuH,mBACtB,sBACIhyI,EAAK+jB,UAAU,GAAGmuH,oBACtB,eAAkBlyI,EAAK+jB,UAAU,GAAGzW,OAI5CjH,KAAKskK,mBAAmBvB,aAAaY,GACrC3jK,KAAKukK,qBAAqBxB,aAAaY,GAEvC3jK,KAAKwkK,mBAAmBzB,aAAaY,GACrC3jK,KAAKykK,qBAAqB1B,aAAaY,GAEnCx/I,IAAQ60G,gCACRh5H,KAAK0kK,gBAAgB3B,aAAaY,GAClC3jK,KAAK2kK,kBAAkB5B,aAAaY,IAExC3jK,KAAK6kK,iBAAiB9B,aAAaY,GACnC3jK,KAAK8kK,mBAAmB/B,aAAaY,GACrC3jK,KAAK4kK,oBAAoB7B,aAAaY,GAEtC3jK,KAAK+kK,cAAchC,aAAaY,GAC3BjqJ,MAAM1Z,KAAKglK,oBAAoBlC,cAChC9iK,KAAKglK,oBAAoBjC,aAAaY,GAE1C3jK,KAAKilK,aAAalC,aAAaY,GAC1BjqJ,MAAM1Z,KAAKklK,mBAAmBpC,cAC/B9iK,KAAKklK,mBAAmBnC,aAAaY,GAGzC3jK,KAAKmlK,uBAAuBpC,aAAaY,GACpCjqJ,MAAM1Z,KAAKolK,uBAAuBtC,cACnC9iK,KAAKolK,uBAAuBrC,aAAaY,GAE7C3jK,KAAKqlK,sBAAsBtC,aAAaY,GACnCjqJ,MAAM1Z,KAAKslK,sBAAsBxC,cAClC9iK,KAAKslK,sBAAsBvC,aAAaY,GAG5C3jK,KAAKulK,OAAOxC,aAAaY,GAEzBlgJ,IAAWuI,cAAcwE,YAAoBmzI,IAE7C3jK,KAAKikK,uBA/GLlmJ,EAAO/Y,MAAM,sBAJb+Y,EAAO/Y,MAAM,uBAJb+Y,EAAO/Y,MAAM,wBAJb+Y,EAAO/Y,MAAM,uBAJb+Y,EAAO/Y,MAAM,gBA8IrBihK,yBAAyBC,EAAiBn8I,EAAS+W,GAC/C,IAAIqlI,EAAgB,EAChB1yC,EAAY,EAChB,MAAM2yC,EAAOpmK,KAAKi6G,YAAYryE,WAE9B,IAAK,MAAMy+H,KAAUj6K,OAAOmZ,KAAK2gK,GAC7B,GAAIn8I,EAAUs8I,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMjvF,EACAptD,EACI,KACA/pB,KAAKi6G,YAAYliC,mBAAmBsuF,GACxCC,EAAmBJ,EAAgBG,GAGzC,IAAKt8I,GAAWotD,IAAgBmvF,EAAkB,CAC9C,MAAMC,EAAgBvmK,KAAKwmK,6BACvBF,EAAkBnvF,EAAar2C,GAE9BpnB,MAAM6sJ,KACPJ,GAAiBI,EACjB9yC,GAAa,IAM7B,OAAO0yC,EAAgB1yC,EAc3B+yC,6BAA6BC,EAAQtvF,EAAar2C,GAC9C,IAAIhM,EAAQ1oC,OAAOmZ,KAAKkhK,GAAQjhK,IAAIgkB,GAAQjQ,OAAOiQ,IAC/C6X,EAAc,KAIlB,MAAMvZ,EAAM9nB,KAAKi6G,YAAY2P,0BAEzBzyC,GACA91C,EAAc81C,EAAY6B,qBAAqBxxC,KAC3CnG,IACAvM,EACMA,EAAME,OACJxL,GAAQ6X,EAAY/L,KAChBqL,IACKA,EAAM04C,WACA14C,EAAMywF,YAAc5nG,GACpBmX,EAAMG,YAAcA,OAG/CO,EAAcrhC,KAAKi6G,YAAY1yE,eAAeC,KAC9C1S,EACMA,EAAME,OACJxL,GAAQ6X,EAAY/L,KAChBqL,IACKA,EAAM04C,WACAvxD,EAAIqpG,aAAaxwF,KAAWnX,GAC5BmX,EAAMG,YAAcA,KAG/C,IAAIqlI,EAAgB,EAChBO,EAAgB,EAEpB,IAAK,MAAMl9I,KAAQsL,EAAO,CACtB,MAAM6xI,EACAptJ,OAAOktJ,EAAOj9I,GAAMmP,QAAUpf,OAAOktJ,EAAOj9I,GAAMsP,QAGnDpf,MAAMitJ,IAAmBA,EAAiB,IAC3CR,GAAiBQ,EACjBD,GAAiB,GAIzB,OAAOP,EAAgBO,EAa3BV,sBAAsBz6F,EAAWxhD,EAAS+W,GACtC,IAAI8lI,EAAa,EACbnzC,EAAY,EAChB,MAAM2yC,EAAOpmK,KAAKi6G,YAAYryE,WAE9B,IAAK,MAAMy+H,KAAUj6K,OAAOmZ,KAAKgmE,GAC7B,GAAIxhD,EAAUs8I,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMjvF,EACAptD,EACI,KAAO/pB,KAAKi6G,YAAYliC,mBAAmBsuF,GAC/CQ,EAAYt7F,EAAU86F,GAG5B,IAAKt8I,GAAWotD,IAAgB0vF,EAAW,CACvC,MAAMC,EACA9mK,KAAK+mK,0BACHF,EAAW1vF,EAAar2C,GAE3BpnB,MAAMotJ,KACPF,GAAcE,EACdrzC,GAAa,IAM7B,OAAOmzC,EAAanzC,EAcxBszC,0BAA0BN,EAAQtvF,EAAar2C,GAC3C,IAAIhM,EAAQ1oC,OAAOmZ,KAAKkhK,GAAQjhK,IAAIgkB,GAAQjQ,OAAOiQ,IAC/C6X,EAAc,KAIlB,MAAMvZ,EAAM9nB,KAAKi6G,YAAY2P,0BAEzBzyC,GACA91C,EAAc81C,EAAY6B,qBAAqBxxC,KAC3CnG,IACAvM,EACMA,EAAME,OACJxL,GAAQ6X,EAAY/L,KAChBqL,IAAUA,EAAM04C,WACT14C,EAAMywF,YAAc5nG,GACpBmX,EAAMG,YAAcA,OAG3CO,EAAcrhC,KAAKi6G,YAAY1yE,eAAeC,KAC9C1S,EACMA,EAAME,OACJxL,GAAQ6X,EAAY/L,KAChBqL,IAAUA,EAAM04C,WACTvxD,EAAIqpG,aAAaxwF,KAAWnX,GAC5BmX,EAAMG,YAAcA,KAG3C,IAAI8lI,EAAa,EACbF,EAAgB,EAEpB,IAAK,MAAMl9I,KAAQsL,EAAO,CACtB,MAAMkyI,EAAcztJ,OAAOktJ,EAAOj9I,KAG7B9P,MAAMstJ,IAAgBA,EAAc,IACrCJ,GAAcI,EACdN,GAAiB,GAIzB,OAAOE,EAAaF,EAUxBhB,kCAAkC/rK,GAC9B,IAAKA,IAASA,EAAK+jB,YAAc/jB,EAAK+jB,UAAUnnB,OAC5C,OAEJ,MAAM0wK,EAAiB,CACnB9qH,IAAKxiD,EAAK+jB,UAAU,GAAGy+B,IACvB,qBAAwBxiD,EAAK+jB,UAAU,GAAGiuH,mBAC1C,sBAAyBhyI,EAAK+jB,UAAU,GAAGmuH,oBAC3C,eAAkBlyI,EAAK+jB,UAAU,GAAGzW,MAGnCjH,KAAKwlK,uBAA0BhnF,IAAQyoF,EAAgBjnK,KAAKwlK,yBAC7DxlK,KAAKwlK,sBAAwByB,EAC7BxjJ,IAAWuI,cAAcyE,YAA0Bw2I,KAW3DnB,oBACI9lK,KAAKikK,iBACLjkK,KAAK6jK,gBAAgBI,iBAOzBA,iBACIjkK,KAAKskK,mBAAmBj8J,QACxBrI,KAAKukK,qBAAqBl8J,QAE1BrI,KAAKwkK,mBAAmBn8J,QACxBrI,KAAKykK,qBAAqBp8J,QAE1BrI,KAAK0kK,gBAAgBr8J,QACrBrI,KAAK2kK,kBAAkBt8J,QAEvBrI,KAAK6kK,iBAAiBx8J,QACtBrI,KAAK8kK,mBAAmBz8J,QACxBrI,KAAK4kK,oBAAoBv8J,QAEzBrI,KAAK+kK,cAAc18J,QACnBrI,KAAKglK,oBAAoB38J,QACzBrI,KAAKilK,aAAa58J,QAClBrI,KAAKklK,mBAAmB78J,QAExBrI,KAAKmlK,uBAAuB98J,QAC5BrI,KAAKolK,uBAAuB/8J,QAC5BrI,KAAKqlK,sBAAsBh9J,QAC3BrI,KAAKslK,sBAAsBj9J,QAE3BrI,KAAKulK,OAAOl9J,QAEZrI,KAAKkjK,WAAa,EAMtBz7I,UACIznB,KAAKi6G,YAAYrnE,IACbmpH,aACA/7J,KAAK2lK,qBACT3lK,KAAKi6G,YAAYrnE,IACboqD,sBACAh9F,KAAKylK,sBACTzlK,KAAKi6G,YAAYrnE,IACbmpH,gBACA/7J,KAAK6lK,wBACT7lK,KAAK6jK,gBAAgBp8I,UACrBznB,KAAK4lK,gBAAgBn+I,c,yFCx/B7B,8EASe,MAAMw7F,EAQjBhtH,YAAY2wB,GACR5mB,KAAKgrB,MAAQ,CACTiyB,MAAO,GAIPiqH,kBAAmB,MAGvB,MAAMl9I,EAASpD,EAAWghB,WAE1B5nC,KAAKgrB,MAAMiyB,MAAMjzB,GAAU,IAAIm9I,IAAan9I,EAAQ,MAAM,GAC1DhqB,KAAK4mB,WAAaA,EAElBA,EAAW4W,iBACPxW,2BACAhnB,KAAKonK,mBAAmBl6K,KAAK8S,OACjC4mB,EAAW4W,iBACPxW,cACAhnB,KAAKqnK,YAAYn6K,KAAK8S,OAC1B4mB,EAAW4W,iBACPxW,YACAhnB,KAAKsnK,aAAap6K,KAAK8S,OAC3B4mB,EAAW4W,iBACPxW,uBACAhnB,KAAKunK,qBAAqBr6K,KAAK8S,OAC/B4mB,EAAWlD,MACXkD,EAAWlD,KAAK0gB,YACZ4T,IAAW5iD,uBACX4K,KAAK85G,aAAa5sH,KAAK8S,OAanConK,mBAAmBF,GACf,MAAMM,EACAxnK,KAAKgrB,MAAMiyB,MAAMj9C,KAAKgrB,MAAMk8I,mBAC5BO,EAAqBznK,KAAKgrB,MAAMiyB,MAAMiqH,GAE5CM,GAAsBA,EAAmBv7D,oBAAmB,GAC5Dw7D,GAAsBA,EAAmBx7D,oBAAmB,GAC5DjsG,KAAKgrB,MAAMk8I,kBAAoBA,EAWnCG,YAAYr9I,EAAQmtD,GACZA,EAAY+zC,YAIXlrH,KAAKgrB,MAAMiyB,MAAMjzB,KAClBhqB,KAAKgrB,MAAMiyB,MAAMjzB,GAAU,IAAIm9I,IAAan9I,EAAQmtD,EAAYm1B,mBAYxEg7D,aAAat9I,GACT,MAAM09I,EAAY1nK,KAAKgrB,MAAMiyB,MAAMjzB,GAE/B09I,GACAA,EAAU56D,gBAYlBy6D,qBAAqBv9I,EAAQuiF,GACzB,MAAMm7D,EAAY1nK,KAAKgrB,MAAMiyB,MAAMjzB,GAE/B09I,GACAA,EAAU37D,eAAeQ,GAWjC8nB,WACI,OAAOr0H,KAAKgrB,MAAMiyB,MAStB68D,aAAa6tD,GACT,IAAK,MAAM39I,KAAU29I,EAAU,CAC3B,IAAIC,EACJ,MAAMC,EAAiB7nK,KAAK4mB,WAAWmxD,mBAAmB/tD,GAGrD69I,GAAmBA,EAAe38C,aAC/BlrH,KAAKgrB,MAAMiyB,MAAMjzB,IACjB49I,EAAuB5nK,KAAKgrB,MAAMiyB,MAAMjzB,GAEnC49I,EAAqBt7D,kBACtBs7D,EACK77D,eAAe47D,EAAS39I,GAAQ4hF,eAGzCg8D,EAAuB,IAAIT,IACvBn9I,EAAQ29I,EAAS39I,GAAQ4hF,aAC7B5rG,KAAKgrB,MAAMiyB,MAAMjzB,GAAU49I,EAC3BA,EAAqB96D,kBAIzB86D,IACAA,EAAqB17D,yBACfy7D,EAAS39I,GAAQkiF,8B,ihBC3JvC,MAAM47D,EAAgB,CAClB/jD,oBAAqB,CACjB3pF,MAAO,CACH2tI,aAAc,EACdp7K,MAAO,GAEX+rC,MAAO,CACHsvI,OAAQ,CACJD,aAAc,EACdp7K,MAAO,GAEXu1I,QAAS,CACL6lC,aAAc,EACdp7K,MAAO,IAGfi6B,WAAY,CACRmhJ,aAAc,EACdp7K,MAAO,KAOnB,IAAIs7K,EAAc,CACdlkD,oBAAqB,CACjB3pF,MAAO,CACH2tI,aAAc,EACdp7K,MAAO,GAEX+rC,MAAO,CACHsvI,OAAQ,CACJD,aAAc,EACdp7K,MAAO,GAEXu1I,QAAS,CACL6lC,aAAc,EACdp7K,MAAO,IAGfi6B,WAAY,CACRmhJ,aAAc,EACdp7K,MAAO,KAsBnB,SAASu7K,EAA4B52H,EAAO1qB,GAExC,MAAMzS,EAAMhM,KAAKgM,OACX,oBAAE4vG,GAAwBzyE,GAE1B,MACFlX,EADE,MAEF1B,GACAqrF,GACE,OACFikD,EADE,QAEF9lC,GACAxpG,EAEEmP,EAASjhB,EAAW2gB,iBACpBa,EAAaP,EAAOvS,KAAKqL,GAAyB,UAAlBA,EAAMmH,WACtCW,EAAaZ,EAAOvS,KAAKqL,GAAyB,UAAlBA,EAAMmH,WACtCqgI,EAAc,EAAH,GAAQpkD,GAWzB,GATK37E,IAAcA,EAAW9e,OAAU1C,GAKN,IAAvBwT,EAAM2tI,cACbI,EAAY/tI,MAAM2tI,YAAc5zJ,GALhCg0J,EAAY/tI,MAAQ,CAChB2tI,aAAc,EACdp7K,MAAOytC,EAAMztC,QAAgC,IAAvBytC,EAAM2tI,YAAqB,EAAI5zJ,EAAMimB,EAAM2tI,cAMpEt/H,IAAcA,EAAWnf,OAAU1C,EAWjC,CACH,MAAM,UAAEka,GAAc2H,GAEgB,IAAlC/P,EAAMoI,GAAWinI,cACjBI,EAAYzvI,MAAMoI,GAAWinI,YAAc5zJ,QAd/Cg0J,EAAYzvI,MAAQ,CAChBsvI,OAAQ,CACJD,aAAc,EACdp7K,MAAOq7K,EAAOr7K,QAAiC,IAAxBq7K,EAAOD,YAAqB,EAAI5zJ,EAAM6zJ,EAAOD,cAExE7lC,QAAS,CACL6lC,aAAc,EACdp7K,MAAOu1I,EAAQv1I,QAAkC,IAAzBu1I,EAAQ6lC,YAAqB,EAAI5zJ,EAAM+tH,EAAQ6lC,eAWnF,YACOhkD,EACAokD,GAKI,MAAMnkD,EAEjB/tH,YAAY2wB,GAERA,EAAW4W,iBAAiBxW,oBAAyC,KACjEihJ,EAAc,CACVlkD,oBAAqB,EAAF,GACZmkD,EAA4BJ,EAAelhJ,GAD/B,CAEfA,WAAY,CACRmhJ,YAAa5/J,KAAKgM,MAClBxnB,MAAO,QAMvBi6B,EAAW4W,iBAAiBxW,gBAAqC,KAC7D,MAAM,oBAAE+8F,GAAwBkkD,GAEoB,IAAhDlkD,EAAoBn9F,WAAWmhJ,cAGnCE,EAAc,CACVlkD,oBAAqB,EAAF,GACZA,EACAmkD,EAA4BD,EAAarhJ,QAKxDA,EAAW4W,iBAAiBxW,cAAmC,KAE3D,MAAM,oBAAE+8F,GAAwBkkD,GAEoB,IAAhDlkD,EAAoBn9F,WAAWmhJ,cAOnCE,EAAc,CACVlkD,oBAAqB,EAAF,GACZA,EACAmkD,EAA4BD,EAAarhJ,QAKxDA,EAAW4W,iBAAiBxW,gBAAqC,KAE7D,MAAM,oBAAE+8F,GAAwBkkD,GAEoB,IAAhDlkD,EAAoBn9F,WAAWmhJ,cAOnCE,EAAc,CACVlkD,oBAAqB,EAAF,GACZA,EACAmkD,EAA4BD,EAAarhJ,QAOxDA,EAAW4W,iBAAiBxW,kBAAuC,KAC/D,MAAM,oBAAE+8F,GAAwBkkD,EAC1BG,EAAyB,EAAH,GACrBF,EAA4BD,EAAarhJ,GADpB,CAExBA,WAAY,CACRmhJ,aAAc,EACdp7K,MAAOwb,KAAKgM,MAAQ4vG,EAAoBn9F,WAAWmhJ,eAG3DtkJ,IAAWuI,cArJvB,SAAwC20F,GACpC,MAAM,MAAEvmF,EAAF,MAAS1B,EAAT,WAAgB9R,GAAe+5F,GAC/B,OAAEqnD,EAAF,QAAU9lC,GAAYxpG,EAE5B,MAAO,CACHxJ,OAAQ,yBACRjyB,WAAY,CACRm9B,MAAOA,EAAMztC,MACbq7K,OAAQA,EAAOr7K,MACfi6B,WAAYA,EAAWj6B,MACvBu1I,QAASA,EAAQv1I,QA2IQ07K,CAA+BD,S,gBC3MpE,MAAMtwD,EAAgBr1F,EAAQ,KACxB6lJ,EAAgB7lJ,EAClB,KAiBJ,SAAS8mG,IAELvpH,KAAKuoK,cAAgB,IAAIzwD,EAGzB93G,KAAKwoK,qBAAuB,IAAIF,EAGhCtoK,KAAK0kJ,QAAU,KAIf1kJ,KAAKu3G,UAAY,KAGjBv3G,KAAKyoK,cAAgB,KAIrBzoK,KAAKwL,SAAW,KAIhBxL,KAAK6hB,QAAU,GAGf7hB,KAAKsxC,MAzCY,SA6CjBtxC,KAAK0oK,WAAa,EA+DtB,SAASC,EAAar/C,EAAar3B,GAO/B,GANAltF,QAAQH,IACJ,0FAC2BqtF,EAAO22E,UAAUryK,QAI5C07F,EAAO22E,UAAUryK,OAAS,EAAG,CAC7B,IAAIi0D,EAASynC,EAAOslB,UAAUsxD,qBACxBv/C,EAAY/R,UAAUsxD,qBAIxBr+G,EAAS,IACTA,EAAS,GAGb,IAAIhsC,EAAQ,IAEZyzE,EAAO22E,UAAUx5J,QAAQ05J,IACrBA,EAAWC,OAASv+G,EACpBs+G,EAAWloJ,KAAO4pC,EAClBhsC,GAAYsqJ,EAAWE,KAAb,MAEdxqJ,GAAS,IACTzZ,QAAQH,IAAI4Z,GAKZyzE,EAAO22E,UAAU38K,KAAOgmG,EAAOhmG,KAInCq9H,EAAYznG,QAAQ3e,KAAK+uF,EAAO22E,WAChCt/C,EAAYo7B,UACZ3/I,QAAQH,IAAK,oBAAmB0kH,EAAYo7B,SAG5Cp7B,EAAY2/C,aAkHhB,SAASC,EAAmBC,GACxB,IAAK,IAAIz9K,EAAI,EAAGA,EAAIy9K,EAAoB5yK,OAAQ7K,IACN,IAAlCy9K,EAAoBz9K,GAAG6K,QACvB4yK,EAAoBllK,OAAOvY,EAAG,GAItC,OAAOy9K,EAAoB5yK,OAAS,EAvNxCgzH,EAAYj8H,UAAUyvB,MAAQ,WAC1B,GAtDiB,WAsDb/c,KAAKsxC,MACL,MAAM,IAAIj6C,MACL,4FAEG2I,KAAKsxC,gBAEjBtxC,KAAKsxC,MA3De,YA4DpBtxC,KAAKuoK,cAAcxrJ,QACnB/c,KAAKu3G,UAAY,IAAIpvG,MASzBohH,EAAYj8H,UAAU86B,KAAO,SAAc5c,GACvC,GAvEoB,cAuEhBxL,KAAKsxC,MACL,MAAM,IAAIj6C,MACL,8FAEG2I,KAAKsxC,gBAIjBvsC,QAAQH,IAAI,8CACZ5E,KAAKuoK,cAAcngJ,OAGnB,MAAMghJ,EAAWT,EAAaz7K,KAAK,KAAM8S,MAEzCA,KAAKuoK,cAAc3vD,sBAAsBxpG,QAAQi6J,IAC7CrpK,KAAKwoK,qBAAqBn7J,KAAKg8J,EAAiBD,GAChDppK,KAAK0kJ,YAIT1kJ,KAAKsxC,MA1FkB,eA6FvBtxC,KAAKwL,SAAWA,GA2DpB+9G,EAAYj8H,UAAU27K,WAAa,WAxJR,iBAyJnBjpK,KAAKsxC,OAAiD,IAAjBtxC,KAAK0kJ,SAG1C1kJ,KAAKkgB,SAQbqpG,EAAYj8H,UAAU4yB,MAAQ,WAC1Bnb,QAAQH,IACH,sDACG5E,KAAK6hB,QAAQtrB,QACrByJ,KAAKyoK,cAAgB,GAOrB,MAAMa,EAAStpK,KAAK6hB,QAGd0nJ,EAAiB,GASvB,IANAL,EAAmBI,GAGnBA,EAAOl6J,QAAQoP,GA6FnB,SAA+BA,EAAOwqJ,GAClC,GAAqB,IAAjBxqJ,EAAMjoB,OACNioB,EAAMtb,KAAK8lK,OACR,CACH,GAAIxqJ,EAAMA,EAAMjoB,OAAS,GAAGwyK,OAASC,EAAKD,MAGtC,YAFAvqJ,EAAMtb,KAAK8lK,GAKf,IAAK,IAAIt9K,EAAI,EAAGA,EAAI8yB,EAAMjoB,OAAQ7K,IAC9B,GAAIs9K,EAAKD,MAAQvqJ,EAAM9yB,GAAGq9K,MAGtB,YAFAvqJ,EAAMva,OAAOvY,EAAG,EAAGs9K,GAK3BxqJ,EAAMtb,KAAK8lK,IA9GSQ,CAAsBD,EAAgB/qJ,IAGvD0qJ,EAAmBI,IAAS,CAE/B,IAAIG,EAAkBH,EAAO,GAE7BA,EAAOl6J,QAAQw5J,IACPA,EAAU,GAAGG,MAAQU,EAAgB,GAAGV,QACxCU,EAAkBb,KAK1B,IAAIc,EAAYD,EAAgBx3I,QAMhC,IAJAjyB,KAAK2pK,oBAAoBD,EAAWD,EAAgBx9K,MAI7Cw9K,EAAgBlzK,OAAS,GAAG,CAC/B,IAAIqzK,GAAe,EACnB,MAAMC,EAAgBJ,EAAgB,GAAGV,MASzC,GAPAO,EAAOl6J,QAAQw5J,IACPA,EAAU,GAAGG,MAAQc,IACrBD,GAAe,KAKnBA,EACA,MAGJF,EAAYD,EAAgBx3I,QAC5BjyB,KAAK2pK,oBAAoBD,EAAW,OAM5C1pK,KAAKsxC,MAjOc,WAkOftxC,KAAKwL,UACLxL,KAAKwL,SAASxL,KAAKyoK,gBAU3Bl/C,EAAYj8H,UAAUq8K,oBAAsB,SAASX,EAAM/8K,GACnDA,UACA+T,KAAKyoK,eAAkB,KAAIx8K,KAC3B+T,KAAK0oK,WAAaz8K,EAAKsK,OAAS,GAEhCyJ,KAAK0oK,WAAaM,EAAKA,KAAKzyK,OA/OJ,KAgPxByJ,KAAKyoK,eAAiB,SACtBzoK,KAAK0oK,WAAa,GAEtB1oK,KAAKyoK,eAAkB,IAAGO,EAAKA,KAC/BhpK,KAAK0oK,YAAcM,EAAKA,KAAKzyK,OAAS,GAwD1CgzH,EAAYj8H,UAAU6/F,SAAW,SAASxsD,GACtC3gC,KAAKuoK,cAAcp7E,SAASxsD,IAOhC4oF,EAAYj8H,UAAUmrH,YAAc,SAAS93E,GACzC3gC,KAAKuoK,cAAc9vD,YAAY93E,IAQnC4oF,EAAYj8H,UAAUw8K,iBAAmB,WACrC,GAjUmB,aAiUf9pK,KAAKsxC,MACL,MAAM,IAAIj6C,MACL,qGAEG2I,KAAKsxC,gBAGjB,OAAOtxC,KAAKyoK,eAMhBl/C,EAAYj8H,UAAUi4J,SAAW,WAC7B,OAAOvlJ,KAAKsxC,OAOhBi4E,EAAYj8H,UAAU+a,MAAQ,WAC1BrI,KAAKsxC,MA1VY,SA2VjBtxC,KAAK0kJ,QAAU,KACf1kJ,KAAKyoK,cAAgB,KACrBzoK,KAAKu3G,UAAY,KACjBv3G,KAAKwL,SAAW,KAChBxL,KAAK6hB,QAAU,GACf7hB,KAAK0oK,WAAa,GAGtBv9K,EAAOD,QAAUq+H,G,8BCvWjB,yDAEA,MAAMxrG,EAAS0E,EAAQ,GAAqB5E,UAAU6E,GAUvC,SAASi/F,EAAmB/6F,GAEvC5mB,KAAK07F,SAAW,GAEhB17F,KAAK4mB,WAAaA,EAClB5mB,KAAK4mB,WAAWszF,mBACZ,WAAYl6G,KAAK+pK,gBAAgB78K,KAAK8S,OAG9C2hH,EAAmBr0H,UAAUy8K,gBACvB,SAASruE,EAAUsuE,EAAaz4C,GAC9B,IAAKvxH,KAAK4mB,WAAW0qG,SAASC,GAK1B,YAJAxzG,EAAO5Y,KACF,8CAA6Cu2F,EAC9C61B,GAKR,MAAM3sH,EAAM,GAEZ82F,EAASiW,SAASviG,QAAQ8jB,IAEtB,MAAMjnC,EAAOinC,EAAUj2B,WAAWhR,KAC5Bg4E,EAAU/wC,EAAUvmC,MAEtBqT,KAAK07F,SAASzvG,KAAUg4E,IACxBjkE,KAAK07F,SAASzvG,GAAQg4E,EACtBlmD,EAAO7Y,KAAM,OAAMjZ,cAAiBg4E,KAEpCr/D,EAAI1B,KAAK,CACLgE,GAAI,oBACJgsB,UAAWjnC,EACXg4E,eAMRr/D,EAAIrO,OAAS,GACbktB,IAAWqH,QAAQle,KAAKwL,UAAUxT,KAW9C+8G,EAAmBr0H,UAAU28K,oBAAsB,SAASC,GACxD,OAAOlqK,KAAK07F,SAASwuE,M,sFChEzB,0FACA,MAAMnsJ,EAASF,oBAAU6E,GAUV,MAAM8gG,EAOjBvtH,YAAYqhI,GACRt3H,KAAKs3H,SAAWA,EAChBt3H,KAAK6jB,aAAeyzG,EAASzzG,aAC7B9F,EAAO9Y,MAAM,uBACbjF,KAAK07C,SAAW,GAEhB17C,KAAKmqK,2BAA6BnqK,KAAKoqK,oBAAoBl9K,KAAK8S,MAKhEs3H,EAAS1O,oBAAoB,uBACzB5oH,KAAKqqK,oBAAoBn9K,KAAK8S,OAStCqqK,oBAAoBnpK,GAChB,MAAMjE,EAAaiE,EAAKjE,WAExB,IAAKA,EACD,OAGJ8gB,EAAO9Y,MAAM,+BAAgChI,GAE7C,MAAMs7E,EAAWt7E,EAAWq0C,MAE5B,GAAIinC,IAAav4E,KAAKsxC,MAItB,OAAQinC,GACR,KAAK+xF,WACL,KAAKA,YACL,KAAKA,gBACL,KAAKA,iBACL,KAAKA,eAAwB,CACzB,MAAMz9F,EAAU5vE,EAAWstK,WAE3B,IAAK19F,EACD,OAIJ,MAAM50D,EAAUjY,KAAK07C,SAASmxB,GAE1B50D,EACAA,EAAQuyJ,SAASjyF,EAAUt7E,EAAWwtK,gBAEtC1sJ,EAAO5Y,KAAK,kCAAmC0nE,KAc3D6nD,wBAAwBC,EAAY/oB,GAChC,GAAI5rG,KAAK07C,SAASi5E,GAId,OAHA52G,EAAO5Y,KAAK,uDACRwvH,GAEG,IAAIt9H,MAAMizK,wBAGrB,MAAMryJ,EAAU,IAAIyyJ,IAChB/1C,EAAY/oB,EAAa5rG,KAAKs3H,UAMlC,OAJAr/G,EAAQ0yJ,iBAAiB3qK,KAAKmqK,4BAE9BnqK,KAAK07C,SAASi5E,GAAc18G,EAErBA,EASXmyJ,oBAAoBv+I,GAChB,MAAMghD,EAAUhhD,EAAMghD,QAEtB,GAAIhhD,EAAM0sD,WAAa+xF,aAChBz+I,EAAM0sD,WAAa+xF,eAAwB,CAC9C,MAAMryJ,EAAUjY,KAAK07C,SAASmxB,GAE9B,IAAK50D,EAID,YAHA8F,EAAO/Y,MAAM,6CACT6nE,GAKR50D,EAAQ2yJ,oBAAoB5qK,KAAKmqK,mCAC1BnqK,KAAK07C,SAASmxB,GAGzB7sE,KAAK6jB,aAAa8D,KACdqwB,IAAW/nD,mCACX47B,O,iFClIZ,gFAOA,MAAM9N,EAASF,oBAAU6E,GAYV,MAAMgoJ,UAA+BlvI,IAWhDvlC,YAAY0+H,EAAY/oB,EAAa0rB,GACjC77F,QAEAz7B,KAAK20H,WAAaA,EAClB30H,KAAK4rG,YAAcA,EACnB5rG,KAAKs3H,SAAWA,EAShBt3H,KAAKsxC,WAAQ/wC,EAMjB6nB,OACQpoB,KAAKsxC,QAAUmrD,aACZz8F,KAAKsxC,QAAUmrD,eAMtBz8F,KAAK6qK,aAAa,QALd9sJ,EAAO5Y,KAAK,mDAWpB4X,QAGQ/c,KAAKsxC,QAAUmrD,YACZz8F,KAAKsxC,QAAUmrD,aACfz8F,KAAKsxC,QAAUmrD,iBACfz8F,KAAKsxC,QAAUmrD,iBAMtBz8F,KAAK6qK,aAAa,SALd9sJ,EAAO5Y,KAAK,yCAgBpBqlK,SAASjyF,EAAUuyF,GACf,GAAIvyF,IAAav4E,KAAKsxC,MAClB,OAGJ,MAAMy5H,EAAW/qK,KAAKsxC,MAEtBtxC,KAAKsxC,MAAQinC,EACbv4E,KAAK6jB,aAAa8D,KAlFJ,gBAmFV,CACIklD,QAAS7sE,KAAK20H,WACdm2C,gBACAC,WACAxyF,SAAUv4E,KAAKsxC,MACfs6D,YAAa5rG,KAAK4rG,cAW9B++D,iBAAiB5kJ,GACb/lB,KAAKokC,YApGS,gBAoGkBre,GAQpC6kJ,oBAAoB7kJ,GAChB/lB,KAAKmmB,eA7GS,gBA6GqBJ,GASvC8kJ,aAAa37I,GACT,MAAMjyB,EAAa,CACf,MAAS,kCACT,OAAUiyB,EACVq7I,WAAYvqK,KAAK20H,YAGrB13H,EAAW+tK,YAAchrK,KAAK4rG,YAE9B,MAAM34F,EAAKtX,cAAI,CACX0tC,GAAIrpC,KAAKs3H,SAASxiB,YAClB7tG,KAAM,QACLlb,EAAE,QAASkR,GACXkJ,KAEL4X,EAAO9Y,MAASiqB,EAAF,wBAAiCjc,EAAG/M,UAClDlG,KAAKs3H,SAAS/iH,WAAWnG,OACrB6E,EACA,OACAjO,IACI+Y,EAAO/Y,MACF,aAAYkqB,kCAAwClqB,GACzDhF,KAAKwqK,SAAS/tE,sB,6FCzJ9B,gFAOA,MAAM1+E,EAASF,oBAAU6E,GAYV,SAASu8E,IAEpB,OAAO,IAAInhE,QAAQC,IACfuF,IAAInG,iBAAiBQ,IACjB,MAAMstI,EAAettI,EAAQ3I,OAAO6F,GAA0B,eAAhBA,EAAOJ,MAC/CywI,EAAqB,GAG3B,IAAK,MAAMC,KAAaF,EAAc,CAClC,MAAMG,EAAgB9nI,IAAIxE,+BAA+B,CAAEnB,QAAS,CAAE,SAClEqC,YAAamrI,EAAUrwI,WAAY4C,KAAKmK,IAIxC,MAAMlH,EAAQkH,EAAO,GACfwwE,EAAiB13E,EAAMg/C,oBAO7B,OALAl8D,IAAWkC,gBAAgB0yF,EAAgB13E,EAAMqI,cAAc97C,KAAKyzC,IACpEA,EAAMnD,iBAAiBk6C,sBAAsC,KACzDj0D,IAAW0E,eAAekwF,KAGvB13E,IAGXuqI,EAAmBhoK,KAAKkoK,GAG5BttI,QAAQm+C,WAAWivF,GAAoBxtI,KAAK2tI,IACxC,MAAMC,EAAqBD,EAAar2I,OAAOxnC,GAAkB,cAAbA,EAAEuiB,QAChDw7J,EAAmBF,EAAar2I,OAAOxnC,GAAkB,aAAbA,EAAEuiB,QAG9C2pB,EAAmB4xI,EAAmB9lK,IAAIhY,GAAKA,EAAEb,OACjD6+K,EAAgBD,EAAiB/lK,IAAIhY,GAAKA,EAAEb,OAElD,IAAK,MAAM6iB,KAAUg8J,EACjBztJ,EAAO/Y,MAAM,8CAA+CwK,GAIhE,IAAK,MAAMqrB,KAAUnB,EACjBmB,EAAO7U,GAAG0xD,4BAA4CzuC,IAK9CA,EAAa,OACbwiI,EAAkB/xI,GAClBqE,EAAQ,CAAEjD,SAAUD,EAAOC,SACvB4wI,YAAa7wI,EAAO8F,MAAM3F,WAM1CzwB,WAAW,KACPkhK,EAAkB/xI,GAClBqE,EAAQ,CACJjD,SAAU,GACV4wI,YAAa,MApEX,WAoF1B,SAASD,EAAkBlxI,GACvB,IAAK,MAAMM,KAAUN,EACjBM,EAAO0vE,gB,igCCrFf,MAAMxsF,EAASF,oBAAU6E,GAOV,MAAMw5E,EAmBjBjmG,YAAYkR,EAAU,IAClB,MAAM,gBACFwkK,GAEAxkK,EADG43B,EAFP,EAGI53B,EAHJ,qBAUAnH,KAAK8/D,SAAL,GACI15B,UAAWulI,GACJA,EAAgBjoJ,KAAKnP,WAAWo6B,OAAOouG,cAC3Ch+G,GAQP/+B,KAAK4rK,gBAAkB,KAGvB5rK,KAAK6rK,cAAgB7rK,KAAK6rK,cAAc3+K,KAAK8S,MAC7CA,KAAK8rK,eAAiB9rK,KAAK8rK,eAAe5+K,KAAK8S,MAC/CA,KAAK+rK,gBAAkB/rK,KAAK+rK,gBAAgB7+K,KAAK8S,MAiBrDgsK,eAAevnK,GACX,MAAMyvH,EAAUzvH,EAAQ9N,KAExB,IAAKu9H,EACD,OAMJ,GAAIl0H,KAAK4rK,iBACF5rK,KAAK4rK,gBAAgBK,eAAiB/3C,EAOzC,YANAl0H,KAAK6rK,cACD33C,EACAxoE,IAAQ7gB,iBACR,YAMR,MAAM53B,EAAKjT,KAAKksK,oBAAoBznK,EAAQ9K,KAAKsZ,IAC3Ck5J,EAAUl5J,GAAMA,EAAGqiB,KAAK,UACxBpG,EAASi9I,GAAWA,EAAQ5qK,KAAK,UAEnC2tB,IAAWw8B,IAAQE,WACnB5rD,KAAK4rK,gBAAkB5rK,KAAKosK,sBAAsBl4C,EAAS,CACvD3tC,aAAa,EACb8lF,cAAc,KAMlBrsK,KAAK4rK,iBACL5rK,KAAK4rK,gBAAgBI,eAAeG,GAKpCj9I,IAAWw8B,IAAQ7gB,kBAChB3b,IAAWw8B,IAAQI,aACnB58B,IAAWw8B,IAAQG,WACtB7rD,KAAKssK,uBAebvvJ,MAAMm3G,EAAS1wF,EAAc,IACzBxjC,KAAK4rK,gBAAkB5rK,KAAKosK,sBAAsBl4C,EAAS,CACvD3tC,aAAa,EACb8lF,cAAc,IAGlBrsK,KAAK4rK,gBAAgB7uJ,MAAMymB,GAQ/Bpb,OACQpoB,KAAK4rK,iBACL5rK,KAAK4rK,gBAAgBxjJ,OAGzBpoB,KAAK4rK,gBAAkB,KAW3BM,oBAAoBn5G,GAChB,IACI,MAAMw5G,GAAS,IAAItqK,WAAYC,gBAAgB6wD,EAAK,YAEpD,OAAOjkB,EAAEy9H,GACX,MAAOlzK,GAGL,OAFA0kB,EAAO/Y,MAAM,kDAEN,MAefonK,sBAAsBl4C,EAAS/sH,EAAU,IACrC,IAAK+sH,EACD,MAAM,IAAI78H,MAAM,mDAGpB,MAAM+wF,EAAY,EAAH,CACXhiD,UAAWpmC,KAAK8/D,SAAS15B,UACzBuxG,QAAS33I,KAAK6rK,cACdW,eAAgBxsK,KAAK+rK,gBACrBU,cAAezsK,KAAK8rK,eACpB53C,WACG/sH,GAGP,OAAO,IAAIulK,IAAkBtkF,GAiBjCyjF,cAAc33C,EAAS7kG,EAAWE,EAAU,IACxCxR,EAAO/Y,MACH,oCAAqCkvH,EAAS7kG,EAAWE,GAE7D,MAAMtc,EAAKtX,cAAI,CACX0tC,GAAI6qF,EACJjtH,KAAM,QAELlb,EAAE,SAAU,CACTka,MAAO,oBACPipB,OAAQG,IAEXtjC,EAAE,WACFa,EAAE2iC,GACFppB,KAELnG,KAAK8rK,eAAe53C,EAASjhH,GAEzBjT,KAAK4rK,iBACF5rK,KAAK4rK,gBAAgBK,eAAiB/3C,GACzCl0H,KAAKssK,uBAebP,gBAAgBY,GACZ,IAAK3sK,KAAK8/D,SAAS0sG,eAIf,OAHAzuJ,EAAO/Y,MAAM,gDACb2nK,EAAiBllJ,UAKrB,MAAMmlJ,EAAUD,EAAiBlrF,eACjC,IAAI3gD,EAEA8rI,IACA9rI,EAAY9gC,KAAK8/D,SAAS+sG,sBACpB9rI,IAAUC,QAAUD,IAAUQ,QAKxC,MAAMG,EAAcirI,EAAiBhtF,oBAC/BmtF,EAAmBxpI,IAAIgxC,kBACzB,CACI,CACIx5C,SACK,SAAQ96B,KAAK4rK,gBAAgBK,aAClC57I,UAAWu8I,EAAUplI,IAAkBA,IACvCpI,WAAY,QACZxZ,OAAQ8b,EACRf,MAAOe,EAAYxH,iBAAiB,GACpC4G,eAIZ9gC,KAAK8/D,SAAS0sG,eAAeM,EAAiB,IAWlDhB,eAAe53C,EAASjhH,GACpB,GAAKjT,KAAK8/D,SAAS2sG,cAInB,IACI,MAAMM,GACA,IAAIC,eAAgBC,kBAAkBh6J,EAAG/M,UAAY+M,GAE3DjT,KAAK8/D,SAAS2sG,cAAcv4C,EAAS,CAAEjhH,GAAI85J,IAC7C,MAAO1zK,GACL0kB,EAAO/Y,MAAM,mDAUrBsnK,uBACItsK,KAAKooB,OAELpoB,KAAK8/D,SAASotG,oBACPltK,KAAK8/D,SAASotG,yB,iqBC7T7B,MAAMnvJ,EAASF,oBAAU6E,GASV,MAAMgqJ,EAoBjBz2K,YAAYkR,EAAU,IAClBnH,KAAK8/D,SAAL,GACI15B,UAAW,GACXmgD,aAAa,EACb4mF,cAAc,EACdd,cAAc,GACXllK,GASPnH,KAAKuuH,QAAU,GAOfvuH,KAAK4rK,gBAAkB,KAGvB5rK,KAAK2b,SAAW3b,KAAK2b,SAASzuB,KAAK8S,MACnCA,KAAK+rK,gBAAkB/rK,KAAK+rK,gBAAgB7+K,KAAK8S,MACjDA,KAAK8rK,eAAiB9rK,KAAK8rK,eAAe5+K,KAAK8S,MASnDisK,aACI,OAAOjsK,KAAK8/D,SAASo0D,QAUzB83C,eAAeG,GACX,OAAQA,EAAQ5qK,KAAK,WACrB,KAAKmqD,IAAQC,OACT3rD,KAAKotK,iBAAiBjB,GACtB,MAEJ,KAAKzgH,IAAQE,SACT5rD,KAAKqtK,mBAAmBlB,GACxB,MAEJ,KAAKzgH,IAAQG,UACT7rD,KAAKstK,oBAAoBnB,GACzB,MAEJ,KAAKzgH,IAAQl2D,eACTwK,KAAKutK,iBAAiBpB,IAa9BpvJ,MAAMymB,EAAc,IACZxjC,KAAK4rK,kBAIT5rK,KAAKuuH,QAAUvuH,KAAKuuH,QAAQv0H,OAAOwpC,GAEnCxjC,KAAK4rK,gBAAkB5rK,KAAKosK,wBAE5BpsK,KAAK4rK,gBAAgB5+E,OAAOxpD,IAShCpb,OACQpoB,KAAK4rK,iBACL5rK,KAAK4rK,gBAAgB7pF,YAGzB/hF,KAAKstK,sBAUTlB,wBAOI,MAWMoB,EAAiB,CAGnB5jK,WAAW,EACX+kC,OAAQ,CACJozC,UAAW,QAEf3zE,OAAQpO,KAAK8rK,eAIbtuI,iBAAkB,IAAM,QAWtBiwI,EAAgB,EAAH,CACfvxH,WAAYzH,KACTz0C,KAAK8/D,SAAS15B,WAgCfsnI,EAAW,CACb9kD,oBAAqB,OACrB1zE,gBAAiB,GACjBrxB,aAAc,CAAE8D,KApBJkE,IACZ,OAAQA,GACR,KAAKmsB,IAAW3lD,sBAChB,KAAK2lD,IAAW5lD,kBACZ4N,KAAK2b,SAAS+vC,IAAQ7gB,iBAAkBhf,MAiB5C2sH,qBAAsB,KAGX,IAEX1vB,uBAAwB,QAe5B9oH,KAAK4gK,KAAO,IAAIt9H,IARO,GAQa,IAOpCtjC,KAAK4gK,KAAKx8H,YACN/J,IAAUtN,mBACV/sB,KAAK+rK,iBAGT,MAAM97C,EAAiB,IAAIlqC,SACvBxlF,OACAA,EACAP,KAAK8/D,SAASo0D,QACds5C,EACA,CACIxwB,oBAAqBh9I,KAAK8/D,SAASqtG,aACnClwB,oBAAqBj9I,KAAK8/D,SAASusG,cAEvCoB,GACA,EACAztK,KAAK8/D,SAASymB,aASlB,OAFA0pC,EAAevyD,WAAWgwG,EAAU1tK,KAAK4gK,KAzHtB,IA2HZ3wC,EAYXt0G,SAAS0T,EAAWE,EAAU,IAC1BvvB,KAAK8/D,SAAS63E,QAAQ33I,KAAK8/D,SAASo0D,QAAS7kG,EAAWE,GAY5Dw8I,gBAAgBY,GACZ3sK,KAAKuuH,QAAQrrH,KAAKypK,GAElB3sK,KAAK8/D,SAAS0sG,eAAeG,GAWjCb,eAAe74J,GACXjT,KAAK8/D,SAAS2sG,cAAczsK,KAAK8/D,SAASo0D,QAASjhH,GAYvDm6J,iBAAiBjB,GACRnsK,KAAK4rK,gBAMV5rK,KAAK4rK,gBAAgBp+E,UAAU2+E,GAL3BpuJ,EAAO/Y,MAAM,sDAgBrBqoK,mBAAmBlB,GACXnsK,KAAK4rK,gBACL7tJ,EAAO/Y,MAAM,sDAKjBhF,KAAK4rK,gBAAkB5rK,KAAKosK,wBAE5BpsK,KAAK4rK,gBAAgBj/E,YACjBw/E,EACA,OACA,IAAMnsK,KAAK2b,SACP3b,KAAK8/D,SAASo0D,QACdxoE,IAAQ7gB,iBACR,4BAYZyiI,sBACIttK,KAAKuuH,QAAQn/G,QAAQuxB,GAASA,EAAMlZ,WACpCznB,KAAKuuH,QAAU,GAEXvuH,KAAK4rK,iBACL5rK,KAAK4rK,gBAAgB97E,eAGrB9vF,KAAK4gK,OACL5gK,KAAK4gK,KAAKz6I,eACNkU,IAAUtN,mBACV/sB,KAAK+rK,iBAGT/rK,KAAK4gK,KAAKv8H,WAYlBkpI,iBAAiBpB,GACbnsK,KAAK4rK,gBAAgBhgF,iBAAiBugF,O,4FCjZ/B,KACXnnK,MAAO,CACH2oK,KAAM,OACNjwK,MAAO,QACPkwK,oBAAqB,sBACrBC,oBAAqB,uBAEzBhhL,KAAM,CACFihL,KAAM,OACNrxK,OAAQ,UAEZsT,OAAQ,CACJ22F,IAAK,MACLD,GAAI,KACJl7C,QAAS,a,6BCdjB,6DAQA,MACMva,EAAU,IAAIltB,IACpB,IAAIiqJ,GAAe,EACfC,EAAM,KAsHK,KACXpjK,KAtDGzI,eAAoBgF,GACvB,GAAI4mK,EACA,MAAM,IAAI12K,MAAM,oCAGpB,MAAM,YAAE4rB,EAAF,gBAAeC,EAAf,0BAAgCe,GAA8B9c,EAEpE,IAAK8b,IAAgBC,GAAmBe,EACpC,MAAM,IAAI5sB,MAAM,yBAOpB,aAzEJ,WACI,IAAI8sB,IAAQC,gBAIZ,OAAO,IAAI0Z,QAAQC,IACf1Z,IAAWC,WACPE,KACY,GACE,OACIjkB,EACCw9B,KA0DrBkwI,GAEND,EAAM,IAAI1iL,OAAO+xE,UA1CrB,SAAqBl2D,GACjB,OAAO,IAAI22B,QAAQ,CAACC,EAASC,KACzB,MAAMkwI,EAAQ/mK,EAAQ8b,YAChBkrJ,EAAYhnK,EAAQ+b,gBACpB8G,EAAS7iB,EAAQw9G,cAAgBx9G,EAAQy+G,uBAAyBtoB,IAASsnB,kBAEjFopD,EAAItwG,WAAWwwG,EAAOC,EAAWnkJ,EAAQ,CAACja,EAAQtL,KAC/B,YAAXsL,GACAi+J,EAAIhoJ,GA/CS,qBA+CgB,IAAI0c,KAC7BsO,EAAQrpB,KAhDC,wBAgD6B+a,KAE1CqrI,GAAe,EACfhwI,KAEAC,EAAO,CACHjuB,SACAtL,aAGT,KAAM,CAAE2pK,oBAAoB,MAyB5BpxD,CAAY71G,IAwCnBknK,QAxBG,WACH,OAAKN,EAIE,IAAIjwI,QAAQ,CAACC,EAASC,KACzBgT,EAAQhrB,GAzGa,qBAyGY,CAACjW,EAAQ+mB,KACvB,YAAX/mB,EACAguB,EAAQjH,GAERkH,EAAO,CACHjuB,SACA+mB,cAMZk3I,EAAIM,oBAhBGxwI,QAAQE,OAAO,oB,cC7G9B,MAAM8hE,EAAW,CAsBbyuE,gBAAe,CAACC,EAAYx5H,EAAUy5H,IAGf,iBAFPD,EAGD,KAHCA,EAMD5sK,QAAQ,SAAUozC,GACxBpzC,QAAQ,iBAAiC,IAAhB6sK,IAItCtjL,EAAOD,QAAU40G,G,6BClCV,SAAS4uE,GAAuB,SAAEj1F,EAAF,YAAYqyD,EAAZ,QAAyBv8G,IAC5D,MAAMtyB,EAAa,CAAEw8E,YAMrB,OAHAqyD,IAAgB7uI,EAAW6uI,YAAcA,GACzCv8G,IAAYtyB,EAAWsyB,QAAUA,GAE1B,CACHL,OAAQ,eACRjyB,cATR,mC,8BCAA,iEAQA,MAAM8gB,EAASF,oBAAU6E,GAMV,MAAMs8E,EAIjB/oG,cACI+J,KAAK2uK,UAAW,EAChB3uK,KAAK4uK,cAAgB,GACrB5uK,KAAK6uK,gBAAkB,GAQ3BnvF,eAAe95D,GACNA,EAAOoU,kBACRjc,EAAO5Y,KAAK,mDAGhBnF,KAAK4uK,cAAc1rK,KAAK0iB,GAU5B7I,QAEI,GAAI/c,KAAK2uK,SACL,OAAO3uK,KAAK8uK,UAAUlpJ,OAK1B,GAFA5lB,KAAK+oG,cAAgBC,eAEhBhpG,KAAK4uK,cAAcr4K,OAGpB,OAFAwnB,EAAO5Y,KAAK,8DAEL,KAGXnF,KAAK2uK,UAAW,EAEhB3uK,KAAK8uK,UAAY9uK,KAAK+oG,cAAcgmE,+BAEpC,IAAK,MAAMnpJ,KAAU5lB,KAAK4uK,cAAe,CACrC,MAAMI,EAAYhvK,KAAK+oG,cAAcjD,wBAAwBlgF,GAE7DopJ,EAAUvjK,QAAQzL,KAAK8uK,WAGvB9uK,KAAK6uK,gBAAgB3rK,KAAK8rK,GAG9B,OAAOhvK,KAAK8uK,UAAUlpJ,OAQ1Bvd,QACIrI,KAAK2uK,UAAW,EAChB3uK,KAAK4uK,cAAgB,GAGrB,IAAK,MAAMI,KAAahvK,KAAK6uK,gBACzBG,EAAUz/J,aAGdvP,KAAK6uK,gBAAkB,GAEnB7uK,KAAK+oG,gBACL/oG,KAAK+oG,mBAAgBxoG,O,8ECzFjCpV,EAAOD,QAYP,SAAoB+jL,EAAMC,EAAMv8F,EAAQ75C,EAAOH,EAAQxxB,GAEnD,IAAKgoK,EAAYF,KAAUE,EAAYD,IAAUv8F,IAAWw8F,EAAYx8F,GACpE,MAAM,IAAIt7E,MAAM,iEAEpB,GAAI43K,EAAK14K,SAAW24K,EAAK34K,QAAWo8E,GAAUA,EAAOp8E,SAAW04K,EAAK14K,OACjE,MAAM,IAAIc,MAAM,6BAEpB,GAAI43K,EAAK14K,SAAWuiC,EAAQH,EAAS,EAAG,MAAM,IAAIthC,MAAM,gDAExD8P,EAAU/a,OAAO+zC,OAAO,GAAIivI,EAAgBjoK,GAG5C,MAAMhP,EAAM2gC,EAAQH,EACd02I,EAAM,IAAIhiE,YAAY4hE,EAAKzmH,OAAQymH,EAAK1mH,WAAYpwD,GACpDm3K,EAAM,IAAIjiE,YAAY6hE,EAAK1mH,OAAQ0mH,EAAK3mH,WAAYpwD,GAC1D,IAAIo3K,GAAY,EAEhB,IAAK,IAAI7jL,EAAI,EAAGA,EAAIyM,EAAKzM,IACrB,GAAI2jL,EAAI3jL,KAAO4jL,EAAI5jL,GAAI,CAAE6jL,GAAY,EAAO,MAEhD,GAAIA,EAAW,CACX,GAAI58F,IAAWxrE,EAAQqoK,SACnB,IAAK,IAAI9jL,EAAI,EAAGA,EAAIyM,EAAKzM,IAAK+jL,EAAcR,EAAM,EAAIvjL,EAAGyb,EAAQuoK,MAAO/8F,GAE5E,OAAO,EAKX,MAAMg9F,EAAW,MAAQxoK,EAAQuqI,UAAYvqI,EAAQuqI,UACrD,IAAIt+E,EAAO,EAGX,IAAK,IAAIn8D,EAAI,EAAGA,EAAI0hC,EAAQ1hC,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAI8hC,EAAO9hC,IAAK,CAE5B,MAAM2xC,EAAwB,GAAjB1xC,EAAI6hC,EAAQ9hC,GAGnB44K,EAAQC,EAAWZ,EAAMC,EAAMvmI,EAAKA,GAGtCv9B,KAAKuP,IAAIi1J,GAASD,EAEbxoK,EAAQ2oK,YAAcC,EAAYd,EAAMj4K,EAAGC,EAAG6hC,EAAOH,EAAQu2I,KACvCa,EAAYb,EAAMl4K,EAAGC,EAAG6hC,EAAOH,EAAQs2I,IAO1Dt8F,GACAq9F,EAAUr9F,EAAQhqC,KAASinI,EAAQ,GAAKzoK,EAAQ8oK,cAAgB9oK,EAAQ+oK,WAE5E98G,KAPIuf,IAAWxrE,EAAQqoK,UAAUQ,EAAUr9F,EAAQhqC,KAAQxhC,EAAQgpK,SAUhEx9F,IAEFxrE,EAAQqoK,UAAUC,EAAcR,EAAMtmI,EAAKxhC,EAAQuoK,MAAO/8F,IAM3E,OAAOvf,GA7EX,MAAMg8G,EAAiB,CACnB19B,UAAW,GACXo+B,WAAW,EACXJ,MAAO,GACPS,QAAS,CAAC,IAAK,IAAK,GACpBD,UAAW,CAAC,IAAK,EAAG,GACpBD,aAAc,KACdT,UAAU,GAyEd,SAASL,EAAYh5K,GAEjB,OAAOg1D,YAAY8vE,OAAO9kI,IAA8C,IAAtCA,EAAIF,YAAYm6K,kBAMtD,SAASL,EAAYM,EAAKC,EAAIC,EAAIz3I,EAAOH,EAAQu2I,GAC7C,MAAMsB,EAAKplK,KAAKytB,IAAIy3I,EAAK,EAAG,GACtBG,EAAKrlK,KAAKytB,IAAI03I,EAAK,EAAG,GACtBG,EAAKtlK,KAAKqP,IAAI61J,EAAK,EAAGx3I,EAAQ,GAC9B63I,EAAKvlK,KAAKqP,IAAI81J,EAAK,EAAG53I,EAAS,GAC/BgQ,EAA0B,GAAnB4nI,EAAKz3I,EAAQw3I,GAC1B,IAGIM,EAAMC,EAAMC,EAAMC,EAHlBC,EAASV,IAAOE,GAAMF,IAAOI,GAAMH,IAAOE,GAAMF,IAAOI,EAAK,EAAI,EAChEl2J,EAAM,EACNoe,EAAM,EAIV,IAAK,IAAI7hC,EAAIw5K,EAAIx5K,GAAK05K,EAAI15K,IACtB,IAAK,IAAIC,EAAIw5K,EAAIx5K,GAAK05K,EAAI15K,IAAK,CAC3B,GAAID,IAAMs5K,GAAMr5K,IAAMs5K,EAAI,SAG1B,MAAMX,EAAQC,EAAWQ,EAAKA,EAAK1nI,EAAuB,GAAjB1xC,EAAI6hC,EAAQ9hC,IAAQ,GAG7D,GAAc,IAAV44K,GAGA,GAFAoB,IAEIA,EAAS,EAAG,OAAO,OAGhBpB,EAAQn1J,GACfA,EAAMm1J,EACNgB,EAAO55K,EACP65K,EAAO55K,GAGA24K,EAAQ/2I,IACfA,EAAM+2I,EACNkB,EAAO95K,EACP+5K,EAAO95K,GAMnB,OAAY,IAARwjB,GAAqB,IAARoe,IAITo4I,EAAgBZ,EAAKO,EAAMC,EAAM/3I,EAAOH,IAAWs4I,EAAgB/B,EAAM0B,EAAMC,EAAM/3I,EAAOH,IAC5Fs4I,EAAgBZ,EAAKS,EAAMC,EAAMj4I,EAAOH,IAAWs4I,EAAgB/B,EAAM4B,EAAMC,EAAMj4I,EAAOH,IAIxG,SAASs4I,EAAgBZ,EAAKC,EAAIC,EAAIz3I,EAAOH,GACzC,MAAM63I,EAAKplK,KAAKytB,IAAIy3I,EAAK,EAAG,GACtBG,EAAKrlK,KAAKytB,IAAI03I,EAAK,EAAG,GACtBG,EAAKtlK,KAAKqP,IAAI61J,EAAK,EAAGx3I,EAAQ,GAC9B63I,EAAKvlK,KAAKqP,IAAI81J,EAAK,EAAG53I,EAAS,GAC/BgQ,EAA0B,GAAnB4nI,EAAKz3I,EAAQw3I,GAC1B,IAAIU,EAASV,IAAOE,GAAMF,IAAOI,GAAMH,IAAOE,GAAMF,IAAOI,EAAK,EAAI,EAGpE,IAAK,IAAI35K,EAAIw5K,EAAIx5K,GAAK05K,EAAI15K,IACtB,IAAK,IAAIC,EAAIw5K,EAAIx5K,GAAK05K,EAAI15K,IAAK,CAC3B,GAAID,IAAMs5K,GAAMr5K,IAAMs5K,EAAI,SAE1B,MAAMW,EAAyB,GAAjBj6K,EAAI6hC,EAAQ9hC,GAM1B,GALIq5K,EAAI1nI,KAAS0nI,EAAIa,IACjBb,EAAI1nI,EAAM,KAAO0nI,EAAIa,EAAO,IAC5Bb,EAAI1nI,EAAM,KAAO0nI,EAAIa,EAAO,IAC5Bb,EAAI1nI,EAAM,KAAO0nI,EAAIa,EAAO,IAAIF,IAEhCA,EAAS,EAAG,OAAO,EAI/B,OAAO,EAMX,SAASnB,EAAWZ,EAAMC,EAAMztK,EAAG3V,EAAGqlL,GAClC,IAAIC,EAAKnC,EAAKxtK,EAAI,GACd4vK,EAAKpC,EAAKxtK,EAAI,GACd6vK,EAAKrC,EAAKxtK,EAAI,GACd8vK,EAAKtC,EAAKxtK,EAAI,GAEd+vK,EAAKtC,EAAKpjL,EAAI,GACd2lL,EAAKvC,EAAKpjL,EAAI,GACd4lL,EAAKxC,EAAKpjL,EAAI,GACd6lL,EAAKzC,EAAKpjL,EAAI,GAElB,GAAIylL,IAAOI,GAAMP,IAAOI,GAAMH,IAAOI,GAAMH,IAAOI,EAAI,OAAO,EAEzDH,EAAK,MACLA,GAAM,IACNH,EAAKQ,EAAMR,EAAIG,GACfF,EAAKO,EAAMP,EAAIE,GACfD,EAAKM,EAAMN,EAAIC,IAGfI,EAAK,MACLA,GAAM,IACNH,EAAKI,EAAMJ,EAAIG,GACfF,EAAKG,EAAMH,EAAIE,GACfD,EAAKE,EAAMF,EAAIC,IAGnB,MAAMpB,EAAKsB,EAAMT,EAAIC,EAAIC,GACnBX,EAAKkB,EAAML,EAAIC,EAAIC,GACnBz6K,EAAIs5K,EAAKI,EAEf,GAAIQ,EAAO,OAAOl6K,EAElB,MAAMvL,EAAIomL,EAAMV,EAAIC,EAAIC,GAAMQ,EAAMN,EAAIC,EAAIC,GACtCj6K,EAAIs6K,EAAMX,EAAIC,EAAIC,GAAMS,EAAMP,EAAIC,EAAIC,GAEtC9B,EAAQ,MAAS34K,EAAIA,EAAI,KAAQvL,EAAIA,EAAI,MAAS+L,EAAIA,EAG5D,OAAO84K,EAAKI,GAAMf,EAAQA,EAG9B,SAASiC,EAAMrlL,EAAGk2E,EAAG/qE,GAAK,MAAW,UAAJnL,EAAqB,UAAJk2E,EAAqB,UAAJ/qE,EACnE,SAASm6K,EAAMtlL,EAAGk2E,EAAG/qE,GAAK,MAAW,UAAJnL,EAAqB,SAAJk2E,EAAqB,UAAJ/qE,EACnE,SAASo6K,EAAMvlL,EAAGk2E,EAAG/qE,GAAK,MAAW,UAAJnL,EAAqB,UAAJk2E,EAAqB,UAAJ/qE,EAGnE,SAASi6K,EAAM7lL,EAAG2L,GACd,OAAO,KAAO3L,EAAI,KAAO2L,EAG7B,SAASs4K,EAAUr9F,EAAQhqC,EAAKn8C,EAAGk2E,EAAG/qE,GAClCg7E,EAAOhqC,EAAM,GAAKn8C,EAClBmmF,EAAOhqC,EAAM,GAAK+5B,EAClBiQ,EAAOhqC,EAAM,GAAKhxC,EAClBg7E,EAAOhqC,EAAM,GAAK,IAGtB,SAAS8mI,EAAcY,EAAK3kL,EAAGgkL,EAAO/8F,GAClC,MAGM9Z,EAAM+4G,EAAMC,EAHRxB,EAAI3kL,EAAI,GACR2kL,EAAI3kL,EAAI,GACR2kL,EAAI3kL,EAAI,IACgBgkL,EAAQW,EAAI3kL,EAAI,GAAK,KACvDskL,EAAUr9F,EAAQjnF,EAAGmtE,EAAKA,EAAKA,K,qGCnIpB,MA/ED,SAAS5gD,EAASw7I,GAgC5B,YA/BuB,IAAZx7I,QAAoD,IAAlBA,EAAQ+Z,OAAyB57B,MAAMC,QAAQ4hB,EAAQ+Z,QAChG/Z,EAAQ+Z,MAAM5iB,QAAQ0mB,IACdA,EAAM+iE,SAAW/iE,EAAM+iE,QAAQtiG,SAC/Bu/B,EAAMhB,MAAQ,GACdgB,EAAM+iE,QAAQzpF,QAAQqgB,IAClBrjC,OAAOmZ,KAAKkqB,GAAQrgB,QAAQ9R,IACN,OAAdA,GAGJw4B,EAAMhB,MAAM5xB,KAAK,CACbgE,GAAIuoB,EAAOvoB,GACX5J,YACA3Q,MAAO8iC,EAAOnyB,gBAInBw4B,EAAM+iE,SAIb/iE,EAAMX,YAAcW,EAAMX,WAAW5+B,QACrCu/B,EAAMX,WAAW/lB,QAAQ8mB,SACU,IAApBA,EAAUpB,OAClB1+B,MAAMC,QAAQ6/B,EAAUpB,SACvBoB,EAAUpB,MAAQoB,EAAUpB,MAAM3xB,KAAK,UAOpD,IAAUywC,MAAM37B,EAASw7I,IA+CrB,EArCD,SAASp9H,GACnB,MAAMpe,EAAU,IAAUC,MAAMme,GAiChC,YA/BuB,IAAZpe,QAAoD,IAAlBA,EAAQ+Z,OAAyB57B,MAAMC,QAAQ4hB,EAAQ+Z,QAChG/Z,EAAQ+Z,MAAM5iB,QAAQ0mB,SAES,IAAhBA,EAAMhB,OAAyB1+B,MAAMC,QAAQy/B,EAAMhB,SAC1DgB,EAAM+iE,QAAU,GAChB/iE,EAAMhB,MAAM1lB,QAAQoa,IAChB,MAAMwoJ,EAAQl8I,EAAM+iE,QAAQrH,UAAU/hE,GAAUA,EAAOvoB,KAAOsiB,EAAKtiB,IAEnE,GAAI8qK,GAAS,EACTl8I,EAAM+iE,QAAQm5E,GAAOxoJ,EAAKlsB,WAAaksB,EAAK78B,UACzC,CACH,MAAMmyB,EAAM,CAAE5X,GAAIsiB,EAAKtiB,IAEvB4X,EAAI0K,EAAKlsB,WAAaksB,EAAK78B,MAC3BmpC,EAAM+iE,QAAQ31F,KAAK4b,aAGpBgX,EAAMhB,YAIe,IAArBgB,EAAMX,YAA8B/+B,MAAMC,QAAQy/B,EAAMX,aAC/DW,EAAMX,WAAW/lB,QAAQ8mB,IACU,iBAApBA,EAAUpB,QACjBoB,EAAUpB,MAAQoB,EAAUpB,MAAM/xB,MAAM,UAOrDkV,GClFX,MAAMg6J,EAAc,CAAE,QAAS,QAAS,QAClCC,EAAeh8I,GAAaA,EAAUZ,KAAK68I,GAAyB,QAAlBA,EAAI38I,WACtD48I,EAAel8I,GAAaA,EAAUZ,KAAK68I,GAAyB,QAAlBA,EAAI38I,WAW5D,SAAS68I,EAAmBv8I,EAAOL,EAAU68I,EAAcC,GACvD,IAAKz8I,IAAUL,EACX,OAEJ,MAAM+8I,EAAiB1zJ,GAAOyzJ,EAAWj9I,KAAK7F,GAAUA,EAAOvoB,GAAGxQ,aAAeooB,GAEjF2W,EAASX,MAAM1lB,QAAQ0P,IACnBgX,EAAM+iE,QAAQ31F,KAAKsvK,EAAe1zJ,IAGlC,MAAM2zJ,EAAkBH,EAAah6J,SAASwG,EAAK,KAAKwW,KAAK68I,GAAyB,QAAlBA,EAAI38I,WAExE,GAAIi9I,EAAiB,CACjB,MAAMC,EAAcD,EAAgB39I,MAAMQ,KAAK7nC,GAAKA,IAAMqxB,GAE1DgX,EAAM+iE,QAAQ31F,KAAKsvK,EAAeE,IAClC58I,EAAMX,WAAWjyB,KAAKuvK,MAK9B38I,EAAMX,WAAWjyB,KAAKuyB,GAgB1B,SAASk9I,EAAkB78I,EAAOtM,EAAM8oJ,EAAcC,GAClD,IAAKz8I,IAAUtM,EACX,OAMJ,GAJAsM,EAAM+iE,QAAU,GAChB/iE,EAAMX,WAAa,IAGdm9I,EAAa9oJ,EAAKtiB,IAInB,OAHA4uB,EAAM+iE,QAAQ31F,KAAKsmB,QACnBsM,EAAMmqB,KAAOz2B,EAAKy2B,MAItB,MAGMxqB,EAAWy8I,EAAaI,EAAa9oJ,EAAKtiB,KAC1CmuB,EAAW+8I,EAAaE,EAAa9oJ,EAAKtiB,KAGhD,GAAIuuB,EACA48I,EAAmBv8I,EAAOL,EAAU68I,EAAcC,QAC/C,GAAIl9I,EAAU,CAEjB,MAAMu9I,EAAYv9I,EAASP,MAAMQ,KAAK7nC,GAAKA,IAAM+7B,GAC3CqpJ,EAAYX,EAAaI,EAAaM,IAExCC,EACAR,EAAmBv8I,EAAO+8I,EAAWP,EAAcC,IAGnDl9I,EAASP,MAAM1lB,QAAQ0P,IACnBgX,EAAM+iE,QAAQ31F,KAnBH4b,IAAOyzJ,EAAWj9I,KAAK7F,GAAUA,EAAOvoB,GAAGxQ,aAAeooB,GAmBlD0zJ,CAAe1zJ,MAEtCgX,EAAMX,WAAWjyB,KAAKmyB,IAK9BS,EAAMmqB,KAAOnqB,EAAM+iE,QAAQ,GAAG54C,KAsBlC,SAAS6yH,EAA0BtpJ,EAAM8oJ,EAAcS,GASnD,IAAKA,EAAOz9I,KARcjD,KAClBA,EAAMwmE,SACCxmE,EAAMwmE,QAAQ52D,KAAKxS,GAAUA,EAAOvoB,KAAOsiB,EAAKtiB,KAM1B,CAGjC,IAAKorK,EAAa9oJ,EAAKtiB,IACnB,OAAO,EAEX,MAAMuuB,EAAWy8I,EAAaI,EAAa9oJ,EAAKtiB,KAC1CmuB,EAAW+8I,EAAaE,EAAa9oJ,EAAKtiB,KAEhD,GAAIuuB,EACA,OAAOs9I,EAAO9wI,KAAK5P,GAASA,EAAMwmE,SAC3BxmE,EAAMwmE,QAAQ52D,KAAKnjB,GAAOA,EAAI5X,GAAGxQ,aAAe++B,EAASX,MAAM,KACnE,GAAIO,GAAY7L,EAAKtiB,GAAGxQ,aAAe2+B,EAASP,MAAM,GAAI,CAG7D,OAAOg+I,EAFW,CAAE5rK,GAAImuB,EAASP,MAAM,IAEKw9I,EAAcS,GAI9D,OAAO,EAGX,OAAO,EAiCJ,MAAM,EAMT,QAAQ7iG,GACJ,IAAKA,GAA0C,iBAApBA,EAAY75C,IAGnC,OAFAtxB,QAAQI,KAAK,mDAEN+qE,EAIX,MAAMj4D,EAAUspC,EAAgB2uB,EAAY75C,KAG5C,IAAKpe,EAAQ+Z,QAAU/Z,EAAQ+Z,MAAMz7B,OAGjC,OAFAwO,QAAQI,KAAK,iCAEN+qE,EAIX,GAAIj4D,EAAQ+Z,MAAMkoE,MAAMpuG,IAAqC,IAAhCmmL,EAAYruK,QAAQ9X,EAAEigD,MAG/C,OAFAhnC,QAAQI,KAAK,uDAEN+qE,EAGX,MAAMl+C,EAAQ,GACRghJ,EAAe/6J,EAAQ+Z,MAE7B/Z,EAAQ+Z,MAAQ,GAChBghJ,EAAa5jK,QAAQ0mB,IACjB,MAAM7uB,EAAO6uB,EAAM7uB,KAEnB,GAAa,gBAATA,EAIA,OAHA6uB,EAAMiW,IAAM,YACZ/Z,EAAM8D,EAAMiW,KAAOjW,GAIvB,QAA2B,IAAhB9D,EAAM/qB,GAAuB,CACpC,MAAMgsK,EAAQ,IAAUn9I,GAGpBm9I,EAAMp6E,SAAWziG,MAAMC,QAAQ48K,EAAMp6E,UACrCo6E,EAAMp6E,QAAQzpF,QAAQqgB,IAClBqG,EAAMmqB,KAAOxwB,EAAOwwB,KAAOnqB,EAAMmqB,YAAcxwB,EAAOwwB,OAUzDgzH,EAAM99I,YAAeW,EAAMmqB,OAC5BgzH,EAAM99I,WAAa,WAEhB89I,EAAMhzH,KACbgzH,EAAMlnI,IAAM9kC,EACZ+qB,EAAM/qB,GAAQgsK,OACPn9I,EAAMmqB,OAETnqB,EAAM+iE,SAAWziG,MAAMC,QAAQy/B,EAAM+iE,WACrC7mE,EAAM/qB,GAAM4xF,QAAU7mE,EAAM/qB,GAAM4xF,QAAQ7+F,OAAO87B,EAAM+iE,eAE3B,IAArB/iE,EAAMX,YAA8B/+B,MAAMC,QAAQy/B,EAAMX,cAC/DnD,EAAM/qB,GAAMkuB,WAAanD,EAAM/qB,GAAMkuB,WAAWn7B,OAAO87B,EAAMX,gBAIzEld,EAAQ+Z,MAAQ5lC,OAAOm7B,OAAOyK,GAG9B,MAAMkhJ,EAAS,GAEf9mL,OAAOm7B,OAAOyK,GAAO5iB,QAAQijB,IACD,aAApBA,EAAM4B,WACNi/I,EAAOhwK,KAAKmvB,EAAM0Z,OAK1B9zB,EAAQ42B,OAAOz/B,QAAQmmB,IACA,WAAfA,EAAMtuB,OACNsuB,EAAM49I,KAAOD,EAAO/vK,KAAK,QAKjC8U,EAAQm7J,aAAe,CACnBC,SAAU,MACVt+H,MAAO,KAEX,MAAMq8G,EAAS7vG,EAAgBtpC,GAE/B,OAAO,IAAI25E,sBAAsB,CAC7B3qF,KAAMipE,EAAYjpE,KAClBovB,IAAK+6H,IAYb,cAAclhF,EAAaie,EAAU,MACjC,IAAKje,GAA0C,iBAApBA,EAAY75C,IAGnC,OAFAtxB,QAAQI,KAAK,mDAEN+qE,EAIX,MAAMj4D,EAAUspC,EAAgB2uB,EAAY75C,KAG5C,IAAKpe,EAAQ+Z,QAAU/Z,EAAQ+Z,MAAMz7B,OAGjC,OAFAwO,QAAQI,KAAK,iCAEN+qE,EAIX,GAAIj4D,EAAQ+Z,MAAMz7B,OAAS,GAAK0hB,EAAQ+Z,MAAMkoE,MAAMpuG,IAAqC,IAAhCmmL,EAAYruK,QAAQ9X,EAAEigD,MAG3E,OAFAhnC,QAAQI,KAAK,6CAEN+qE,EAEX,MAAMojG,EAAcnlF,EAAU5sC,EAAgB4sC,EAAQ93D,KAAO,KACvDrE,EAAQ,GAEd/Z,EAAQ+Z,MAAM5iB,QAAQ0mB,IAClB,MAAM7uB,EAAO6uB,EAAM7uB,KAEnB,GAAa,gBAATA,EAAwB,CACxB,IAAKqsK,IAAgBA,EAAYthJ,MAAO,CACpC,MAAMuhJ,EAAW,IAAUz9I,GAK3B,OAHAy9I,EAASxnI,IAAM3/C,OAAOmZ,KAAKysB,GAAOz7B,OAAOG,gBACzCs7B,EAAM8D,EAAMiW,KAAOwnI,GAIvB,MAAMC,EAAeF,EAAYthJ,MAAMw/D,UAAU1lG,GAAKA,EAAEmb,OAASA,GAOjE,YALIusK,IACAF,EAAYthJ,MAAMwhJ,GAAgB19I,EAClCw9I,EAAYthJ,MAAMwhJ,GAAcznI,IAAMynI,IAO9C,MAAMC,EA3LlB,SAA8BnB,GAC1B,MAAMmB,EAAa,GAEnB,OAAKnB,GAAiBl8K,MAAMC,QAAQi8K,IAGpCA,EAAaljK,QAAQmmB,IACbA,EAAMT,OAAS1+B,MAAMC,QAAQk/B,EAAMT,QACnCS,EAAMT,MAAM1lB,QAAQoa,SACgB,IAArBiqJ,EAAWjqJ,KAClBiqJ,EAAWjqJ,GAAQ,IAEvBiqJ,EAAWjqJ,GAAMtmB,KAAKqyB,OAK3Bk+I,GAbIA,EAuLgBC,CAAqB59I,EAAMX,YAK9C,GAAKW,EAAM+iE,QAUX/iE,EAAM+iE,QAAQzpF,QAAQ,CAACoa,EAAMyiB,KAGzB,IAAKziB,EAAKy2B,KACN,OAIJ,IAAKqzH,IAAgBA,EAAYthJ,MAAO,CACpC,GAAI8gJ,EAA0BtpJ,EAAMiqJ,EAAYrnL,OAAOm7B,OAAOyK,IAC1D,OAEJ,MAAMuhJ,EAAW,IAAUz9I,GAU3B,OARAy9I,EAASxnI,IAAM3/C,OAAOmZ,KAAKysB,GAAOz7B,OAAOG,WACzC68K,EAASt/I,UAAYgY,GAEK,aAApBnW,EAAM7B,UADN,WAC8C,WACpDs/I,EAASI,gBAAapzK,EACtBoyK,EAAkBY,EAAU/pJ,EAAMiqJ,EAAY39I,EAAM+iE,cACpD7mE,EAAMuhJ,EAASxnI,KAAOwnI,GAM1B,GAAIT,EAA0BtpJ,EAAMiqJ,EAAYH,EAAYthJ,OACxD,OAEJ,MAAMuhJ,EAAW,IAAUz9I,GAE3By9I,EAASxnI,IAAMunI,EAAYthJ,MAAMz7B,OAAOG,WACxC68K,EAASt/I,UAAY,WACrB0+I,EAAkBY,EAAU/pJ,EAAMiqJ,EAAY39I,EAAM+iE,SACpDy6E,EAAYthJ,MAAM9uB,KAAKqwK,UA3CvB,IAAKD,EAAa,CACd,MAAMC,EAAW,IAAUz9I,GAE3By9I,EAASxnI,IAAM3/C,OAAOmZ,KAAKysB,GAAOz7B,OAAOG,WACzCs7B,EAAM8D,EAAMiW,KAAOwnI,KA0C/Bt7J,EAAQ+Z,MAAQshJ,EAAcA,EAAYthJ,MAAQ5lC,OAAOm7B,OAAOyK,GAChE,MAAMmhJ,EAAO,GAEbl7J,EAAQ+Z,MAAM5iB,QAAQ0mB,IAClBq9I,EAAKjwK,KAAK4yB,EAAMiW,OAIpB9zB,EAAQ42B,OAAOz/B,QAAQmmB,IACA,WAAfA,EAAMtuB,OACNsuB,EAAM49I,KAAOA,EAAKhwK,KAAK,QAK/B8U,EAAQm7J,aAAe,CACnBC,SAAU,MACVt+H,MAAO,KAIX98B,EAAQuiI,OAAOnnE,iBACf,MAAM2jF,EAAYz1G,EAAgBtpC,GAElC,OAAO,IAAI25E,sBAAsB,CAC7B3qF,KAAMipE,EAAYjpE,KAClBovB,IAAK2gI,O,gBCjbjB7rK,EAAOD,QAAUu3B,EAAQ,IAA2By6G,S,8BCFpD,uBAEA,CAACtnI,SAC2B,IAAbA,EAAOk5C,IACdl5C,EAAOk5C,EAAIzvB,MAFnB,CAIGzpB,GAAUtK,aAAU,K,kCCQvB,IAAI4xB,EAAS,EAAQ,KAgDrB,SAASC,EAAay2J,EAAYzsK,GAC9BnH,KAAK4zK,WAAaA,EAClB5zK,KAAK6zK,oBAAmB1sK,IAAWA,EAAQ0sK,mBAAmB1sK,EAAQ0sK,iBACtE7zK,KAAK8zK,cAAgB3sK,GAAWA,EAAQ2sK,cAAgB3sK,EAAQ2sK,cAAe,IAC/E9zK,KAAK+zK,eAAiB5sK,GAAWA,EAAQ4sK,eAAiB5sK,EAAQ4sK,eAAiB,IAGnF3nL,OAAOmZ,KAAK2X,EAAOK,QAAQnO,QAC3B,SAAU4kK,GAENh0K,KADiBkd,EAAOK,OAAOy2J,IACZ,WACfh0K,KAAKi0K,KAAKx1J,MAAMze,KAAMmB,YACxBjU,KAAK8S,KAAMg0K,IACf9mL,KAAK8S,OAMPA,KAAKk0K,oBAAsB,KAM3Bl0K,KAAK86F,MAAQ,GAKb96F,KAAKm0K,SAAW,EAMhBn0K,KAAKo0K,YAAc,GAiBvBj3J,EAAa7vB,UAAU8qB,UAAY,SAAUi8J,GACzC,IACI,OAAOznK,KAAKwL,UAAUi8J,GACxB,MAAOrvK,GACL,MAAO,iCAmBfmY,EAAa7vB,UAAUgnL,iBAAmB,SAC1CN,GAEI,IADA,IAAIlvK,EAAM,GACDpZ,EAAI,EAAGyM,EAAMgJ,UAAU5K,OAAQ7K,EAAIyM,EAAKzM,IAAK,CAClD,IAAI0V,EAAMD,UAAUzV,IAEfsU,KAAK6zK,kBAAoBG,IAAa92J,EAAOK,OAAO7f,OACtC,iBAAR0D,IACPA,EAAMpB,KAAKoY,UAAUhX,IAEzB0D,GAAO1D,EACH1V,IAAMyM,EAAM,IACZ2M,GAAO,KAGf,OAAOA,EAAIvO,OAASuO,EAAM,MAS9BqY,EAAa7vB,UAAU2mL,KAAO,WAG1B,IAAInqE,EAAY3oG,UAAU,GACtB2D,EAAM9E,KAAKs0K,iBAAiB71J,MAAMze,KAAMmB,WAC5C,GAAI2D,EAAK,CAEL,IAAIyvK,EAAcv0K,KAAK86F,MAAM96F,KAAK86F,MAAMvkG,OAAS,GAC7Ci+K,EAAkBD,GAAeA,EAAY5yK,KAC7C6yK,IAAoB1vK,EACpByvK,EAAYtjI,OAAS,GAErBjxC,KAAK86F,MAAM53F,KAAK,CACZvB,KAAMmD,EACNglG,UAAWA,EACX74D,MAAO,IAEXjxC,KAAKm0K,UAAYrvK,EAAIvO,QAIzByJ,KAAKm0K,UAAYn0K,KAAK+zK,gBACtB/zK,KAAKy0K,QAAO,GAAkB,IAQtCt3J,EAAa7vB,UAAUyvB,MAAQ,WAC3B/c,KAAK00K,8BAQTv3J,EAAa7vB,UAAUonL,2BAA6B,WAC5C10K,KAAKk0K,sBACL5oL,OAAOmiB,aAAazN,KAAKk0K,qBACzBl0K,KAAKk0K,oBAAsB,MAG/Bl0K,KAAKk0K,oBAAsB5oL,OAAOif,WAC9BvK,KAAKy0K,OAAOvnL,KACR8S,MAAM,GAA0B,GACpCA,KAAK8zK,gBAOb32J,EAAa7vB,UAAUkgB,MAAQ,WAC3BxN,KAAKy0K,QACD,GACA,IAcRt3J,EAAa7vB,UAAUmnL,OAAS,SAASE,EAAOC,GAExC50K,KAAKm0K,SAAW,IAAMn0K,KAAK4zK,WAAWvyJ,WAAaszJ,KAG/C30K,KAAK4zK,WAAWvyJ,WAEZrhB,KAAKo0K,YAAY79K,SACjByJ,KAAKo0K,YAAYhlK,QACb,SAAUylK,GACN70K,KAAK4zK,WAAWkB,UAAUD,IAC5B3nL,KAAK8S,OAGXA,KAAKo0K,YAAc,IAGvBp0K,KAAK4zK,WAAWkB,UAAU90K,KAAK86F,QAE/B96F,KAAKo0K,YAAYlxK,KAAKlD,KAAK86F,OAG/B96F,KAAK86F,MAAQ,GACb96F,KAAKm0K,SAAW,GAGhBS,GACA50K,KAAK00K,8BAQbv3J,EAAa7vB,UAAU86B,KAAO,WAE1BpoB,KAAKy0K,QAAO,GAA0B,IAG1CtpL,EAAOD,QAAUiyB,G,eClRjB,YACAhyB,EAAOD,QAAU6pL,I,+BCDjB;;;;;;;;GAsBE/0K,MAAQ1U,OAXN,EAAO,QAAW,0BAAP,EAcb,WAEF,IAAI0pL,EAAmB,kCAGnBC,EAAgB3pL,OAAOyvB,SAAWzvB,OAAOyvB,SAASk5C,KAAO,KACzDihH,EAAUD,GAAcA,EAAYrzK,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,KAAc,KAGvFuzK,EAAU95K,SAASyV,qBAAqB,UAGxCskK,EAA2B,eAAiBD,EAAQ,IAAM95K,SAASwF,cAAc,WAGjFw0K,GAAc/pL,OAAOu1I,OAAqC,mBAA5Bv1I,OAAOu1I,MAAMnqI,WAG3C4+K,EAAiC,kBAAmBj6K,SAIpD,oBAAqBhE,OAASA,MAAMk+K,kBAAoB7V,MAC/BroK,MAAMk+K,gBACjCl+K,MAAMk+K,gBAAkB7V,KAO1B,IAAI8V,GAAyB,EACzBC,GAAwB,EA+O5B,SAASC,IAIP,GAAuB,IAAnBP,EAAQ5+K,OACV,OAAO,KAGT,IAAI7K,EAAG2N,EAAG+K,EAAO69D,EAAKhjD,EAClB02J,EAAkB,GAClBC,EAAiBF,EAAwBE,gBAAkB,EAQ/D,IAAKlqL,EAAI,EAAGA,EAAIypL,EAAQ5+K,OAAQ7K,IAC1B2pL,GAAcD,EACZJ,EAAiB9iK,KAAKijK,EAAQzpL,GAAGstB,aACnC28J,EAAgBzyK,KAAKiyK,EAAQzpL,IAI/BiqL,EAAgBzyK,KAAKiyK,EAAQzpL,IAQjC,GAJA2N,EAAI,IAAIhC,MACJm+K,IACFpxK,EAAQ/K,EAAE+K,QAEPA,GAASqxK,EACZ,IACE,MAAMp8K,EAER,MAAO8W,GAEL/L,EAAQ+L,EAAI/L,MAiEhB,GA7DIA,KAEF6a,EAzQJ,SAA0BgjD,EAAK0zG,GAC7B,IAAIjqL,EACAuzB,EAAS,KAIb,GAFA02J,EAAkBA,GAAmBR,EAElB,iBAARlzG,GAAoBA,EAC7B,IAAKv2E,EAAIiqL,EAAgBp/K,OAAQ7K,KAC/B,GAAIiqL,EAAgBjqL,GAAGozB,MAAQmjD,EAAK,CAGlChjD,EAAS02J,EAAgBjqL,GACzB,MAIN,OAAOuzB,EAyPI42J,CADT5zG,EAvMJ,SAAS6zG,EAAsB1xK,EAAOwxK,GACpC,IAAIviK,EACA4uD,EAAM,KACN8zG,EAA0C,iBAAnBH,EA+B3B,OA9BAA,EAAiBG,EAAgB3qK,KAAK67H,MAAM2uC,GAAkB,EACzC,iBAAVxxK,GAAsBA,IAC3B2xK,EACF1iK,EAAUjP,EAAMkP,MAAM,+GAGtBD,EAAUjP,EAAMkP,MAAM,kNAELD,EAAQ,KACvBA,EAAUjP,EAAMkP,MAAM,kHAItBD,GAAWA,EAAQ,KAGnB4uD,EAFE2zG,EAAiB,EAEbE,EADW1xK,EAAM0b,MAAM1b,EAAMR,QAAQyP,EAAQ,IAAMA,EAAQ,GAAG9c,QACvBq/K,EAAiB,GAGxDviK,EAAQ,KAWb4uD,EAqKC6zG,CAAsB1xK,EAAOwxK,GACJD,KAEhBT,GAAWjzG,IAAQizG,IAiB9Bj2J,EA5OR,SAA6B02J,GAC3B,IAAIjqL,EAAGyM,EACH8mB,EAAS,KAEb,IAAKvzB,EAAI,EAAGyM,GADZw9K,EAAkBA,GAAmBR,GACH5+K,OAAQ7K,EAAIyM,EAAKzM,IACjD,IAAKiqL,EAAgBjqL,GAAG+iD,aAAa,OAAQ,CAC3C,GAAIxvB,EAAQ,CACVA,EAAS,KACT,MAEFA,EAAS02J,EAAgBjqL,GAG7B,OAAOuzB,EA+NQ+2J,CAAoBL,IAU9B12J,GAK4B,IAA3B02J,EAAgBp/K,SAClB0oB,EAAS02J,EAAgB,IAIxB12J,GAeCq2J,IACFr2J,EAAS5jB,SAAS46K,gBAIjBh3J,GAeCo2J,GAAcD,EAChB,IAAK1pL,EAAIiqL,EAAgBp/K,OAAQ7K,KAC/B,GAAsC,gBAAlCiqL,EAAgBjqL,GAAGstB,WAA8B,CACnDiG,EAAS02J,EAAgBjqL,GACzB,MAkCR,OA5BKuzB,IAyBHA,EAAS02J,EAAgBA,EAAgBp/K,OAAS,IAAM,MAGnD0oB,GA3YT,WACE,IACE,IAAI9O,EAAM,IAAI9Y,MAEd,MADAm+K,EAA8C,iBAAdrlK,EAAI/L,SAAwB+L,EAAI/L,MAC1D+L,EAER,MAAO+lK,GACLT,EAAmD,iBAApBS,EAAU9xK,SAAwB8xK,EAAU9xK,QAP/E,GA+YAsxK,EAAwBE,eAAiB,EAOrC,IAAI/2G,EAA4B62G,EAShC,OARA72G,EAAuBs3G,KAAST,EAChC72G,EAAuBu3G,IA1R3B,WAME,OAAO,MAqRLv3G,EAAuB27E,OArL3B,WAIE,OAAO,MAuLE37E,IA9cW,gC,cCPtB1zE,EAAOD,QAJW,CACdwgC,UAAW,U,iBCGP,SAAW2qJ,GAAc,aAEjCA,EAAW56K,QAAQsK,oBAAoB,QACvC,CACIyO,YAAa,KACb49F,YAAc,GACdC,UAAY,GACZikE,OAAS,GAOT1rK,KAAM,SAAS2rK,GAEfv2K,KAAKwU,YAAc+hK,EACfv2K,KAAKoyG,YAAc,GACnBpyG,KAAKqyG,UAAc,GACnBryG,KAAKs2K,OAAc,GAEnBC,EAAKxoK,WAAW/N,KAAKw2K,aAAatpL,KAAK8S,MAAOq2K,EAAW56K,QAAQK,GAAGO,WAAY,KAAM,MAAO,KAAM,MAEnGk6K,EAAKxoK,WAAW/N,KAAKy2K,cAAcvpL,KAAK8S,MAAOq2K,EAAW56K,QAAQK,GAAGQ,YAAa,KAAM,MAAO,KAAM,OAazGo6K,YAAa,SAAS1lE,EAAU/pG,EAAMhb,EAAM2nE,GAExC,IAAK,IAAIloE,EAAE,EAAGA,EAAEsU,KAAKoyG,YAAY77G,OAAQ7K,IAErC,GAAIsU,KAAKoyG,YAAY1mH,GAAGslH,UAAYA,GAChChxG,KAAKoyG,YAAY1mH,GAAGub,MAAQA,GAC5BjH,KAAKoyG,YAAY1mH,GAAGO,MAAQA,GAC5B+T,KAAKoyG,YAAY1mH,GAAGkoE,MAAQA,EAE5B,OAAO,EAIf,OADA5zD,KAAKoyG,YAAYlvG,KAAK,CAAC8tG,SAAUA,EAAU/pG,KAAMA,EAAMhb,KAAMA,EAAM2nE,KAAMA,KAClE,GAUX5c,WAAY,SAAS2/H,GAEjB,IAAK,IAAIjrL,EAAE,EAAGA,EAAEsU,KAAKqyG,UAAU97G,OAAQ7K,IAElC,GAAIsU,KAAKqyG,UAAU3mH,IAAMirL,EACrB,OAAO,EAGhB,OADA32K,KAAKqyG,UAAUnvG,KAAKyzK,IACb,GAUXllE,cAAe,SAASklE,GAEpB,IAAK,IAAIjrL,EAAE,EAAGA,EAAEsU,KAAKqyG,UAAU97G,OAAQ7K,IAElC,GAAIsU,KAAKqyG,UAAU3mH,KAAOirL,EAEtB,OADA32K,KAAKqyG,UAAUpuG,OAAOvY,EAAE,IACjB,EAGhB,OAAO,GAaXkrL,QAAS,SAASjzK,EAAK1X,EAAMiV,EAAM21K,GAE/B,QAAI31K,IAAS21K,IAEb72K,KAAKs2K,OAAOpzK,KAAK,CAACS,IAAKA,EAAK1X,KAAMA,EAAMiV,KAAMA,EAAM21K,UAAWA,IACxD,KAUX3xK,KAAM,SAASvB,EAAKzC,EAAMw9D,EAAS15D,EAAO4I,GAEtC,IAAIpS,EAAQ,CAACyK,MAAOowK,EAAW56K,QAAQK,GAAGO,YACtC6E,IACA1F,EAAM0F,KAAOA,GAEjB,IAAIgE,EAAOmxK,EAAW16K,IAAI,CAAChF,KAAKqJ,KAAKwU,YAAY7Q,IAChC0lC,GAAG1lC,EAAKsD,KAAK,QAAQlb,EAAE,QAASyP,GACjDwE,KAAKwU,YAAYpG,OAAOlJ,EAAMw5D,EAAS15D,EAAO4I,IAUlDkpK,MAAO,SAASnzK,EAAKzC,EAAMw9D,EAAS15D,EAAO4I,GAEvC,IAAIpS,EAAQ,CAACyK,MAAOowK,EAAW56K,QAAQK,GAAGQ,aACtC4E,IACA1F,EAAM0F,KAAOA,GAEjB,IAAI41K,EAAQT,EAAW16K,IAAI,CAAChF,KAAKqJ,KAAKwU,YAAY7Q,IACjC0lC,GAAG1lC,EAAKsD,KAAK,QAAQlb,EAAE,QAASyP,GACjDwE,KAAKwU,YAAYpG,OAAO0oK,EAAOp4G,EAAS15D,EAAO4I,IAKnDmpK,eAAgB,SAAS/oK,EAAQgpK,GAE7B,IAAI9vK,EAAQ8G,EAAOpL,aAAa,MAC5BjM,EAAOqX,EAAOpL,aAAa,QAC3Bq0K,EAAWZ,EAAW16K,IAAI,CAACsL,KAAM,SAAUC,GAAIA,IAMnD,OAJa,OAATvQ,GACAsgL,EAASz7K,MAAM,CAAC6tC,GAAI1yC,IAGjBsgL,EAASlrL,EAAE,QAASirL,IAM/BR,aAAc,SAASxoK,GAEnB,IAEItiB,EAFAwV,EAAO8M,EAAO8C,qBAAqB,SAAS,GAAGlO,aAAa,QAC5DpH,EAAQ,CAACyK,MAAOowK,EAAW56K,QAAQK,GAAGO,YAEtC6E,IAEA1F,EAAM0F,KAAOA,GAEjB,IAAI+1K,EAAWj3K,KAAK+2K,eAAe/oK,EAAQxS,GAC3C,IAAK9P,EAAE,EAAGA,EAAEsU,KAAKoyG,YAAY77G,OAAQ7K,IAEjC8P,EAAQ,CAACw1G,SAAUhxG,KAAKoyG,YAAY1mH,GAAGslH,SAC1B/pG,KAAUjH,KAAKoyG,YAAY1mH,GAAGub,MACvCjH,KAAKoyG,YAAY1mH,GAAGO,OACpBuP,EAAMvP,KAAO+T,KAAKoyG,YAAY1mH,GAAGO,MACjC+T,KAAKoyG,YAAY1mH,GAAGkoE,OACpBp4D,EAAM,YAAcwE,KAAKoyG,YAAY1mH,GAAGkoE,MAC5CqjH,EAASlrL,EAAE,WAAYyP,GAAO2K,KAElC,IAAKza,EAAE,EAAGA,EAAEsU,KAAKqyG,UAAU97G,OAAQ7K,IAE/BurL,EAASlrL,EAAE,UAAW,CAAC,IAAMiU,KAAKqyG,UAAU3mH,KAAKya,KAGrD,OADAnG,KAAKwU,YAAYnH,KAAK4pK,EAAS5xK,SACxB,GAKXoxK,cAAe,SAASzoK,GAEpB,IAEI8oK,EAAOprL,EAFPsrL,EAAc,CAAC/wK,MAAOowK,EAAW56K,QAAQK,GAAGQ,aAC5C4E,EAAO8M,EAAO8C,qBAAqB,SAAS,GAAGlO,aAAa,QAEhE,GAAI1B,GAIA,IAFA81K,EAAY91K,KAAOA,EACnB41K,EAAQ,GACHprL,EAAI,EAAGA,EAAIsU,KAAKs2K,OAAO//K,OAAQ7K,IAEhC,GAAIsU,KAAKs2K,OAAO5qL,GAAGwV,MAAQA,EAC3B,CACI41K,EAAQ92K,KAAKs2K,OAAO5qL,GAAGmrL,UAAU7oK,GACjC,YAMR8oK,EAAQ92K,KAAKs2K,OAEjB,IAAIW,EAAWj3K,KAAK+2K,eAAe/oK,EAAQgpK,GAC3C,IAAKtrL,EAAI,EAAGA,EAAIorL,EAAMvgL,OAAQ7K,IAC9B,CACI,IAAI8P,EAAQ,CAACmI,IAAMmzK,EAAMprL,GAAGiY,KACxBmzK,EAAMprL,GAAGO,OACTuP,EAAMvP,KAAO6qL,EAAMprL,GAAGO,MACtB6qL,EAAMprL,GAAGwV,OACT1F,EAAM0F,KAAO41K,EAAMprL,GAAGwV,MAC1B+1K,EAASlrL,EAAE,OAAQyP,GAAO2K,KAG9B,OADAnG,KAAKwU,YAAYnH,KAAK4pK,EAAS5xK,SACxB,KAnOiDpa,CAAQ,EAAQ,K,iBCGxE,SAAWorL,GAAc,aAYhCA,EAAW56K,QAAQsK,oBAAoB,mBAAoB,CAK1DmxK,SAAS,EAOTC,oCAAoC,EAQpCC,wBAAyB,EAMzBC,GAAI,KAMJC,IAAK,gBAMLC,4BAA4B,EAQ5BC,gCAAiC,KAQjCC,+BAAgC,KAMhCC,0BAA2B,KAQ3BC,mBAAoB,KAMpBC,gBAAiB,KAMjBC,iBAAkB,KAKlBC,8BAA+B,EAM/BC,cAAc,EAKdC,uBAAwB,GAOxBC,6BAA8B,GAE9BC,8BAA+B,SAASnyJ,GACvC/lB,KAAKi4K,6BAA6B/0K,KAAK6iB,IAGxCsc,OAAQ,SAASr3B,GAChB,IAAKhL,KAAK+3K,aACT,MAAM,IAAI1gL,MAAM,sDACV,GAAI2I,KAAK6tI,oBAAsBwoC,EAAW56K,QAAQgC,OAAOM,UAC/D,MAAM,IAAI1G,MAAM,sDAEjB2I,KAAKq3K,GAAGhqK,KAAKgpK,EAAW96K,OAAO,SAAU,CAAE0K,MAAOjG,KAAKs3K,IAAKtsK,YAC5DhL,KAAKq3K,GAAG7pK,QACRxN,KAAKq3K,GAAGtsK,SAGTg3D,eAAgB,WACf,OAAO/hE,KAAKm4K,cAGb,cACC,OAAOn4K,KAAK+3K,cAGb/sK,OAAQ,WACP,IAAKhL,KAAK+hE,iBACT,MAAM,IAAI1qE,MAAM,mBAEjB,GAAI2I,KAAK6tI,oBAAsBwoC,EAAW56K,QAAQgC,OAAOO,aACxD,MAAM,IAAI3G,MAAM,yDAGjB2I,KAAKq3K,GAAGlwK,QAAQwM,yBAA0B,EAC1C3T,KAAKo4K,WAAY,EAEjBp4K,KAAKq4K,iBAAiB55J,MAAMze,KAAKq3K,GAAIr3K,KAAKs4K,eAG3CC,uBAAwB,WACvB,GAAIv4K,KAAK6tI,oBAAsBwoC,EAAW56K,QAAQgC,OAAOM,UACxD,MAAM,IAAI1G,MAAM,sEAEjB2I,KAAK83K,8BAAgC,EACrC93K,KAAKq3K,GAAGhqK,KAAKgpK,EAAW96K,OAAO,IAAK,CAAE0K,MAAOjG,KAAKs3K,QAGnDkB,mBAAoB,WACnB,OAAOx4K,KAAK03K,2BAGbe,mBAAoB,WACnB,OAAOz4K,KAAKy3K,gCAGb7sK,KAAM,SAAS2rK,GACdv2K,KAAKq3K,GAAKd,EACVF,EAAW56K,QAAQ+D,aAAa,KAAMQ,KAAKs3K,KAG3Ct3K,KAAK23K,mBAAqB33K,KAAKq3K,GAAGpqK,UAClCjN,KAAKq3K,GAAGpqK,UAAYjN,KAAKiN,UAAU/f,KAAK8S,MAExCA,KAAKq4K,iBAAmBr4K,KAAKq3K,GAAG5rK,QAChCzL,KAAKq3K,GAAG5rK,QAAUzL,KAAK04K,sBAAsBxrL,KAAK8S,MAElDA,KAAK24K,mCAAqC34K,KAAKq3K,GAAG3jK,2BAClD1T,KAAKq3K,GAAG3jK,2BAA6B1T,KAAK0T,2BAA2BxmB,KAAK8S,MAE1EA,KAAK44K,sBAAwB54K,KAAKq3K,GAAGvnK,cACrC9P,KAAKq3K,GAAGvnK,cAAgB9P,KAAK64K,uBAAuB3rL,KAAK8S,MAEzDA,KAAK84K,oBAAsB94K,KAAKq3K,GAAG9nK,WACnCvP,KAAKq3K,GAAG9nK,WAAavP,KAAK+4K,qBAAqB7rL,KAAK8S,OAGrD+4K,qBAAsB,WACrB/4K,KAAKm4K,kBAAe53K,EACpBP,KAAK84K,oBAAoBr6J,MAAMze,KAAKq3K,GAAIl2K,YAGzC03K,uBAAwB,WACnB74K,KAAK+hE,mBACH/hE,KAAKo4K,WACNp4K,KAAKq3K,GAAGztK,YAAc5J,KAAKq3K,GAAGxtK,gBAClC7J,KAAKg5K,aAAe,CACnB7vK,SAAUnJ,KAAKq3K,GAAGluK,SAClBD,cAAelJ,KAAKq3K,GAAGnuK,cACvBE,aAAcpJ,KAAKq3K,GAAGjuK,aACtBC,eAAgBrJ,KAAKq3K,GAAGhuK,eACxBC,UAAWtJ,KAAKq3K,GAAG/tK,UACnBC,YAAavJ,KAAKq3K,GAAG9tK,aAEtBvJ,KAAKi5K,WAAaj5K,KAAKq3K,GAAG1zK,IAE1B3D,KAAKk3K,SAAWb,EAAW56K,QAAQwJ,MAAM,0CAA4CjF,KAAKg5K,aAAa7vK,SAAS5S,SAKjHyJ,KAAKq3K,GAAGptK,MAAQ,GAEhBjK,KAAK44K,sBAAsBn6J,MAAMze,KAAKq3K,GAAIl2K,YAG3Cu3K,sBAAuB,WACtB14K,KAAKs4K,aAAen3K,UAEpBnB,KAAKq4K,iBAAiB55J,MAAMze,KAAKq3K,GAAIl2K,YAGtCuS,2BAA4B,SAAShU,GAGpC,OAFAM,KAAK+3K,aAAer4K,EAAK4R,uBAAuBtR,KAAKs3K,IAAK,MAAM/gL,OAAS,EAElEyJ,KAAK24K,mCAAmCl6J,MAAMze,KAAKq3K,GAAIl2K,YAG/D+O,cAAe,SAAUH,GAExB,GADA/P,KAAK6tI,kBAAoB99H,EACpB/P,KAAK+hE,kBACLhyD,IAAWsmK,EAAW56K,QAAQgC,OAAOM,WAAagS,IAAWsmK,EAAW56K,QAAQgC,OAAOO,aAqCrF,GAAI+R,IAAWsmK,EAAW56K,QAAQgC,OAAOY,aAAe,CAC9D2B,KAAKq3K,GAAG1zK,IAAM3D,KAAKi5K,WAGnB,IAAK,MAAM5rL,KAAY2S,KAAKg5K,aAC3Bh5K,KAAKq3K,GAAGhqL,GAAY2S,KAAKg5K,aAAa3rL,GAIvC2S,KAAKq3K,GAAGhqK,KAAKgpK,EAAW96K,OAAO,SAAU,CACxC0K,MAAOjG,KAAKs3K,IACZ1wK,EAAG5G,KAAKy3K,+BACRyB,OAAQl5K,KAAKm4K,gBAEdn4K,KAAKq3K,GAAG7pK,aACEuC,IAAWsmK,EAAW56K,QAAQgC,OAAOC,QAC/CsC,KAAKk3K,SAAWb,EAAW56K,QAAQwJ,MAAM,oCACzCjF,KAAKm4K,kBAAe53K,QArDpBP,KAAKk3K,SAAWb,EAAW56K,QAAQwJ,MAAM,kBAEzCjF,KAAKw3K,gCAAkC,EACvCx3K,KAAKy3K,+BAAiC,EAEtCz3K,KAAK03K,0BAA4B,EAEjC13K,KAAKu3K,4BAA6B,EAClCv3K,KAAK83K,8BAAgC,EAGrC93K,KAAKo4K,WAAY,EAEbroK,IAAWsmK,EAAW56K,QAAQgC,OAAOO,eACxCgC,KAAK+3K,cAAe,GAGrB/3K,KAAKg4K,uBAAyB,GAE1Bh4K,KAAK43K,iBACR53K,KAAKq3K,GAAGlpK,cAAcnO,KAAK43K,iBAGxB53K,KAAK63K,kBACR73K,KAAKq3K,GAAGlpK,cAAcnO,KAAK63K,kBAG5B73K,KAAK43K,gBAAkB53K,KAAKq3K,GAAGtpK,WAAW/N,KAAKm5K,4BAA4BjsL,KAAK8S,MAAOA,KAAKs3K,IAAK,KACjGt3K,KAAKo5K,YAAcp5K,KAAKq3K,GAAGtpK,WAAW/N,KAAKq5K,iBAAiBnsL,KAAK8S,MAAOA,KAAKs3K,IAAK,KAClFt3K,KAAK63K,iBAAmB73K,KAAKq3K,GAAGtpK,WAAW/N,KAAKs5K,uBAAuBpsL,KAAK8S,OAG5EA,KAAKu5K,gBAAkBv5K,KAAKq3K,GAAGllK,eAAenS,KAAKw5K,eAAetsL,KAAK8S,MAAOA,KAAKs3K,IAAK,WACxFt3K,KAAKy5K,qBAAuBz5K,KAAKq3K,GAAGllK,eAAenS,KAAK05K,oBAAoBxsL,KAAK8S,MAAOA,KAAKs3K,IAAK,UAClGt3K,KAAK25K,gBAAmB35K,KAAKq3K,GAAGllK,eAAenS,KAAK45K,eAAe1sL,KAAK8S,MAAOA,KAAKs3K,IAAI,YA8B1FrqK,UAAW,SAASvN,GAOnB,OANI22K,EAAW56K,QAAQwE,WAAWP,EAAM,OACvC22K,EAAW56K,QAAQwE,WAAWP,EAAM,aACpC22K,EAAW56K,QAAQwE,WAAWP,EAAM,aACpCM,KAAK65K,4BAA4Bn6K,GAG3BM,KAAK23K,mBAAmB9rL,KAAKmU,KAAKq3K,GAAI33K,IAG9C85K,eAAgB,SAAS95K,GAOxB,OANAM,KAAKu3K,4BAA6B,EAElCv3K,KAAKm4K,aAA+C,SAAhCz4K,EAAKkD,aAAa,WAAwBlD,EAAKkD,aAAa,MAEhF5C,KAAKq3K,GAAGrsK,UAED,GAGR0uK,oBAAqB,SAASh6K,GAC7B,MAAMsF,EAAQtF,GAAQA,EAAKo6K,mBAAqBp6K,EAAKo6K,kBAAkB35K,QAKvE,OAHAH,KAAKq3K,GAAGnrK,qBAAqBmqK,EAAW56K,QAAQgC,OAAOC,MAAOsH,EAAOtF,GACrEM,KAAKq3K,GAAGvnK,iBAED,GAGR8pK,eAAgB,SAASl6K,GAExB,IAAIq6K,EAAezhK,SAAS5Y,EAAKkD,aAAa,MAQ9C,GAPA5C,KAAKg6K,2BAA2BD,EAAc/5K,KAAKw3K,iCAEnDx3K,KAAKo4K,WAAY,EACjBp4K,KAAKq3K,GAAGpuK,SAAU,EAClBjJ,KAAKq3K,GAAG1tK,eAAgB,EACxB3J,KAAKq3K,GAAGrtK,UAAW,EAEfhK,KAAKg4K,uBAAuBzhL,OAAS,EAAG,CAC3CyJ,KAAKk3K,SAAWb,EAAW56K,QAAQwJ,MAAM,oCAAqCjF,KAAKg4K,wBACnF,IAAI,MAAMhqK,KAAUhO,KAAKg4K,uBACxBh4K,KAAKq3K,GAAGhqK,KAAKW,QAGdhO,KAAKk3K,SAAWb,EAAW56K,QAAQwJ,MAAM,+BAAgCjF,KAAKg4K,wBAK/E,OAFAh4K,KAAKq3K,GAAGnrK,qBAAqBmqK,EAAW56K,QAAQgC,OAAOM,UAAW,OAE3D,GAGRu7K,uBAAwB,SAAS55K,GAShC,OARI22K,EAAW56K,QAAQwE,WAAWP,EAAM,OAAS22K,EAAW56K,QAAQwE,WAAWP,EAAM,aAAe22K,EAAW56K,QAAQwE,WAAWP,EAAM,cACvIM,KAAKi6K,kCAEDj6K,KAAKm3K,oCACRn3K,KAAKk6K,4BAIA,GAGRF,2BAA4B,SAASG,EAAsBC,GAC1D,IAAIxK,EAAQuK,EAAuBC,EAE/BxK,EAAQ,GACX5vK,KAAKq6K,YAAY,uDAAyDF,EAAuB,gBAAkBC,GAGhHxK,EAAQ5vK,KAAKg4K,uBAAuBzhL,QACvCyJ,KAAKq6K,YAAY,8FAAgGzK,EAAQ,kCAAoC5vK,KAAKg4K,uBAAuBzhL,OAAS,WAAa4jL,EAAuB,gBAAkBC,GAGzP,IAAI,IAAI1uL,EAAI,EAAGA,EAAIkkL,EAAOlkL,IAEzB,IADA,IAAIsiB,EAAShO,KAAKg4K,uBAAuB/lJ,QAChC/4B,EAAI,EAAGA,EAAI8G,KAAKi4K,6BAA6B1hL,OAAQ2C,IAC7D8G,KAAKi4K,6BAA6B/+K,GAAG8U,GAInChO,KAAKk3K,SAAWl3K,KAAKg4K,uBAAuBzhL,OAAS,GACxD8/K,EAAW56K,QAAQ0J,KAAK,4BAA6BnF,KAAKg4K,wBAG3Dh4K,KAAKw3K,gCAAkC2C,EAEnCn6K,KAAKo3K,wBAA0B,IAClCp3K,KAAK83K,8BAAgC,IAIvCqB,4BAA6B,WAG5B,OAFAn5K,KAAKk6K,2BAEE,GAGRb,iBAAkB,SAAS35K,GAC1B,IAAIq6K,EAAezhK,SAAS5Y,EAAKkD,aAAa,MAG9C,OAFA5C,KAAKg6K,2BAA2BD,EAAc/5K,KAAKw3K,kCAE5C,GAGR0C,wBAAyB,WACpBl6K,KAAKu3K,4BACRv3K,KAAKq3K,GAAGhqK,KAAKgpK,EAAW96K,OAAO,IAAK,CAAE0K,MAAOjG,KAAKs3K,IAAK1wK,EAAG5G,KAAKy3K,mCAIjEoC,4BAA6B,SAASn6K,GACrC,GAAIM,KAAKu3K,2BAA4B,CACpC,IAAmD,IAA/Cv3K,KAAKg4K,uBAAuBp0K,QAAQlE,GAEvC,OAGDM,KAAKg4K,uBAAuB90K,KAAKxD,GACjCM,KAAK03K,4BAED13K,KAAKo3K,wBAA0B,IAClCp3K,KAAK83K,gCAED93K,KAAK83K,gCAAkC93K,KAAKo3K,yBAE/C7sK,WAAW,KACNvK,KAAK6tI,oBAAsBwoC,EAAW56K,QAAQgC,OAAOM,WACxDiC,KAAKu4K,0BAEJ,MAMP0B,gCAAiC,WAC5Bj6K,KAAKu3K,4BACRv3K,KAAKy3K,kCAIP4C,YAAa,SAASv1K,GAErB,MADAuxK,EAAW56K,QAAQuJ,MAAMF,GACnB,IAAIzN,MAAMyN,MAjc6C7Z,CAAQ,EAAQ,K,iBCDhF,iCAC6B,oBAAT4K,MAAwBA,MAChCvK,OACRmzB,EAAQoxB,SAASviD,UAAUmxB,MAiB/B,SAAS67J,EAAQpzK,EAAIqzK,GACnBv6K,KAAKytI,IAAMvmI,EACXlH,KAAKw6K,SAAWD,EAflBrvL,EAAQqf,WAAa,WACnB,OAAO,IAAI+vK,EAAQ77J,EAAM5yB,KAAK0e,WAAYkwK,EAAOt5K,WAAYsM,eAE/DviB,EAAQuyC,YAAc,WACpB,OAAO,IAAI68I,EAAQ77J,EAAM5yB,KAAK4xC,YAAag9I,EAAOt5K,WAAYy6B,gBAEhE1wC,EAAQuiB,aACRviB,EAAQ0wC,cAAgB,SAAShuB,GAC3BA,GACFA,EAAQ6O,SAQZ69J,EAAQhtL,UAAUotL,MAAQJ,EAAQhtL,UAAUqtL,IAAM,aAClDL,EAAQhtL,UAAUmvB,MAAQ,WACxBzc,KAAKw6K,SAAS3uL,KAAK4uL,EAAOz6K,KAAKytI,MAIjCviJ,EAAQ0vL,OAAS,SAAShjJ,EAAMijJ,GAC9BptK,aAAamqB,EAAKkjJ,gBAClBljJ,EAAKnuB,aAAeoxK,GAGtB3vL,EAAQ6vL,SAAW,SAASnjJ,GAC1BnqB,aAAamqB,EAAKkjJ,gBAClBljJ,EAAKnuB,cAAgB,GAGvBve,EAAQ8vL,aAAe9vL,EAAQ8sG,OAAS,SAASpgE,GAC/CnqB,aAAamqB,EAAKkjJ,gBAElB,IAAID,EAAQjjJ,EAAKnuB,aACboxK,GAAS,IACXjjJ,EAAKkjJ,eAAiBvwK,YAAW,WAC3BqtB,EAAKqjJ,YACPrjJ,EAAKqjJ,eACNJ,KAKP,EAAQ,KAIR3vL,EAAQ4zJ,aAAgC,oBAATjpJ,MAAwBA,KAAKipJ,mBAClB,IAAXlpJ,GAA0BA,EAAOkpJ,cACxC9+I,MAAQA,KAAK8+I,aACrC5zJ,EAAQgwL,eAAkC,oBAATrlL,MAAwBA,KAAKqlL,qBAClB,IAAXtlL,GAA0BA,EAAOslL,gBACxCl7K,MAAQA,KAAKk7K,iB,mCC9DvC,6BACI,aAEA,IAAItlL,EAAOkpJ,aAAX,CAIA,IAIIq8B,EA6HIn5K,EAZA4mJ,EArBAwyB,EACAC,EAjGJC,EAAa,EACbC,EAAgB,GAChBC,GAAwB,EACxBl7K,EAAM1K,EAAOyF,SAoJbogL,EAAWrvL,OAAO2lD,gBAAkB3lD,OAAO2lD,eAAen8C,GAC9D6lL,EAAWA,GAAYA,EAASlxK,WAAakxK,EAAW7lL,EAGf,qBAArC,GAAGc,SAAS7K,KAAK+J,EAAOutD,SApFxBg4H,EAAoB,SAASO,GACzBv4H,EAAQm4C,UAAS,WAAcqgF,EAAaD,QAIpD,WAGI,GAAI9lL,EAAOgsF,cAAgBhsF,EAAOgmL,cAAe,CAC7C,IAAIC,GAA4B,EAC5BC,EAAelmL,EAAOkmB,UAM1B,OALAlmB,EAAOkmB,UAAY,WACf+/J,GAA4B,GAEhCjmL,EAAOgsF,YAAY,GAAI,KACvBhsF,EAAOkmB,UAAYggK,EACZD,GAwEJE,GAIAnmL,EAAOomL,iBA9CVpzB,EAAU,IAAIozB,gBACVC,MAAMngK,UAAY,SAAS+P,GAE/B8vJ,EADa9vJ,EAAMlyB,OAIvBwhL,EAAoB,SAASO,GACzB9yB,EAAQszB,MAAMt6F,YAAY85F,KA2CvBp7K,GAAO,uBAAwBA,EAAIO,cAAc,WAtCpDmB,EAAO1B,EAAI0W,gBACfmkK,EAAoB,SAASO,GAGzB,IAAIz8J,EAAS3e,EAAIO,cAAc,UAC/Boe,EAAO5H,mBAAqB,WACxBskK,EAAaD,GACbz8J,EAAO5H,mBAAqB,KAC5BrV,EAAKmd,YAAYF,GACjBA,EAAS,MAEbjd,EAAKpB,YAAYqe,KAKrBk8J,EAAoB,SAASO,GACzBnxK,WAAWoxK,EAAc,EAAGD,KAlD5BN,EAAgB,gBAAkBhwK,KAAKC,SAAW,IAClDgwK,EAAkB,SAASxvJ,GACvBA,EAAM4D,SAAW75B,GACK,iBAAfi2B,EAAMlyB,MACyB,IAAtCkyB,EAAMlyB,KAAKiK,QAAQw3K,IACnBO,GAAc9vJ,EAAMlyB,KAAKmmB,MAAMs7J,EAAc7kL,UAIjDX,EAAO4nC,iBACP5nC,EAAO4nC,iBAAiB,UAAW69I,GAAiB,GAEpDzlL,EAAOklJ,YAAY,YAAaugC,GAGpCF,EAAoB,SAASO,GACzB9lL,EAAOgsF,YAAYw5F,EAAgBM,EAAQ,OAgEnDD,EAAS38B,aA1KT,SAAsBtzI,GAEI,mBAAbA,IACTA,EAAW,IAAIqkC,SAAS,GAAKrkC,IAI/B,IADA,IAAIk3B,EAAO,IAAItsC,MAAM+K,UAAU5K,OAAS,GAC/B7K,EAAI,EAAGA,EAAIg3C,EAAKnsC,OAAQ7K,IAC7Bg3C,EAAKh3C,GAAKyV,UAAUzV,EAAI,GAG5B,IAAI86I,EAAO,CAAEh7H,SAAUA,EAAUk3B,KAAMA,GAGvC,OAFA64I,EAAcD,GAAc90C,EAC5B20C,EAAkBG,GACXA,KA6JTG,EAASP,eAAiBA,EA1J1B,SAASA,EAAeQ,UACbH,EAAcG,GAyBzB,SAASC,EAAaD,GAGlB,GAAIF,EAGAjxK,WAAWoxK,EAAc,EAAGD,OACzB,CACH,IAAIl1C,EAAO+0C,EAAcG,GACzB,GAAIl1C,EAAM,CACNg1C,GAAwB,EACxB,KAjCZ,SAAah1C,GACT,IAAIh7H,EAAWg7H,EAAKh7H,SAChBk3B,EAAO8jG,EAAK9jG,KAChB,OAAQA,EAAKnsC,QACb,KAAK,EACDiV,IACA,MACJ,KAAK,EACDA,EAASk3B,EAAK,IACd,MACJ,KAAK,EACDl3B,EAASk3B,EAAK,GAAIA,EAAK,IACvB,MACJ,KAAK,EACDl3B,EAASk3B,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAChC,MACJ,QACIl3B,EAASiT,WAnDrB,EAmDsCikB,IAiBlB36B,CAAIy+H,GACN,QACE00C,EAAeQ,GACfF,GAAwB,MAvE5C,CAyLkB,oBAAT3lL,UAAyC,IAAXD,EAAyBoK,KAAOpK,EAASC,Q,wCCzLhF,IAAIsmL,EAAa,SAAUjvI,GACzB,OAAOp0C,OAAOygB,OAAO2zB,MAAQA,EAAI3zB,OAAO2zB,GAAKA,GAgB3CkvI,EAAW,SAAUrmL,EAAKglB,EAAUi0B,GACtC,IAAIqtI,EAAatmL,EAAI9J,MAAQ8J,EAAIuP,MAC7BvP,EAAImN,OAAS6X,EAAShlB,EAAImN,MAC5B6X,EAAShlB,EAAImN,MAAQ,GAEdm5K,IAAethK,EAAShlB,EAAI9J,QACnC8uB,EAAShlB,EAAI9J,MAAQ,IAEvB,IAAIqwL,EAAcvmL,EAAImN,KACpB,GACAm5K,EAAathK,EAAShlB,EAAI9J,MAAQ8uB,GAvBf,SAAUzH,EAAOyH,EAAUzV,EAAOi3K,GACvD,GAAIA,IAAYj3K,EACdyV,EAASwhK,GAAWJ,EAAW7oK,EAAM,SAGrC,IAAK,IAAI5nB,EAAI,EAAGA,EAAI4Z,EAAM/O,OAAQ7K,GAAK,EACnB,MAAd4nB,EAAM5nB,EAAE,KACVqvB,EAASzV,EAAM5Z,IAAMywL,EAAW7oK,EAAM5nB,EAAE,KAkB9C8wL,CAAiBxtI,EAAQ17B,MAAMvd,EAAI6gH,KAAM0lE,EAAavmL,EAAIuP,MAAOvP,EAAI9J,MAEjE8J,EAAImN,MACN6X,EAAShlB,EAAImN,MAAMA,KAAKo5K,IAIxB3lE,EAAU,EAAQ,KAClB8lE,EAAYn4H,OAAOh3D,UAAU4kB,KAAKhlB,KAAK,iBAE3ChC,EAAQgtB,MAAQ,SAAUme,GACxB,IAAIpe,EAAU,GACV+Z,EAAQ,GACRjX,EAAW9C,EAoBf,OAjBAoe,EAAItzB,MAAM,gBAAgBiyB,OAAOynJ,GAAWrtK,SAAQ,SAAUzjB,GAC5D,IAAIsb,EAAOtb,EAAE,GACTqjD,EAAUrjD,EAAEm0B,MAAM,GACT,MAAT7Y,IACF+qB,EAAM9uB,KAAK,CAAC0zB,IAAK,GAAIe,KAAM,KAC3B5c,EAAWiX,EAAMA,EAAMz7B,OAAO,IAGhC,IAAK,IAAI2C,EAAI,EAAGA,GAAKy9G,EAAQ1vG,IAAS,IAAI1Q,OAAQ2C,GAAK,EAAG,CACxD,IAAInD,EAAM4gH,EAAQ1vG,GAAM/N,GACxB,GAAInD,EAAI6gH,IAAI1kG,KAAK88B,GACf,OAAOotI,EAASrmL,EAAKglB,EAAUi0B,OAKrC/2B,EAAQ+Z,MAAQA,EACT/Z,GAGT,IAAIykK,EAAe,SAAUC,EAAKhrH,GAChC,IAAIlkE,EAAIkkE,EAAK5uD,MAAM,QAAS,GAI5B,OAHiB,IAAbtV,EAAE8I,SACJomL,EAAIlvL,EAAE,IAAM0uL,EAAW1uL,EAAE,KAEpBkvL,GAGTzxL,EAAQ4oD,YAAc,SAAU18C,GAC9B,OAAOA,EAAI2L,MAAM,SAAS2C,OAAOg3K,EAAc,KAIjDxxL,EAAQ2oD,gBAAkB3oD,EAAQ4oD,YAElC5oD,EAAQ6oD,cAAgB,SAAU38C,GAChC,OAAOA,EAAI2L,MAAM,KAAKyC,IAAI+T,SAG5BruB,EAAQ8oD,sBAAwB,SAAU58C,GAGxC,IAFA,IAAI8zF,EAAa,GACblnF,EAAQ5M,EAAI2L,MAAM,KAAKyC,IAAI22K,GACtBzwL,EAAI,EAAGA,EAAIsY,EAAMzN,OAAQ7K,GAAK,EACrCw/F,EAAWhoF,KAAK,CACdgwB,UAAWlvB,EAAMtY,GACjBynC,GAAInvB,EAAMtY,EAAI,GACdwmC,KAAMluB,EAAMtY,EAAI,KAGpB,OAAOw/F,GAGThgG,EAAQ+oD,qBAAuB,SAAU78C,GACvC,OAAOA,EAAI2L,MAAM,KAAKyC,KAAI,SAAUoyB,GAClC,OAAOA,EAAKlG,UAAU,EAAGkG,EAAKrhC,OAAO,GAAGwM,MAAM,KAAK2C,OAAOg3K,EAAc,QAI5ExxL,EAAQgpD,yBAA2B,SAAU98C,GAC3C,OAAOA,EAAI2L,MAAM,KAAKyC,KAAI,SAAUogB,GAClC,OAAOA,EAAO7iB,MAAM,KAAKyC,KAAI,SAAUqxG,GACrC,IAAI+lE,EAAM7yK,GAAS,EASnB,MAPkB,MAAd8sG,EAAO,GACT+lE,EAAOT,EAAWtlE,IAElB+lE,EAAOT,EAAWtlE,EAAOnlF,UAAU,EAAGmlF,EAAOtgH,SAC7CwT,GAAS,GAGJ,CACL6yK,KAAMA,EACN7yK,OAAQA,W,gBCrHhB,IAAI4sG,EAAU,EAAQ,KAGlBkmE,EAAe,WACfhmE,EAAS,SAAUimE,GACrB,IAAIpxL,EAAI,EACJg3C,EAAOvhC,UACPhJ,EAAMuqC,EAAKnsC,OACf,OAAOumL,EAAUl7K,QAAQi7K,GAAc,SAAU7lL,GAC/C,GAAItL,GAAKyM,EACP,OAAOnB,EAET,IAAIoK,EAAMshC,EAAKh3C,GAEf,OADAA,GAAK,EACGsL,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAO8B,OAAOsI,GAChB,IAAK,KACH,OAAOmY,OAAOnY,GAChB,IAAK,KACH,MAAO,QAMT27K,EAAW,SAAU91K,EAAMlR,EAAKglB,GAClC,IAII2nB,EAAO,CAACz7B,EAAO,KAJTlR,EAAI8gH,kBAAkBhnE,SAC7B95C,EAAI8gH,OAAO9gH,EAAImN,KAAO6X,EAAWA,EAAShlB,EAAI9J,OAC/C8J,EAAI8gH,SAGN,GAAI9gH,EAAIuP,MACN,IAAK,IAAI5Z,EAAI,EAAGA,EAAIqK,EAAIuP,MAAM/O,OAAQ7K,GAAK,EAAG,CAC5C,IAAIyB,EAAI4I,EAAIuP,MAAM5Z,GACdqK,EAAI9J,KACNy2C,EAAKx/B,KAAK6X,EAAShlB,EAAI9J,MAAMkB,IAG7Bu1C,EAAKx/B,KAAK6X,EAAShlB,EAAIuP,MAAM5Z,UAKjCg3C,EAAKx/B,KAAK6X,EAAShlB,EAAI9J,OAEzB,OAAO4qH,EAAOp4F,MAAM,KAAMikB,IAKxBs6I,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxC9xL,EAAOD,QAAU,SAAU+sB,EAASw7I,GAClCA,EAAOA,GAAQ,GAEQ,MAAnBx7I,EAAQgsD,UACVhsD,EAAQgsD,QAAU,GAEA,MAAhBhsD,EAAQhsB,OACVgsB,EAAQhsB,KAAO,KAEjBgsB,EAAQ+Z,MAAM5iB,SAAQ,SAAU0mB,GACR,MAAlBA,EAAMkB,WACRlB,EAAMkB,SAAW,OAIrB,IAAIkmJ,EAAazpB,EAAKypB,YAAcF,EAChCG,EAAa1pB,EAAK0pB,YAAcF,EAChC5mJ,EAAM,GAkCV,OA/BA6mJ,EAAW9tK,SAAQ,SAAUnI,GAC3B0vG,EAAQ1vG,GAAMmI,SAAQ,SAAUrZ,GAC1BA,EAAI9J,QAAQgsB,GAAgC,MAArBA,EAAQliB,EAAI9J,MACrCoqC,EAAInzB,KAAK65K,EAAS91K,EAAMlR,EAAKkiB,IAEtBliB,EAAImN,QAAQ+U,GAAgC,MAArBA,EAAQliB,EAAImN,OAC1C+U,EAAQliB,EAAImN,MAAMkM,SAAQ,SAAUlP,GAClCm2B,EAAInzB,KAAK65K,EAAS91K,EAAMlR,EAAKmK,aAOrC+X,EAAQ+Z,MAAM5iB,SAAQ,SAAU0mB,GAC9BO,EAAInzB,KAAK65K,EAAS,IAAKpmE,EAAQ7qH,EAAE,GAAIgqC,IAErCqnJ,EAAW/tK,SAAQ,SAAUnI,GAC3B0vG,EAAQ1vG,GAAMmI,SAAQ,SAAUrZ,GAC1BA,EAAI9J,QAAQ6pC,GAA4B,MAAnBA,EAAM//B,EAAI9J,MACjCoqC,EAAInzB,KAAK65K,EAAS91K,EAAMlR,EAAK+/B,IAEtB//B,EAAImN,QAAQ4yB,GAA4B,MAAnBA,EAAM//B,EAAImN,OACtC4yB,EAAM//B,EAAImN,MAAMkM,SAAQ,SAAUlP,GAChCm2B,EAAInzB,KAAK65K,EAAS91K,EAAMlR,EAAKmK,gBAOhCm2B,EAAIlzB,KAAK,QAAU,S,gBCjG5B,IAAIo+C,EAAY,EAAQ,IACpB67H,EAAiB,EAAQ,KACzBC,EAAaD,EAAeC,WAC5BC,EAAaF,EAAeE,WAQhC,SAASznJ,EAAkBC,EAAOtM,EAAMuM,GACpC,OAAOD,EACFhB,MACAE,QAAO,SAASD,GAAY,OAAOA,EAAS7tB,KAAOsiB,KACnDwL,QAAO,SAASD,GAAY,OAAOA,EAASz3B,YAAcy4B,KAC1DvwB,KAAI,SAASuvB,GAAY,OAAOA,EAASpoC,SAAU,GAK5D,SAASigK,EAAUzlJ,GAEfnH,KAAKmH,QAAUA,GAAoB,GAE9BnH,KAAKmH,QAAQ0lJ,cACd7sJ,KAAKmH,QAAQ0lJ,YAnBO,GAqBxB9nJ,QAAQH,IAAI,uBAAyB5E,KAAKmH,QAAQ0lJ,YAAc,WAMhE7sJ,KAAKs4J,UAAY,GAiBrB,SAASilB,EAAatlK,EAASiX,GACZ,MAAXjX,GAAoB7hB,MAAMC,QAAQ4hB,EAAQ+Z,QAI9C/Z,EAAQ+Z,MAAM5iB,SAAQ,SAAU0mB,GACT,UAAfA,EAAM7uB,MACNioB,EAAO4G,MAKnB,SAAS0nJ,EAAoB7pJ,GAEzB,OAAOA,GAAgB,MAARA,GACRA,EAAK1sB,MAAqB,IAAb0sB,EAAK1sB,MAClB0sB,EAAK0C,KAAmB,IAAZ1C,EAAK0C,IAkJ5Bu2H,EAAUt/J,UAAUksK,eAAiB,WACjCx5J,KAAKs4J,UAAY,IAWrB1L,EAAUt/J,UAAUqlK,aAAe,SAAS79H,GACxC90B,KAAKs4J,UAAYxjI,GAYrB83H,EAAUt/J,UAAUmwL,gBAAkB,SAAU3nJ,GAC5C,IAAIL,EAAWK,EAAMX,YACjBW,EAAMX,WAAWG,MAAK,SAASC,GAAS,MAA2B,QAApBA,EAAMC,aACzD,OAAIC,EACOA,EAASX,MACX/xB,MAAM,KACNyC,KAAI,SAAS2wB,GAAW,OAAO7d,SAAS6d,MAEtC,CAACL,EAAMhB,MAAM,GAAG5tB,KAI/B0lJ,EAAUt/J,UAAUowL,sBAAwB,SAAUC,EAAaC,GAE/D,IADA,IAAI/wI,EAAU,GACLnhD,EAAI,EAAGA,EAAIiyL,EAAYpnL,SAAU7K,EAAG,CACzC,IAAImyL,EAAUF,EAAYjyL,GACtBoyL,EAAUF,EAAYlyL,IAAM,KAChCmhD,EAAQgxI,GAAWC,EAEvB,OAAOjxI,GAGX+/G,EAAUt/J,UAAUywL,2BAA6B,SAASjoJ,GACtD/wB,QAAQH,IAAI,sCAAuC5E,KAAKs4J,WACxD,IAAI0lB,EAAch+K,KAAKy9K,gBAAgB3nJ,GACvC/wB,QAAQH,IAAI,sCAAuCo5K,GACnD,IAAIC,EAAUpoJ,EAAiBC,EAAOkoJ,EAAY,GAAI,QAClDE,EAAWroJ,EAAiBC,EAAOkoJ,EAAY,GAAI,SACnDG,EAAiBn+K,KAAK09K,sBAAsBM,EAAah+K,KAAKs4J,WAClEvzJ,QAAQH,IAAI,uCAAwCu5K,GAGpD,IAAIC,EAAap+K,KAAKs4J,UACjBtjI,QAAO,SAASxL,GAAQ,OAAwD,IAAjDp9B,OAAOm7B,OAAO42J,GAAgBv6K,QAAQ4lB,MA2B1E,OA1BAzkB,QAAQH,IAAI,oCAAqCw5K,GAGjDtoJ,EAAMhB,MAAM1lB,SAAQ,SAASoa,GACrB20J,EAAe30J,EAAKtiB,MACpBsiB,EAAKtiB,GAAKi3K,EAAe30J,EAAKtiB,QAItCk3K,EAAWhvK,SAAQ,SAASoa,GACxBsM,EAAMhB,MAAM5xB,KAAK,CACbgE,GAAIsiB,EACJlsB,UAAW,OACX3Q,MAAOsxL,IAEXnoJ,EAAMhB,MAAM5xB,KAAK,CACbgE,GAAIsiB,EACJlsB,UAAW,QACX3Q,MAAOuxL,OAGfpoJ,EAAMX,WAAaW,EAAMX,YAAc,GACvCW,EAAMX,WAAWjyB,KAAK,CAClBsyB,UAAW,MACXV,MAAO90B,KAAKs4J,UAAUn1J,KAAK,OAExB2yB,GAGX82H,EAAUt/J,UAAU+wL,oBAAsB,SAASvoJ,EAAOV,GACtD,IAAIkpJ,EAAsB,SAASxoJ,EAAOtM,GACtCsM,EAAMhB,MAAM5xB,KAAK,CACbgE,GAAIsiB,EACJlsB,UAAW,QACX3Q,MAAO0sK,IAEXvjI,EAAMhB,MAAM5xB,KAAK,CACbgE,GAAIsiB,EACJlsB,UAAW,OACX3Q,MAAOysK,KAGXA,EAAkBvjI,EAAiBC,EAAOV,EAAa,QACvDikI,EAAmBxjI,EAAiBC,EAAOV,EAAa,SAKxDp1B,KAAKmH,QAAQw/B,kBAAoByyH,IACjCA,EAAkBtjI,EAAMmqB,KACLnqB,EAAMhB,MACZ1lB,QAAQoa,IACjBsM,EAAMhB,MAAM5xB,KAAK,CACbgE,GAAIsiB,EAAKtiB,GACT5J,UAAW,OACX3Q,MAAOysK,OAOnB,IADA,IAAImlB,EAAW,GACN7yL,EAAI,EAAGA,EAAIsU,KAAKmH,QAAQ0lJ,YAAc,IAAKnhK,EAAG,CACnD,IAAI8yL,EA/RDpzK,KAAKmM,MAAsB,WAAhBnM,KAAKC,UADb,EAiSNizK,EAAoBxoJ,EAAO0oJ,GAC3BD,EAASr7K,KAAKs7K,GAOlB,OALA1oJ,EAAMX,WAAaW,EAAMX,YAAc,GACvCW,EAAMX,WAAWjyB,KAAK,CAClBsyB,UAAW,MACXV,MAAOM,EAAc,IAAMmpJ,EAASp7K,KAAK,OAEtC2yB,GAoBX82H,EAAUt/J,UAAUmxL,kBAAoB,SAAS3oJ,GAG7C,IAAIV,EACAP,EAAWiB,EAAMhB,OAASgB,EAAMhB,MAC/BtvB,KAAI,SAASuvB,GAAY,OAAOA,EAAS7tB,MACzC8tB,QAAO,SAASxL,EAAMyL,EAAOzW,GAC1B,OAAOA,EAAM5a,QAAQ4lB,KAAUyL,KAElC1+B,QAAU,EACX2+B,EAAaY,EAAMX,YAAcW,EAAMX,WAAW5+B,QAAW,EAEjE,GAAiB,IAAbs+B,GAAkBA,EAAW,EAE7B,OAAOiB,EAEX,GAAgB,GAAZjB,GAA+B,IAAdK,EAEjB,OAAOY,EAGX,GAAiB,IAAbjB,EACAO,EAAcU,EAAMhB,MAAM,GAAG5tB,OAC1B,CAGH,IAAImuB,EAAWS,EAAMX,WAAWH,QAAO,SAASO,GAAS,MAA2B,QAApBA,EAAMC,aAAwB,GAC9F,IAAIH,EAIA,OAAOS,EAHPV,EAAc9c,SAAS+c,EAASP,MAAM/xB,MAAM,KAAK,IAsBzD,OAhBAgC,QAAQH,IAAI,qCAAsC5E,KAAKs4J,WACvDvzJ,QAAQH,IAAI,qCAAuCwwB,IAEY,IAAzCp1B,KAAKs4J,UAAU10J,QAAQwxB,IAGzCrwB,QAAQH,IAAI,2EAEZkxB,EAAQ91B,KAAK+9K,2BAA2BjoJ,KAExC/wB,QAAQH,IAAI,2EAEZkxB,EAAQ91B,KAAKq+K,oBAAoBvoJ,EAAOV,IAG5Cp1B,KAAKs4J,UAAYt4J,KAAKy9K,gBAAgB3nJ,GAC/BA,GAaX82H,EAAUt/J,UAAUuoK,uBAAyB,SAAUliI,EAAM+qJ,GAEzD,IAAKlB,EAAoB7pJ,GACrB,OAAOA,EAGX,IAAI1b,EAAUspC,EAAUrpC,MAAMyb,EAAK0C,KAE/BxgC,EAAOmK,KAqBX,OApBAu9K,EAAatlK,GAAS,SAAU6d,GAGxBjgC,EAAKsR,QAAQ2lJ,uBAjXzB,SAAgCh3H,GAE5B,GAAKA,GAAU1/B,MAAMC,QAAQy/B,EAAMX,YASnC,IALA,IAAI0jE,EAAUwkF,EAAWvnJ,GACrB6oJ,EAAQ,GAGRzlL,EAAI48B,EAAMX,WAAW5+B,OAClB2C,KAEH,GAAsC,QAAlC48B,EAAMX,WAAWj8B,GAAGs8B,UAAxB,CAMA,IAFA,IAAIopJ,EAAiB9oJ,EAAMX,WAAWj8B,GAAG47B,MAAM/xB,MAAM,KAE5CrX,EAAI,EAAGA,EAAIkzL,EAAeroL,OAAQ7K,IAAK,CAE5C,IAAI89B,EAAOo1J,EAAelzL,GAC1BizL,EAAMz7K,KAAKsmB,GAEX,IAAIxlB,EAAQ60F,EAAQrvE,GAAMy2B,KAAKl9C,MAAM,KACrC81F,EAAQrvE,GAAMy2B,KAAO,CAACj8C,EAAM,GAAI,IAAKtY,EAAG,IAAKsY,EAAM,GAAI,IAAKtY,GAAGyX,KAAK,IACpE01F,EAAQrvE,GAAMmoD,MAAQ,CAACknB,EAAQrvE,GAAMmoD,MAAO,IAAKjmF,GAAGyX,KAAK,IAGzD2yB,EAAMX,WAAW/lB,SAAQ,SAAUyvK,GAC/B,GAA+B,QAA3BA,EAAarpJ,UAAjB,CAIA,IAAIspJ,EAAeD,EAAa/pJ,MAAM/xB,MAAM,MACR,IAAhC+7K,EAAal7K,QAAQ4lB,IAKzBs1J,EAAa1vK,SAAQ,SAAU2vK,GAC3BlmF,EAAQkmF,GAAa9+H,KAAO44C,EAAQrvE,GAAMy2B,KAC1C44C,EAAQkmF,GAAaptG,MAAQknB,EAAQrvE,GAAMmoD,MACvCotG,IAAgBv1J,GAChBm1J,EAAMz7K,KAAK67K,UAQ3BjpJ,EAAMhB,MAAQwoJ,EAAWzkF,EAAS8lF,GAClC7oJ,EAAMX,WAAWlxB,OAAO/K,EAAG,IA6TvB4zJ,CAAuBh3H,GAzTnC,SAAgCA,GAE5B,GAAKA,GAAU1/B,MAAMC,QAAQy/B,EAAMX,YAAnC,CAMA,IAAI0jE,EAAUwkF,EAAWvnJ,GAGzBA,EAAMX,WAAW/lB,SAAQ,SAAU4vK,GAC/B,GAAiC,QAA7BA,EAAexpJ,UAAnB,CAIAzwB,QAAQG,KAAK,wBAA0B85K,EAAelqJ,OAEtDkqJ,EAAeC,MAAO,EAKtB,IAHA,IAAIL,EAAiBI,EAAelqJ,MAAM/xB,MAAM,KAGvCrX,EAAI,EAAGA,EAAIkzL,EAAeroL,OAAQ7K,IAAK,CAE5C,IAAI89B,EAAOo1J,EAAelzL,UACnBmtG,EAAQrvE,GAGfsM,EAAMX,WAAW/lB,SAAQ,SAAUyvK,GAC/B,GAA+B,QAA3BA,EAAarpJ,UAAjB,CAIA,IAAIspJ,EAAeD,EAAa/pJ,MAAM/xB,MAAM,MACR,IAAhC+7K,EAAal7K,QAAQ4lB,KAKzBs1J,EAAa1vK,SAAQ,SAAU2vK,UACpBlmF,EAAQkmF,MAInBF,EAAaI,MAAO,YAOhCnpJ,EAAMhB,MAAQwoJ,EAAWzkF,GAIzB,IADA,IAAIntG,EAAIoqC,EAAMX,WAAW5+B,OAClB7K,KACCoqC,EAAMX,WAAWzpC,GAAGuzL,MACpBnpJ,EAAMX,WAAWlxB,OAAOvY,EAAG,QAvD/BqZ,QAAQG,KAAK,6DAwTTg6K,CAAuBppJ,IAOtBjgC,EAAKsR,QAAQw/B,iBAAmB+3I,EA3P7C,SAA8B5oJ,GACrBA,IAIA1/B,MAAMC,QAAQy/B,EAAMqpJ,WACrBrpJ,EAAMqpJ,QAAU,IAGfrpJ,EAAMqpJ,QAAQl9I,MACX,SAAUv2C,GAAK,MAAmB,6BAAZA,EAAEiB,UAC5BmpC,EAAMqpJ,QAAQj8K,KAAK,CAAC,MAAS,8BAiPzBk8K,CAAqBtpJ,GApQjC,SAA8BA,GACrBA,QAAsC,IAAtBA,EAAMupJ,cAI3BvpJ,EAAMupJ,iBAAc9+K,GAiQZ++K,CAAqBxpJ,MAItB,IAAI87D,sBAAsB,CAC7B3qF,KAAM0sB,EAAK1sB,KACXovB,IAAKkrB,EAAU3N,MAAM37B,MAW7B20I,EAAUt/J,UAAU+pK,sBAAwB,SAAU1jI,GAElD,IAAK6pJ,EAAoB7pJ,GACrB,OAAOA,EAGX,IAAI1b,EAAUspC,EAAUrpC,MAAMyb,EAAK0C,KAE/BxgC,EAAOmK,KASX,OARAu9K,EAAatlK,GAAS,SAAU6d,GACL,YAAnBA,EAAM7B,WAA8C,YAAnB6B,EAAM7B,WAI3Cp+B,EAAK4oL,kBAAkB3oJ,MAGpB,IAAI87D,sBAAsB,CAC7B3qF,KAAM0sB,EAAK1sB,KACXovB,IAAKkrB,EAAU3N,MAAM37B,MAM7B9sB,EAAOD,QAAU0hK,G,cCrejB1hK,EAAQoyL,WAAa,SAASzkF,EAAS8lF,GACrC,IAAI7pJ,EAAQ,GAGZ,QAAuB,IAAZ+jE,GACyB,IAAhCzsG,OAAOmZ,KAAKszF,GAAStiG,OAAc,CAEhCH,MAAMC,QAAQsoL,KACjBA,EAAQ,IAIV,IAAK,IAAIjzL,EAAI,EAAGA,EAAIizL,EAAMpoL,OAAQ7K,IAAK,CACrC,IAAI89B,EAAOm1J,EAAMjzL,GACb+jC,EAASopE,EAAQrvE,GACrBp9B,OAAOmZ,KAAKkqB,GAAQrgB,SAAQ,SAAU9R,GACpCw3B,EAAM5xB,KAAK,CACTgE,GAAIsiB,EACJlsB,UAAWA,EACX3Q,MAAO8iC,EAAOnyB,QAMpBlR,OAAOmZ,KAAKszF,GAASzpF,SAAQ,SAAUoa,GAErC,GADAA,EAAOlR,SAASkR,KACZm1J,EAAM/6K,QAAQ4lB,IAAS,GAA3B,CAKA,IAAIiG,EAASopE,EAAQrvE,GACrBp9B,OAAOmZ,KAAKkqB,GAAQrgB,SAAQ,SAAU9R,GACpCw3B,EAAM5xB,KAAK,CACTgE,GAAIsiB,EACJlsB,UAAWA,EACX3Q,MAAO8iC,EAAOnyB,YAMtB,OAAOw3B,GAGT5pC,EAAQmyL,WAAa,SAAUvnJ,GAC7B,IAAI+iE,EAAU,GASd,YAP2B,IAAhB/iE,EAAMhB,OAAyB1+B,MAAMC,QAAQy/B,EAAMhB,QAC5DgB,EAAMhB,MAAM1lB,SAAQ,SAAUoa,GACvBqvE,EAAQrvE,EAAKtiB,MAChB2xF,EAAQrvE,EAAKtiB,IAAM,IACrB2xF,EAAQrvE,EAAKtiB,IAAIsiB,EAAKlsB,WAAaksB,EAAK78B,SAGrCksG,I,cC3DT1tG,EAAOD,QATiB,SAASghF,EAAMjgF,EAAMsrH,EAAWqxD,GACpD5oK,KAAKksE,KAAOA,EACZlsE,KAAK/T,KAAOA,EACZ+T,KAAKu3G,UAAYA,EACjBv3G,KAAK4oK,UAAYA,I,gBCdrB,MAAM2W,EAAO98J,EAAQ,KAEf8lJ,EAAgB9lJ,EAAQ,KACxB+8J,EAAuB/8J,EAAQ,KAK/B6lJ,EAAgB,WAElBtoK,KAAKiiE,IAiHT,WACI,MAAMx9D,EAAU,2DAEhB,QAAyBlE,IAArBs3B,OAAO4nJ,UACP16K,QAAQH,IAAIH,OACT,CACH,MAAMi7K,EAAW7nJ,OAAO4nJ,UAExB,QAA0Bl/K,IAAtBm/K,EAAS5nJ,UAA0B4nJ,EAAS5nJ,SAAS,YACrD,OAAO4nJ,EAEX36K,QAAQH,IAAIH,IA5HLk7K,IAMfrX,EAAch7K,UAAYlB,OAAOY,OAAOwyL,EAAqBlyL,WAK7Dg7K,EAAcryK,YAAcqyK,EAS5BA,EAAch7K,UAAU0xK,YAAc,SAAS4gB,EAAep0K,GAC1DzG,QAAQH,IAAK,6BAA4B5E,KAAKiiE,KAC9Cl9D,QAAQH,IAAK,8BAA6Bg7K,GAC1C,MAAM9qF,EAAU,IAAI39E,eAEpB29E,EAAQz9E,mBAAqB,WACzB,GAAIy9E,EAAQ97E,aAAe7B,eAAe0oK,MAChB,MAAnB/qF,EAAQ/kF,OACXvE,EAASspF,EAAQ7/E,mBACd,GAAI6/E,EAAQ97E,aAAe7B,eAAe0oK,KAC7C,MAAM,IAAIxoL,MACL,yDACGy9F,EAAQ/kF,SAKxB+kF,EAAQ/6E,KAAK,OAAQ/Z,KAAKiiE,KAC1B6yB,EAAQ76E,iBAAiB,eACrBsuJ,EAAc5wD,4BAClB7iB,EAAQznF,KAAKuyK,GACb76K,QAAQH,IAAK,QAAOg7K,IASxBtX,EAAch7K,UAAUwyL,eAAiB,SAASntK,GAC9C,MAAMlN,EAASmH,KAAKsL,MAAMvF,GAAUotK,QAKpCt6K,EAAOwsB,QACP,MAAMzT,EAAQ,GAOd,OALA/Y,EAAO2J,QACH45J,GACIA,EAAKgX,QACExhK,EAAMtb,KAAK,IAAIq8K,EAAKvW,EAAKA,KAAMA,EAAKjsJ,MAAOisJ,EAAKpoJ,OAExDpC,GAQX8pJ,EAAch7K,UAAU2yL,OAAS,SAASttK,GAItC,GAHA5N,QAAQH,IAAK,wBAAuB+N,EAASjc,YAGrB,iBAAbic,EACP,OAAO,EAIX,IAAImqC,EAEJ,IACIA,EAAOlwC,KAAKsL,MAAMvF,GACpB,MAAO3N,GAGL,OAFAD,QAAQH,IAAII,IAEL,EAIX,QAAqBzE,IAAjBu8C,EAAKijI,QACL,OAAO,EAIX,MAAMvhK,EAAQs+B,EAAKijI,QAEnB,SAAMvhK,EAAM,KAAMA,EAAM,GAAG,gBA8B/BrzB,EAAOD,QAAUo9K,G,cCvIjB,MAAMiX,EAAO,SAASvW,EAAMD,EAAOnoJ,GAC/B5gB,KAAKgpK,KAAOA,EACZhpK,KAAK+oK,MAAQA,EACb/oK,KAAK4gB,IAAMA,GAOf2+J,EAAKjyL,UAAU4yL,QAAU,WACrB,OAAOlgL,KAAKgpK,MAOhBuW,EAAKjyL,UAAU6yL,aAAe,WAC1B,OAAOngL,KAAK+oK,OAOhBwW,EAAKjyL,UAAU8yL,WAAa,WACxB,OAAOpgL,KAAK4gB,KAGhBz1B,EAAOD,QAAUq0L,G,cChCjB,MAAMC,EAAuB,WACzB,MAAM,IAAInoL,MAAM,0DAapBmoL,EAAqBlyL,UAAU+f,KAAO,SAAcg8J,EAAiB79J,GACjExL,KAAKg/J,YAAYqK,EAAgBn9F,KAAMv5D,IAC/B3S,KAAKigL,OAAOttK,GACZ02J,EAAgBT,UAAY5oK,KAAK8/K,eAAentK,IAEhD5N,QAAQH,IAAI,wDACZykK,EAAgBT,UAAY,IAEhCp9J,EAAS69J,MAcjBmW,EAAqBlyL,UAAU0xK,YAAc,SAASqhB,EAAW70K,GAC7D,MAAM,IAAInU,MAAM,iDAmBpBmoL,EAAqBlyL,UAAUwyL,eAAiB,SAASntK,GACrD,MAAM,IAAItb,MAAM,4CAUpBmoL,EAAqBlyL,UAAU2yL,OAAS,SAASttK,GAC7C,MAAM,IAAItb,MAAM,4CAGpBlM,EAAOD,QAAUs0L,G,0hECjEjB,IAAIc,GAAe,EACfC,GAAuB,EAUpB,SAASC,EAAeC,EAAU9uH,EAAMhpB,GAC7C,MAAMr1B,EAAQmtK,EAASntK,MAAMq+C,GAC7B,OAAOr+C,GAASA,EAAM/c,QAAUoyC,GAAOrwB,SAAShF,EAAMq1B,GAAM,IAMvD,SAAS+3I,EAAwBp1L,EAAQq1L,EAAiBltK,GAC/D,IAAKnoB,EAAOwwC,kBACV,OAEF,MAAMrzB,EAAQnd,EAAOwwC,kBAAkBxuC,UACjCszL,EAAyBn4K,EAAM+0B,iBACrC/0B,EAAM+0B,iBAAmB,SAASqjJ,EAAiB/9B,GACjD,GAAI+9B,IAAoBF,EACtB,OAAOC,EAAuBniK,MAAMze,KAAMmB,WAE5C,MAAM8gJ,EAAmB5oJ,IACvB,MAAMynL,EAAgBrtK,EAAQpa,GAC1BynL,IACEh+B,EAAGi+B,YACLj+B,EAAGi+B,YAAYD,GAEfh+B,EAAGg+B,KAST,OALA9gL,KAAKghL,UAAYhhL,KAAKghL,WAAa,GAC9BhhL,KAAKghL,UAAUL,KAClB3gL,KAAKghL,UAAUL,GAAmB,IAAI/8J,KAExC5jB,KAAKghL,UAAUL,GAAiBl7J,IAAIq9H,EAAIb,GACjC2+B,EAAuBniK,MAAMze,KAAM,CAAC6gL,EACzC5+B,KAGJ,MAAMg/B,EAA4Bx4K,EAAMgrC,oBACxChrC,EAAMgrC,oBAAsB,SAASotI,EAAiB/9B,GACpD,GAAI+9B,IAAoBF,IAAoB3gL,KAAKghL,YACzChhL,KAAKghL,UAAUL,GACrB,OAAOM,EAA0BxiK,MAAMze,KAAMmB,WAE/C,IAAKnB,KAAKghL,UAAUL,GAAiBp4J,IAAIu6H,GACvC,OAAOm+B,EAA0BxiK,MAAMze,KAAMmB,WAE/C,MAAM+/K,EAAclhL,KAAKghL,UAAUL,GAAiBp0L,IAAIu2J,GAQxD,OAPA9iJ,KAAKghL,UAAUL,GAAiBz4J,OAAO46H,GACM,IAAzC9iJ,KAAKghL,UAAUL,GAAiBj5J,aAC3B1nB,KAAKghL,UAAUL,GAEmB,IAAvCv0L,OAAOmZ,KAAKvF,KAAKghL,WAAWzqL,eACvByJ,KAAKghL,UAEPC,EAA0BxiK,MAAMze,KAAM,CAAC6gL,EAC5CK,KAGJ90L,OAAOC,eAAeoc,EAAO,KAAOk4K,EAAiB,CACnD,MACE,OAAO3gL,KAAK,MAAQ2gL,IAEtB,IAAI79B,GACE9iJ,KAAK,MAAQ2gL,KACf3gL,KAAKyzC,oBAAoBktI,EACrB3gL,KAAK,MAAQ2gL,WACV3gL,KAAK,MAAQ2gL,IAElB79B,GACF9iJ,KAAKw9B,iBAAiBmjJ,EAClB3gL,KAAK,MAAQ2gL,GAAmB79B,IAGxCx2J,YAAY,EACZ05E,cAAc,IAIX,SAASm7G,EAAWtyH,GACzB,MAAoB,kBAATA,EACF,IAAIx3D,MAAM,yBAA2Bw3D,EACxC,4BAENyxH,EAAezxH,EACR,EAAS,8BACZ,8BAOC,SAASuyH,EAAgBvyH,GAC9B,MAAoB,kBAATA,EACF,IAAIx3D,MAAM,yBAA2Bw3D,EACxC,4BAEN0xH,GAAwB1xH,EACjB,oCAAsCA,EAAO,WAAa,YAG5D,SAASjqD,IACd,GAAsB,iBAAXtZ,OAAqB,CAC9B,GAAIg1L,EACF,OAEqB,oBAAZv7K,SAAkD,mBAAhBA,QAAQH,KACnDG,QAAQH,IAAI6Z,MAAM1Z,QAAS5D,YAQ1B,SAASkgL,EAAWC,EAAWC,GAC/BhB,GAGLx7K,QAAQI,KAAKm8K,EAAY,8BAAgCC,EACrD,aAwDN,SAASz3H,EAAS+O,GAChB,MAA+C,oBAAxCzsE,OAAOkB,UAAUoJ,SAAS7K,KAAKgtE,GAQjC,SAAS2oH,EAAc7nL,GAC5B,OAAKmwD,EAASnwD,GAIPvN,OAAOmZ,KAAK5L,GAAM+L,QAAO,SAASyhE,EAAal6E,GACpD,MAAMgO,EAAQ6uD,EAASnwD,EAAK1M,IACtBN,EAAQsO,EAAQumL,EAAc7nL,EAAK1M,IAAQ0M,EAAK1M,GAChDy0B,EAAgBzmB,IAAU7O,OAAOmZ,KAAK5Y,GAAO4J,OACnD,YAAcgK,IAAV5T,GAAuB+0B,EAClBylD,EAEF/6E,OAAO+zC,OAAOgnC,EAAa,CAAC,CAACl6E,GAAMN,MACzC,IAXMgN,EAgCJ,SAAS8nL,EAAYh8K,EAAQk7B,EAAO+gJ,GACzC,MAAMC,EAAkBD,EAAW,eAAiB,cAC9CE,EAAiB,IAAIh+J,IAC3B,GAAc,OAAV+c,EACF,OAAOihJ,EAET,MAAMC,EAAa,GAcnB,OAbAp8K,EAAO2J,QAAQziB,IACM,UAAfA,EAAMsa,MACNta,EAAMsgJ,kBAAoBtsG,EAAMz5B,IAClC26K,EAAW3+K,KAAKvW,KAGpBk1L,EAAWzyK,QAAQ0yK,IACjBr8K,EAAO2J,QAAQ4b,IACTA,EAAM/jB,OAAS06K,GAAmB32J,EAAMw9E,UAAYs5E,EAAU56K,IAhCjE,SAAS66K,EAAU/2J,EAAOwqC,EAAMwsH,GAChCxsH,IAAQwsH,EAAUz5J,IAAIitC,EAAKtuD,MAGhC86K,EAAUv8J,IAAI+vC,EAAKtuD,GAAIsuD,GACvBppE,OAAOmZ,KAAKiwD,GAAMpmD,QAAQnjB,IACpBA,EAAK+tD,SAAS,MAChB+nI,EAAU/2J,EAAOA,EAAMz+B,IAAIipE,EAAKvpE,IAAQ+1L,GAC/B/1L,EAAK+tD,SAAS,QACvBwb,EAAKvpE,GAAMmjB,QAAQlI,IACjB66K,EAAU/2J,EAAOA,EAAMz+B,IAAI2a,GAAK86K,QAuBhCD,CAAUt8K,EAAQulB,EAAO42J,OAIxBA,EC1PT,MAAM,EAAU,EAET,SAASK,EAAiB32L,EAAQ42L,GACvC,MAAM5kJ,EAAYhyC,GAAUA,EAAOgyC,UAEnC,IAAKA,EAAUC,aACb,OAGF,MAAM4kJ,EAAuB,SAASp2L,GACpC,GAAiB,iBAANA,GAAkBA,EAAEmnD,WAAannD,EAAE+wC,SAC5C,OAAO/wC,EAET,MAAMq2L,EAAK,GA4CX,OA3CAh2L,OAAOmZ,KAAKxZ,GAAGqjB,QAAQniB,IACrB,GAAY,YAARA,GAA6B,aAARA,GAA8B,gBAARA,EAC7C,OAEF,MAAMT,EAAuB,iBAAXT,EAAEkB,GAAqBlB,EAAEkB,GAAO,CAAC2rC,MAAO7sC,EAAEkB,SAC5CsT,IAAZ/T,EAAE61L,OAA0C,iBAAZ71L,EAAE61L,QACpC71L,EAAEiuB,IAAMjuB,EAAEqsC,IAAMrsC,EAAE61L,OAEpB,MAAMC,EAAW,SAAS71G,EAAQxgF,GAChC,OAAIwgF,EACKA,EAASxgF,EAAK0M,OAAO,GAAGw0E,cAAgBlhF,EAAK6zB,MAAM,GAE3C,aAAT7zB,EAAuB,WAAaA,GAE9C,QAAgBsU,IAAZ/T,EAAEosC,MAAqB,CACzBwpJ,EAAGtlJ,SAAWslJ,EAAGtlJ,UAAY,GAC7B,IAAIylJ,EAAK,GACc,iBAAZ/1L,EAAEosC,OACX2pJ,EAAGD,EAAS,MAAOr1L,IAAQT,EAAEosC,MAC7BwpJ,EAAGtlJ,SAAS55B,KAAKq/K,GACjBA,EAAK,GACLA,EAAGD,EAAS,MAAOr1L,IAAQT,EAAEosC,MAC7BwpJ,EAAGtlJ,SAAS55B,KAAKq/K,KAEjBA,EAAGD,EAAS,GAAIr1L,IAAQT,EAAEosC,MAC1BwpJ,EAAGtlJ,SAAS55B,KAAKq/K,SAGLhiL,IAAZ/T,EAAE61L,OAA0C,iBAAZ71L,EAAE61L,OACpCD,EAAGlvI,UAAYkvI,EAAGlvI,WAAa,GAC/BkvI,EAAGlvI,UAAUovI,EAAS,GAAIr1L,IAAQT,EAAE61L,OAEpC,CAAC,MAAO,OAAOjzK,QAAQozK,SACNjiL,IAAX/T,EAAEg2L,KACJJ,EAAGlvI,UAAYkvI,EAAGlvI,WAAa,GAC/BkvI,EAAGlvI,UAAUovI,EAASE,EAAKv1L,IAAQT,EAAEg2L,QAKzCz2L,EAAE02L,WACJL,EAAGtlJ,UAAYslJ,EAAGtlJ,UAAY,IAAI9iC,OAAOjO,EAAE02L,WAEtCL,GAGHM,EAAmB,SAASn4J,EAAa3qB,GAC7C,GAAIsiL,EAAej+G,SAAW,GAC5B,OAAOrkE,EAAK2qB,GAGd,IADAA,EAAc3d,KAAKsL,MAAMtL,KAAKwL,UAAUmS,MACQ,iBAAtBA,EAAY6P,MAAoB,CACxD,MAAMuoJ,EAAQ,SAAS5sL,EAAK2B,EAAGC,GACzBD,KAAK3B,KAAS4B,KAAK5B,KACrBA,EAAI4B,GAAK5B,EAAI2B,UACN3B,EAAI2B,KAIfirL,GADAp4J,EAAc3d,KAAKsL,MAAMtL,KAAKwL,UAAUmS,KACtB6P,MAAO,kBAAmB,uBAC5CuoJ,EAAMp4J,EAAY6P,MAAO,mBAAoB,wBAC7C7P,EAAY6P,MAAQ+nJ,EAAqB53J,EAAY6P,OAEvD,GAAI7P,GAA4C,iBAAtBA,EAAYmO,MAAoB,CAExD,IAAIkqJ,EAAOr4J,EAAYmO,MAAMkH,WAC7BgjJ,EAAOA,IAA0B,iBAATA,EAAqBA,EAAO,CAAChqJ,MAAOgqJ,IAC5D,MAAMC,EAA6BX,EAAej+G,QAAU,GAE5D,GAAK2+G,IAAwB,SAAfA,EAAKP,OAAmC,gBAAfO,EAAKP,OACf,SAAfO,EAAKhqJ,OAAmC,gBAAfgqJ,EAAKhqJ,UACtC0E,EAAUC,aAAaulJ,0BACvBxlJ,EAAUC,aAAaulJ,0BAA0BljJ,YAChDijJ,GAA6B,CAElC,IAAIxvK,EAMJ,UAPOkX,EAAYmO,MAAMkH,WAEN,gBAAfgjJ,EAAKP,OAA0C,gBAAfO,EAAKhqJ,MACvCvlB,EAAU,CAAC,OAAQ,QACK,SAAfuvK,EAAKP,OAAmC,SAAfO,EAAKhqJ,QACvCvlB,EAAU,CAAC,UAETA,EAEF,OAAOiqB,EAAUC,aAAaJ,mBAC7BO,KAAKC,IAEJ,IAAIolJ,GADJplJ,EAAUA,EAAQ3I,OAAOhpC,GAAgB,eAAXA,EAAEyuC,OACdnF,KAAKtpC,GAAKqnB,EAAQ4uB,KAAK3uB,GACvCtnB,EAAEgvC,MAAMr4B,cAAcm1B,SAASxkB,KAUjC,OATKyvK,GAAOplJ,EAAQpnC,QAAU8c,EAAQykB,SAAS,UAC7CirJ,EAAMplJ,EAAQA,EAAQpnC,OAAS,IAE7BwsL,IACFx4J,EAAYmO,MAAMoC,SAAW8nJ,EAAKP,MAAQ,CAACA,MAAOU,EAAIjoJ,UACZ,CAAClC,MAAOmqJ,EAAIjoJ,WAExDvQ,EAAYmO,MAAQypJ,EAAqB53J,EAAYmO,OACrD,EAAQ,WAAa9rB,KAAKwL,UAAUmS,IAC7B3qB,EAAK2qB,KAIlBA,EAAYmO,MAAQypJ,EAAqB53J,EAAYmO,OAGvD,OADA,EAAQ,WAAa9rB,KAAKwL,UAAUmS,IAC7B3qB,EAAK2qB,IAGRy4J,EAAa,SAAS3pL,GAC1B,OAAI6oL,EAAej+G,SAAW,GACrB5qE,EAEF,CACLpN,KAAM,CACJg3L,sBAAuB,kBACvBC,yBAA0B,kBAC1BC,kBAAmB,kBACnBC,qBAAsB,gBACtBC,4BAA6B,uBAC7BC,gBAAiB,mBACjBC,+BAAgC,kBAChCC,wBAAyB,kBACzBC,gBAAiB,aACjBC,mBAAoB,aACpBC,mBAAoB,cACpBtqL,EAAEpN,OAASoN,EAAEpN,KACfwY,QAASpL,EAAEoL,QACXuuC,WAAY35C,EAAE25C,YAAc35C,EAAEixB,eAC9B,WACE,OAAOtqB,KAAK/T,MAAQ+T,KAAKyE,SAAW,MAAQzE,KAAKyE,WAmBvD,GALA64B,EAAUc,aATY,SAAS7T,EAAahX,EAAWokI,GACrD+qC,EAAiBn4J,EAAax+B,IAC5BuxC,EAAUsmJ,mBAAmB73L,EAAGwnB,EAAWla,IACrCs+I,GACFA,EAAQqrC,EAAW3pL,SAKYnM,KAAKowC,GAKxCA,EAAUC,aAAaa,aAAc,CACvC,MAAMylJ,EAAmBvmJ,EAAUC,aAAaa,aAC5ClxC,KAAKowC,EAAUC,cACnBD,EAAUC,aAAaa,aAAe,SAASxV,GAC7C,OAAO85J,EAAiB95J,EAAI78B,GAAK83L,EAAiB93L,GAAG2xC,KAAK9X,IACxD,GAAI75B,EAAEquC,QAAUxU,EAAOoU,iBAAiBzjC,QACpCxK,EAAE2sC,QAAU9S,EAAOsU,iBAAiB3jC,OAItC,MAHAqvB,EAAO+b,YAAYvyB,QAAQuxB,IACzBA,EAAMvY,SAEF,IAAI07J,aAAa,GAAI,iBAE7B,OAAOl+J,GACNvsB,GAAKykC,QAAQE,OAAOglJ,EAAW3pL,QC/KjC,SAAS0qL,EAAoBz4L,EAAQ04L,GACtC14L,EAAOgyC,UAAUC,cACnB,oBAAqBjyC,EAAOgyC,UAAUC,cAGlCjyC,EAAOgyC,UAAsB,eAKR,mBAAhB0mJ,EAKX14L,EAAOgyC,UAAUC,aAAa+tC,gBAC5B,SAAyB/gD,GACvB,OAAOy5J,EAAYz5J,GAChBmT,KAAK6C,IACJ,MAAM0jJ,EAAiB15J,EAAYmO,OAASnO,EAAYmO,MAAMI,MACxDorJ,EAAkB35J,EAAYmO,OAClCnO,EAAYmO,MAAMC,OACdwrJ,EAAqB55J,EAAYmO,OACrCnO,EAAYmO,MAAM6yC,UAcpB,OAbAhhD,EAAYmO,MAAQ,CAClBwa,UAAW,CACT63B,kBAAmB,UACnBC,oBAAqBzqC,EACrB2qC,aAAci5G,GAAsB,IAGpCF,IACF15J,EAAYmO,MAAMwa,UAAUi4B,SAAW84G,GAErCC,IACF35J,EAAYmO,MAAMwa,UAAUm4B,UAAY64G,GAEnC54L,EAAOgyC,UAAUC,aAAaa,aAAa7T,MA1BxDxlB,QAAQC,MAAM,gECNX,SAASo/K,EAAgB94L,GAC9BA,EAAOo1C,YAAcp1C,EAAOo1C,aAAep1C,EAAO+4L,kBAG7C,SAASC,EAAYh5L,GAC1B,GAAsB,iBAAXA,GAAuBA,EAAOwwC,qBAAuB,YAC5DxwC,EAAOwwC,kBAAkBxuC,WAAY,CACvClB,OAAOC,eAAef,EAAOwwC,kBAAkBxuC,UAAW,UAAW,CACnE,MACE,OAAO0S,KAAKukL,UAEd,IAAIzqI,GACE95C,KAAKukL,UACPvkL,KAAKyzC,oBAAoB,QAASzzC,KAAKukL,UAEzCvkL,KAAKw9B,iBAAiB,QAASx9B,KAAKukL,SAAWzqI,IAEjDxtD,YAAY,EACZ05E,cAAc,IAEhB,MAAMw+G,EACFl5L,EAAOwwC,kBAAkBxuC,UAAUykG,qBACvCzmG,EAAOwwC,kBAAkBxuC,UAAUykG,qBACjC,WAuCE,OAtCK/xF,KAAKykL,eACRzkL,KAAKykL,aAAgBprL,IAGnBA,EAAEusB,OAAO4X,iBAAiB,WAAYknJ,IACpC,IAAI90I,EAEFA,EADEtkD,EAAOwwC,kBAAkBxuC,UAAUqhK,aAC1B3uJ,KAAK2uJ,eACbr5H,KAAK9oC,GAAKA,EAAEm0C,OAASn0C,EAAEm0C,MAAMz5B,KAAOw9K,EAAG/jJ,MAAMz5B,IAErC,CAACy5B,MAAO+jJ,EAAG/jJ,OAGxB,MAAM9U,EAAQ,IAAI84J,MAAM,SACxB94J,EAAM8U,MAAQ+jJ,EAAG/jJ,MACjB9U,EAAM+jB,SAAWA,EACjB/jB,EAAMwsE,YAAc,CAACzoD,YACrB/jB,EAAMkiB,QAAU,CAAC10C,EAAEusB,QACnB5lB,KAAK4kL,cAAc/4J,KAErBxyB,EAAEusB,OAAO+b,YAAYvyB,QAAQuxB,IAC3B,IAAIiP,EAEFA,EADEtkD,EAAOwwC,kBAAkBxuC,UAAUqhK,aAC1B3uJ,KAAK2uJ,eACbr5H,KAAK9oC,GAAKA,EAAEm0C,OAASn0C,EAAEm0C,MAAMz5B,KAAOy5B,EAAMz5B,IAElC,CAACy5B,SAEd,MAAM9U,EAAQ,IAAI84J,MAAM,SACxB94J,EAAM8U,MAAQA,EACd9U,EAAM+jB,SAAWA,EACjB/jB,EAAMwsE,YAAc,CAACzoD,YACrB/jB,EAAMkiB,QAAU,CAAC10C,EAAEusB,QACnB5lB,KAAK4kL,cAAc/4J,MAGvB7rB,KAAKw9B,iBAAiB,YAAax9B,KAAKykL,eAEnCD,EAAyB/lK,MAAMze,KAAMmB,iBAMhD,EAA8B7V,EAAQ,QAAS+N,IACxCA,EAAEg/F,aACLjsG,OAAOC,eAAegN,EAAG,cACvB,CAAC1M,MAAO,CAACijD,SAAUv2C,EAAEu2C,YAElBv2C,IAKN,SAASwrL,EAAuBv5L,GAErC,GAAsB,iBAAXA,GAAuBA,EAAOwwC,qBACnC,eAAgBxwC,EAAOwwC,kBAAkBxuC,YAC3C,qBAAsBhC,EAAOwwC,kBAAkBxuC,UAAW,CAC5D,MAAMw3L,EAAqB,SAASzoH,EAAI17B,GACtC,MAAO,CACLA,QACA,WAQE,YAPmBpgC,IAAfP,KAAK+kL,QACY,UAAfpkJ,EAAMlG,KACRz6B,KAAK+kL,MAAQ1oH,EAAGg6F,iBAAiB11H,GAEjC3gC,KAAK+kL,MAAQ,MAGV/kL,KAAK+kL,OAEdC,IAAK3oH,IAKT,IAAK/wE,EAAOwwC,kBAAkBxuC,UAAUkmK,WAAY,CAClDloK,EAAOwwC,kBAAkBxuC,UAAUkmK,WAAa,WAE9C,OADAxzJ,KAAKilL,SAAWjlL,KAAKilL,UAAY,GAC1BjlL,KAAKilL,SAASnlK,SAEvB,MAAMolK,EAAe55L,EAAOwwC,kBAAkBxuC,UAAU6/F,SACxD7hG,EAAOwwC,kBAAkBxuC,UAAU6/F,SACjC,SAAkBxsD,EAAO/a,GACvB,IAAI+/D,EAASu/F,EAAazmK,MAAMze,KAAMmB,WAKtC,OAJKwkF,IACHA,EAASm/F,EAAmB9kL,KAAM2gC,GAClC3gC,KAAKilL,SAAS/hL,KAAKyiF,IAEdA,GAGX,MAAMw/F,EAAkB75L,EAAOwwC,kBAAkBxuC,UAAUmrH,YAC3DntH,EAAOwwC,kBAAkBxuC,UAAUmrH,YACjC,SAAqB9yB,GACnBw/F,EAAgB1mK,MAAMze,KAAMmB,WAC5B,MAAM8qC,EAAMjsC,KAAKilL,SAASrhL,QAAQ+hF,IACrB,IAAT15C,GACFjsC,KAAKilL,SAAShhL,OAAOgoC,EAAK,IAIlC,MAAMm5I,EAAgB95L,EAAOwwC,kBAAkBxuC,UAAU2lK,UACzD3nK,EAAOwwC,kBAAkBxuC,UAAU2lK,UAAY,SAAmBrtI,GAChE5lB,KAAKilL,SAAWjlL,KAAKilL,UAAY,GACjCG,EAAc3mK,MAAMze,KAAM,CAAC4lB,IAC3BA,EAAO+b,YAAYvyB,QAAQuxB,IACzB3gC,KAAKilL,SAAS/hL,KAAK4hL,EAAmB9kL,KAAM2gC,OAIhD,MAAM0kJ,EAAmB/5L,EAAOwwC,kBAAkBxuC,UAAU6lK,aAC5D7nK,EAAOwwC,kBAAkBxuC,UAAU6lK,aACjC,SAAsBvtI,GACpB5lB,KAAKilL,SAAWjlL,KAAKilL,UAAY,GACjCI,EAAiB5mK,MAAMze,KAAM,CAAC4lB,IAE9BA,EAAO+b,YAAYvyB,QAAQuxB,IACzB,MAAMglD,EAAS3lF,KAAKilL,SAAS3vJ,KAAK7nC,GAAKA,EAAEkzC,QAAUA,GAC/CglD,GACF3lF,KAAKilL,SAAShhL,OAAOjE,KAAKilL,SAASrhL,QAAQ+hF,GAAS,WAIvD,GAAsB,iBAAXr6F,GAAuBA,EAAOwwC,mBACrC,eAAgBxwC,EAAOwwC,kBAAkBxuC,WACzC,qBAAsBhC,EAAOwwC,kBAAkBxuC,WAC/ChC,EAAOouI,gBACL,SAAUpuI,EAAOouI,aAAapsI,WAAY,CACrD,MAAMg4L,EAAiBh6L,EAAOwwC,kBAAkBxuC,UAAUkmK,WAC1DloK,EAAOwwC,kBAAkBxuC,UAAUkmK,WAAa,WAC9C,MAAM9lH,EAAU43I,EAAe7mK,MAAMze,KAAM,IAE3C,OADA0tC,EAAQt+B,QAAQu2E,GAAUA,EAAOq/F,IAAMhlL,MAChC0tC,GAGTthD,OAAOC,eAAef,EAAOouI,aAAapsI,UAAW,OAAQ,CAC3D,MAQE,YAPmBiT,IAAfP,KAAK+kL,QACiB,UAApB/kL,KAAK2gC,MAAMlG,KACbz6B,KAAK+kL,MAAQ/kL,KAAKglL,IAAI3uB,iBAAiBr2J,KAAK2gC,OAE5C3gC,KAAK+kL,MAAQ,MAGV/kL,KAAK+kL,UAMb,SAASQ,EAAaj6L,GAC3B,IAAKA,EAAOwwC,kBACV,OAGF,MAAM0pJ,EAAel6L,EAAOwwC,kBAAkBxuC,UAAU+mI,SACxD/oI,EAAOwwC,kBAAkBxuC,UAAU+mI,SAAW,WAC5C,MAAO/0G,EAAUmmK,EAAQC,GAASvkL,UAIlC,GAAIA,UAAU5K,OAAS,GAAyB,mBAAb+oB,EACjC,OAAOkmK,EAAa/mK,MAAMze,KAAMmB,WAKlC,GAA4B,IAAxBqkL,EAAajvL,SAAsC,IAArB4K,UAAU5K,QACpB,mBAAb+oB,GACT,OAAOkmK,EAAa/mK,MAAMze,KAAM,IAGlC,MAAM2lL,EAAkB,SAAShzK,GAC/B,MAAMizK,EAAiB,GAiBvB,OAhBgBjzK,EAASlN,SACjB2J,QAAQ6sD,IACd,MAAM4pH,EAAgB,CACpB3+K,GAAI+0D,EAAO/0D,GACX4iG,UAAW7tC,EAAO6tC,UAClB7iG,KAAM,CACJ6+K,eAAgB,kBAChBC,gBAAiB,oBACjB9pH,EAAOh1D,OAASg1D,EAAOh1D,MAE3Bg1D,EAAO32D,QAAQ8J,QAAQnjB,IACrB45L,EAAc55L,GAAQgwE,EAAO+xF,KAAK/hK,KAEpC25L,EAAeC,EAAc3+K,IAAM2+K,IAG9BD,GAIHI,EAAe,SAASh7J,GAC5B,OAAO,IAAIpH,IAAIx3B,OAAOmZ,KAAKylB,GAAOxlB,IAAIvY,GAAO,CAACA,EAAK+9B,EAAM/9B,OAG3D,GAAIkU,UAAU5K,QAAU,EAAG,CACzB,MAAM0vL,EAA0B,SAAStzK,GACvC8yK,EAAOO,EAAaL,EAAgBhzK,MAGtC,OAAO6yK,EAAa/mK,MAAMze,KAAM,CAACimL,EAC/B3mK,IAIJ,OAAO,IAAIwe,QAAQ,CAACC,EAASC,KAC3BwnJ,EAAa/mK,MAAMze,KAAM,CACvB,SAAS2S,GACPorB,EAAQioJ,EAAaL,EAAgBhzK,MACpCqrB,MACJN,KAAK+nJ,EAAQC,IAIb,SAASQ,EAA2B56L,GACzC,KAAwB,iBAAXA,GAAuBA,EAAOwwC,mBACvCxwC,EAAOouI,cAAgBpuI,EAAO6tI,gBAChC,OAIF,KAAM,aAAc7tI,EAAOouI,aAAapsI,WAAY,CAClD,MAAMg4L,EAAiBh6L,EAAOwwC,kBAAkBxuC,UAAUkmK,WACtD8xB,IACFh6L,EAAOwwC,kBAAkBxuC,UAAUkmK,WAAa,WAC9C,MAAM9lH,EAAU43I,EAAe7mK,MAAMze,KAAM,IAE3C,OADA0tC,EAAQt+B,QAAQu2E,GAAUA,EAAOq/F,IAAMhlL,MAChC0tC,IAIX,MAAMw3I,EAAe55L,EAAOwwC,kBAAkBxuC,UAAU6/F,SACpD+3F,IACF55L,EAAOwwC,kBAAkBxuC,UAAU6/F,SAAW,WAC5C,MAAMxH,EAASu/F,EAAazmK,MAAMze,KAAMmB,WAExC,OADAwkF,EAAOq/F,IAAMhlL,KACN2lF,IAGXr6F,EAAOouI,aAAapsI,UAAU+mI,SAAW,WACvC,MAAM1uC,EAAS3lF,KACf,OAAOA,KAAKglL,IAAI3wD,WAAW32F,KAAKj4B,GAK9B,EAAkBA,EAAQkgF,EAAOhlD,OAAO,KAK9C,KAAM,aAAcr1C,EAAO6tI,eAAe7rI,WAAY,CACpD,MAAM64L,EAAmB76L,EAAOwwC,kBAAkBxuC,UAAUqhK,aACxDw3B,IACF76L,EAAOwwC,kBAAkBxuC,UAAUqhK,aACjC,WACE,MAAMF,EAAY03B,EAAiB1nK,MAAMze,KAAM,IAE/C,OADAyuJ,EAAUr/I,QAAQwgC,GAAYA,EAASo1I,IAAMhlL,MACtCyuJ,IAGb,EAA8BnjK,EAAQ,QAAS+N,IAC7CA,EAAEu2C,SAASo1I,IAAM3rL,EAAE+sL,WACZ/sL,IAET/N,EAAO6tI,eAAe7rI,UAAU+mI,SAAW,WACzC,MAAMzkF,EAAW5vC,KACjB,OAAOA,KAAKglL,IAAI3wD,WAAW32F,KAAKj4B,GAC9B,EAAkBA,EAAQmqC,EAASjP,OAAO,KAIhD,KAAM,aAAcr1C,EAAOouI,aAAapsI,cACpC,aAAchC,EAAO6tI,eAAe7rI,WACtC,OAIF,MAAMk4L,EAAel6L,EAAOwwC,kBAAkBxuC,UAAU+mI,SACxD/oI,EAAOwwC,kBAAkBxuC,UAAU+mI,SAAW,WAC5C,GAAIlzH,UAAU5K,OAAS,GACnB4K,UAAU,aAAc7V,EAAO22F,iBAAkB,CACnD,MAAMthD,EAAQx/B,UAAU,GACxB,IAAIwkF,EACA/1C,EACAz/B,EAoBJ,OAnBAnQ,KAAKwzJ,aAAapkJ,QAAQ3hB,IACpBA,EAAEkzC,QAAUA,IACVglD,EACFx1E,GAAM,EAENw1E,EAASl4F,KAIfuS,KAAK2uJ,eAAev/I,QAAQ5iB,IACtBA,EAAEm0C,QAAUA,IACViP,EACFz/B,GAAM,EAENy/B,EAAWpjD,GAGRA,EAAEm0C,QAAUA,IAEjBxwB,GAAQw1E,GAAU/1C,EACb9R,QAAQE,OAAO,IAAI8lJ,aACxB,4DACA,uBACOn+F,EACFA,EAAO0uC,WACLzkF,EACFA,EAASykF,WAEXv2F,QAAQE,OAAO,IAAI8lJ,aACxB,gDACA,uBAEJ,OAAO0B,EAAa/mK,MAAMze,KAAMmB,YAI7B,SAASklL,EAAkC/6L,GAIhDA,EAAOwwC,kBAAkBxuC,UAAUg5L,gBACjC,WAEE,OADAtmL,KAAKumL,qBAAuBvmL,KAAKumL,sBAAwB,GAClDn6L,OAAOmZ,KAAKvF,KAAKumL,sBACrB/gL,IAAIsjC,GAAY9oC,KAAKumL,qBAAqBz9I,GAAU,KAG3D,MAAMo8I,EAAe55L,EAAOwwC,kBAAkBxuC,UAAU6/F,SACxD7hG,EAAOwwC,kBAAkBxuC,UAAU6/F,SACjC,SAAkBxsD,EAAO/a,GACvB,IAAKA,EACH,OAAOs/J,EAAazmK,MAAMze,KAAMmB,WAElCnB,KAAKumL,qBAAuBvmL,KAAKumL,sBAAwB,GAEzD,MAAM5gG,EAASu/F,EAAazmK,MAAMze,KAAMmB,WAMxC,OALKnB,KAAKumL,qBAAqB3gK,EAAO1e,KAE+B,IAA1DlH,KAAKumL,qBAAqB3gK,EAAO1e,IAAItD,QAAQ+hF,IACtD3lF,KAAKumL,qBAAqB3gK,EAAO1e,IAAIhE,KAAKyiF,GAF1C3lF,KAAKumL,qBAAqB3gK,EAAO1e,IAAM,CAAC0e,EAAQ+/D,GAI3CA,GAGX,MAAMy/F,EAAgB95L,EAAOwwC,kBAAkBxuC,UAAU2lK,UACzD3nK,EAAOwwC,kBAAkBxuC,UAAU2lK,UAAY,SAAmBrtI,GAChE5lB,KAAKumL,qBAAuBvmL,KAAKumL,sBAAwB,GAEzD3gK,EAAO+b,YAAYvyB,QAAQuxB,IAEzB,GADsB3gC,KAAKwzJ,aAAal+H,KAAK7nC,GAAKA,EAAEkzC,QAAUA,GAE5D,MAAM,IAAImjJ,aAAa,wBACnB,wBAGR,MAAM0C,EAAkBxmL,KAAKwzJ,aAC7B4xB,EAAc3mK,MAAMze,KAAMmB,WAC1B,MAAMslL,EAAazmL,KAAKwzJ,aACrBx+H,OAAO0xJ,IAAqD,IAAxCF,EAAgB5iL,QAAQ8iL,IAC/C1mL,KAAKumL,qBAAqB3gK,EAAO1e,IAAM,CAAC0e,GAAQ5rB,OAAOysL,IAGzD,MAAMpB,EAAmB/5L,EAAOwwC,kBAAkBxuC,UAAU6lK,aAC5D7nK,EAAOwwC,kBAAkBxuC,UAAU6lK,aACjC,SAAsBvtI,GAGpB,OAFA5lB,KAAKumL,qBAAuBvmL,KAAKumL,sBAAwB,UAClDvmL,KAAKumL,qBAAqB3gK,EAAO1e,IACjCm+K,EAAiB5mK,MAAMze,KAAMmB,YAGxC,MAAMgkL,EAAkB75L,EAAOwwC,kBAAkBxuC,UAAUmrH,YAC3DntH,EAAOwwC,kBAAkBxuC,UAAUmrH,YACjC,SAAqB9yB,GAanB,OAZA3lF,KAAKumL,qBAAuBvmL,KAAKumL,sBAAwB,GACrD5gG,GACFv5F,OAAOmZ,KAAKvF,KAAKumL,sBAAsBn3K,QAAQ05B,IAC7C,MAAMmD,EAAMjsC,KAAKumL,qBAAqBz9I,GAAUllC,QAAQ+hF,IAC3C,IAAT15C,GACFjsC,KAAKumL,qBAAqBz9I,GAAU7kC,OAAOgoC,EAAK,GAEC,IAA/CjsC,KAAKumL,qBAAqBz9I,GAAUvyC,eAC/ByJ,KAAKumL,qBAAqBz9I,KAIhCq8I,EAAgB1mK,MAAMze,KAAMmB,YAIlC,SAASwlL,EAAwBr7L,EAAQ42L,GAC9C,IAAK52L,EAAOwwC,kBACV,OAGF,GAAIxwC,EAAOwwC,kBAAkBxuC,UAAU6/F,UACnC+0F,EAAej+G,SAAW,GAC5B,OAAOoiH,EAAkC/6L,GAK3C,MAAMs7L,EAAsBt7L,EAAOwwC,kBAAkBxuC,UAChDg5L,gBACLh7L,EAAOwwC,kBAAkBxuC,UAAUg5L,gBACjC,WACE,MAAMO,EAAgBD,EAAoBnoK,MAAMze,MAEhD,OADAA,KAAK8mL,gBAAkB9mL,KAAK8mL,iBAAmB,GACxCD,EAAcrhL,IAAIogB,GAAU5lB,KAAK8mL,gBAAgBlhK,EAAO1e,MAGnE,MAAMk+K,EAAgB95L,EAAOwwC,kBAAkBxuC,UAAU2lK,UACzD3nK,EAAOwwC,kBAAkBxuC,UAAU2lK,UAAY,SAAmBrtI,GAahE,GAZA5lB,KAAK+mL,SAAW/mL,KAAK+mL,UAAY,GACjC/mL,KAAK8mL,gBAAkB9mL,KAAK8mL,iBAAmB,GAE/ClhK,EAAO+b,YAAYvyB,QAAQuxB,IAEzB,GADsB3gC,KAAKwzJ,aAAal+H,KAAK7nC,GAAKA,EAAEkzC,QAAUA,GAE5D,MAAM,IAAImjJ,aAAa,wBACnB,yBAKH9jL,KAAK8mL,gBAAgBlhK,EAAO1e,IAAK,CACpC,MAAMukG,EAAY,IAAIngH,EAAOo1C,YAAY9a,EAAO+b,aAChD3hC,KAAK+mL,SAASnhK,EAAO1e,IAAMukG,EAC3BzrG,KAAK8mL,gBAAgBr7E,EAAUvkG,IAAM0e,EACrCA,EAAS6lF,EAEX25E,EAAc3mK,MAAMze,KAAM,CAAC4lB,KAG7B,MAAMy/J,EAAmB/5L,EAAOwwC,kBAAkBxuC,UAAU6lK,aA6D5D,SAAS6zB,EAAwB3qH,EAAI6T,GACnC,IAAI75C,EAAM65C,EAAY75C,IAOtB,OANAjqC,OAAOmZ,KAAK82D,EAAGyqH,iBAAmB,IAAI13K,QAAQ63K,IAC5C,MAAMC,EAAiB7qH,EAAGyqH,gBAAgBG,GACpCE,EAAiB9qH,EAAG0qH,SAASG,EAAehgL,IAClDmvB,EAAMA,EAAIz0B,QAAQ,IAAI0iD,OAAO6iI,EAAejgL,GAAI,KAC5CggL,EAAehgL,MAEd,IAAI0qF,sBAAsB,CAC/B3qF,KAAMipE,EAAYjpE,KAClBovB,QAGJ,SAAS+wJ,EAAwB/qH,EAAI6T,GACnC,IAAI75C,EAAM65C,EAAY75C,IAOtB,OANAjqC,OAAOmZ,KAAK82D,EAAGyqH,iBAAmB,IAAI13K,QAAQ63K,IAC5C,MAAMC,EAAiB7qH,EAAGyqH,gBAAgBG,GACpCE,EAAiB9qH,EAAG0qH,SAASG,EAAehgL,IAClDmvB,EAAMA,EAAIz0B,QAAQ,IAAI0iD,OAAO4iI,EAAehgL,GAAI,KAC5CigL,EAAejgL,MAEd,IAAI0qF,sBAAsB,CAC/B3qF,KAAMipE,EAAYjpE,KAClBovB,QAnFJ/qC,EAAOwwC,kBAAkBxuC,UAAU6lK,aACjC,SAAsBvtI,GACpB5lB,KAAK+mL,SAAW/mL,KAAK+mL,UAAY,GACjC/mL,KAAK8mL,gBAAkB9mL,KAAK8mL,iBAAmB,GAE/CzB,EAAiB5mK,MAAMze,KAAM,CAAEA,KAAK+mL,SAASnhK,EAAO1e,KAAO0e,WACpD5lB,KAAK8mL,gBAAiB9mL,KAAK+mL,SAASnhK,EAAO1e,IAC9ClH,KAAK+mL,SAASnhK,EAAO1e,IAAIA,GAAK0e,EAAO1e,WAClClH,KAAK+mL,SAASnhK,EAAO1e,KAGhC5b,EAAOwwC,kBAAkBxuC,UAAU6/F,SACjC,SAAkBxsD,EAAO/a,GACvB,GAA4B,WAAxB5lB,KAAKqpF,eACP,MAAM,IAAIy6F,aACR,sDACA,qBAEJ,MAAM/1I,EAAU,GAAGjuB,MAAMj0B,KAAKsV,UAAW,GACzC,GAAuB,IAAnB4sC,EAAQx3C,SACPw3C,EAAQ,GAAGpM,YAAYrM,KAAK1oC,GAAKA,IAAM+zC,GAG1C,MAAM,IAAImjJ,aACR,gHAEA,qBAGJ,MAAMuD,EAAgBrnL,KAAKwzJ,aAAal+H,KAAK7nC,GAAKA,EAAEkzC,QAAUA,GAC9D,GAAI0mJ,EACF,MAAM,IAAIvD,aAAa,wBACnB,sBAGN9jL,KAAK+mL,SAAW/mL,KAAK+mL,UAAY,GACjC/mL,KAAK8mL,gBAAkB9mL,KAAK8mL,iBAAmB,GAC/C,MAAMQ,EAAYtnL,KAAK+mL,SAASnhK,EAAO1e,IACvC,GAAIogL,EAKFA,EAAUn6F,SAASxsD,GAGnB7C,QAAQC,UAAUL,KAAK,KACrB19B,KAAK4kL,cAAc,IAAID,MAAM,4BAE1B,CACL,MAAMl5E,EAAY,IAAIngH,EAAOo1C,YAAY,CAACC,IAC1C3gC,KAAK+mL,SAASnhK,EAAO1e,IAAMukG,EAC3BzrG,KAAK8mL,gBAAgBr7E,EAAUvkG,IAAM0e,EACrC5lB,KAAKizJ,UAAUxnD,GAEjB,OAAOzrG,KAAKwzJ,aAAal+H,KAAK7nC,GAAKA,EAAEkzC,QAAUA,IA+BnD,CAAC,cAAe,gBAAgBvxB,SAAQ,SAASmsH,GAC/C,MAAMgsD,EAAej8L,EAAOwwC,kBAAkBxuC,UAAUiuI,GAClDisD,EAAY,CAAC,CAACjsD,KAClB,MAAM74F,EAAOvhC,UAGb,OAFqBA,UAAU5K,QACH,mBAAjB4K,UAAU,GAEZomL,EAAa9oK,MAAMze,KAAM,CAC7BkwE,IACC,MAAMv8C,EAAOqzJ,EAAwBhnL,KAAMkwE,GAC3CxtC,EAAK,GAAGjkB,MAAM,KAAM,CAACkV,KAEtBxjB,IACKuyB,EAAK,IACPA,EAAK,GAAGjkB,MAAM,KAAMtO,IAErBhP,UAAU,KAGVomL,EAAa9oK,MAAMze,KAAMmB,WAC/Bu8B,KAAKwyC,GAAe82G,EAAwBhnL,KAAMkwE,MAErD5kF,EAAOwwC,kBAAkBxuC,UAAUiuI,GAAUisD,EAAUjsD,MAGzD,MAAMksD,EACFn8L,EAAOwwC,kBAAkBxuC,UAAUggG,oBACvChiG,EAAOwwC,kBAAkBxuC,UAAUggG,oBACjC,WACE,OAAKnsF,UAAU5K,QAAW4K,UAAU,GAAG8F,MAGvC9F,UAAU,GAAKimL,EAAwBpnL,KAAMmB,UAAU,IAChDsmL,EAAwBhpK,MAAMze,KAAMmB,YAHlCsmL,EAAwBhpK,MAAMze,KAAMmB,YAQjD,MAAMumL,EAAuBt7L,OAAOu7L,yBAChCr8L,EAAOwwC,kBAAkBxuC,UAAW,oBACxClB,OAAOC,eAAef,EAAOwwC,kBAAkBxuC,UAC3C,mBAAoB,CAClB,MACE,MAAM4iF,EAAcw3G,EAAqBn7L,IAAIkyB,MAAMze,MACnD,MAAyB,KAArBkwE,EAAYjpE,KACPipE,EAEF82G,EAAwBhnL,KAAMkwE,MAI7C5kF,EAAOwwC,kBAAkBxuC,UAAUmrH,YACjC,SAAqB9yB,GACnB,GAA4B,WAAxB3lF,KAAKqpF,eACP,MAAM,IAAIy6F,aACR,sDACA,qBAIJ,IAAKn+F,EAAOq/F,IACV,MAAM,IAAIlB,aAAa,yFAC2B,aAGpD,KADgBn+F,EAAOq/F,MAAQhlL,MAE7B,MAAM,IAAI8jL,aAAa,6CACnB,sBAKN,IAAIl+J,EADJ5lB,KAAK+mL,SAAW/mL,KAAK+mL,UAAY,GAEjC36L,OAAOmZ,KAAKvF,KAAK+mL,UAAU33K,QAAQw4K,IAChB5nL,KAAK+mL,SAASa,GAAUjmJ,YACtCrM,KAAKqL,GAASglD,EAAOhlD,QAAUA,KAEhC/a,EAAS5lB,KAAK+mL,SAASa,MAIvBhiK,IACgC,IAA9BA,EAAO+b,YAAYprC,OAGrByJ,KAAKmzJ,aAAanzJ,KAAK8mL,gBAAgBlhK,EAAO1e,KAG9C0e,EAAO6yF,YAAY9yB,EAAOhlD,OAE5B3gC,KAAK4kL,cAAc,IAAID,MAAM,wBAK9B,SAASkD,EAAmBv8L,EAAQ42L,IACpC52L,EAAOwwC,mBAAqBxwC,EAAOw8L,0BAEtCx8L,EAAOwwC,kBAAoBxwC,EAAOw8L,yBAE/Bx8L,EAAOwwC,mBAKRomJ,EAAej+G,QAAU,IAC3B,CAAC,sBAAuB,uBAAwB,mBAC3C70D,SAAQ,SAASmsH,GAChB,MAAMgsD,EAAej8L,EAAOwwC,kBAAkBxuC,UAAUiuI,GAClDisD,EAAY,CAAC,CAACjsD,KAIlB,OAHAp6H,UAAU,GAAK,IAAiB,oBAAXo6H,EACjBjwI,EAAOygG,gBACPzgG,EAAOsmG,uBAAuBzwF,UAAU,IACrComL,EAAa9oK,MAAMze,KAAMmB,aAElC7V,EAAOwwC,kBAAkBxuC,UAAUiuI,GAAUisD,EAAUjsD,MAM1D,SAASwsD,EAAqBz8L,EAAQ42L,GAC3C,EAA8B52L,EAAQ,oBAAqB+N,IACzD,MAAMgjE,EAAKhjE,EAAE4nB,OACb,KAAIihK,EAAej+G,QAAU,IAAO5H,EAAG2rH,kBACI,WAAvC3rH,EAAG2rH,mBAAmBphJ,eACE,WAAtBy1B,EAAGgtB,eAIT,OAAOhwF,IC/qBJ,SAAS,EAAiB/N,EAAQ42L,GACvC,MAAM5kJ,EAAYhyC,GAAUA,EAAOgyC,UAC7B2kD,EAAmB32F,GAAUA,EAAO22F,iBAS1C,GAPA3kD,EAAUc,aAAe,SAAS7T,EAAahX,EAAWokI,GAExD,EAAiB,yBACb,uCACJr6G,EAAUC,aAAaa,aAAa7T,GAAamT,KAAKnqB,EAAWokI,MAG7DuqC,EAAej+G,QAAU,IAC3B,oBAAqB3mC,EAAUC,aAAaulJ,2BAA4B,CAC1E,MAAMH,EAAQ,SAAS5sL,EAAK2B,EAAGC,GACzBD,KAAK3B,KAAS4B,KAAK5B,KACrBA,EAAI4B,GAAK5B,EAAI2B,UACN3B,EAAI2B,KAITuwL,EAAqB3qJ,EAAUC,aAAaa,aAC9ClxC,KAAKowC,EAAUC,cAUnB,GATAD,EAAUC,aAAaa,aAAe,SAASryC,GAM7C,MALiB,iBAANA,GAAqC,iBAAZA,EAAEquC,QACpCruC,EAAI6gB,KAAKsL,MAAMtL,KAAKwL,UAAUrsB,IAC9B42L,EAAM52L,EAAEquC,MAAO,kBAAmB,sBAClCuoJ,EAAM52L,EAAEquC,MAAO,mBAAoB,wBAE9B6tJ,EAAmBl8L,IAGxBk2F,GAAoBA,EAAiB30F,UAAU41C,YAAa,CAC9D,MAAMglJ,EAAoBjmG,EAAiB30F,UAAU41C,YACrD++C,EAAiB30F,UAAU41C,YAAc,WACvC,MAAMntC,EAAMmyL,EAAkBzpK,MAAMze,KAAMmB,WAG1C,OAFAwhL,EAAM5sL,EAAK,qBAAsB,mBACjC4sL,EAAM5sL,EAAK,sBAAuB,oBAC3BA,GAIX,GAAIksF,GAAoBA,EAAiB30F,UAAU66L,iBAAkB,CACnE,MAAMC,EACJnmG,EAAiB30F,UAAU66L,iBAC7BlmG,EAAiB30F,UAAU66L,iBAAmB,SAASp8L,GAMrD,MALkB,UAAdiU,KAAKy6B,MAAiC,iBAAN1uC,IAClCA,EAAI6gB,KAAKsL,MAAMtL,KAAKwL,UAAUrsB,IAC9B42L,EAAM52L,EAAG,kBAAmB,sBAC5B42L,EAAM52L,EAAG,mBAAoB,wBAExBq8L,EAAuB3pK,MAAMze,KAAM,CAACjU,OCpD5C,SAAS,EAAoBT,EAAQ+8L,GACtC/8L,EAAOgyC,UAAUC,cACnB,oBAAqBjyC,EAAOgyC,UAAUC,cAGlCjyC,EAAOgyC,UAAsB,eAGnChyC,EAAOgyC,UAAUC,aAAa+tC,gBAC5B,SAAyB/gD,GACvB,IAAMA,IAAeA,EAAYmO,MAAQ,CACvC,MAAMvoB,EAAM,IAAI2zK,aAAa,0DAK7B,OAHA3zK,EAAIlkB,KAAO,gBAEXkkB,EAAIwM,KAAO,EACJmhB,QAAQE,OAAO7tB,GAOxB,OAL0B,IAAtBoa,EAAYmO,MACdnO,EAAYmO,MAAQ,CAAC4vJ,YAAaD,GAElC99J,EAAYmO,MAAM4vJ,YAAcD,EAE3B/8L,EAAOgyC,UAAUC,aAAaa,aAAa7T,KCnBjD,SAAS,EAAYj/B,GACJ,iBAAXA,GAAuBA,EAAOi9L,eACpC,aAAcj9L,EAAOi9L,cAAcj7L,aAClC,gBAAiBhC,EAAOi9L,cAAcj7L,YAC1ClB,OAAOC,eAAef,EAAOi9L,cAAcj7L,UAAW,cAAe,CACnE,MACE,MAAO,CAACsiD,SAAU5vC,KAAK4vC,aAMxB,SAAS,EAAmBtkD,EAAQ42L,GACzC,GAAsB,iBAAX52L,IACLA,EAAOwwC,oBAAqBxwC,EAAOk9L,qBACvC,QAEGl9L,EAAOwwC,mBAAqBxwC,EAAOk9L,uBAEtCl9L,EAAOwwC,kBAAoBxwC,EAAOk9L,sBAGhCtG,EAAej+G,QAAU,IAE3B,CAAC,sBAAuB,uBAAwB,mBAC3C70D,SAAQ,SAASmsH,GAChB,MAAMgsD,EAAej8L,EAAOwwC,kBAAkBxuC,UAAUiuI,GAClDisD,EAAY,CAAC,CAACjsD,KAIlB,OAHAp6H,UAAU,GAAK,IAAiB,oBAAXo6H,EACjBjwI,EAAOygG,gBACPzgG,EAAOsmG,uBAAuBzwF,UAAU,IACrComL,EAAa9oK,MAAMze,KAAMmB,aAElC7V,EAAOwwC,kBAAkBxuC,UAAUiuI,GAAUisD,EAAUjsD,MAI/D,MAAMktD,EAAmB,CACvBC,WAAY,cACZC,YAAa,eACbC,cAAe,iBACf9C,eAAgB,kBAChBC,gBAAiB,oBAGb8C,EAAiBv9L,EAAOwwC,kBAAkBxuC,UAAU+mI,SAC1D/oI,EAAOwwC,kBAAkBxuC,UAAU+mI,SAAW,WAC5C,MAAO/0G,EAAUmmK,EAAQC,GAASvkL,UAClC,OAAO0nL,EAAepqK,MAAMze,KAAM,CAACsf,GAAY,OAC5Coe,KAAK1S,IACJ,GAAIk3J,EAAej+G,QAAU,KAAOwhH,EAGlC,IACEz6J,EAAM5b,QAAQ4+I,IACZA,EAAK/mJ,KAAOwhL,EAAiBz6B,EAAK/mJ,OAAS+mJ,EAAK/mJ,OAElD,MAAO5N,GACP,GAAe,cAAXA,EAAEpN,KACJ,MAAMoN,EAGR2xB,EAAM5b,QAAQ,CAAC4+I,EAAMtiK,KACnBs/B,EAAMvF,IAAI/5B,EAAGU,OAAO+zC,OAAO,GAAI6tH,EAAM,CACnC/mJ,KAAMwhL,EAAiBz6B,EAAK/mJ,OAAS+mJ,EAAK/mJ,UAKlD,OAAO+jB,IAER0S,KAAK+nJ,EAAQC,IAIb,SAASoD,EAAmBx9L,GACjC,GAAwB,iBAAXA,IAAuBA,EAAOwwC,oBACvCxwC,EAAOouI,aACT,OAEF,GAAIpuI,EAAOouI,cAAgB,aAAcpuI,EAAOouI,aAAapsI,UAC3D,OAEF,MAAMg4L,EAAiBh6L,EAAOwwC,kBAAkBxuC,UAAUkmK,WACtD8xB,IACFh6L,EAAOwwC,kBAAkBxuC,UAAUkmK,WAAa,WAC9C,MAAM9lH,EAAU43I,EAAe7mK,MAAMze,KAAM,IAE3C,OADA0tC,EAAQt+B,QAAQu2E,GAAUA,EAAOq/F,IAAMhlL,MAChC0tC,IAIX,MAAMw3I,EAAe55L,EAAOwwC,kBAAkBxuC,UAAU6/F,SACpD+3F,IACF55L,EAAOwwC,kBAAkBxuC,UAAU6/F,SAAW,WAC5C,MAAMxH,EAASu/F,EAAazmK,MAAMze,KAAMmB,WAExC,OADAwkF,EAAOq/F,IAAMhlL,KACN2lF,IAGXr6F,EAAOouI,aAAapsI,UAAU+mI,SAAW,WACvC,OAAOr0H,KAAK2gC,MAAQ3gC,KAAKglL,IAAI3wD,SAASr0H,KAAK2gC,OACvC7C,QAAQC,QAAQ,IAAIna,MAIrB,SAASmlK,EAAqBz9L,GACnC,GAAwB,iBAAXA,IAAuBA,EAAOwwC,oBACvCxwC,EAAOouI,aACT,OAEF,GAAIpuI,EAAOouI,cAAgB,aAAcpuI,EAAO6tI,eAAe7rI,UAC7D,OAEF,MAAM64L,EAAmB76L,EAAOwwC,kBAAkBxuC,UAAUqhK,aACxDw3B,IACF76L,EAAOwwC,kBAAkBxuC,UAAUqhK,aAAe,WAChD,MAAMF,EAAY03B,EAAiB1nK,MAAMze,KAAM,IAE/C,OADAyuJ,EAAUr/I,QAAQwgC,GAAYA,EAASo1I,IAAMhlL,MACtCyuJ,IAGX,EAA8BnjK,EAAQ,QAAS+N,IAC7CA,EAAEu2C,SAASo1I,IAAM3rL,EAAE+sL,WACZ/sL,IAET/N,EAAO6tI,eAAe7rI,UAAU+mI,SAAW,WACzC,OAAOr0H,KAAKglL,IAAI3wD,SAASr0H,KAAK2gC,QAI3B,SAASqoJ,EAAiB19L,GAC1BA,EAAOwwC,qBACR,iBAAkBxwC,EAAOwwC,kBAAkBxuC,aAG/ChC,EAAOwwC,kBAAkBxuC,UAAU6lK,aACjC,SAAsBvtI,GACpB,EAAiB,eAAgB,eACjC5lB,KAAKwzJ,aAAapkJ,QAAQu2E,IACpBA,EAAOhlD,OAAS/a,EAAO+b,YAAY7J,SAAS6tD,EAAOhlD,QACrD3gC,KAAKy4G,YAAY9yB,OAMpB,SAASsjG,EAAmB39L,GAG7BA,EAAO49L,cAAgB59L,EAAO69L,iBAChC79L,EAAO69L,eAAiB79L,EAAO49L,aAI5B,SAASE,EAAmB99L,GAIjC,GAAwB,iBAAXA,IAAuBA,EAAOwwC,kBACzC,OAEF,MAAMutJ,EAAqB/9L,EAAOwwC,kBAAkBxuC,UAAUgsG,eAC1D+vF,IACF/9L,EAAOwwC,kBAAkBxuC,UAAUgsG,eACjC,WACEt5F,KAAKspL,sBAAwB,GAC7B,MAAMC,EAAiBpoL,UAAU,GAC3BqoL,EAAqBD,GACD,kBAAmBA,EACzCC,GAEFD,EAAelwF,cAAcjqF,QAASq6K,IACpC,GAAI,QAASA,EAAe,CAE1B,IADiB,oBACHv3K,KAAKu3K,EAAcn9K,KAC/B,MAAM,IAAIzV,UAAU,+BAGxB,GAAI,0BAA2B4yL,KACvBtjF,WAAWsjF,EAAcvxF,wBAA0B,GACvD,MAAM,IAAIpmD,WAAW,2CAGzB,GAAI,iBAAkB23I,KACdtjF,WAAWsjF,EAAcC,eAAiB,GAC9C,MAAM,IAAI53I,WAAW,kCAK7B,MAAMumD,EAAcgxF,EAAmB5qK,MAAMze,KAAMmB,WACnD,GAAIqoL,EAAoB,CAQtB,MAAM,OAAC7jG,GAAU0S,EACXtkE,EAAS4xD,EAAOkU,mBAChB,cAAe9lE,IAEY,IAA5BA,EAAO+lE,UAAUvjG,QAC2B,IAA5CnK,OAAOmZ,KAAKwuB,EAAO+lE,UAAU,IAAIvjG,UACpCw9B,EAAO+lE,UAAYyvF,EAAelwF,cAClC1T,EAAO0T,cAAgBkwF,EAAelwF,cACtCr5F,KAAKspL,sBAAsBpmL,KAAKyiF,EAAOoU,cAAchmE,GAClD2J,KAAK,YACGioD,EAAO0T,gBACb98D,MAAM,YACAopD,EAAO0T,kBAKtB,OAAOhB,IAKR,SAASsxF,EAAkBr+L,GAChC,GAAwB,iBAAXA,IAAuBA,EAAOouI,aACzC,OAEF,MAAMkwD,EAAoBt+L,EAAOouI,aAAapsI,UAAUusG,cACpD+vF,IACFt+L,EAAOouI,aAAapsI,UAAUusG,cAC5B,WACE,MAAM9lE,EAAS61J,EAAkBnrK,MAAMze,KAAMmB,WAI7C,MAHM,cAAe4yB,IACnBA,EAAO+lE,UAAY,GAAG9/F,OAAOgG,KAAKq5F,eAAiB,CAAC,MAE/CtlE,IAKR,SAAS81J,EAAgBv+L,GAI9B,GAAwB,iBAAXA,IAAuBA,EAAOwwC,kBACzC,OAEF,MAAMguJ,EAAkBx+L,EAAOwwC,kBAAkBxuC,UAAU8/F,YAC3D9hG,EAAOwwC,kBAAkBxuC,UAAU8/F,YAAc,WAC/C,OAAIptF,KAAKspL,uBAAyBtpL,KAAKspL,sBAAsB/yL,OACpDunC,QAAQyK,IAAIvoC,KAAKspL,uBACvB5rJ,KAAK,IACGosJ,EAAgBrrK,MAAMze,KAAMmB,YAEpC4oL,QAAQ,KACP/pL,KAAKspL,sBAAwB,KAG1BQ,EAAgBrrK,MAAMze,KAAMmB,YAIhC,SAAS6oL,EAAiB1+L,GAI/B,GAAwB,iBAAXA,IAAuBA,EAAOwwC,kBACzC,OAEF,MAAMmuJ,EAAmB3+L,EAAOwwC,kBAAkBxuC,UAAU0kG,aAC5D1mG,EAAOwwC,kBAAkBxuC,UAAU0kG,aAAe,WAChD,OAAIhyF,KAAKspL,uBAAyBtpL,KAAKspL,sBAAsB/yL,OACpDunC,QAAQyK,IAAIvoC,KAAKspL,uBACvB5rJ,KAAK,IACGusJ,EAAiBxrK,MAAMze,KAAMmB,YAErC4oL,QAAQ,KACP/pL,KAAKspL,sBAAwB,KAG1BW,EAAiBxrK,MAAMze,KAAMmB,YC3RjC,SAAS+oL,EAAoB5+L,GAClC,GAAsB,iBAAXA,GAAwBA,EAAOwwC,kBAA1C,CAYA,GATM,oBAAqBxwC,EAAOwwC,kBAAkBxuC,YAClDhC,EAAOwwC,kBAAkBxuC,UAAUg5L,gBACjC,WAIE,OAHKtmL,KAAKmqL,gBACRnqL,KAAKmqL,cAAgB,IAEhBnqL,KAAKmqL,kBAGZ,cAAe7+L,EAAOwwC,kBAAkBxuC,WAAY,CACxD,MAAM88L,EAAY9+L,EAAOwwC,kBAAkBxuC,UAAU6/F,SACrD7hG,EAAOwwC,kBAAkBxuC,UAAU2lK,UAAY,SAAmBrtI,GAC3D5lB,KAAKmqL,gBACRnqL,KAAKmqL,cAAgB,IAElBnqL,KAAKmqL,cAAcryJ,SAASlS,IAC/B5lB,KAAKmqL,cAAcjnL,KAAK0iB,GAI1BA,EAAOoU,iBAAiB5qB,QAAQuxB,GAASypJ,EAAUv+L,KAAKmU,KAAM2gC,EAC5D/a,IACFA,EAAOsU,iBAAiB9qB,QAAQuxB,GAASypJ,EAAUv+L,KAAKmU,KAAM2gC,EAC5D/a,KAGJt6B,EAAOwwC,kBAAkBxuC,UAAU6/F,SACjC,SAAkBxsD,KAAUoN,GAU1B,OATIA,GACFA,EAAQ3+B,QAASwW,IACV5lB,KAAKmqL,cAEEnqL,KAAKmqL,cAAcryJ,SAASlS,IACtC5lB,KAAKmqL,cAAcjnL,KAAK0iB,GAFxB5lB,KAAKmqL,cAAgB,CAACvkK,KAMrBwkK,EAAU3rK,MAAMze,KAAMmB,YAG7B,iBAAkB7V,EAAOwwC,kBAAkBxuC,YAC/ChC,EAAOwwC,kBAAkBxuC,UAAU6lK,aACjC,SAAsBvtI,GACf5lB,KAAKmqL,gBACRnqL,KAAKmqL,cAAgB,IAEvB,MAAMl1J,EAAQj1B,KAAKmqL,cAAcvmL,QAAQgiB,GACzC,IAAe,IAAXqP,EACF,OAEFj1B,KAAKmqL,cAAclmL,OAAOgxB,EAAO,GACjC,MAAM4S,EAASjiB,EAAO+b,YACtB3hC,KAAKwzJ,aAAapkJ,QAAQu2E,IACpB99C,EAAO/P,SAAS6tD,EAAOhlD,QACzB3gC,KAAKy4G,YAAY9yB,QAOtB,SAAS0kG,EAAqB/+L,GACnC,GAAsB,iBAAXA,GAAwBA,EAAOwwC,oBAGpC,qBAAsBxwC,EAAOwwC,kBAAkBxuC,YACnDhC,EAAOwwC,kBAAkBxuC,UAAUg9L,iBACjC,WACE,OAAOtqL,KAAKuqL,eAAiBvqL,KAAKuqL,eAAiB,OAGnD,gBAAiBj/L,EAAOwwC,kBAAkBxuC,YAAY,CAC1DlB,OAAOC,eAAef,EAAOwwC,kBAAkBxuC,UAAW,cAAe,CACvE,MACE,OAAO0S,KAAKwqL,cAEd,IAAI1wI,GACE95C,KAAKwqL,eACPxqL,KAAKyzC,oBAAoB,YAAazzC,KAAKwqL,cAC3CxqL,KAAKyzC,oBAAoB,QAASzzC,KAAKyqL,mBAEzCzqL,KAAKw9B,iBAAiB,YAAax9B,KAAKwqL,aAAe1wI,GACvD95C,KAAKw9B,iBAAiB,QAASx9B,KAAKyqL,iBAAoBpxL,IACtDA,EAAE00C,QAAQ3+B,QAAQwW,IAIhB,GAHK5lB,KAAKuqL,iBACRvqL,KAAKuqL,eAAiB,IAEpBvqL,KAAKuqL,eAAezyJ,SAASlS,GAC/B,OAEF5lB,KAAKuqL,eAAernL,KAAK0iB,GACzB,MAAMiG,EAAQ,IAAI84J,MAAM,aACxB94J,EAAMjG,OAASA,EACf5lB,KAAK4kL,cAAc/4J,UAK3B,MAAM24J,EACJl5L,EAAOwwC,kBAAkBxuC,UAAUykG,qBACrCzmG,EAAOwwC,kBAAkBxuC,UAAUykG,qBACjC,WACE,MAAM11B,EAAKr8D,KAiBX,OAhBKA,KAAKyqL,kBACRzqL,KAAKw9B,iBAAiB,QAASx9B,KAAKyqL,iBAAmB,SAASpxL,GAC9DA,EAAE00C,QAAQ3+B,QAAQwW,IAIhB,GAHKy2C,EAAGkuH,iBACNluH,EAAGkuH,eAAiB,IAElBluH,EAAGkuH,eAAe3mL,QAAQgiB,IAAW,EACvC,OAEFy2C,EAAGkuH,eAAernL,KAAK0iB,GACvB,MAAMiG,EAAQ,IAAI84J,MAAM,aACxB94J,EAAMjG,OAASA,EACfy2C,EAAGuoH,cAAc/4J,OAIhB24J,EAAyB/lK,MAAM49C,EAAIl7D,aAK3C,SAASupL,EAAiBp/L,GAC/B,GAAsB,iBAAXA,IAAwBA,EAAOwwC,kBACxC,OAEF,MAAMxuC,EAAYhC,EAAOwwC,kBAAkBxuC,UACrCw8L,EAAkBx8L,EAAU8/F,YAC5B68F,EAAmB38L,EAAU0kG,aAC7B1E,EAAsBhgG,EAAUggG,oBAChCyE,EAAuBzkG,EAAUykG,qBACjC7F,EAAkB5+F,EAAU4+F,gBAElC5+F,EAAU8/F,YACR,SAAqBi+D,EAAiB9O,GACpC,MAAMp1I,EAAWhG,UAAU5K,QAAU,EAAK4K,UAAU,GAAKA,UAAU,GAC7Dw7B,EAAUmtJ,EAAgBrrK,MAAMze,KAAM,CAACmH,IAC7C,OAAKo1I,GAGL5/G,EAAQe,KAAK2tH,EAAiB9O,GACvBz+G,QAAQC,WAHNpB,GAMbrvC,EAAU0kG,aACR,SAAsBq5D,EAAiB9O,GACrC,MAAMp1I,EAAWhG,UAAU5K,QAAU,EAAK4K,UAAU,GAAKA,UAAU,GAC7Dw7B,EAAUstJ,EAAiBxrK,MAAMze,KAAM,CAACmH,IAC9C,OAAKo1I,GAGL5/G,EAAQe,KAAK2tH,EAAiB9O,GACvBz+G,QAAQC,WAHNpB,GAMb,IAAIguJ,EAAe,SAASz6G,EAAam7E,EAAiB9O,GACxD,MAAM5/G,EAAU2wD,EAAoB7uE,MAAMze,KAAM,CAACkwE,IACjD,OAAKqsE,GAGL5/G,EAAQe,KAAK2tH,EAAiB9O,GACvBz+G,QAAQC,WAHNpB,GAKXrvC,EAAUggG,oBAAsBq9F,EAEhCA,EAAe,SAASz6G,EAAam7E,EAAiB9O,GACpD,MAAM5/G,EAAUo1D,EAAqBtzE,MAAMze,KAAM,CAACkwE,IAClD,OAAKqsE,GAGL5/G,EAAQe,KAAK2tH,EAAiB9O,GACvBz+G,QAAQC,WAHNpB,GAKXrvC,EAAUykG,qBAAuB44F,EAEjCA,EAAe,SAAS33J,EAAWq4H,EAAiB9O,GAClD,MAAM5/G,EAAUuvD,EAAgBztE,MAAMze,KAAM,CAACgzB,IAC7C,OAAKupH,GAGL5/G,EAAQe,KAAK2tH,EAAiB9O,GACvBz+G,QAAQC,WAHNpB,GAKXrvC,EAAU4+F,gBAAkBy+F,EAGvB,SAAS,EAAiBr/L,GAC/B,MAAMgyC,EAAYhyC,GAAUA,EAAOgyC,UAEnC,GAAIA,EAAUC,cAAgBD,EAAUC,aAAaa,aAAc,CAEjE,MAAMb,EAAeD,EAAUC,aACzBK,EAAgBL,EAAaa,aAAalxC,KAAKqwC,GACrDD,EAAUC,aAAaa,aAAgB7T,GAC9BqT,EAAcgtJ,EAAgBrgK,KAIpC+S,EAAUc,cAAgBd,EAAUC,cACvCD,EAAUC,aAAaa,eACvBd,EAAUc,aAAe,SAAsB7T,EAAau4H,EAAI+nC,GAC9DvtJ,EAAUC,aAAaa,aAAa7T,GACnCmT,KAAKolH,EAAI+nC,IACV39L,KAAKowC,IAIJ,SAASstJ,EAAgBrgK,GAC9B,OAAIA,QAAqChqB,IAAtBgqB,EAAYmO,MACtBtsC,OAAO+zC,OAAO,GACnB5V,EACA,CAACmO,MAAO,EAAoBnO,EAAYmO,SAIrCnO,EAGF,SAASugK,EAAqBx/L,GACnC,IAAKA,EAAOwwC,kBACV,OAGF,MAAMivJ,EAAqBz/L,EAAOwwC,kBAClCxwC,EAAOwwC,kBACL,SAA2BkvJ,EAAUpuJ,GACnC,GAAIouJ,GAAYA,EAAS9uI,WAAY,CACnC,MAAM+uI,EAAgB,GACtB,IAAK,IAAIv/L,EAAI,EAAGA,EAAIs/L,EAAS9uI,WAAW3lD,OAAQ7K,IAAK,CACnD,IAAI2yE,EAAS2sH,EAAS9uI,WAAWxwD,IAC5B2yE,EAAO9wE,eAAe,SACvB8wE,EAAO9wE,eAAe,QACxB,EAAiB,mBAAoB,qBACrC8wE,EAASzxD,KAAKsL,MAAMtL,KAAKwL,UAAUimD,IACnCA,EAAO3pB,KAAO2pB,EAAO4D,WACd5D,EAAO4D,IACdgpH,EAAc/nL,KAAKm7D,IAEnB4sH,EAAc/nL,KAAK8nL,EAAS9uI,WAAWxwD,IAG3Cs/L,EAAS9uI,WAAa+uI,EAExB,OAAO,IAAIF,EAAmBC,EAAUpuJ,IAE5CtxC,EAAOwwC,kBAAkBxuC,UAAYy9L,EAAmBz9L,UAEpD,wBAAyBy9L,GAC3B3+L,OAAOC,eAAef,EAAOwwC,kBAAmB,sBAAuB,CACrEvvC,IAAG,IACMw+L,EAAmBG,sBAM3B,SAASC,EAA0B7/L,GAElB,iBAAXA,GAAuBA,EAAOi9L,eACrC,aAAcj9L,EAAOi9L,cAAcj7L,aACjC,gBAAiBhC,EAAOi9L,cAAcj7L,YAC1ClB,OAAOC,eAAef,EAAOi9L,cAAcj7L,UAAW,cAAe,CACnE,MACE,MAAO,CAACsiD,SAAU5vC,KAAK4vC,aAMxB,SAASw7I,EAAsB9/L,GACpC,MAAMw+L,EAAkBx+L,EAAOwwC,kBAAkBxuC,UAAU8/F,YAC3D9hG,EAAOwwC,kBAAkBxuC,UAAU8/F,YACjC,SAAqBi+F,GACnB,GAAIA,EAAc,MACgC,IAArCA,EAAaruC,sBAEtBquC,EAAaruC,sBACTquC,EAAaruC,qBAEnB,MAAMsuC,EAAmBtrL,KAAKs4F,kBAAkBhjE,KAAK+iE,GACf,UAApCA,EAAYzoD,SAASjP,MAAMlG,OACY,IAArC4wJ,EAAaruC,qBAAiCsuC,EACb,aAA/BA,EAAiBr3J,UACfq3J,EAAiBC,aACnBD,EAAiBC,aAAa,YAE9BD,EAAiBr3J,UAAY,WAES,aAA/Bq3J,EAAiBr3J,YACtBq3J,EAAiBC,aACnBD,EAAiBC,aAAa,YAE9BD,EAAiBr3J,UAAY,aAGa,IAArCo3J,EAAaruC,qBACnBsuC,GACHtrL,KAAKs5F,eAAe,cAG0B,IAArC+xF,EAAapuC,sBAEtBouC,EAAapuC,sBACTouC,EAAapuC,qBAEnB,MAAMuuC,EAAmBxrL,KAAKs4F,kBAAkBhjE,KAAK+iE,GACf,UAApCA,EAAYzoD,SAASjP,MAAMlG,OACY,IAArC4wJ,EAAapuC,qBAAiCuuC,EACb,aAA/BA,EAAiBv3J,UACfu3J,EAAiBD,aACnBC,EAAiBD,aAAa,YAE9BC,EAAiBv3J,UAAY,WAES,aAA/Bu3J,EAAiBv3J,YACtBu3J,EAAiBD,aACnBC,EAAiBD,aAAa,YAE9BC,EAAiBv3J,UAAY,aAGa,IAArCo3J,EAAapuC,qBACnBuuC,GACHxrL,KAAKs5F,eAAe,SAGxB,OAAOwwF,EAAgBrrK,MAAMze,KAAMmB,YAIlC,SAASsqL,EAAiBngM,GACT,iBAAXA,GAAuBA,EAAO85G,eAGzC95G,EAAO85G,aAAe95G,EAAO+5G,oB,qBCjVxB,SAASqmF,EAAoBpgM,GAGlC,IAAKA,EAAOygG,iBAAoBzgG,EAAOygG,iBAAmB,eACtDzgG,EAAOygG,gBAAgBz+F,UACzB,OAGF,MAAMq+L,EAAwBrgM,EAAOygG,gBACrCzgG,EAAOygG,gBAAkB,SAAyBrpD,GAQhD,GANoB,iBAATA,GAAqBA,EAAK1P,WACA,IAAjC0P,EAAK1P,UAAUpvB,QAAQ,SACzB8+B,EAAO91B,KAAKsL,MAAMtL,KAAKwL,UAAUsqB,KAC5B1P,UAAY0P,EAAK1P,UAAU5d,OAAO,IAGrCstB,EAAK1P,WAAa0P,EAAK1P,UAAUz8B,OAAQ,CAE3C,MAAMq1L,EAAkB,IAAID,EAAsBjpJ,GAC5CmpJ,EAAkB,IAASn/G,eAAehqC,EAAK1P,WAC/C84J,EAAqB1/L,OAAO+zC,OAAOyrJ,EACrCC,GAWJ,OARAC,EAAmBC,OAAS,WAC1B,MAAO,CACL/4J,UAAW84J,EAAmB94J,UAC9Bq4D,OAAQygG,EAAmBzgG,OAC3BT,cAAekhG,EAAmBlhG,cAClC3d,iBAAkB6+G,EAAmB7+G,mBAGlC6+G,EAET,OAAO,IAAIH,EAAsBjpJ,IAEnCp3C,EAAOygG,gBAAgBz+F,UAAYq+L,EAAsBr+L,UAIzD,EAA8BhC,EAAQ,eAAgB+N,IAChDA,EAAE25B,WACJ5mC,OAAOC,eAAegN,EAAG,YAAa,CACpC1M,MAAO,IAAIrB,EAAOygG,gBAAgB1yF,EAAE25B,WACpCizC,SAAU,UAGP5sE,IAIJ,SAAS2yL,GAAmB1gM,EAAQ42L,GACzC,IAAK52L,EAAOwwC,kBACV,OAGI,SAAUxwC,EAAOwwC,kBAAkBxuC,WACvClB,OAAOC,eAAef,EAAOwwC,kBAAkBxuC,UAAW,OAAQ,CAChE,MACE,YAA6B,IAAf0S,KAAKisL,MAAwB,KAAOjsL,KAAKisL,SAK7D,MAAMC,EAAoB,SAASh8G,GACjC,IAAKA,IAAgBA,EAAY75C,IAC/B,OAAO,EAET,MAAMi2C,EAAW,IAASH,cAAc+D,EAAY75C,KAEpD,OADAi2C,EAASr6C,QACFq6C,EAASrqC,KAAKwsC,IACnB,MAAM34C,EAAQ,IAAS/D,WAAW08C,GAClC,OAAO34C,GAAwB,gBAAfA,EAAM2E,OACqB,IAApC3E,EAAMptB,SAAS9E,QAAQ,WAI5BuoL,EAA0B,SAASj8G,GAEvC,MAAM58D,EAAQ48D,EAAY75C,IAAI/iB,MAAM,mCACpC,GAAc,OAAVA,GAAkBA,EAAM/c,OAAS,EACnC,OAAQ,EAEV,MAAM0tE,EAAU3rD,SAAShF,EAAM,GAAI,IAEnC,OAAO2wD,GAAYA,GAAW,EAAIA,GAG9BmoH,EAA2B,SAASC,GAKxC,IAAIC,EAAwB,MAwB5B,MAvB+B,YAA3BpK,EAAe/9J,UAKbmoK,EAJApK,EAAej+G,QAAU,IACF,IAArBooH,EAGsB,MAIA,WAEjBnK,EAAej+G,QAAU,GAML,KAA3Bi+G,EAAej+G,QAAiB,MAAQ,MAGlB,YAGrBqoH,GAGHC,EAAoB,SAASr8G,EAAam8G,GAG9C,IAAI95G,EAAiB,MAKU,YAA3B2vG,EAAe/9J,SACgB,KAA3B+9J,EAAej+G,UACrBsO,EAAiB,OAGnB,MAAMj/D,EAAQ,IAASk5D,YAAY0D,EAAY75C,IAC7C,uBAUF,OATI/iB,EAAM/c,OAAS,EACjBg8E,EAAiBj6D,SAAShF,EAAM,GAAG8B,OAAO,IAAK,IACX,YAA3B8sK,EAAe/9J,UACO,IAArBkoK,IAIV95G,EAAiB,YAEZA,GAGHiyG,EACFl5L,EAAOwwC,kBAAkBxuC,UAAUykG,qBACvCzmG,EAAOwwC,kBAAkBxuC,UAAUykG,qBACjC,WAKE,GAJA/xF,KAAKisL,MAAQ,KAIkB,WAA3B/J,EAAe/9J,SAAwB+9J,EAAej+G,SAAW,GAAI,CACvE,MAAM,aAACr9B,GAAgB5mC,KAAKgoL,mBACP,WAAjBphJ,GACFx6C,OAAOC,eAAe2T,KAAM,OAAQ,CAClC,MACE,YAA6B,IAAfA,KAAKisL,MAAwB,KAAOjsL,KAAKisL,OAEzD3/L,YAAY,EACZ05E,cAAc,IAKpB,GAAIkmH,EAAkB/qL,UAAU,IAAK,CAEnC,MAAMuzB,EAAYy3J,EAAwBhrL,UAAU,IAG9CqrL,EAAaJ,EAAyB13J,GAGtC+3J,EAAYF,EAAkBprL,UAAU,GAAIuzB,GAGlD,IAAI69C,EAEFA,EADiB,IAAfi6G,GAAkC,IAAdC,EACLlzK,OAAOmzK,kBACA,IAAfF,GAAkC,IAAdC,EACZrhL,KAAKytB,IAAI2zJ,EAAYC,GAErBrhL,KAAKqP,IAAI+xK,EAAYC,GAKxC,MAAMv9I,EAAO,GACb9iD,OAAOC,eAAe6iD,EAAM,iBAAkB,CAC5C3iD,IAAG,IACMgmF,IAGXvyE,KAAKisL,MAAQ/8I,EAGf,OAAOs1I,EAAyB/lK,MAAMze,KAAMmB,YAI3C,SAASwrL,GAAuBrhM,GACrC,IAAMA,EAAOwwC,qBACT,sBAAuBxwC,EAAOwwC,kBAAkBxuC,WAClD,OAOF,SAASs/L,EAAWC,EAAIxwH,GACtB,MAAMywH,EAAsBD,EAAGx/K,KAC/Bw/K,EAAGx/K,KAAO,WACR,MAAM1T,EAAOwH,UAAU,GACjB5K,EAASoD,EAAKpD,QAAUoD,EAAK+tB,MAAQ/tB,EAAK2uD,WAChD,GAAsB,SAAlBukI,EAAG7zK,YACHqjD,EAAGntB,MAAQ34C,EAAS8lE,EAAGntB,KAAKqjC,eAC9B,MAAM,IAAI17E,UAAU,4CAClBwlE,EAAGntB,KAAKqjC,eAAiB,WAE7B,OAAOu6G,EAAoBruK,MAAMouK,EAAI1rL,YAGzC,MAAM4rL,EACJzhM,EAAOwwC,kBAAkBxuC,UAAUq6J,kBACrCr8J,EAAOwwC,kBAAkBxuC,UAAUq6J,kBACjC,WACE,MAAMqlC,EAAcD,EAAsBtuK,MAAMze,KAAMmB,WAEtD,OADAyrL,EAAWI,EAAahtL,MACjBgtL,GAEX,EAA8B1hM,EAAQ,cAAe+N,IACnDuzL,EAAWvzL,EAAEuvJ,QAASvvJ,EAAE4nB,QACjB5nB,IAYJ,SAAS4zL,GAAoB3hM,GAClC,IAAKA,EAAOwwC,mBACR,oBAAqBxwC,EAAOwwC,kBAAkBxuC,UAChD,OAEF,MAAMmb,EAAQnd,EAAOwwC,kBAAkBxuC,UACvClB,OAAOC,eAAeoc,EAAO,kBAAmB,CAC9C,MACE,MAAO,CACLs2I,UAAW,YACXmuC,SAAU,cACVltL,KAAKypF,qBAAuBzpF,KAAKypF,oBAErCn9F,YAAY,EACZ05E,cAAc,IAEhB55E,OAAOC,eAAeoc,EAAO,0BAA2B,CACtD,MACE,OAAOzI,KAAKmtL,0BAA4B,MAE1C,IAAIrqC,GACE9iJ,KAAKmtL,2BACPntL,KAAKyzC,oBAAoB,wBACrBzzC,KAAKmtL,iCACFntL,KAAKmtL,0BAEVrqC,GACF9iJ,KAAKw9B,iBAAiB,wBAClBx9B,KAAKmtL,yBAA2BrqC,IAGxCx2J,YAAY,EACZ05E,cAAc,IAGhB,CAAC,sBAAuB,wBAAwB52D,QAASmsH,IACvD,MAAM6xD,EAAa3kL,EAAM8yH,GACzB9yH,EAAM8yH,GAAU,WAcd,OAbKv7H,KAAKqtL,6BACRrtL,KAAKqtL,2BAA6Bh0L,IAChC,MAAMgjE,EAAKhjE,EAAE4nB,OACb,GAAIo7C,EAAGixH,uBAAyBjxH,EAAGitB,gBAAiB,CAClDjtB,EAAGixH,qBAAuBjxH,EAAGitB,gBAC7B,MAAMikG,EAAW,IAAI5I,MAAM,wBAAyBtrL,GACpDgjE,EAAGuoH,cAAc2I,GAEnB,OAAOl0L,GAET2G,KAAKw9B,iBAAiB,2BACpBx9B,KAAKqtL,6BAEFD,EAAW3uK,MAAMze,KAAMmB,cAK7B,SAASqsL,GAAuBliM,EAAQ42L,GAE7C,IAAK52L,EAAOwwC,kBACV,OAEF,GAA+B,WAA3BomJ,EAAe/9J,SAAwB+9J,EAAej+G,SAAW,GACnE,OAEF,GAA+B,WAA3Bi+G,EAAe/9J,SAAwB+9J,EAAej+G,SAAW,IACnE,OAEF,MAAMwpH,EAAYniM,EAAOwwC,kBAAkBxuC,UAAUykG,qBACrDzmG,EAAOwwC,kBAAkBxuC,UAAUykG,qBACnC,SAA8Bp+D,GAC5B,GAAIA,GAAQA,EAAK0C,MAAuD,IAAhD1C,EAAK0C,IAAIzyB,QAAQ,0BAAkC,CACzE,MAAMyyB,EAAM1C,EAAK0C,IAAItzB,MAAM,MAAMiyB,OAAQxwB,GAChB,yBAAhBA,EAAKk4C,QACXv5C,KAAK,MAEJ7X,EAAOsmG,uBACPj+D,aAAgBroC,EAAOsmG,sBACzBzwF,UAAU,GAAK,IAAI7V,EAAOsmG,sBAAsB,CAC9C3qF,KAAM0sB,EAAK1sB,KACXovB,QAGF1C,EAAK0C,IAAMA,EAGf,OAAOo3J,EAAUhvK,MAAMze,KAAMmB,YAI1B,SAASusL,GAA+BpiM,EAAQ42L,GAKrD,IAAM52L,EAAOwwC,oBAAqBxwC,EAAOwwC,kBAAkBxuC,UACzD,OAEF,MAAMqgM,EACFriM,EAAOwwC,kBAAkBxuC,UAAU4+F,gBAClCyhG,GAA0D,IAAjCA,EAAsBp3L,SAGpDjL,EAAOwwC,kBAAkBxuC,UAAU4+F,gBACjC,WACE,OAAK/qF,UAAU,IAWkB,WAA3B+gL,EAAe/9J,SAAwB+9J,EAAej+G,QAAU,IAClC,YAA3Bi+G,EAAe/9J,SACZ+9J,EAAej+G,QAAU,IACD,WAA3Bi+G,EAAe/9J,UACjBhjB,UAAU,IAAiC,KAA3BA,UAAU,GAAG6xB,UAC3B8K,QAAQC,UAEV4vJ,EAAsBlvK,MAAMze,KAAMmB,YAjBnCA,UAAU,IACZA,UAAU,GAAGsd,MAAM,MAEdqf,QAAQC,aCrWvB,MAAM,GCIC,UAAwB,OAACzyC,GAAU,GAAI6b,EAAU,CACtDymL,YAAY,EACZC,aAAa,EACbC,YAAY,IAGZ,MAAM5W,EAAU,EACVgL,EV8HD,SAAuB52L,GAE5B,MAAMma,EAAS,CAAC0e,QAAS,KAAM8/C,QAAS,MAGxC,QAAsB,IAAX34E,IAA2BA,EAAOgyC,UAE3C,OADA73B,EAAO0e,QAAU,iBACV1e,EAGT,MAAM,UAAC63B,GAAahyC,EAEpB,GAAIgyC,EAAUywJ,gBACZtoL,EAAO0e,QAAU,UACjB1e,EAAOw+D,QAAUu8G,EAAeljJ,EAAU0mC,UACtC,mBAAoB,QACnB,GAAI1mC,EAAUsmJ,qBACW,IAA3Bt4L,EAAO0iM,iBAA6B1iM,EAAOw8L,0BAC1Cx8L,EAAO2iM,eAKXxoL,EAAO0e,QAAU,SACjB1e,EAAOw+D,QAAUu8G,EAAeljJ,EAAU0mC,UACtC,wBAAyB,OACxB,KAAI14E,EAAOwwC,oBACdwB,EAAU0mC,UAAU1wD,MAAM,wBAQ5B,OADA7N,EAAO0e,QAAU,2BACV1e,EAPPA,EAAO0e,QAAU,SACjB1e,EAAOw+D,QAAUu8G,EAAeljJ,EAAU0mC,UACtC,uBAAwB,GAC5Bv+D,EAAOgjF,oBAAsBn9F,EAAOqtI,mBAChC,qBAAsBrtI,EAAOqtI,kBAAkBrrI,UAMrD,OAAOmY,EUpKgB,CAAoBna,GAErC4iM,EAAU,CACdhM,iBACAiM,WAAA,EACA3N,eAAgB,EAChBW,WAAY,EACZC,gBAAiB,EAEjB/qJ,OAIF,OAAQ6rJ,EAAe/9J,SACrB,IAAK,SACH,IAAK,IAAe,IACfhd,EAAQymL,WAEX,OADA1W,EAAQ,wDACDgX,EAET,GAA+B,OAA3BhM,EAAej+G,QAEjB,OADAizG,EAAQ,wDACDgX,EAEThX,EAAQ,+BAERgX,EAAQE,YAAc,EAGtB,GAA0C9iM,EAAQ42L,GAElD,EAA4B52L,EAAQ42L,GACpC,EAA2B52L,GAC3B,EAA8BA,EAAQ42L,GACtC,EAAuB52L,GACvB,EAAmCA,EAAQ42L,GAC3C,EAAkC52L,GAClC,EAAwBA,GACxB,EAAsCA,GACtC,EAAgCA,EAAQ42L,GAExC,EAA+B52L,GAC/B,GAA+BA,GAC/B,GAA8BA,EAAQ42L,GACtC,GAAkC52L,GAClC,GAAkCA,EAAQ42L,GAC1C,MACF,IAAK,UACH,IAAK,IAAgB,IAChB/6K,EAAQ0mL,YAEX,OADA3W,EAAQ,yDACDgX,EAEThX,EAAQ,gCAERgX,EAAQE,YAAc,EAGtB,GAA0C9iM,EAAQ42L,GAElD,EAA6B52L,EAAQ42L,GACrC,EAA+B52L,EAAQ42L,GACvC,EAAwB52L,GACxB,EAA6BA,GAC7B,EAA+BA,GAC/B,EAAiCA,GACjC,EAA+BA,GAC/B,EAA+BA,GAC/B,EAA8BA,GAC9B,EAA4BA,GAC5B,EAA6BA,GAE7B,EAA+BA,GAC/B,GAA+BA,GAC/B,GAA8BA,EAAQ42L,GACtC,GAAkC52L,GAClC,MACF,IAAK,SACH,IAAK,IAAe6b,EAAQ2mL,WAE1B,OADA5W,EAAQ,wDACDgX,EAEThX,EAAQ,+BAERgX,EAAQE,YAAc,EAGtB,GAA0C9iM,EAAQ42L,GAElD,EAAgC52L,GAChC,EAAiCA,GACjC,EAA4BA,GAC5B,EAA+BA,GAC/B,EAAgCA,GAChC,EAAqCA,GACrC,EAA4BA,GAC5B,EAA4BA,GAE5B,EAA+BA,GAC/B,GAA8BA,EAAQ42L,GACtC,GAAkC52L,GAClC,GAAkCA,EAAQ42L,GAC1C,MACF,QACEhL,EAAQ,wBAIZ,OAAOgX,EDtHPG,CAAe,CAAC/iM,OAA0B,oBAAXA,YAAyBiV,EAAYjV,SACvD","file":"sariska-media-transport.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 180);\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n\n\nexport const SUBTITLES_RECEIVED = 'conference.subtitles.received';\n\n\nexport const TRACK_UPDATED = 'conference.track.updated';\n\n\nexport const ANALYTICS_EVENT_RECEIVED = 'analytics.event.received';\n\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","export default Object.getPrototypeOf;\n","import arr from \"./arr.js\";\n\nexport default arr.slice;\n","import arr from \"./arr.js\";\n\n// Support: IE 11+\n// IE doesn't have Array#flat; provide a fallback.\nexport default arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n","import class2type from \"./class2type.js\";\n\nexport default class2type.hasOwnProperty;\n","import hasOwn from \"./hasOwn.js\";\n\nexport default hasOwn.toString;\n","import fnToString from \"./fnToString.js\";\n\nexport default fnToString.call( Object );\n","import document from '../var/document.js';\n\nvar preservedScriptAttributes = {\n\ttype: true,\n\tsrc: true,\n\tnonce: true,\n\tnoModule: true\n};\n\nfunction DOMEval( code, node, doc ) {\n\tdoc = doc || document;\n\n\tvar i,\n\t\tscript = doc.createElement( \"script\" );\n\n\tscript.text = code;\n\tif ( node ) {\n\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\tif ( node[ i ] ) {\n\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t}\n\t\t}\n\t}\n\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n}\n\nexport default DOMEval;\n","import arr from \"./var/arr.js\";\nimport getProto from \"./var/getProto.js\";\nimport slice from \"./var/slice.js\";\nimport flat from \"./var/flat.js\";\nimport push from \"./var/push.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport class2type from \"./var/class2type.js\";\nimport toString from \"./var/toString.js\";\nimport hasOwn from \"./var/hasOwn.js\";\nimport fnToString from \"./var/fnToString.js\";\nimport ObjectFunctionString from \"./var/ObjectFunctionString.js\";\nimport support from \"./var/support.js\";\nimport isWindow from \"./var/isWindow.js\";\nimport DOMEval from \"./core/DOMEval.js\";\nimport toType from \"./core/toType.js\";\n\nvar version = \"@VERSION\",\n\n    rhtmlSuffix = /HTML$/i,\n\n    // Define a local copy of jQuery\n    jQuery = function( selector, context ) {\n\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // Need init if jQuery is called (just allow error to be thrown if not included)\n        return new jQuery.fn.init( selector, context );\n    };\n\njQuery.fn = jQuery.prototype = {\n\n    // The current version of jQuery being used\n    jquery: version,\n\n    constructor: jQuery,\n\n    // The default length of a jQuery object is 0\n    length: 0,\n\n    toArray: function() {\n        return slice.call( this );\n    },\n\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function( num ) {\n\n        // Return all the elements in a clean array\n        if ( num == null ) {\n            return slice.call( this );\n        }\n\n        // Return just the one element from the set\n        return num < 0 ? this[ num + this.length ] : this[ num ];\n    },\n\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function( elems ) {\n\n        // Build a new jQuery matched element set\n        var ret = jQuery.merge( this.constructor(), elems );\n\n        // Add the old object onto the stack (as a reference)\n        ret.prevObject = this;\n\n        // Return the newly-formed element set\n        return ret;\n    },\n\n    // Execute a callback for every element in the matched set.\n    each: function( callback ) {\n        return jQuery.each( this, callback );\n    },\n\n    map: function( callback ) {\n        return this.pushStack( jQuery.map( this, function( elem, i ) {\n            return callback.call( elem, i, elem );\n        } ) );\n    },\n\n    slice: function() {\n        return this.pushStack( slice.apply( this, arguments ) );\n    },\n\n    first: function() {\n        return this.eq( 0 );\n    },\n\n    last: function() {\n        return this.eq( -1 );\n    },\n\n    even: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return ( i + 1 ) % 2;\n        } ) );\n    },\n\n    odd: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return i % 2;\n        } ) );\n    },\n\n    eq: function( i ) {\n        var len = this.length,\n            j = +i + ( i < 0 ? len : 0 );\n        return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n    },\n\n    end: function() {\n        return this.prevObject || this.constructor();\n    }\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[ 0 ] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && typeof target !== \"function\" ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                copy = options[ name ];\n\n                // Prevent Object.prototype pollution\n                // Prevent never-ending loop\n                if ( name === \"__proto__\" || target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n                    ( copyIsArray = Array.isArray( copy ) ) ) ) {\n                    src = target[ name ];\n\n                    // Ensure proper type for the source value\n                    if ( copyIsArray && !Array.isArray( src ) ) {\n                        clone = [];\n                    } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n                        clone = {};\n                    } else {\n                        clone = src;\n                    }\n                    copyIsArray = false;\n\n                    // Never move original objects, clone them\n                    target[ name ] = jQuery.extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n};\n\njQuery.extend( {\n\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n\n    error: function( msg ) {\n        throw new Error( msg );\n    },\n\n    noop: function() {},\n\n    isPlainObject: function( obj ) {\n        var proto, Ctor;\n\n        // Detect obvious negatives\n        // Use toString instead of jQuery.type to catch host objects\n        if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n            return false;\n        }\n\n        proto = getProto( obj );\n\n        // Objects with no prototype (e.g., `Object.create( null )`) are plain\n        if ( !proto ) {\n            return true;\n        }\n\n        // Objects with prototype are plain iff they were constructed by a global Object function\n        Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n        return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n    },\n\n    isEmptyObject: function( obj ) {\n        var name;\n\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n    },\n\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function( code, options, doc ) {\n        DOMEval( code, { nonce: options && options.nonce }, doc );\n    },\n\n    each: function( obj, callback ) {\n        var length, i = 0;\n\n        if ( isArrayLike( obj ) ) {\n            length = obj.length;\n            for ( ; i < length; i++ ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        } else {\n            for ( i in obj ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        }\n\n        return obj;\n    },\n\n\n    // Retrieve the text value of an array of DOM nodes\n    text: function( elem ) {\n        var node,\n            ret = \"\",\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if ( !nodeType ) {\n\n            // If no nodeType, this is expected to be an array\n            while ( ( node = elem[ i++ ] ) ) {\n\n                // Do not traverse comment nodes\n                ret += jQuery.text( node );\n            }\n        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n            return elem.textContent;\n        } else if ( nodeType === 3 || nodeType === 4 ) {\n            return elem.nodeValue;\n        }\n\n        // Do not include comment or processing instruction nodes\n\n        return ret;\n    },\n\n\n    // results is for internal usage only\n    makeArray: function( arr, results ) {\n        var ret = results || [];\n\n        if ( arr != null ) {\n            if ( isArrayLike( Object( arr ) ) ) {\n                jQuery.merge( ret,\n                    typeof arr === \"string\" ?\n                        [ arr ] : arr\n                );\n            } else {\n                push.call( ret, arr );\n            }\n        }\n\n        return ret;\n    },\n\n    inArray: function( elem, arr, i ) {\n        return arr == null ? -1 : indexOf.call( arr, elem, i );\n    },\n\n    isXMLDoc: function( elem ) {\n        var namespace = elem.namespaceURI,\n            docElem = ( elem.ownerDocument || elem ).documentElement;\n\n        // Assume HTML when documentElement doesn't yet exist, such as inside\n        // document fragments.\n        return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n    },\n\n    merge: function( first, second ) {\n        var len = +second.length,\n            j = 0,\n            i = first.length;\n\n        for ( ; j < len; j++ ) {\n            first[ i++ ] = second[ j ];\n        }\n\n        first.length = i;\n\n        return first;\n    },\n\n    grep: function( elems, callback, invert ) {\n        var callbackInverse,\n            matches = [],\n            i = 0,\n            length = elems.length,\n            callbackExpect = !invert;\n\n        // Go through the array, only saving the items\n        // that pass the validator function\n        for ( ; i < length; i++ ) {\n            callbackInverse = !callback( elems[ i ], i );\n            if ( callbackInverse !== callbackExpect ) {\n                matches.push( elems[ i ] );\n            }\n        }\n\n        return matches;\n    },\n\n    // arg is for internal usage only\n    map: function( elems, callback, arg ) {\n        var length, value,\n            i = 0,\n            ret = [];\n\n        // Go through the array, translating each of the items to their new values\n        if ( isArrayLike( elems ) ) {\n            length = elems.length;\n            for ( ; i < length; i++ ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n\n        // Go through every key on the object,\n        } else {\n            for ( i in elems ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n        }\n\n        // Flatten any nested arrays\n        return flat( ret );\n    },\n\n    // A global GUID counter for objects\n    guid: 1,\n\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n    function( _i, name ) {\n        class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    } );\n\nfunction isArrayLike( obj ) {\n\n    var length = !!obj && obj.length,\n        type = toType( obj );\n\n    if ( typeof obj === \"function\" || isWindow( obj ) ) {\n        return false;\n    }\n\n    return type === \"array\" || length === 0 ||\n        typeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nexport default jQuery;\n","export default function isWindow( obj ) {\n\treturn obj != null && obj === obj.window;\n}\n","// All support tests are defined in their respective modules.\nexport default {};\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options)  {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\n\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n    this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, eventName, properties);\n};\n\n\nStatistics.prototype.addAnalyticsEventListener = function(listener) {\n    this.eventEmitter.on(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\nStatistics.prototype.removeAnalyticsEventListener = function(listener) {\n    this.eventEmitter.removeListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, listener);\n};\n\n\n\n\n\n\n\n\n\n\n\n\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global module */\n/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // The default video type assumed by the bridge.\n        this._videoType = VideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoint);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            try {\n                this._channel.sendVideoTypeMessage(this._videoType);\n            } catch (error) {\n                logError(error, 'VideoTypeMessage', this._videoType);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            iceConfig.encodedInsertableStreams = true;\n            iceConfig.forceEncodedAudioInsertableStreams = true; // legacy, to be removed in M88.\n            iceConfig.forceEncodedVideoInsertableStreams = true; // legacy, to be removed in M88.\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            iceConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string, NONE: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * No local video source.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = VideoType;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/* global module */\n/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing,\n    name }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}&room=${name}`;\n    }\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard,\n        name\n    });\n}\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token, roomName) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            name: roomName,\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on('beforeunload unload', ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        // Disable RTX on Firefox 83 and older versions because of\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(84)))) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n        });\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        // check for shard name in identities\n        identities.forEach(i => {\n            if (i.type === 'shard') {\n                this.options.deploymentInfo.shard = i.name;\n            }\n        });\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${roomName}@${options.customDomain\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        }\n\n        return true;\n    }\n}\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","export default window.document;\n","export default [];\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","function nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\n\nexport default nodeName;\n","import document from \"./document.js\";\n\nexport default document.documentElement;\n","import arr from \"./arr.js\";\n\nexport default arr.pop;\n","// https://www.w3.org/TR/css3-selectors/#whitespace\nexport default \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n","import document from \"./document.js\";\n\nexport default document.documentMode;\n","import isIE from '../var/isIE.js';\nimport whitespace from \"./var/whitespace.js\";\n\nvar rbuggyQSA = isIE && new RegExp(\n\n\t// Support: IE 9 - 11+\n\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\":enabled|:disabled|\" +\n\n\t// Support: IE 11+\n\t// IE 11 doesn't find elements on a `[name='']` query in some cases.\n\t// Adding a temporary attribute to the document before the selection works\n\t// around the issue.\n\t\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\twhitespace + \"*(?:''|\\\"\\\")\"\n\n);\n\nexport default rbuggyQSA;\n","import jQuery from '../core.js';\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\tbup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\tadown.contains ?\n\t\t\tadown.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n","import jQuery from '../core.js';\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.sort;\n","import jQuery from '../core.js';\nimport document from '../var/document.js';\nimport sort from '../var/sort.js';\n\nlet hasDuplicate;\n\n// Document order sorting\nfunction sortOrder(a, b) {\n\n    // Flag for duplicate removal\n    if (a === b) {\n        hasDuplicate = true;\n\n        return 0;\n    }\n\n    // Sort on method existence if only one input has compareDocumentPosition\n    let compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n    if (compare) {\n        return compare;\n    }\n\n    // Calculate position if both inputs belong to the same document\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    compare = (a.ownerDocument || a) == (b.ownerDocument || b)\n        ? a.compareDocumentPosition(b)\n\n    // Otherwise we know they are disconnected\n        : 1;\n\n    // Disconnected nodes\n    if (compare & 1) {\n\n        // Choose the first element that is related to the document\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (a == document || a.ownerDocument == document\n\t\t\t&& jQuery.contains(document, a)) {\n            return -1;\n        }\n\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (b == document || b.ownerDocument == document\n\t\t\t&& jQuery.contains(document, b)) {\n            return 1;\n        }\n\n        // Maintain original order\n        return 0;\n    }\n\n    return compare & 4 ? -1 : 1;\n}\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function(results) {\n    let elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n    hasDuplicate = false;\n\n    sort.call(results, sortOrder);\n\n    if (hasDuplicate) {\n        while (elem = results[i++]) {\n            if (elem === results[i]) {\n                j = duplicates.push(i);\n            }\n        }\n        while (j--) {\n            results.splice(duplicates[j], 1);\n        }\n    }\n\n    return results;\n};\n","import jQuery from \"./core.js\";\nimport nodeName from \"./core/nodeName.js\";\nimport document from \"./var/document.js\";\nimport documentElement from \"./var/documentElement.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport pop from \"./var/pop.js\";\nimport push from \"./var/push.js\";\nimport whitespace from \"./selector/var/whitespace.js\";\nimport rbuggyQSA from \"./selector/rbuggyQSA.js\";\nimport isIE from \"./var/isIE.js\";\n\n// The following utils are attached directly to the jQuery object.\nimport \"./selector/contains.js\";\nimport \"./selector/escapeSelector.js\";\nimport \"./selector/uniqueSort.js\";\n\nvar preferredDoc = document,\n    matches = documentElement.matches || documentElement.msMatchesSelector;\n\n( function() {\n\nvar i,\n    Expr,\n    outermostContext,\n\n    // Local document vars\n    document,\n    documentElement,\n    documentIsHTML,\n\n    // Instance-specific data\n    expando = jQuery.expando,\n    dirruns = 0,\n    done = 0,\n    classCache = createCache(),\n    tokenCache = createCache(),\n    compilerCache = createCache(),\n    nonnativeSelectorCache = createCache(),\n\n    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n        \"loop|multiple|open|readonly|required|scoped\",\n\n    // Regular expressions\n\n    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n    // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n        // Operator (capture 2)\n        \"*([*^$|!~]?=)\" + whitespace +\n\n        // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n        \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n        whitespace + \"*\\\\]\",\n\n    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n        // 1. quoted (capture 3; capture 4 or capture 5)\n        \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n        // 2. simple (capture 6)\n        \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n        // 3. anything else (capture 2)\n        \".*\" +\n        \")\\\\)|)\",\n\n    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n    rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n    rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n    rcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n        whitespace + \"*\" ),\n    rdescend = new RegExp( whitespace + \"|>\" ),\n\n    rpseudo = new RegExp( pseudos ),\n    ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n    matchExpr = {\n        ID: new RegExp( \"^#(\" + identifier + \")\" ),\n        CLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n        TAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n        ATTR: new RegExp( \"^\" + attributes ),\n        PSEUDO: new RegExp( \"^\" + pseudos ),\n        CHILD: new RegExp(\n            \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n                whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n                whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n        bool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        needsContext: new RegExp( \"^\" + whitespace +\n            \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n            \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n    },\n\n    rinputs = /^(?:input|select|textarea|button)$/i,\n    rheader = /^h\\d$/i,\n\n    // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n    rsibling = /[+~]/,\n\n    // CSS escapes\n    // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n    funescape = function( escape, nonHex ) {\n        var high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n        if ( nonHex ) {\n\n            // Strip the backslash prefix from a non-hex escape sequence\n            return nonHex;\n        }\n\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        return high < 0 ?\n            String.fromCharCode( high + 0x10000 ) :\n            String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n    },\n\n    // Used for iframes; see `setDocument`.\n    // Support: IE 9 - 11+\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE.\n    unloadHandler = function() {\n        setDocument();\n    },\n\n    inDisabledFieldset = addCombinator(\n        function( elem ) {\n            return elem.disabled === true && nodeName( elem, \"fieldset\" );\n        },\n        { dir: \"parentNode\", next: \"legend\" }\n    );\n\nfunction selectorError( msg ) {\n    throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n}\n\nfunction find( selector, context, results, seed ) {\n    var m, i, elem, nid, match, groups, newSelector,\n        newContext = context && context.ownerDocument,\n\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n\n    results = results || [];\n\n    // Return early from calls with invalid selector or context\n    if ( typeof selector !== \"string\" || !selector ||\n        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n        return results;\n    }\n\n    // Try to shortcut find operations (as opposed to filters) in HTML documents\n    if ( !seed ) {\n        setDocument( context );\n        context = context || document;\n\n        if ( documentIsHTML ) {\n\n            // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n            // (excepting DocumentFragment context, where the methods don't exist)\n            if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n                // ID selector\n                if ( ( m = match[ 1 ] ) ) {\n\n                    // Document context\n                    if ( nodeType === 9 ) {\n                        if ( ( elem = context.getElementById( m ) ) ) {\n                            push.call( results, elem );\n                        }\n                        return results;\n\n                    // Element context\n                    } else {\n                        if ( newContext && ( elem = newContext.getElementById( m ) ) &&\n                            jQuery.contains( context, elem ) ) {\n\n                            push.call( results, elem );\n                            return results;\n                        }\n                    }\n\n                // Type selector\n                } else if ( match[ 2 ] ) {\n                    push.apply( results, context.getElementsByTagName( selector ) );\n                    return results;\n\n                // Class selector\n                } else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n                    push.apply( results, context.getElementsByClassName( m ) );\n                    return results;\n                }\n            }\n\n            // Take advantage of querySelectorAll\n            if ( !nonnativeSelectorCache[ selector + \" \" ] &&\n                ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n                newSelector = selector;\n                newContext = context;\n\n                // qSA considers elements outside a scoping root when evaluating child or\n                // descendant combinators, which is not what we want.\n                // In such cases, we work around the behavior by prefixing every selector in the\n                // list with an ID selector referencing the scope context.\n                // The technique has to be used as well when a leading combinator is used\n                // as such selectors are not recognized by querySelectorAll.\n                // Thanks to Andrew Dupont for this technique.\n                if ( nodeType === 1 &&\n                    ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n                    // Expand context for sibling selectors\n                    newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n                        context;\n\n                    // Outside of IE, if we're not changing the context we can\n                    // use :scope instead of an ID.\n                    if ( newContext !== context || isIE ) {\n\n                        // Capture the context ID, setting it first if necessary\n                        if ( ( nid = context.getAttribute( \"id\" ) ) ) {\n                            nid = jQuery.escapeSelector( nid );\n                        } else {\n                            context.setAttribute( \"id\", ( nid = expando ) );\n                        }\n                    }\n\n                    // Prefix every selector in the list\n                    groups = tokenize( selector );\n                    i = groups.length;\n                    while ( i-- ) {\n                        groups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n                            toSelector( groups[ i ] );\n                    }\n                    newSelector = groups.join( \",\" );\n                }\n\n                try {\n                    push.apply( results,\n                        newContext.querySelectorAll( newSelector )\n                    );\n                    return results;\n                } catch ( qsaError ) {\n                    nonnativeSelectorCache( selector, true );\n                } finally {\n                    if ( nid === expando ) {\n                        context.removeAttribute( \"id\" );\n                    }\n                }\n            }\n        }\n    }\n\n    // All others\n    return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *  deleting the oldest entry\n */\nfunction createCache() {\n    var keys = [];\n\n    function cache( key, value ) {\n\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n            // Only keep the most recent entries\n            delete cache[ keys.shift() ];\n        }\n        return ( cache[ key + \" \" ] = value );\n    }\n    return cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n    fn[ expando ] = true;\n    return fn;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n    return function( elem ) {\n        return nodeName( elem, \"input\" ) && elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n    return function( elem ) {\n        return ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n            elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n    return function( elem ) {\n\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ( \"form\" in elem ) {\n\n            // Check for inherited disabledness on relevant non-disabled elements:\n            // * listed form-associated elements in a disabled fieldset\n            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n            // * option elements in a disabled optgroup\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n            // All such elements have a \"form\" property.\n            if ( elem.parentNode && elem.disabled === false ) {\n\n                // Option elements defer to a parent optgroup if present\n                if ( \"label\" in elem ) {\n                    if ( \"label\" in elem.parentNode ) {\n                        return elem.parentNode.disabled === disabled;\n                    } else {\n                        return elem.disabled === disabled;\n                    }\n                }\n\n                // Support: IE 6 - 11+\n                // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n                return elem.isDisabled === disabled ||\n\n                    // Where there is no isDisabled, check manually\n                    elem.isDisabled !== !disabled &&\n                        inDisabledFieldset( elem ) === disabled;\n            }\n\n            return elem.disabled === disabled;\n\n        // Try to winnow out elements that can't be disabled before trusting the disabled property.\n        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n        // even exist on them, let alone have a boolean value.\n        } else if ( \"label\" in elem ) {\n            return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n    return markFunction( function( argument ) {\n        argument = +argument;\n        return markFunction( function( seed, matches ) {\n            var j,\n                matchIndexes = fn( [], seed.length, argument ),\n                i = matchIndexes.length;\n\n            // Match elements found at the specified indexes\n            while ( i-- ) {\n                if ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n                    seed[ j ] = !( matches[ j ] = seed[ j ] );\n                }\n            }\n        } );\n    } );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n    return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n */\nfunction setDocument( node ) {\n    var subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n    // Return early if doc is invalid or already selected\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( doc == document || doc.nodeType !== 9 ) {\n        return;\n    }\n\n    // Update global variables\n    document = doc;\n    documentElement = document.documentElement;\n    documentIsHTML = !jQuery.isXMLDoc( document );\n\n    // Support: IE 9 - 11+\n    // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( isIE && preferredDoc != document &&\n        ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n        subWindow.addEventListener( \"unload\", unloadHandler );\n    }\n}\n\nfind.matches = function( expr, elements ) {\n    return find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n    setDocument( elem );\n\n    if ( documentIsHTML &&\n        !nonnativeSelectorCache[ expr + \" \" ] &&\n        ( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n        try {\n            return matches.call( elem, expr );\n        } catch ( e ) {\n            nonnativeSelectorCache( expr, true );\n        }\n    }\n\n    return find( expr, document, null, [ elem ] ).length > 0;\n};\n\nExpr = jQuery.expr = {\n\n    // Can be adjusted by the user\n    cacheLength: 50,\n\n    createPseudo: markFunction,\n\n    match: matchExpr,\n\n    find: {\n        ID: function( id, context ) {\n            if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n                var elem = context.getElementById( id );\n                return elem ? [ elem ] : [];\n            }\n        },\n\n        TAG: function( tag, context ) {\n            if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n                return context.getElementsByTagName( tag );\n\n                // DocumentFragment nodes don't have gEBTN\n            } else {\n                return context.querySelectorAll( tag );\n            }\n        },\n\n        CLASS: function( className, context ) {\n            if ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n                return context.getElementsByClassName( className );\n            }\n        }\n    },\n\n    relative: {\n        \">\": { dir: \"parentNode\", first: true },\n        \" \": { dir: \"parentNode\" },\n        \"+\": { dir: \"previousSibling\", first: true },\n        \"~\": { dir: \"previousSibling\" }\n    },\n\n    preFilter: {\n        ATTR: function( match ) {\n            match[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n            // Move the given value to match[3] whether quoted or unquoted\n            match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n                .replace( runescape, funescape );\n\n            if ( match[ 2 ] === \"~=\" ) {\n                match[ 3 ] = \" \" + match[ 3 ] + \" \";\n            }\n\n            return match.slice( 0, 4 );\n        },\n\n        CHILD: function( match ) {\n\n            /* matches from matchExpr[\"CHILD\"]\n                1 type (only|nth|...)\n                2 what (child|of-type)\n                3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                4 xn-component of xn+y argument ([+-]?\\d*n|)\n                5 sign of xn-component\n                6 x of xn-component\n                7 sign of y-component\n                8 y of y-component\n            */\n            match[ 1 ] = match[ 1 ].toLowerCase();\n\n            if ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n                // nth-* requires argument\n                if ( !match[ 3 ] ) {\n                    selectorError( match[ 0 ] );\n                }\n\n                // numeric x and y parameters for Expr.filter.CHILD\n                // remember that false/true cast respectively to 0/1\n                match[ 4 ] = +( match[ 4 ] ?\n                    match[ 5 ] + ( match[ 6 ] || 1 ) :\n                    2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n                );\n                match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n            // other types prohibit arguments\n            } else if ( match[ 3 ] ) {\n                selectorError( match[ 0 ] );\n            }\n\n            return match;\n        },\n\n        PSEUDO: function( match ) {\n            var excess,\n                unquoted = !match[ 6 ] && match[ 2 ];\n\n            if ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n                return null;\n            }\n\n            // Accept quoted arguments as-is\n            if ( match[ 3 ] ) {\n                match[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n            // Strip excess characters from unquoted arguments\n            } else if ( unquoted && rpseudo.test( unquoted ) &&\n\n                // Get excess from tokenize (recursively)\n                ( excess = tokenize( unquoted, true ) ) &&\n\n                // advance to the next closing parenthesis\n                ( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n                // excess is a negative index\n                match[ 0 ] = match[ 0 ].slice( 0, excess );\n                match[ 2 ] = unquoted.slice( 0, excess );\n            }\n\n            // Return only captures needed by the pseudo filter method (type and argument)\n            return match.slice( 0, 3 );\n        }\n    },\n\n    filter: {\n        ID: function( id ) {\n            var attrId = id.replace( runescape, funescape );\n            return function( elem ) {\n                return elem.getAttribute( \"id\" ) === attrId;\n            };\n        },\n\n        TAG: function( nodeNameSelector ) {\n            var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n            return nodeNameSelector === \"*\" ?\n\n                function() {\n                    return true;\n                } :\n\n                function( elem ) {\n                    return nodeName( elem, expectedNodeName );\n                };\n        },\n\n        CLASS: function( className ) {\n            var pattern = classCache[ className + \" \" ];\n\n            return pattern ||\n                ( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n                    \"(\" + whitespace + \"|$)\" ) ) &&\n                classCache( className, function( elem ) {\n                    return pattern.test(\n                        typeof elem.className === \"string\" && elem.className ||\n                            typeof elem.getAttribute !== \"undefined\" &&\n                                elem.getAttribute( \"class\" ) ||\n                            \"\"\n                    );\n                } );\n        },\n\n        ATTR: function( name, operator, check ) {\n            return function( elem ) {\n                var result = jQuery.attr( elem, name );\n\n                if ( result == null ) {\n                    return operator === \"!=\";\n                }\n                if ( !operator ) {\n                    return true;\n                }\n\n                result += \"\";\n\n                if ( operator === \"=\" ) {\n                    return result === check;\n                }\n                if ( operator === \"!=\" ) {\n                    return result !== check;\n                }\n                if ( operator === \"^=\" ) {\n                    return check && result.indexOf( check ) === 0;\n                }\n                if ( operator === \"*=\" ) {\n                    return check && result.indexOf( check ) > -1;\n                }\n                if ( operator === \"$=\" ) {\n                    return check && result.slice( -check.length ) === check;\n                }\n                if ( operator === \"~=\" ) {\n                    return ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n                        .indexOf( check ) > -1;\n                }\n                if ( operator === \"|=\" ) {\n                    return result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n                }\n\n                return false;\n            };\n        },\n\n        CHILD: function( type, what, _argument, first, last ) {\n            var simple = type.slice( 0, 3 ) !== \"nth\",\n                forward = type.slice( -4 ) !== \"last\",\n                ofType = what === \"of-type\";\n\n            return first === 1 && last === 0 ?\n\n                // Shortcut for :nth-*(n)\n                function( elem ) {\n                    return !!elem.parentNode;\n                } :\n\n                function( elem, _context, xml ) {\n                    var cache, outerCache, node, nodeIndex, start,\n                        dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                        parent = elem.parentNode,\n                        name = ofType && elem.nodeName.toLowerCase(),\n                        useCache = !xml && !ofType,\n                        diff = false;\n\n                    if ( parent ) {\n\n                        // :(first|last|only)-(child|of-type)\n                        if ( simple ) {\n                            while ( dir ) {\n                                node = elem;\n                                while ( ( node = node[ dir ] ) ) {\n                                    if ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) {\n\n                                        return false;\n                                    }\n                                }\n\n                                // Reverse direction for :only-* (if we haven't yet done so)\n                                start = dir = type === \"only\" && !start && \"nextSibling\";\n                            }\n                            return true;\n                        }\n\n                        start = [ forward ? parent.firstChild : parent.lastChild ];\n\n                        // non-xml :nth-child(...) stores cache data on `parent`\n                        if ( forward && useCache ) {\n\n                            // Seek `elem` from a previously-cached index\n                            outerCache = parent[ expando ] || ( parent[ expando ] = {} );\n                            cache = outerCache[ type ] || [];\n                            nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                            diff = nodeIndex && cache[ 2 ];\n                            node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n                            while ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n                                // Fallback to seeking `elem` from the start\n                                ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                // When found, cache indexes on `parent` and break\n                                if ( node.nodeType === 1 && ++diff && node === elem ) {\n                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];\n                                    break;\n                                }\n                            }\n\n                        } else {\n\n                            // Use previously-cached element index if available\n                            if ( useCache ) {\n                                outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n                                cache = outerCache[ type ] || [];\n                                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                                diff = nodeIndex;\n                            }\n\n                            // xml :nth-child(...)\n                            // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                            if ( diff === false ) {\n\n                                // Use the same loop as above to seek `elem` from the start\n                                while ( ( node = ++nodeIndex && node && node[ dir ] ||\n                                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                    if ( ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) &&\n                                        ++diff ) {\n\n                                        // Cache the index of each encountered element\n                                        if ( useCache ) {\n                                            outerCache = node[ expando ] ||\n                                                ( node[ expando ] = {} );\n                                            outerCache[ type ] = [ dirruns, diff ];\n                                        }\n\n                                        if ( node === elem ) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Incorporate the offset, then check against cycle size\n                        diff -= last;\n                        return diff === first || ( diff % first === 0 && diff / first >= 0 );\n                    }\n                };\n        },\n\n        PSEUDO: function( pseudo, argument ) {\n\n            // pseudo-class names are case-insensitive\n            // https://www.w3.org/TR/selectors/#pseudo-classes\n            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n            // Remember that setFilters inherits from pseudos\n            var args,\n                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n                    selectorError( \"unsupported pseudo: \" + pseudo );\n\n            // The user may use createPseudo to indicate that\n            // arguments are needed to create the filter function\n            // just as jQuery does\n            if ( fn[ expando ] ) {\n                return fn( argument );\n            }\n\n            // But maintain support for old signatures\n            if ( fn.length > 1 ) {\n                args = [ pseudo, pseudo, \"\", argument ];\n                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n                    markFunction( function( seed, matches ) {\n                        var idx,\n                            matched = fn( seed, argument ),\n                            i = matched.length;\n                        while ( i-- ) {\n                            idx = indexOf.call( seed, matched[ i ] );\n                            seed[ idx ] = !( matches[ idx ] = matched[ i ] );\n                        }\n                    } ) :\n                    function( elem ) {\n                        return fn( elem, 0, args );\n                    };\n            }\n\n            return fn;\n        }\n    },\n\n    pseudos: {\n\n        // Potentially complex pseudos\n        not: markFunction( function( selector ) {\n\n            // Trim the selector passed to compile\n            // to avoid treating leading and trailing\n            // spaces as combinators\n            var input = [],\n                results = [],\n                matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n            return matcher[ expando ] ?\n                markFunction( function( seed, matches, _context, xml ) {\n                    var elem,\n                        unmatched = matcher( seed, null, xml, [] ),\n                        i = seed.length;\n\n                    // Match elements unmatched by `matcher`\n                    while ( i-- ) {\n                        if ( ( elem = unmatched[ i ] ) ) {\n                            seed[ i ] = !( matches[ i ] = elem );\n                        }\n                    }\n                } ) :\n                function( elem, _context, xml ) {\n                    input[ 0 ] = elem;\n                    matcher( input, null, xml, results );\n\n                    // Don't keep the element (issue #299)\n                    input[ 0 ] = null;\n                    return !results.pop();\n                };\n        } ),\n\n        has: markFunction( function( selector ) {\n            return function( elem ) {\n                return find( selector, elem ).length > 0;\n            };\n        } ),\n\n        contains: markFunction( function( text ) {\n            text = text.replace( runescape, funescape );\n            return function( elem ) {\n                return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n            };\n        } ),\n\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // https://www.w3.org/TR/selectors/#lang-pseudo\n        lang: markFunction( function( lang ) {\n\n            // lang value must be a valid identifier\n            if ( !ridentifier.test( lang || \"\" ) ) {\n                selectorError( \"unsupported lang: \" + lang );\n            }\n            lang = lang.replace( runescape, funescape ).toLowerCase();\n            return function( elem ) {\n                var elemLang;\n                do {\n                    if ( ( elemLang = documentIsHTML ?\n                        elem.lang :\n                        elem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n                        elemLang = elemLang.toLowerCase();\n                        return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n                    }\n                } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n                return false;\n            };\n        } ),\n\n        // Miscellaneous\n        target: function( elem ) {\n            var hash = window.location && window.location.hash;\n            return hash && hash.slice( 1 ) === elem.id;\n        },\n\n        root: function( elem ) {\n            return elem === documentElement;\n        },\n\n        focus: function( elem ) {\n            return elem === document.activeElement &&\n                document.hasFocus() &&\n                !!( elem.type || elem.href || ~elem.tabIndex );\n        },\n\n        // Boolean properties\n        enabled: createDisabledPseudo( false ),\n        disabled: createDisabledPseudo( true ),\n\n        checked: function( elem ) {\n\n            // In CSS3, :checked should return both checked and selected elements\n            // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            return ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n                ( nodeName( elem, \"option\" ) && !!elem.selected );\n        },\n\n        selected: function( elem ) {\n\n            // Support: IE <=11+\n            // Accessing the selectedIndex property\n            // forces the browser to treat the default option as\n            // selected when in an optgroup.\n            if ( isIE && elem.parentNode ) {\n                // eslint-disable-next-line no-unused-expressions\n                elem.parentNode.selectedIndex;\n            }\n\n            return elem.selected === true;\n        },\n\n        // Contents\n        empty: function( elem ) {\n\n            // https://www.w3.org/TR/selectors/#empty-pseudo\n            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n            //   but not by others (comment: 8; processing instruction: 7; etc.)\n            // nodeType < 6 works because attributes (2) do not appear as children\n            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                if ( elem.nodeType < 6 ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        parent: function( elem ) {\n            return !Expr.pseudos.empty( elem );\n        },\n\n        // Element/input types\n        header: function( elem ) {\n            return rheader.test( elem.nodeName );\n        },\n\n        input: function( elem ) {\n            return rinputs.test( elem.nodeName );\n        },\n\n        button: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n                nodeName( elem, \"button\" );\n        },\n\n        text: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"text\";\n        },\n\n        // Position-in-collection\n        first: createPositionalPseudo( function() {\n            return [ 0 ];\n        } ),\n\n        last: createPositionalPseudo( function( _matchIndexes, length ) {\n            return [ length - 1 ];\n        } ),\n\n        eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n            return [ argument < 0 ? argument + length : argument ];\n        } ),\n\n        even: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 0;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        odd: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 1;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        lt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i;\n\n            if ( argument < 0 ) {\n                i = argument + length;\n            } else if ( argument > length ) {\n                i = length;\n            } else {\n                i = argument;\n            }\n\n            for ( ; --i >= 0; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        gt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i = argument < 0 ? argument + length : argument;\n            for ( ; ++i < length; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } )\n    }\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n    Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n    Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n    var matched, match, tokens, type,\n        soFar, groups, preFilters,\n        cached = tokenCache[ selector + \" \" ];\n\n    if ( cached ) {\n        return parseOnly ? 0 : cached.slice( 0 );\n    }\n\n    soFar = selector;\n    groups = [];\n    preFilters = Expr.preFilter;\n\n    while ( soFar ) {\n\n        // Comma and first run\n        if ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n            if ( match ) {\n\n                // Don't consume trailing commas as valid\n                soFar = soFar.slice( match[ 0 ].length ) || soFar;\n            }\n            groups.push( ( tokens = [] ) );\n        }\n\n        matched = false;\n\n        // Combinators\n        if ( ( match = rcombinators.exec( soFar ) ) ) {\n            matched = match.shift();\n            tokens.push( {\n                value: matched,\n\n                // Cast descendant combinators to space\n                type: match[ 0 ].replace( rtrim, \" \" )\n            } );\n            soFar = soFar.slice( matched.length );\n        }\n\n        // Filters\n        for ( type in Expr.filter ) {\n            if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n                ( match = preFilters[ type ]( match ) ) ) ) {\n                matched = match.shift();\n                tokens.push( {\n                    value: matched,\n                    type: type,\n                    matches: match\n                } );\n                soFar = soFar.slice( matched.length );\n            }\n        }\n\n        if ( !matched ) {\n            break;\n        }\n    }\n\n    // Return the length of the invalid excess\n    // if we're just parsing\n    // Otherwise, throw an error or return tokens\n    if ( parseOnly ) {\n        return soFar.length;\n    }\n\n    return soFar ?\n        selectorError( selector ) :\n\n        // Cache the tokens\n        tokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n    var i = 0,\n        len = tokens.length,\n        selector = \"\";\n    for ( ; i < len; i++ ) {\n        selector += tokens[ i ].value;\n    }\n    return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n    var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === \"parentNode\",\n        doneName = done++;\n\n    return combinator.first ?\n\n        // Check against closest ancestor/preceding element\n        function( elem, context, xml ) {\n            while ( ( elem = elem[ dir ] ) ) {\n                if ( elem.nodeType === 1 || checkNonElements ) {\n                    return matcher( elem, context, xml );\n                }\n            }\n            return false;\n        } :\n\n        // Check against all ancestor/preceding elements\n        function( elem, context, xml ) {\n            var oldCache, outerCache,\n                newCache = [ dirruns, doneName ];\n\n            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n            if ( xml ) {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        if ( matcher( elem, context, xml ) ) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n                        if ( skip && nodeName( elem, skip ) ) {\n                            elem = elem[ dir ] || elem;\n                        } else if ( ( oldCache = outerCache[ key ] ) &&\n                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n                            // Assign to newCache so results back-propagate to previous elements\n                            return ( newCache[ 2 ] = oldCache[ 2 ] );\n                        } else {\n\n                            // Reuse newcache so results back-propagate to previous elements\n                            outerCache[ key ] = newCache;\n\n                            // A match means we're done; a fail means we have to keep checking\n                            if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n}\n\nfunction elementMatcher( matchers ) {\n    return matchers.length > 1 ?\n        function( elem, context, xml ) {\n            var i = matchers.length;\n            while ( i-- ) {\n                if ( !matchers[ i ]( elem, context, xml ) ) {\n                    return false;\n                }\n            }\n            return true;\n        } :\n        matchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n    var i = 0,\n        len = contexts.length;\n    for ( ; i < len; i++ ) {\n        find( selector, contexts[ i ], results );\n    }\n    return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n    var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n\n    for ( ; i < len; i++ ) {\n        if ( ( elem = unmatched[ i ] ) ) {\n            if ( !filter || filter( elem, context, xml ) ) {\n                newUnmatched.push( elem );\n                if ( mapped ) {\n                    map.push( i );\n                }\n            }\n        }\n    }\n\n    return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n    if ( postFilter && !postFilter[ expando ] ) {\n        postFilter = setMatcher( postFilter );\n    }\n    if ( postFinder && !postFinder[ expando ] ) {\n        postFinder = setMatcher( postFinder, postSelector );\n    }\n    return markFunction( function( seed, results, context, xml ) {\n        var temp, i, elem, matcherOut,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n\n            // Get initial elements from seed or context\n            elems = seed ||\n                multipleContexts( selector || \"*\",\n                    context.nodeType ? [ context ] : context, [] ),\n\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n            matcherIn = preFilter && ( seed || !selector ) ?\n                condense( elems, preMap, preFilter, context, xml ) :\n                elems;\n\n        if ( matcher ) {\n\n            // If we have a postFinder, or filtered seed, or non-seed postFilter\n            // or preexisting results,\n            matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n                // ...intermediate processing is necessary\n                [] :\n\n                // ...otherwise use results directly\n                results;\n\n            // Find primary matches\n            matcher( matcherIn, matcherOut, context, xml );\n        } else {\n            matcherOut = matcherIn;\n        }\n\n        // Apply postFilter\n        if ( postFilter ) {\n            temp = condense( matcherOut, postMap );\n            postFilter( temp, [], context, xml );\n\n            // Un-match failing elements by moving them back to matcherIn\n            i = temp.length;\n            while ( i-- ) {\n                if ( ( elem = temp[ i ] ) ) {\n                    matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n                }\n            }\n        }\n\n        if ( seed ) {\n            if ( postFinder || preFilter ) {\n                if ( postFinder ) {\n\n                    // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                    temp = [];\n                    i = matcherOut.length;\n                    while ( i-- ) {\n                        if ( ( elem = matcherOut[ i ] ) ) {\n\n                            // Restore matcherIn since elem is not yet a final match\n                            temp.push( ( matcherIn[ i ] = elem ) );\n                        }\n                    }\n                    postFinder( null, ( matcherOut = [] ), temp, xml );\n                }\n\n                // Move matched elements from seed to results to keep them synchronized\n                i = matcherOut.length;\n                while ( i-- ) {\n                    if ( ( elem = matcherOut[ i ] ) &&\n                        ( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n                        seed[ temp ] = !( results[ temp ] = elem );\n                    }\n                }\n            }\n\n        // Add elements to results, through postFinder if defined\n        } else {\n            matcherOut = condense(\n                matcherOut === results ?\n                    matcherOut.splice( preexisting, matcherOut.length ) :\n                    matcherOut\n            );\n            if ( postFinder ) {\n                postFinder( null, results, matcherOut, xml );\n            } else {\n                push.apply( results, matcherOut );\n            }\n        }\n    } );\n}\n\nfunction matcherFromTokens( tokens ) {\n    var checkContext, matcher, j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[ tokens[ 0 ].type ],\n        implicitRelative = leadingRelative || Expr.relative[ \" \" ],\n        i = leadingRelative ? 1 : 0,\n\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator( function( elem ) {\n            return elem === checkContext;\n        }, implicitRelative, true ),\n        matchAnyContext = addCombinator( function( elem ) {\n            return indexOf.call( checkContext, elem ) > -1;\n        }, implicitRelative, true ),\n        matchers = [ function( elem, context, xml ) {\n            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n                ( checkContext = context ).nodeType ?\n                    matchContext( elem, context, xml ) :\n                    matchAnyContext( elem, context, xml ) );\n\n            // Avoid hanging onto element (issue #299)\n            checkContext = null;\n            return ret;\n        } ];\n\n    for ( ; i < len; i++ ) {\n        if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n            matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n        } else {\n            matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n            // Return special upon seeing a positional matcher\n            if ( matcher[ expando ] ) {\n\n                // Find the next relative operator (if any) for proper handling\n                j = ++i;\n                for ( ; j < len; j++ ) {\n                    if ( Expr.relative[ tokens[ j ].type ] ) {\n                        break;\n                    }\n                }\n                return setMatcher(\n                    i > 1 && elementMatcher( matchers ),\n                    i > 1 && toSelector(\n\n                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n                        tokens.slice( 0, i - 1 )\n                            .concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n                    ).replace( rtrim, \"$1\" ),\n                    matcher,\n                    i < j && matcherFromTokens( tokens.slice( i, j ) ),\n                    j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n                    j < len && toSelector( tokens )\n                );\n            }\n            matchers.push( matcher );\n        }\n    }\n\n    return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n    var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function( seed, context, xml, results, outermost ) {\n            var elem, j, matcher,\n                matchedCount = 0,\n                i = \"0\",\n                unmatched = seed && [],\n                setMatched = [],\n                contextBackup = outermostContext,\n\n                // We must always have either seed elements or outermost context\n                elems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n                // Use integer dirruns iff this is the outermost matcher\n                dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 );\n\n            if ( outermost ) {\n\n                // Support: IE 11+\n                // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                // two documents; shallow comparisons work.\n                // eslint-disable-next-line eqeqeq\n                outermostContext = context == document || context || outermost;\n            }\n\n            // Add elements passing elementMatchers directly to results\n            for ( ; ( elem = elems[ i ] ) != null; i++ ) {\n                if ( byElement && elem ) {\n                    j = 0;\n\n                    // Support: IE 11+\n                    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                    // two documents; shallow comparisons work.\n                    // eslint-disable-next-line eqeqeq\n                    if ( !context && elem.ownerDocument != document ) {\n                        setDocument( elem );\n                        xml = !documentIsHTML;\n                    }\n                    while ( ( matcher = elementMatchers[ j++ ] ) ) {\n                        if ( matcher( elem, context || document, xml ) ) {\n                            push.call( results, elem );\n                            break;\n                        }\n                    }\n                    if ( outermost ) {\n                        dirruns = dirrunsUnique;\n                    }\n                }\n\n                // Track unmatched elements for set filters\n                if ( bySet ) {\n\n                    // They will have gone through all possible matchers\n                    if ( ( elem = !matcher && elem ) ) {\n                        matchedCount--;\n                    }\n\n                    // Lengthen the array for every element, matched or not\n                    if ( seed ) {\n                        unmatched.push( elem );\n                    }\n                }\n            }\n\n            // `i` is now the count of elements visited above, and adding it to `matchedCount`\n            // makes the latter nonnegative.\n            matchedCount += i;\n\n            // Apply set filters to unmatched elements\n            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n            // no element matchers and no seed.\n            // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n            // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n            // numerically zero.\n            if ( bySet && i !== matchedCount ) {\n                j = 0;\n                while ( ( matcher = setMatchers[ j++ ] ) ) {\n                    matcher( unmatched, setMatched, context, xml );\n                }\n\n                if ( seed ) {\n\n                    // Reintegrate element matches to eliminate the need for sorting\n                    if ( matchedCount > 0 ) {\n                        while ( i-- ) {\n                            if ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n                                setMatched[ i ] = pop.call( results );\n                            }\n                        }\n                    }\n\n                    // Discard index placeholder values to get only actual matches\n                    setMatched = condense( setMatched );\n                }\n\n                // Add matches to results\n                push.apply( results, setMatched );\n\n                // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                if ( outermost && !seed && setMatched.length > 0 &&\n                    ( matchedCount + setMatchers.length ) > 1 ) {\n\n                    jQuery.uniqueSort( results );\n                }\n            }\n\n            // Override manipulation of globals by nested matchers\n            if ( outermost ) {\n                dirruns = dirrunsUnique;\n                outermostContext = contextBackup;\n            }\n\n            return unmatched;\n        };\n\n    return bySet ?\n        markFunction( superMatcher ) :\n        superMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n    var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[ selector + \" \" ];\n\n    if ( !cached ) {\n\n        // Generate a function of recursive functions that can be used to check each element\n        if ( !match ) {\n            match = tokenize( selector );\n        }\n        i = match.length;\n        while ( i-- ) {\n            cached = matcherFromTokens( match[ i ] );\n            if ( cached[ expando ] ) {\n                setMatchers.push( cached );\n            } else {\n                elementMatchers.push( cached );\n            }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache( selector,\n            matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n        // Save selector and tokenization\n        cached.selector = selector;\n    }\n    return cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n    var i, tokens, token, type, find,\n        compiled = typeof selector === \"function\" && selector,\n        match = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n    results = results || [];\n\n    // Try to minimize operations if there is only one selector in the list and no seed\n    // (the latter of which guarantees us context)\n    if ( match.length === 1 ) {\n\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[ 0 ] = match[ 0 ].slice( 0 );\n        if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n                context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n            context = ( Expr.find.ID(\n                token.matches[ 0 ].replace( runescape, funescape ),\n                context\n            ) || [] )[ 0 ];\n            if ( !context ) {\n                return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n            } else if ( compiled ) {\n                context = context.parentNode;\n            }\n\n            selector = selector.slice( tokens.shift().value.length );\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n        while ( i-- ) {\n            token = tokens[ i ];\n\n            // Abort if we hit a combinator\n            if ( Expr.relative[ ( type = token.type ) ] ) {\n                break;\n            }\n            if ( ( find = Expr.find[ type ] ) ) {\n\n                // Search, expanding context for leading sibling combinators\n                if ( ( seed = find(\n                    token.matches[ 0 ].replace( runescape, funescape ),\n                    rsibling.test( tokens[ 0 ].type ) &&\n                        testContext( context.parentNode ) || context\n                ) ) ) {\n\n                    // If seed is empty or no tokens remain, we can return early\n                    tokens.splice( i, 1 );\n                    selector = seed.length && toSelector( tokens );\n                    if ( !selector ) {\n                        push.apply( results, seed );\n                        return results;\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n\n    // Compile and execute a filtering function if one is not provided\n    // Provide `match` to avoid retokenization if we modified the selector above\n    ( compiled || compile( selector, match ) )(\n        seed,\n        context,\n        !documentIsHTML,\n        results,\n        !context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n    );\n    return results;\n}\n\n// Initialize against the default document\nsetDocument();\n\njQuery.find = find;\n\n} )();\n","import jQuery from '../core.js';\nimport toType from './toType.js';\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function(elems, fn, key, value, chainable, emptyGet, raw) {\n    let i = 0,\n        len = elems.length,\n        bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === 'object') {\n        chainable = true;\n        for (i in key) {\n            access(elems, fn, i, key[i], true, emptyGet, raw);\n        }\n\n        // Sets one value\n    } else if (value !== undefined) {\n        chainable = true;\n\n        if (typeof value !== 'function') {\n            raw = true;\n        }\n\n        if (bulk) {\n\n            // Bulk operations run against the entire set\n            if (raw) {\n                fn.call(elems, value);\n                fn = null;\n\n                // ...except when executing function values\n            } else {\n                bulk = fn;\n                fn = function(elem, _key, value) {\n                    return bulk.call(jQuery(elem), value);\n                };\n            }\n        }\n\n        if (fn) {\n            for (; i < len; i++) {\n                fn(\n\t\t\t\t\telems[i], key, raw\n\t\t\t\t\t    ? value\n\t\t\t\t\t    : value.call(elems[i], i, fn(elems[i], key))\n                );\n            }\n        }\n    }\n\n    if (chainable) {\n        return elems;\n    }\n\n    // Gets\n    if (bulk) {\n        return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n};\n\nexport default access;\n","// Only count HTML whitespace\n// Other whitespace should count in values\n// https://infra.spec.whatwg.org/#ascii-whitespace\nexport default ( /[^\\x20\\t\\r\\n\\f]+/g );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport nodeName from \"../core/nodeName.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = elem.getAttribute( name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Support: IE <=11+\n// An input loses its value after becoming a radio\nif ( isIE ) {\n\tjQuery.attrHooks.type = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( value === \"radio\" && nodeName( elem, \"input\" ) ) {\n\t\t\t\tvar val = elem.value;\n\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\tif ( val ) {\n\t\t\t\t\telem.value = val;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tjQuery.attrHooks[ name ] = {\n\t\tget: function( elem ) {\n\t\t\tvar ret,\n\t\t\t\tisXML = jQuery.isXMLDoc( elem ),\n\t\t\t\tlowercaseName = name.toLowerCase();\n\n\t\t\tif ( !isXML ) {\n\t\t\t\tret = elem.getAttribute( name ) != null ?\n\t\t\t\t\tlowercaseName :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( value === false ) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, name );\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n} );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = elem.getAttribute( \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\n\t\t\t\t\t// href-less anchor's `tabIndex` property value is `0` and\n\t\t\t\t\t// the `tabindex` attribute value: `null`. We want `-1`.\n\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11+\n// Accessing the selectedIndex property forces the browser to respect\n// setting selected on the option. The getter ensures a default option\n// is selected when in an optgroup. ESLint rule \"no-unused-expressions\"\n// is disabled for this code since it considers such accessions noop.\nif ( isIE ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n","import rnothtmlwhite from '../var/rnothtmlwhite.js';\n\n// Strip and collapse whitespace according to HTML spec\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nfunction stripAndCollapse( value ) {\n\tvar tokens = value.match( rnothtmlwhite ) || [];\n\treturn tokens.join( \" \" );\n}\n\nexport default stripAndCollapse;\n","// rsingleTag matches a string consisting of a single HTML element with no attributes\n// and captures the element's name\nexport default ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n","import jQuery from \"../../core.js\";\n\nimport \"../../selector.js\";\n\nexport default jQuery.expr.match.needsContext;\n","import jQuery from \"../core.js\";\nimport indexOf from \"../var/indexOf.js\";\nimport rneedsContext from \"./var/rneedsContext.js\";\n\nimport \"../selector.js\";\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( typeof qualifier === \"function\" ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n","// Initialize a jQuery object\nimport jQuery from '../core.js';\nimport document from '../var/document.js';\n\nimport rsingleTag from './var/rsingleTag.js';\n\nimport '../traversing/findFilter.js';\n\n// A central reference to the root jQuery(document)\nlet rootjQuery,\n\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n    // Strict HTML recognition (#11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n    init = jQuery.fn.init = function(selector, context, root) {\n        let elem, match;\n\n        // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n        if (!selector) {\n            return this;\n        }\n\n        // Method init() accepts an alternate rootjQuery\n        // so migrate can support jQuery.sub (gh-2101)\n        root = root || rootjQuery;\n\n        // Handle HTML strings\n        if (typeof selector === 'string') {\n            if (selector[0] === '<'\n\t\t\t\t&& selector[selector.length - 1] === '>'\n\t\t\t\t&& selector.length >= 3) {\n\n                // Assume that strings that start and end with <> are HTML and skip the regex check\n                match = [ null, selector, null ];\n\n            } else {\n                match = rquickExpr.exec(selector);\n            }\n\n            // Match html or make sure no context is specified for #id\n            if (match && (match[1] || !context)) {\n\n                // HANDLE: $(html) -> $(array)\n                if (match[1]) {\n                    context = context instanceof jQuery ? context[0] : context;\n\n                    // Option to run scripts is true for back-compat\n                    // Intentionally let the error be thrown if parseHTML is not present\n                    jQuery.merge(this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n                    ));\n\n                    // HANDLE: $(html, props)\n                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n                        for (match in context) {\n\n                            // Properties of context are called as methods if possible\n                            if (typeof this[match] === 'function') {\n                                this[match](context[match]);\n\n                                // ...and otherwise set as attributes\n                            } else {\n                                this.attr(match, context[match]);\n                            }\n                        }\n                    }\n\n                    return this;\n\n                    // HANDLE: $(#id)\n                }\n                elem = document.getElementById(match[2]);\n\n                if (elem) {\n\n                    // Inject the element directly into the jQuery object\n                    this[0] = elem;\n                    this.length = 1;\n                }\n\n                return this;\n\n\n                // HANDLE: $(expr, $(...))\n            } else if (!context || context.jquery) {\n                return (context || root).find(selector);\n\n                // HANDLE: $(expr, context)\n                // (which is just equivalent to: $(context).find(expr)\n            }\n\n            return this.constructor(context).find(selector);\n\n\n            // HANDLE: $(DOMElement)\n        } else if (selector.nodeType) {\n            this[0] = selector;\n            this.length = 1;\n\n            return this;\n\n            // HANDLE: $(function)\n            // Shortcut for document ready\n        } else if (typeof selector === 'function') {\n            return root.ready !== undefined\n                ? root.ready(selector)\n\n            // Execute immediately if ready is not present\n                : selector(jQuery);\n        }\n\n        return jQuery.makeArray(selector, this);\n    };\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery(document);\n","import jQuery from \"../core.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\n\nimport \"../core/init.js\";\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\t// Toggle individual class names\n\t\t\ti = 0;\n\t\t\tself = jQuery( this );\n\t\t\tclassNames = classesToArray( value );\n\n\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t// Check each className given, space separated list\n\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\tself.removeClass( className );\n\t\t\t\t} else {\n\t\t\t\t\tself.addClass( className );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n","import jQuery from \"../core.js\";\nimport isIE from \"../var/isIE.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport nodeName from \"../core/nodeName.js\";\n\nimport \"../core/init.js\";\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = typeof value === \"function\";\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( option.selected &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery( option ).val(), values ) > -1\n\t\t\t\t\t) ) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\nif ( isIE ) {\n\tjQuery.valHooks.option = {\n\t\tget: function( elem ) {\n\n\t\t\tvar val = elem.getAttribute( \"value\" );\n\t\t\treturn val != null ?\n\t\t\t\tval :\n\n\t\t\t\t// Support: IE <=10 - 11+\n\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t}\n\t};\n}\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n} );\n","import jQuery from './core.js';\n\nimport \"./attributes/attr.js\";\nimport \"./attributes/prop.js\";\nimport \"./attributes/classes.js\";\nimport \"./attributes/val.js\";\n\n// Return jQuery for attributes-only inclusion\nexport default jQuery;\n","import jQuery from '../core.js';\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11+\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n","import jQuery from \"./core.js\";\nimport access from \"./core/access.js\";\nimport \"./core/init.js\";\n\n\njQuery.fn.extend( {\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t}\n} );\n\n\n\nexport default jQuery;\n","import jQuery from './core.js';\n\nimport './selector.js';\nimport './attributes.js';\nimport './core/parseXML.js';\nimport './exports/global.js';\nimport './manipulation.js';\n\n\nexport default jQuery;\n","import arr from \"./arr.js\";\n\nexport default arr.push;\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","// [[Class]] -> type pairs\nexport default {};\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: true,\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\nexport const conferenceConfig = {\n    enableAnalytics: true,\n    enableLocalRecording: false,\n    enableVirtualBackground: false,\n    enableNoiseCancellation: false,\n    rtcstatsServer: \"\",\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true, \n    enableNoisyMicDetection: true,\n    openBridgeChannel: 'websocket', //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n     hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    // enableLayerSuspension - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping:{\n        pingInterval: -1,\n     // analyticsInterval: 60000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false,\n\n        // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n\n\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n\n\n","import arr from \"./arr.js\";\n\nexport default arr.indexOf;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    }\n};\n\nexport default ScreenObtainer;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return JitsiMeetJS.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, Olm */\n\nimport base64js from 'base64-js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n","// @flow\n\nimport SariskaMediaTransport from '../../../SariskaMediaTransport';\n/**\n * Class Implementing the effect interface expected by a JitsiLocalTrack.\n * The AudioMixerEffect, as the name implies, mixes two JitsiLocalTracks containing a audio track. First track is\n * provided at the moment of creation, second is provided through the effect interface.\n */\nexport class AudioMixerEffect {\n    /**\n     * JitsiLocalTrack that is going to be mixed into the track that uses this effect.\n     */\n    _mixAudio: Object;\n\n    /**\n     * MediaStream resulted from mixing.\n     */\n    _mixedMediaStream: Object;\n\n    /**\n     * MediaStreamTrack obtained from mixed stream.\n     */\n    _mixedMediaTrack: Object;\n\n    /**\n     * Original MediaStream from the JitsiLocalTrack that uses this effect.\n     */\n    _originalStream: Object;\n\n    /**\n     * MediaStreamTrack obtained from the original MediaStream.\n     */\n    _originalTrack: Object;\n\n    /**\n     * lib-jitsi-meet AudioMixer.\n     */\n    _audioMixer: Object;\n\n    /**\n     * Creates AudioMixerEffect.\n     *\n     * @param {JitsiLocalTrack} mixAudio - JitsiLocalTrack which will be mixed with the original track.\n     */\n    constructor(mixAudio: Object) {\n        if (mixAudio.getType() !== \"audio\") {\n            throw new Error('AudioMixerEffect only supports audio JitsiLocalTracks; effect will not work!');\n        }\n\n        this._mixAudio = mixAudio;\n    }\n\n    /**\n     * Checks if the JitsiLocalTrack supports this effect.\n     *\n     * @param {JitsiLocalTrack} sourceLocalTrack - Track to which the effect will be applied.\n     * @returns {boolean} - Returns true if this effect can run on the specified track, false otherwise.\n     */\n    isEnabled(sourceLocalTrack: Object) {\n        // Both JitsiLocalTracks need to be audio i.e. contain an audio MediaStreamTrack\n        return sourceLocalTrack.isAudioTrack() && this._mixAudio.isAudioTrack();\n    }\n\n    /**\n     * Effect interface called by source JitsiLocalTrack, At this point a WebAudio ChannelMergerNode is created\n     * and and the two associated MediaStreams are connected to it; the resulting mixed MediaStream is returned.\n     *\n     * @param {MediaStream} audioStream - Audio stream which will be mixed with _mixAudio.\n     * @returns {MediaStream} - MediaStream containing both audio tracks mixed together.\n     */\n    startEffect(audioStream: MediaStream) {\n        this._originalStream = audioStream;\n        this._originalTrack = audioStream.getTracks()[0];\n\n        this._audioMixer = SariskaMediaTransport.createAudioMixer();\n        this._audioMixer.addMediaStream(this._mixAudio.getOriginalStream());\n        this._audioMixer.addMediaStream(this._originalStream);\n\n        this._mixedMediaStream = this._audioMixer.start();\n        this._mixedMediaTrack = this._mixedMediaStream.getTracks()[0];\n\n        // Sync the resulting mixed track enabled state with that of the track using the effect.\n        this.setMuted(!this._originalTrack.enabled);\n        this._originalTrack.enabled = true;\n\n        return this._mixedMediaStream;\n    }\n\n    /**\n     * Reset the AudioMixer stopping it in the process.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        // Match state of the original track with that of the mixer track, not doing so can\n        // result in an inconsistent state e.g. redux state is muted yet track is enabled.\n        this._originalTrack.enabled = this._mixedMediaTrack.enabled;\n        this._audioMixer.reset();\n    }\n\n    /**\n     * Change the muted state of the effect.\n     *\n     * @param {boolean} muted - Should effect be muted or not.\n     * @returns {void}\n     */\n    setMuted(muted: boolean) {\n        this._mixedMediaTrack.enabled = !muted;\n    }\n\n    /**\n     * Check whether or not this effect is muted.\n     *\n     * @returns {boolean}\n     */\n    isMuted() {\n        return !this._mixedMediaTrack.enabled;\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL,\n    timerWorkerScript\n} from './TimeWorker';\n\n/**\n * Represents a modified MediaStream that adds video as pip on a desktop stream.\n * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n * desktop stream.\n */\nexport default class JitsiStreamPresenterEffect {\n    _canvas: HTMLCanvasElement;\n    _ctx: CanvasRenderingContext2D;\n    _desktopElement: HTMLVideoElement;\n    _desktopStream: MediaStream;\n    _frameRate: number;\n    _onVideoFrameTimer: Function;\n    _onVideoFrameTimerWorker: Function;\n    _renderVideo: Function;\n    _videoFrameTimerWorker: Worker;\n    _videoElement: HTMLVideoElement;\n    isEnabled: Function;\n    startEffect: Function;\n    stopEffect: Function;\n\n    /**\n     * Represents a modified MediaStream that adds a camera track at the\n     * bottom right corner of the desktop track using a HTML canvas.\n     * <tt>JitsiStreamPresenterEffect</tt> does the processing of the original\n     * video stream.\n     *\n     * @param {MediaStream} videoStream - The video stream which is user for\n     * creating the canvas.\n     */\n    constructor(videoStream: MediaStream) {\n        const videoDiv = document.createElement('div');\n        const firstVideoTrack = videoStream.getVideoTracks()[0];\n        const { height, width, frameRate } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        this._canvas = document.createElement('canvas');\n        this._ctx = this._canvas.getContext('2d');\n\n        this._desktopElement = document.createElement('video');\n        this._videoElement = document.createElement('video');\n        videoDiv.appendChild(this._videoElement);\n        videoDiv.appendChild(this._desktopElement);\n        if (document.body !== null) {\n            document.body.appendChild(videoDiv);\n        }\n\n        // Set the video element properties\n        this._frameRate = parseInt(frameRate, 10);\n        this._videoElement.width = parseInt(width, 10);\n        this._videoElement.height = parseInt(height, 10);\n        this._videoElement.autoplay = true;\n        this._videoElement.srcObject = videoStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._videoElement.play();\n\n        // set the style attribute of the div to make it invisible\n        videoDiv.style.display = 'none';\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onVideoFrameTimer = this._onVideoFrameTimer.bind(this);\n    }\n\n    /**\n     * EventHandler onmessage for the videoFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onVideoFrameTimer(response) {\n        if (response.data.id === INTERVAL_TIMEOUT) {\n            this._renderVideo();\n        }\n    }\n\n    /**\n     * Loop function to render the video frame input and draw presenter effect.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderVideo() {\n        // adjust the canvas width/height on every frame incase the window has been resized.\n        const [ track ] = this._desktopStream.getVideoTracks();\n        const { height, width } = track.getSettings() ?? track.getConstraints();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._ctx.drawImage(this._desktopElement, 0, 0, this._canvas.width, this._canvas.height);\n        this._ctx.drawImage(this._videoElement, this._canvas.width - this._videoElement.width, this._canvas.height\n            - this._videoElement.height, this._videoElement.width, this._videoElement.height);\n\n        // draw a border around the video element.\n        this._ctx.beginPath();\n        this._ctx.lineWidth = 2;\n        this._ctx.strokeStyle = '#A9A9A9'; // dark grey\n        this._ctx.rect(this._canvas.width - this._videoElement.width, this._canvas.height - this._videoElement.height,\n            this._videoElement.width, this._videoElement.height);\n        this._ctx.stroke();\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the\n     * specified track, false otherwise.\n     */\n    isEnabled(jitsiLocalTrack: Object) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'desktop';\n    }\n\n    /**\n     * Starts loop to capture video frame and render presenter effect.\n     *\n     * @param {MediaStream} desktopStream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(desktopStream: MediaStream) {\n        const firstVideoTrack = desktopStream.getVideoTracks()[0];\n        const { height, width } = firstVideoTrack.getSettings() ?? firstVideoTrack.getConstraints();\n\n        // set the desktop element properties.\n        this._desktopStream = desktopStream;\n        this._desktopElement.width = parseInt(width, 10);\n        this._desktopElement.height = parseInt(height, 10);\n        this._desktopElement.autoplay = true;\n        this._desktopElement.srcObject = desktopStream;\n\n        // autoplay is not enough to start the video on Safari, it's fine to call play() on other platforms as well\n        this._desktopElement.play();\n\n        this._canvas.width = parseInt(width, 10);\n        this._canvas.height = parseInt(height, 10);\n        this._videoFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Presenter effect worker' });\n        this._videoFrameTimerWorker.onmessage = this._onVideoFrameTimer;\n        this._videoFrameTimerWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: 1000 / this._frameRate\n        });\n\n        return this._canvas.captureStream(this._frameRate);\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._videoFrameTimerWorker.postMessage({\n            id: CLEAR_INTERVAL\n        });\n        this._videoFrameTimerWorker.terminate();\n    }\n\n}\n","// @flow\n\nimport JitsiStreamPresenterEffect from './JitsiStreamPresenterEffect';\n\n/**\n * Creates a new instance of JitsiStreamPresenterEffect.\n *\n * @param {MediaStream} stream - The video stream which will be used for\n * creating the presenter effect.\n * @returns {Promise<JitsiStreamPresenterEffect>}\n */\nexport function createPresenterEffect(stream: MediaStream) {\n    if (!MediaStreamTrack.prototype.getSettings\n        && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('JitsiStreamPresenterEffect not supported!'));\n    }\n\n    return Promise.resolve(new JitsiStreamPresenterEffect(stream));\n}\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\ndeclare var interfaceConfig: Object;\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n     callback: Function;\n    _currentCanvas: HTMLCanvasElement;\n    _currentCanvasContext: CanvasRenderingContext2D;\n    _videoElement: HTMLVideoElement;\n    _handleWorkerAction: Function;\n    _initScreenshotCapture: Function;\n    _streamWorker: Worker;\n    _streamHeight: any;\n    _streamWidth: any;\n    _storedImageData: Uint8ClampedArray;\n\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback: Function) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream: MediaStream, videoType: string) {\n        return new Promise<void>((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message: Object) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels: number) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback: Function) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\n\nimport E2EEContext from './E2EEContext';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        this._conferenceJoined = false;\n        this._enabled = false;\n        this._key = undefined;\n        this._enabling = undefined;\n\n        this._e2eeCtx = new E2EEContext();\n        this._olmAdapter = new OlmAdapter(conference);\n\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n\n        // Participant join / leave operations. Used for key advancement / rotation.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents.CONFERENCE_JOINED,\n            () => {\n                this._conferenceJoined = true;\n            });\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.OLM_ID_KEY_READY,\n            this._onOlmIdKeyReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\n            this._onParticipantE2EEChannelReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        return browser.supportsInsertableStreams()\n            && OlmAdapter.isSupported()\n            && !(config.testing && config.testing.disableE2EE);\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this._enabled = enabled;\n\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            for (const participant of this.conference.getParticipants()) {\n                this._e2eeCtx.cleanup(participant.getId());\n            }\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Publushes our own Olmn id key in presence.\n     * @private\n     */\n    _onOlmIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this._enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this._e2eeCtx.cleanup(id);\n\n        if (this._enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this._e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this._enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n\n                this._rotateKey();\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SignalingLayerImpl from './SignalingLayerImpl';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC standard.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (!this.isP2P && browser.isChromiumBased() && options.enableUnifiedOnChrome));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`${this} onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info(`${this} Sending session-accept`, accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info(`${this} Sending transport-accept: `, transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info(`${this} Sending 'transport-reject'`, transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the maximum bitrates on the local video track. Bitrate values from\n     * videoQuality settings in config.js will be used for configuring the sender.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderMaxBitrates() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setMaxBitRate();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the degradation preference on the video sender. This setting determines if\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoDegradationPreference() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setSenderVideoDegradationPreference();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info(`${this} Sending session-terminate`, sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(`${this} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {Promise<JitsiRemoteTrack>} Promise that resolves with the tracks that are removed or error if the\n     * operation fails.\n     */\n    removeRemoteStreamsOnLeave(id) {\n        let remoteTracks = [];\n\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                remoteTracks = this.peerconnection.removeRemoteTracks(id);\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                        resolve(remoteTracks);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(`${this} ${logPrefix} - OK`);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${this} ${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n\n                        // The current direction of the transceiver for p2p will depend on whether a local sources is\n                        // added or not. It will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n\n                        // Jvb connections will have direction set to 'sendonly' when the remote ssrc is present.\n                        } else {\n                            // Change the direction to \"inactive\" always for jvb connection.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv' only for p2p connections. For jvb connections, a new\n            // m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack && newTrack.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // FIXME set all sender parameters in one go?\n                            // Set the degradation preference on the new video sender.\n                            return this.peerconnection.setSenderVideoDegradationPreference()\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\n                                .then(() => this.peerconnection.setMaxBitRate());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Apply the video constraints, max bitrates and degradation preference on\n                // the video sender if needed.\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\n                    return this.setSenderMaxBitrates()\n                        .then(() => this.setSenderVideoDegradationPreference())\n                        .then(() => this.setSenderVideoConstraint());\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info(`${this} Sending source-remove`, remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info(`${this} Sending source-add`, add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     * @param videoBitrates - the bitrates to be configured on the video senders for\n     * different resolutions both in unicast and simulcast mode.\n     */\n    constructor(peerconnection, videoBitrates) {\n        this.pc = peerconnection;\n        this.videoBitrates = videoBitrates.VP8 || videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: this.videoBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    _findTransceiver(mediaType, localTrack = null) {\n        let transceiver = null;\n\n        // Check if the local track has been removed from the peerconnection already.\n        const trackRemoved = !localTrack\n            || (localTrack\n                && browser.doesVideoMuteByStreamRemove()\n                && localTrack.isVideoTrack()\n                && localTrack.isMuted());\n\n        if (trackRemoved) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver?.track?.kind === mediaType);\n        } else if (localTrack) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.sender?.track?.id === localTrack.getTrackId());\n        }\n\n        return transceiver;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n        const transceiver = this._findTransceiver(mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`${this.pc} Adding ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n     * Obtains the current local video track's height constraints based on the\n     * initial stream encodings configuration on the sender and the resolution\n     * of the current local track added to the peerconnection.\n     * @param {MediaStreamTrack} localTrack local video track\n     * @returns {Array[number]} an array containing the resolution heights of\n     * simulcast streams configured on the video sender.\n     */\n    getLocalStreamHeightConstraints(localTrack) {\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\n        if (browser.isReactNative()) {\n            return null;\n        }\n\n        const localVideoHeightConstraints = [];\n\n        // Firefox doesn't return the height of the desktop track, assume a min. height of 720.\n        const { height = 720 } = localTrack.getSettings();\n\n        for (const encoding of this.localStreamEncodingsConfig) {\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\n        }\n\n        return localVideoHeightConstraints;\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this._findTransceiver(mediaType, localTrack);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`${this.pc} Removing ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(null);\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n\n            // Ignore cases when the track is replaced while the device is in a muted state,like\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\n            // do not have a mediastream attached. Replace track will be called again when the device is\n            // unmuted and the track will be replaced on the peerconnection then.\n            if (!stream) {\n                this.pc.localTracks.delete(oldTrack.rtcId);\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                return Promise.resolve();\n            }\n\n            const transceiver = this._findTransceiver(mediaType, oldTrack);\n            const track = newTrack.getTrack();\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                });\n        } else if (oldTrack && !newTrack) {\n            return this.removeTrackMute(oldTrack)\n                .then(() => {\n                    const mediaType = oldTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType);\n\n                    // Change the direction on the transceiver to 'recvonly' so that a 'removetrack'\n                    // is fired on the associated media stream on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.RECVONLY;\n                    }\n\n                    // Remove the old track from the list of local tracks.\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                });\n        } else if (newTrack && !oldTrack) {\n            return this.addTrackUnmute(newTrack)\n                .then(() => {\n                    const mediaType = newTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType, newTrack);\n\n                    // Change the direction on the transceiver back to 'sendrecv' so that a 'track'\n                    // event is fired on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.SENDRECV;\n                    }\n\n                    // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                    // for the newly added track using SDP munging which happens during the renegotiation.\n                    const promise = browser.usesSdpMungingForSimulcast()\n                        ? Promise.resolve()\n                        : this.setEncodings(newTrack);\n\n                    return promise\n                        .then(() => {\n                            // Add the new track to the list of local tracks.\n                            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n                        });\n                });\n        }\n\n        logger.info(`${this.pc} TPCUtils.replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this._findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* global __filename */\nimport './dom/jquery.js';\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {initSDKConfig} from './config';\nimport {AudioMixerEffect, createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        AudioMixerEffect,\n        createPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    _model: Object;\n    _options: Object;\n    _desktopShareDimensions: Object;\n    _segmentationPixelCount: number;\n    _inputVideoElement: HTMLVideoElement;\n    _onMaskFrameTimer: Function;\n    _maskFrameTimerWorker: Worker;\n    _outputCanvasElement: HTMLCanvasElement;\n    _outputCanvasCtx: Object;\n    _segmentationMaskCtx: Object;\n    _segmentationMask: Object;\n    _segmentationMaskCanvas: Object;\n    _renderMask: Function;\n    _virtualImage: HTMLImageElement;\n    _virtualVideo: HTMLVideoElement;\n    isEnabled: Function;\n    startEffect: Function;\n    stopEffect: Function;\n\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model: Object, options: Object) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response: Object) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack: Object) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream: MediaStream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\n\nimport * as wasmCheck from 'wasm-check';\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport { ScriptUtil } from '../../util/ScriptUtil';\n\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground: Object) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n\n    if (wasmCheck.feature.simd) {\n        tflite = await createTFLiteSIMDModule();\n    } else {\n        tflite = await createTFLiteModule();\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}\n\nexport async function loadModelFiles() {\n    ScriptUtil.loadScript('https://sdk.sariska.io/tflite');\n    ScriptUtil.loadScript('https://sdk.sariska.io/tflite-simd');\n}\n\n\n","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH: number = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE: number = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY: number = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Rnnoise context object needed to perform the audio processing.\n     */\n    _context: ?Object;\n\n    /**\n     * State flag, check if the instance was destroyed.\n     */\n    _destroyed: boolean = false;\n\n    /**\n     * WASM interface through which calls to rnnoise are made.\n     */\n    _wasmInterface: Object;\n\n    /**\n     * WASM dynamic memory buffer used as input for rnnoise processing method.\n     */\n    _wasmPcmInput: Object;\n\n    /**\n     * The Float32Array index representing the start point in the wasm heap of the _wasmPcmInput buffer.\n     */\n    _wasmPcmInputF32Index: number;\n\n    /**\n     * WASM dynamic memory buffer used as output for rnnoise processing method.\n     */\n    _wasmPcmOutput: Object;\n\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface: Object) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample: Float32Array) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array: Float32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame: Float32Array) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport RnnoiseProcessor from './RnnoiseProcessor';\nimport { ScriptUtil } from '../../util/ScriptUtil';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport type { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n\nexport function loadRnnoiseFile() {\n    ScriptUtil.loadScript('https://sdk.sariska.io/index.js');\n}\n","import class2type from \"./class2type.js\";\n\nexport default class2type.toString;\n","import class2type from '../var/class2type.js';\nimport toString from '../var/toString.js';\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\treturn typeof obj === \"object\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n\nexport default toType;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","export * from './controller';\nexport function loadLocalRecordingAssets () {\n\t\n}","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","export * from './SessionManager';\n","\"use strict\";function e(e,r){if(!s)return!1;const n=e.buffer;let u=g.get(n);if(null==u){if((u=t.validate(n))&&r)try{new t.Instance(new t.Module(n)).exports[0]()}catch(e){u=!1}g.set(n,u)}return u}const t=WebAssembly,r=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),n=(...e)=>Uint32Array.of(1836278016,1,...e),u=(...e)=>n(1610679297,33751040,...e,40239360,259),i=(...e)=>r(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),o=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),a=(...e)=>o(...e,2842,4096,28164,28001,357,260,256,560,259,0),s=\"object\"==typeof t,f=e=>s&&\"function\"==typeof e,g=new WeakMap,l=n(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=o(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=n(1610679297,33751040,134873089,100664833,185276736),y=r(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),m=a(3082,2561,17152,0,0,252),A=a(2058,1537,16640,49152),d=u(101318657,301990913,268438272,1835101700,17039717),U=i(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=u(84344833,6357249,17369600,4259847,186257917,1845758464),w=i(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>s&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return f(t.instantiateStreaming)},feature:{get bigInt(){return e(l,!0)},get bulk(){return e(c)},get exceptions(){return e(p)},get mutableGlobal(){return e(y)},get multiValue(){return e(b)},get saturateConversions(){return e(m)},get signExtensions(){return e(A)},get tailCall(){return e(d)},get threads(){return e(U)},get simd(){return e(x)},get references(){return e(w)},get typeReflection(){return f(t.Memory.type)},get funcReferences(){return f(t.Function)}}};","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    var start = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return bytesToUuid(rnds);\n}\n\nexport default v4;","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\ntype RecordingStats = {\n\n    /**\n     * Current local recording session token used by the participant.\n     */\n    currentSessionToken: number,\n\n    /**\n     * Whether local recording is engaged on the participant's device.\n     */\n    isRecording: boolean,\n\n    /**\n     * Total recorded bytes. (Reserved for future use.)\n     */\n    recordedBytes: number,\n\n    /**\n     * Total recording duration. (Reserved for future use.)\n     */\n    recordedLength: number\n}\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference: * = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken: number = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n    /**\n     * FIXME: callback function for the {@code RecordingController} to notify\n     * UI it wants to display a notice. Keeps {@code RecordingController}\n     * decoupled from UI.\n     */\n    _onNotify: ?(messageKey: string, messageParams?: Object) => void;\n\n    /**\n     * FIXME: callback function for the {@code RecordingController} to notify\n     * UI it wants to display a warning. Keeps {@code RecordingController}\n     * decoupled from UI.\n     */\n    _onWarning: ?(messageKey: string, messageParams?: Object) => void;\n\n    /**\n     * FIXME: callback function for the {@code RecordingController} to notify\n     * UI that the local recording state has changed.\n     */\n    _onStateChanged: ?(boolean) => void;\n\n    /**\n     * Constructor.\n     *\n     * @returns {void}\n     */\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n\n    registerEvents: () => void;\n\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference: Object) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate: Function) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate: Function) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate: Function) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format: string) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken: number) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId: string) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted: boolean) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat: string) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats(): RecordingStats {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n\n    getParticipantsStats: () => *;\n\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n\n    _changeState: (Symbol) => void;\n\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState: Symbol) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n\n    _updateStats: () => void;\n\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n\n    _onStartCommand: (*) => void;\n\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n\n    _onStopCommand: (*) => void;\n\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n\n    _onPingCommand: () => void;\n\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n\n    _doStartRecording: () => void;\n\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n\n    _doStopRecording: () => Promise<void>;\n\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return (Promise.resolve(): Promise<void>);\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n\n    _switchToNewSession: (string, string) => void;\n\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        // FIXME: Workaround for different file names in development/\n        // production environments.\n        // We cannot import flacEncodeWorker as a webpack module,\n        // because it is in a different bundle and should be lazy-loaded\n        // only when flac recording is in use.\n        try {\n            // try load the minified version first\n            this._encoder = new Worker('https://sdk.sariska.io/flacEncodeWorker.min.js', { name: 'FLAC encoder worker' });\n        } catch (exception1) {\n            // if failed, try unminified version\n            try {\n                this._encoder = new Worker('https://sdk.sariska.io/flacEncodeWorker.js', { name: 'FLAC encoder worker' });\n            } catch (exception2) {\n                throw new Error('Failed to load flacEncodeWorker.');\n            }\n        }\n    }\n}\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime(): number {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\ntype SessionEvent = {\n\n    /**\n     * The type of the event.\n     * Should be one of the values in {@code SessionEventType}.\n     */\n    type: string,\n\n    /**\n     * The timestamp of the event.\n     */\n    timestamp: number\n};\n\n/**\n * Representation of the metadata of a segment.\n */\ntype SegmentInfo = {\n\n    /**\n     * The length of gap before this segment, in milliseconds.\n     * mull if unknown.\n     */\n    gapBefore?: ?number,\n\n    /**\n     * The duration of this segment, in milliseconds.\n     * null if unknown or the segment is not finished.\n     */\n    duration?: ?number,\n\n    /**\n     * The start time, in milliseconds.\n     */\n    start?: ?number,\n\n    /**\n     * The end time, in milliseconds.\n     * null if unknown, the segment is not finished, or the recording is\n     * interrupted (e.g. browser reload).\n     */\n    end?: ?number\n};\n\n/**\n * Representation of metadata of a local recording session.\n */\ntype SessionInfo = {\n\n    /**\n     * The session token.\n     */\n    sessionToken: string,\n\n    /**\n     * The start time of the session.\n     */\n    start: ?number,\n\n    /**\n     * The recording format.\n     */\n    format: string,\n\n    /**\n     * Array of segments in the session.\n     */\n    segments: SegmentInfo[]\n}\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken: string, format: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(): SessionInfo[] {\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo: SessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken: string) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken: string): SegmentInfo[] {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events: SessionEvent[]): SegmentInfo[] {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment: SegmentInfo = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\nimport {connectionConfig, conferenceConfig} from './config';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, options={}) {\n    options = {...connectionConfig, ...options};\n\n    this.token = token;\n    const jwt = this.parseJwt(token);\n    this.name = jwt ? jwt.room : null;\n    this.user = jwt.context.user;\n    this.options = options;\n    this.xmpp = new XMPP(options, token, this.name);\n    this.token = token;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n        return JSON.parse(atob(token.split('.')[1]));\n    }\n    catch (e) {\n        return null;\n    }\n};\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = {...conferenceConfig, ...options};\n    const name  = this.name;\n    return new JitsiConference({\n        name,\n        config: this.options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\nimport {conferenceDefaultOptions} from './config';\nimport {RecordingController} from \"./modules/local-recording\";\nimport {loadModelFiles} from \"./modules/stream-effects/virtual-background\";\nimport {loadRnnoiseFile} from \"./modules/stream-effects/rnnoise\";\nimport {loadLocalRecordingAssets} from \"./modules/local-recording\";\nimport {conferenceConfig} from './config';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    options = {...conferenceConfig, ...options};\n\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.user = options.user;\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryprtion is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    this.handleSubtitles();\n\n    if (options.enableLocalRecording) {\n        this.enableLocalRecording();\n    }\n\n    if (options.enableNoiseCancellation) {\n        this.enableVirtualBackground();\n    }\n\n    if (options.enableVirtualBackground) {\n        this.enableVirtualBackground();\n    }\n\n    if (options.enableAnalytics) {\n        this.enableAnalytics();\n    }\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        const videoType = track.isMuted() ? VideoType.NONE : track.getVideoType();\n\n        this.rtc.setVideoType(videoType);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    return this.getLocalTracks()\n        .filter(track => (track.getType() === MediaType.AUDIO && !this.isStartAudioMuted())\n        || (track.getType() === MediaType.VIDEO && !this.isStartVideoMuted()));\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n\n            // Send 'VideoTypeMessage' on the bridge channel for the new track.\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the JitsiConference level\n                this._setupNewTrack(newTrack);\n                newTrack.isVideoTrack() && this.rtc.setVideoType(newTrack.getVideoType());\n            } else {\n                oldTrack && oldTrack.isVideoTrack() && this.rtc.setVideoType(VideoType.NONE);\n            }\n\n            if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        const videoTypeTagName = 'videoType';\n\n        // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (newTrack.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            this.sendCommand(videoTypeTagName, { value: newTrack.videoType });\n        }\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this.rtc.setVideoType(track.getVideoType());\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this.rtc.setVideoType(VideoType.NONE);\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    // Remove the ssrcs from the remote description.\n    const mediaSessions = this._getMediaSessions();\n    const removePromises = [];\n\n    for (const session of mediaSessions) {\n        removePromises.push(session.removeRemoteStreamsOnLeave(id));\n    }\n\n    Promise.allSettled(removePromises)\n        .then(results => {\n            let removedTracks = [];\n\n            results.map(result => result.value).forEach(value => {\n                if (value) {\n                    removedTracks = removedTracks.concat(value);\n                }\n            });\n\n            removedTracks.forEach(track => {\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n            });\n\n            // There can be no participant in case the member that left is focus.\n            if (participant) {\n                this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n            }\n\n            this._maybeStartOrStopP2P(true /* triggered by user left event */);\n            this._maybeClearSITimeout();\n        });\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.restartInProgress = true;\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled() || this.isP2PTestModeEnabled() || browser.isFirefox() || browser.isWebKitBased()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this.stopP2PSession();\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\nJitsiConference.prototype.handleSubtitles = function() {\n    \n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty(\"translation_language\");\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage[\"final\"] = json.text;\n                newTranscriptMessage[\"participantName\"] = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT  && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                   newTranscriptMessage = pastMessage;\n                }  else {\n                   newTranscriptMessage[\"participantName\"] = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage[\"final\"] = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage[\"stable\"] = text;\n                    newTranscriptMessage[\"unstable\"] = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage[\"unstable\"] = text;\n                }\n\n            }\n\n            let finalText = \"\";\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n                finalText = stable + unstable;\n            }\n\n            pastMessage = newTranscriptMessage;\n\n            this.emitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, newTranscriptMessage.transcriptMessageID, newTranscriptMessage.participantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n}\n\n// load assets related to local recording\nJitsiConference.prototype.enableLocalRecording = function() {\n    loadLocalRecordingAssets();\n}\n\n// load assets related to virtual background\nJitsiConference.prototype.enableVirtualBackground = function(micDeviceId) {\n   loadModelFiles();\n}\n\n// load assets related to noiseCancellation\nJitsiConference.prototype.enableNoiseCancellation = function(micDeviceId) {\n   loadRnnoiseFile();\n}\n\n// enable analytics\nJitsiConference.prototype.enableAnalytics = function() {\n   this.statistics.addAnalyticsEventListener(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, (eventName, payload)=>{\n        let name  = '', body = {};\n        if ( typeof eventName === \"string\" ) {\n            name = eventName;\n            body = payload;\n        } else if (typeof eventName === \"object\"){\n            name  = eventName.name;\n            body = eventName\n        }\n\n        const finalPaylaod  = {\n            name,\n            action: body.action ? body.action : '',\n            actionSubject: body.actionSubject ? body.actionSubject : '',\n            source:body.source ? body.source : '',\n            attributes: JSON.stringify(payload)\n        };\n        this.eventEmitter.emit(JitsiConferenceEvents.ANALYTICS_EVENT_RECEIVED, finalPaylaod);\n   });\n}\n\nJitsiConference.prototype.startLocalRecording = function(format) {\n   this.recordingController = new RecordingController()\n   this.recordingController.registerEvents(this);\n   this.recordingController.startRecording(format);\n}\n\nJitsiConference.prototype.stopLocalRecording = function() {\n   this.recordingController.stopRecording();\n}\n\nJitsiConference.prototype.switchFormat = function() {\n   this.recordingController.switchFormat(format);\n}\n\nJitsiConference.prototype.setMuted = function(muted) {\n   this.recordingController.setMuted(muted);\n}\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n   this.recordingController.setMicDevice(micDeviceId);\n}\n\n\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && typeof window.RTCRtpTransceiver.setCodecPreferences !== 'undefined'\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && (window.RTCRtpSender.prototype.createEncodedStreams\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {String} newIsReplacing - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     */\n    constructor() {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"sriska-media-transport\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}sriska-media-transport.e2ee-worker.js`;\n        const workerBlob\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n        const blobUrl = window.URL.createObjectURL(workerBlob);\n\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\n        this._worker.onerror = e => logger.onerror(e);\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        let receiverStreams;\n\n        if (receiver.createEncodedStreams) {\n            receiverStreams = receiver.createEncodedStreams();\n        } else {\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\n                : receiver.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'decode',\n            readableStream: receiverStreams.readable || receiverStreams.readableStream,\n            writableStream: receiverStreams.writable || receiverStreams.writableStream,\n            participantId\n        }, [ receiverStreams.readable || receiverStreams.readableStream,\n            receiverStreams.writable || receiverStreams.writableStream ]);\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        let senderStreams;\n\n        if (sender.createEncodedStreams) {\n            senderStreams = sender.createEncodedStreams();\n        } else {\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\n                : sender.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'encode',\n            readableStream: senderStreams.readable || senderStreams.readableStream,\n            writableStream: senderStreams.writable || senderStreams.writableStream,\n            participantId\n        }, [ senderStreams.readable || senderStreams.readableStream,\n            senderStreams.writable || senderStreams.writableStream ]);\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            participantId,\n            key,\n            keyIndex\n        });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._momderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._momderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const newWhitelists = obj.whitelists;\n\n        if (newWhitelists) {\n            const fireEventApprovedJids = (mediaType, oldList, newList) => {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, mediaType, jid));\n            };\n\n            if (newWhitelists[MediaType.AUDIO]) {\n                fireEventApprovedJids(MediaType.AUDIO, this._whitelistAudio, newWhitelists[MediaType.AUDIO]);\n            }\n\n            if (newWhitelists[MediaType.VIDEO]) {\n                fireEventApprovedJids(MediaType.VIDEO, this._whitelistVideo, newWhitelists[MediaType.VIDEO]);\n            }\n        } else if (obj.enabled !== undefined && this._momderationEnabledByType[obj.mediaType] !== obj.enabled) {\n            this._momderationEnabledByType[obj.mediaType] = obj.enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, obj.enabled, obj.mediaType, obj.actor);\n        } else if (obj.approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, obj.mediaType);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(iceConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global __filename */\n\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        // Do not prefer VP9 on Firefox because of the following bug.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\n        if (browser.isFirefox() && this.jvbPreferredCodec === CodecMimeType.VP9) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const codec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = codec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session.signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n                if (peerMediaInfo && peerMediaInfo.codecType && peerMediaInfo.codecType !== codec) {\n                    selectedCodec = peerMediaInfo.codecType;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\nconst DESKTOP_SHARE_RATE = 500000;\nconst HD_BITRATE = 2500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\n\n    // The standard video bitrates are used in Unified plan when switching\n    // between camera/desktop tracks on the same sender.\n    const standardVideoBitrates = {\n        low: LD_BITRATE,\n        standard: SD_BITRATE,\n        high: HD_BITRATE\n    };\n\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\n        ? this.options.videoQuality.maxBitratesVideo\n        : standardVideoBitrates;\n\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender.\n     */\n    this.senderVideoMaxHeight = null;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.videoBitrates[currentCodec.toUpperCase()] || this.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},type=${mediaType}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            media.push(session.media.find(m => m.type === mediaType));\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the\n        // SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference || this._usesTransceiverCodecPreferences) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    for (const mLine of parsedSdp.media) {\n        if (this.codecPreference.enable && mLine.type === this.codecPreference.mediaType) {\n            SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n            // Strip the high profile H264 codecs on mobile clients for p2p connection.\n            // High profile codecs give better quality at the expense of higher load which\n            // we do not want on mobile clients.\n            // Jicofo offers only the baseline code for the jvb connection.\n            // TODO - add check for mobile browsers once js-utils provides that check.\n            if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n            }\n\n            // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n            // as soon as the browser switches to VP9.\n            if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n                const bitrates = this.videoBitrates.VP9 || this.videoBitrates;\n                const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n                const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n                // Use only the HD bitrate for now as there is no API available yet for configuring\n                // the bitrates on the individual SVC layers.\n                mLine.bandwidth = [ {\n                    type: 'AS',\n                    limit\n                } ];\n            } else {\n                // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n                // This is needed on react native clients as react-native-webrtc returns the\n                // SDP that the application passed instead of returning the SDP off the native side.\n                // This line automatically gets cleared on web on every renegotiation.\n                mLine.bandwidth = undefined;\n            }\n        } else if (mLine.type === this.codecPreference.mediaType) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    if (this._usesUnifiedPlan) {\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // In all other cases, i.e., plan-b and unified plan bridge case, use addStream API to\n        // add the track to the peerconnection.\n        // TODO - addTransceiver doesn't generate a MSID for the stream, which is needed for signaling\n        // the ssrc to Jicofo. Switch to using UUID as MSID when addTransceiver is used in Unified plan\n        // JVB connection case as well.\n        const webrtcStream = track.getOriginalStream();\n\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`${this} Adding track=${track} as unmute`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n\n            // renegotiate when SDP is used for simulcast munging\n            .then(() => this.isSimulcastOn() && browser.usesSdpMungingForSimulcast());\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge the order of the codecs based on the preferences set through config.js\n    localSdp = this._mungeCodecOrder(localSdp);\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sets the degradation preference on the video sender. This setting determines if\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\n * to 'maintain-resolution' when a desktop track is being shared instead.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\n    if (!this.peerconnection.getSenders) {\n        logger.debug(`${this} Browser does not support RTCRtpSender`);\n\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n    const preference = localVideoTrack.videoType === VideoType.CAMERA\n        ? DEGRADATION_PREFERENCE_CAMERA\n        : this.options.capScreenshareBitrate && !this._usesUnifiedPlan\n\n            // Prefer resolution for low fps share.\n            ? DEGRADATION_PREFERENCE_DESKTOP\n\n            // Prefer frame-rate for high fps share.\n            : DEGRADATION_PREFERENCE_CAMERA;\n\n    logger.info(`${this} Setting a degradation preference [preference=${preference},track=${localVideoTrack}`);\n    parameters.degradationPreference = preference;\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\n    // For VP9, max bitrate is configured by setting b=AS value in SDP. Browsers do\n    // not yet support setting max bitrates for individual VP9 SVC layers.\n    if (this.getConfiguredVideoCodec() === CodecMimeType.VP9 || !window.RTCRtpSender) {\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack) {\n        return Promise.resolve();\n    }\n\n    const videoType = localVideoTrack.videoType;\n    const planBScreenSharing = !this._usesUnifiedPlan && videoType === VideoType.DESKTOP;\n\n    // Apply the maxbitrates on the video track when one of the conditions is met.\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\n    // 3. The client is running in Unified plan mode.\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\n        || (planBScreenSharing && this.options.capScreenshareBitrate)\n        || this._usesUnifiedPlan)) {\n        return Promise.resolve();\n    }\n\n    const presenterEnabled = localVideoTrack._originalStream\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!(parameters.encodings && parameters.encodings.length)) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                let bitrate;\n\n                if (planBScreenSharing) {\n                    // On chromium, set a max bitrate of 500 Kbps for screenshare when capScreenshareBitrate\n                    // is enabled through config.js and presenter is not turned on.\n                    // FIXME the top 'isSimulcastOn' condition is confusing for screensharing, because\n                    // if capScreenshareBitrate option is enabled then the simulcast is turned off\n                    bitrate = this.options.capScreenshareBitrate\n                        ? presenterEnabled ? HD_BITRATE : DESKTOP_SHARE_RATE\n\n                        // Remove the bitrate config if not capScreenshareBitrate:\n                        // When switching from camera to desktop and videoQuality.maxBitratesVideo were set,\n                        // then the 'maxBitrate' setting must be cleared, because if simulcast is enabled for screen\n                        // and maxBitrates are set then Chrome will not send the screen stream (plan B).\n                        : undefined;\n                } else {\n                    bitrate = this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\n                }\n\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\n                parameters.encodings[encoding].maxBitrate = bitrate;\n            }\n        }\n    } else {\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\n        let bitrate = this.getTargetVideoBitrates()?.high;\n\n        if (videoType === VideoType.CAMERA) {\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\n            const scaleFactor = this.senderVideoMaxHeight\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\n                : 1;\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\n\n            if (encoding) {\n                logger.info(`${this} Setting max bitrate=${encoding.maxBitrate} bps on track=${localVideoTrack}`);\n                bitrate = encoding.maxBitrate;\n            }\n        }\n        parameters.encodings[0].maxBitrate = bitrate;\n    }\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n\n    // Munge the order of the codecs based on the preferences set through config.js\n    description = this._mungeCodecOrder(description);\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    // Need to explicitly check for null as 0 is falsy, but a valid value\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\n\n    this.senderVideoMaxHeight = newHeight;\n\n    // If layer suspension is disabled and sender constraint is not configured for the conference,\n    // resolve here so that the encodings stay enabled. This can happen in custom apps built using\n    // lib-jitsi-meet.\n    if (newHeight === null) {\n        return Promise.resolve();\n    }\n\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\n\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\n        this.encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\n            .map(height => height <= newHeight);\n\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\n\n        if (newHeight > 0 && ldStreamIndex !== -1) {\n            this.encodingsEnabledState[ldStreamIndex] = true;\n        }\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n    } else if (newHeight > 0) {\n        // Do not scale down the desktop tracks until SendVideoController is able to propagate the sender constraints\n        // only on the active media connection. Right now, the sender constraints received on the bridge channel\n        // are propagated on both the jvb and p2p connections in cases where they both are active at the same time.\n        parameters.encodings[0].scaleResolutionDownBy\n            = localVideoTrack.videoType === VideoType.DESKTOP || localVideoTrack.resolution <= newHeight\n                ? 1\n                : Math.floor(localVideoTrack.resolution / newHeight);\n        parameters.encodings[0].active = true;\n    } else {\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${newHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = newHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\n        // the send resolution changes.\n        if (this.isP2P || !this.isSimulcastOn()) {\n            return this.setMaxBitRate();\n        }\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Configure simulcast for camera tracks always and for desktop tracks only when\n            // the \"capScreenshareBitrate\" flag in config.js is disabled.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && !this._isSharingScreen()))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks always and for desktop tracks only when\n    // the \"capScreenshareBitrate\" flag in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && !this._isSharingScreen()))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const msid = mediaSection.ssrcs.find(s => s.attribute === 'msid');\n\n        if (!this.tpc.isP2P\n            && (!msid\n                || mediaSection.mLine?.direction === MediaDirection.RECVONLY\n                || mediaSection.mLine?.direction === MediaDirection.INACTIVE)) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing for p2p sources. Firefox doesn't produce a a=ssrc line\n        // with msid attribute.\n        } else if (this.tpc.isP2P && mediaSection.mLine?.direction === MediaDirection.SENDRECV) {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n                quality = 100 * this._localStats.bitrate.upload / target;\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n        const reloadClient = this._conference.restartInProgress && enableForcedReload;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` restartInProgress: ${this._conference.restartInProgress},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || reloadClient) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.ICE_FAILED);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n\n        // Set the degradation preference on the local video track.\n        mediaSession.setSenderVideoDegradationPreference();\n\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\n        mediaSession.setSenderMaxBitrates();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            if (speakerStatsToUpdate) {\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {};\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript() {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript();\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff ouput\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","import jQuery from \"../core.js\";\n\n(global => {\n    if (typeof global.$ === 'undefined') {\n        global.$ = jQuery;\n    }\n})(global || window || this); // eslint-disable-line no-invalid-this","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}