{"version":3,"sources":["webpack://SariskaMediaTransport/webpack/universalModuleDefinition","webpack://SariskaMediaTransport/webpack/bootstrap","webpack://SariskaMediaTransport/./src/JitsiConferenceEvents.js","webpack://SariskaMediaTransport/./src/service/xmpp/XMPPEvents.js","webpack://SariskaMediaTransport/./node_modules/strophe.js/dist/strophe.umd.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/index.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaType.js","webpack://SariskaMediaTransport/./src/modules/browser/index.js","webpack://SariskaMediaTransport/./src/dom/var/getProto.js","webpack://SariskaMediaTransport/./src/dom/var/slice.js","webpack://SariskaMediaTransport/./src/dom/var/flat.js","webpack://SariskaMediaTransport/./src/dom/var/hasOwn.js","webpack://SariskaMediaTransport/./src/dom/var/fnToString.js","webpack://SariskaMediaTransport/./src/dom/var/ObjectFunctionString.js","webpack://SariskaMediaTransport/./src/dom/core/DOMEval.js","webpack://SariskaMediaTransport/./src/dom/core.js","webpack://SariskaMediaTransport/./src/dom/var/isWindow.js","webpack://SariskaMediaTransport/./src/dom/var/support.js","webpack://SariskaMediaTransport/./src/modules/statistics/statistics.js","webpack://SariskaMediaTransport/./src/service/RTC/RTCEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/AnalyticsEvents.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPUtil.js","webpack://SariskaMediaTransport/./src/service/RTC/MediaDirection.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTCUtils.js","webpack://SariskaMediaTransport/./src/modules/util/GlobalOnErrorHandler.js","webpack://SariskaMediaTransport/./src/modules/RTC/RTC.js","webpack://SariskaMediaTransport/./src/service/RTC/VideoType.js","webpack://SariskaMediaTransport/./src/JitsiTrackErrors.js","webpack://SariskaMediaTransport/./src/JitsiTrackEvents.js","webpack://SariskaMediaTransport/./src/JitsiConferenceErrors.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDP.js","webpack://SariskaMediaTransport/./node_modules/events/events.js","webpack://SariskaMediaTransport/./src/JitsiTrackError.js","webpack://SariskaMediaTransport/./src/service/RTC/CodecMimeType.js","webpack://SariskaMediaTransport/./src/modules/util/Listenable.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/index.js","webpack://SariskaMediaTransport/./src/modules/detection/DetectionEvents.js","webpack://SariskaMediaTransport/./src/modules/xmpp/xmpp.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGWConstants.js","webpack://SariskaMediaTransport/./src/JitsiConnectionEvents.js","webpack://SariskaMediaTransport/./src/service/statistics/Events.js","webpack://SariskaMediaTransport/./src/dom/var/document.js","webpack://SariskaMediaTransport/./src/dom/var/arr.js","webpack://SariskaMediaTransport/./src/modules/settings/Settings.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpTransformUtil.js","webpack://SariskaMediaTransport/./src/modules/util/MathUtil.js","webpack://SariskaMediaTransport/./src/service/connectivity/ConnectionQualityEvents.js","webpack://SariskaMediaTransport/./node_modules/lodash.isequal/index.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionState.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/constants.js","webpack://SariskaMediaTransport/./src/dom/core/nodeName.js","webpack://SariskaMediaTransport/./src/dom/var/documentElement.js","webpack://SariskaMediaTransport/./src/dom/var/pop.js","webpack://SariskaMediaTransport/./src/dom/selector/var/whitespace.js","webpack://SariskaMediaTransport/./src/dom/var/isIE.js","webpack://SariskaMediaTransport/./src/dom/selector/rbuggyQSA.js","webpack://SariskaMediaTransport/./src/dom/selector/contains.js","webpack://SariskaMediaTransport/./src/dom/selector/escapeSelector.js","webpack://SariskaMediaTransport/./src/dom/var/sort.js","webpack://SariskaMediaTransport/./src/dom/selector/uniqueSort.js","webpack://SariskaMediaTransport/./src/dom/selector.js","webpack://SariskaMediaTransport/./src/dom/core/access.js","webpack://SariskaMediaTransport/./src/dom/var/rnothtmlwhite.js","webpack://SariskaMediaTransport/./src/dom/attributes/attr.js","webpack://SariskaMediaTransport/./src/dom/attributes/prop.js","webpack://SariskaMediaTransport/./src/dom/core/stripAndCollapse.js","webpack://SariskaMediaTransport/./src/dom/core/var/rsingleTag.js","webpack://SariskaMediaTransport/./src/dom/traversing/var/rneedsContext.js","webpack://SariskaMediaTransport/./src/dom/traversing/findFilter.js","webpack://SariskaMediaTransport/./src/dom/core/init.js","webpack://SariskaMediaTransport/./src/dom/attributes/classes.js","webpack://SariskaMediaTransport/./src/dom/attributes/val.js","webpack://SariskaMediaTransport/./src/dom/attributes.js","webpack://SariskaMediaTransport/./src/dom/core/parseXML.js","webpack://SariskaMediaTransport/./src/dom/manipulation.js","webpack://SariskaMediaTransport/./src/dom/jquery.js","webpack://SariskaMediaTransport/./src/dom/var/push.js","webpack://SariskaMediaTransport/./src/modules/statistics/CallStats.js","webpack://SariskaMediaTransport/./src/modules/util/ScriptUtil.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ConnectionPlugin.js","webpack://SariskaMediaTransport/./src/JitsiConnectionErrors.js","webpack://SariskaMediaTransport/./src/modules/xmpp/XmppConnection.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingEvents.js","webpack://SariskaMediaTransport/(webpack)/buildin/global.js","webpack://SariskaMediaTransport/./src/modules/util/RandomUtil.js","webpack://SariskaMediaTransport/./src/dom/var/class2type.js","webpack://SariskaMediaTransport/./src/dom/var/indexOf.js","webpack://SariskaMediaTransport/./src/modules/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/browsers.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/browser-detection/BrowserDetection.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/js-utils/build/jitsi-local-storage/index.js","webpack://SariskaMediaTransport/./node_modules/lodash.clonedeep/index.js","webpack://SariskaMediaTransport/./src/modules/util/Deferred.js","webpack://SariskaMediaTransport/./src/modules/RTC/ScreenObtainer.js","webpack://SariskaMediaTransport/./src/service/RTC/CameraFacingMode.js","webpack://SariskaMediaTransport/./node_modules/sdp/sdp.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevicesEvents.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/messageTypes.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/RecordingAdapter.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ParticipantConnectionStatus.js","webpack://SariskaMediaTransport/./src/config/index.js","webpack://SariskaMediaTransport/./src/modules/connectivity/NetworkInfo.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingXMLUtils.js","webpack://SariskaMediaTransport/./src/modules/e2ee/OlmAdapter.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEncryption.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSessionPC.js","webpack://SariskaMediaTransport/./node_modules/base64-js/index.js","webpack://SariskaMediaTransport/./src/modules/sdp/SDPDiffer.js","webpack://SariskaMediaTransport/./src/modules/RTC/TPCUtils.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/audio-mixer/AudioMixerEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/presenter/TimeWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/worker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/ScreenshotCaptureEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/screenshot-capture/index.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/Utils.js","webpack://SariskaMediaTransport/./node_modules/process/browser.js","webpack://SariskaMediaTransport/./src/SariskaMediaTransport.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/constants.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/TimerWorker.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/JitsiStreamBackgroundEffect.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/virtual-background/index.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/RnnoiseProcessor.js","webpack://SariskaMediaTransport/./src/modules/stream-effects/rnnoise/index.js","webpack://SariskaMediaTransport/./src/dom/var/toString.js","webpack://SariskaMediaTransport/./src/dom/core/toType.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalStatsCollector.js","webpack://SariskaMediaTransport/./src/JitsiTranscriptionStatus.js","webpack://SariskaMediaTransport/./src/modules/xmpp/MediaSessionEvents.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiTrack.js","webpack://SariskaMediaTransport/./src/service/RTC/Resolutions.js","webpack://SariskaMediaTransport/./src/modules/detection/TrackVADEmitter.js","webpack://SariskaMediaTransport/./src/modules/webaudio/WebAudioUtils.js","webpack://SariskaMediaTransport/./src/service/e2eping/E2ePingEvents.js","webpack://SariskaMediaTransport/./node_modules/@hapi/bourne/lib/index.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/AbstractAudioContextAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/index.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStats.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/index.js","webpack://SariskaMediaTransport/./node_modules/wasm-check/dist/wasm-check.min.js","webpack://SariskaMediaTransport/./src/JitsiMediaDevices.js","webpack://SariskaMediaTransport/./src/service/authentication/AuthenticationEvents.js","webpack://SariskaMediaTransport/./node_modules/lodash.debounce/index.js","webpack://SariskaMediaTransport/./src/modules/e2ee/crypto-utils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Caps.js","webpack://SariskaMediaTransport/./src/modules/detection/VADAudioAnalyser.js","webpack://SariskaMediaTransport/./src/modules/recording/JibriSession.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/rng.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://SariskaMediaTransport/./node_modules/uuid/dist/esm-browser/v4.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://SariskaMediaTransport/(webpack)/buildin/module.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/grammar.js","webpack://SariskaMediaTransport/./src/modules/transcription/audioRecorder.js","webpack://SariskaMediaTransport/./src/modules/local-recording/controller/RecordingController.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/OggAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/WavAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/recording/flac/FlacAdapter.js","webpack://SariskaMediaTransport/./src/modules/local-recording/session/SessionManager.js","webpack://SariskaMediaTransport/./src/JitsiConnection.js","webpack://SariskaMediaTransport/./src/JitsiConference.js","webpack://SariskaMediaTransport/./src/JitsiConferenceEventManager.js","webpack://SariskaMediaTransport/./src/modules/browser/BrowserCapabilities.js","webpack://SariskaMediaTransport/./node_modules/js-md5/src/md5.js","webpack://SariskaMediaTransport/./node_modules/bowser/es5.js","webpack://SariskaMediaTransport/./src/modules/statistics/AnalyticsAdapter.js","webpack://SariskaMediaTransport/./src/modules/statistics/PerformanceObserverStats.js","webpack://SariskaMediaTransport/./src/modules/statistics/RTPStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/util/EventEmitterForwarder.js","webpack://SariskaMediaTransport/./src/JitsiParticipant.js","webpack://SariskaMediaTransport/./src/authenticateAndUpgradeRole.js","webpack://SariskaMediaTransport/./src/modules/e2ee/E2EEContext.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ResumeTask.js","webpack://SariskaMediaTransport/./src/modules/util/Retry.js","webpack://SariskaMediaTransport/./src/modules/xmpp/StropheLastSuccess.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.ping.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.emuc.js","webpack://SariskaMediaTransport/./src/modules/xmpp/ChatRoom.js","webpack://SariskaMediaTransport/./src/modules/xmpp/AVModeration.js","webpack://SariskaMediaTransport/./src/modules/xmpp/Lobby.js","webpack://SariskaMediaTransport/./src/modules/xmpp/moderator.js","webpack://SariskaMediaTransport/./src/modules/util/UsernameGenerator.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.jingle.js","webpack://SariskaMediaTransport/./src/modules/util/AsyncQueue.js","webpack://SariskaMediaTransport/./node_modules/async/lib/async.js","webpack://SariskaMediaTransport/./src/modules/util/StringUtils.js","webpack://SariskaMediaTransport/./src/modules/xmpp/JingleSession.js","webpack://SariskaMediaTransport/./src/modules/xmpp/SignalingLayerImpl.js","webpack://SariskaMediaTransport/./src/service/RTC/SignalingLayer.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.logger.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.rayo.js","webpack://SariskaMediaTransport/./src/modules/xmpp/strophe.util.js","webpack://SariskaMediaTransport/./src/modules/RTC/CodecSelection.js","webpack://SariskaMediaTransport/./src/modules/RTC/BridgeChannel.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiLocalTrack.js","webpack://SariskaMediaTransport/./src/modules/RTC/TraceablePeerConnection.js","webpack://SariskaMediaTransport/./src/modules/sdp/LocalSdpMunger.js","webpack://SariskaMediaTransport/./src/modules/sdp/RtxModifier.js","webpack://SariskaMediaTransport/./src/modules/sdp/SdpConsistency.js","webpack://SariskaMediaTransport/./src/modules/RTC/JitsiRemoteTrack.js","webpack://SariskaMediaTransport/./src/modules/connectivity/ConnectionQuality.js","webpack://SariskaMediaTransport/./src/modules/connectivity/IceFailedHandling.js","webpack://SariskaMediaTransport/./src/modules/detection/NoAudioSignalDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/P2PDominantSpeakerDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADNoiseDetection.js","webpack://SariskaMediaTransport/./src/modules/detection/VADTalkMutedDetection.js","webpack://SariskaMediaTransport/./src/modules/e2eping/e2eping.js","webpack://SariskaMediaTransport/./src/modules/event/Jvb121EventGenerator.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/ReceiveVideoController.js","webpack://SariskaMediaTransport/./src/modules/qualitycontrol/SendVideoController.js","webpack://SariskaMediaTransport/./src/modules/recording/RecordingManager.js","webpack://SariskaMediaTransport/./src/modules/statistics/AudioOutputProblemDetector.js","webpack://SariskaMediaTransport/./src/modules/statistics/AvgRTPStatsReporter.js","webpack://SariskaMediaTransport/./src/modules/statistics/SpeakerStatsCollector.js","webpack://SariskaMediaTransport/./src/modules/statistics/LocalTracksDuration.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriber.js","webpack://SariskaMediaTransport/./src/modules/version/ComponentsVersions.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/VideoSIPGW.js","webpack://SariskaMediaTransport/./src/modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://SariskaMediaTransport/./src/modules/detection/ActiveDeviceDetector.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionService.js","webpack://SariskaMediaTransport/./src/modules/proxyconnection/ProxyConnectionPC.js","webpack://SariskaMediaTransport/./src/modules/recording/recordingConstants.js","webpack://SariskaMediaTransport/./src/modules/statistics/PrecallTest.js","webpack://SariskaMediaTransport/./src/modules/util/AuthUtil.js","webpack://SariskaMediaTransport/./src/modules/util/createAnalyticsEvent.js","webpack://SariskaMediaTransport/./src/modules/webaudio/AudioMixer.js","webpack://SariskaMediaTransport/./node_modules/pixelmatch/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://SariskaMediaTransport/./src/index.js","webpack://SariskaMediaTransport/./src/dom/exports/global.js","webpack://SariskaMediaTransport/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://SariskaMediaTransport/(webpack)/buildin/amd-options.js","webpack://SariskaMediaTransport/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://SariskaMediaTransport/./src/service/statistics/constants.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://SariskaMediaTransport/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://SariskaMediaTransport/./node_modules/timers-browserify/main.js","webpack://SariskaMediaTransport/./node_modules/setimmediate/setImmediate.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/parser.js","webpack://SariskaMediaTransport/./node_modules/sdp-transform/lib/writer.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://SariskaMediaTransport/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://SariskaMediaTransport/./src/modules/transcription/recordingResult.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://SariskaMediaTransport/./src/modules/transcription/word.js","webpack://SariskaMediaTransport/./src/modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/utils.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://SariskaMediaTransport/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","SUBTITLES_RECEIVED","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_FAILED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","LOCAL_ROLE_CHANGED","MEETING_ID_SET","INVITE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_RECEIVED","START_MUTED_FROM_FOCUS","TRANSPORT_INFO","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","AUDIO","PRESENTER","VIDEO","BrowserCapabilities","flat","array","apply","class2type","hasOwn","fnToString","preservedScriptAttributes","src","noModule","DOMEval","script","head","removeChild","rhtmlSuffix","jQuery","selector","context","fn","isArrayLike","toType","isWindow","jquery","toArray","slice","pushStack","elems","ret","merge","prevObject","each","first","eq","last","even","grep","_elem","odd","end","extend","copy","copyIsArray","clone","target","deep","isPlainObject","expando","isReady","noop","Ctor","getProto","ObjectFunctionString","isEmptyObject","globalEval","makeArray","results","inArray","isXMLDoc","namespace","namespaceURI","docElem","ownerDocument","second","invert","callbackExpect","guid","support","require","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","setSpeakerList","speakerList","values","isP2P","dispose","size","emit","callStats","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","MediaDirection","INACTIVE","rtcpFb","RECVONLY","SENDONLY","SENDRECV","usesAdapter","DEFAULT_CONSTRAINTS","video","height","ideal","max","width","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","stereo","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","audio","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","RTCUtils","Listenable","super","origAttachMediaStream","audioQuality","clearInterval","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","getStreamID","getTrackID","srcObject","res","rtcUtils","isDeviceChangeAvailable","getAudioOutputDevice","catch","ex","GlobalOnErrorHandler","callUnhandledRejectionHandler","promise","pcConstraints","isChromiumBased","optional","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","supportsDeviceChangeEvent","navigator","mediaDevices","addEventListener","setInterval","then","devices","_getUserMedia","umDevices","Promise","resolve","reject","gumTimeout","timeoutExpired","JitsiTrackErrors","getUserMedia","jitsiError","_getDesktopMedia","isSupported","obtainStream","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","sourceType","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","resolution","isWebKitBased","cameraDeviceId","facingMode","CameraFacingMode","USER","autoGainControl","micDeviceId","echoCancellation","noiseSuppression","assign","channelCount","getConstraints","desktopStream","sourceId","desktopAudioTracks","desktopAudioStream","MediaStream","track","desktopVideoTracks","desktopVideoStream","videoType","VideoType","DESKTOP","avStream","audioTracks","audioStream","effects","videoTracks","videoStream","CAMERA","stopMediaStream","deviceType","mediaStream","getTracks","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","some","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","callErrorHandler","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","NONE","addListener","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","wsUrl","BridgeChannel","logError","msgType","_receiverVideoConstraints","sendNewReceiverVideoConstraintsMessage","sendSelectedEndpointsMessage","_selectedEndpoint","sendReceiverVideoConstraintMessage","sendSetLastNMessage","sendVideoTypeMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setNewReceiverVideoConstraints","isOpen","setReceiverVideoConstraint","maxFrameHeight","setVideoType","selectEndpoints","ids","eventType","createPeerConnection","signaling","iceConfig","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","usesUnifiedPlan","sdpSemantics","forceTurnRelay","iceTransportPolicy","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLocalVideoTrack","localVideo","getLocalTracks","MediaType","getLocalAudioTrack","localAudio","getLocalEndpointId","myUserId","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","setVideoMute","videoTrack","removeLocalTrack","pos","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","sendEndpointStatsMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","payloadType","__","parameter","hdrExt","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","OPUS","VP8","VP9","removeEventListener","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","FAILURE_REGEX","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","FEATURE_JIGASI","FEATURE_E2EE","XMPP","token","roomName","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","xmppPing","hosts","enableWebsocketResume","serviceUrl","shard","websocketKeepAlive","websocketKeepAliveUrl","XmppConnection","createConnection","bosh","deploymentInfo","Events","CONN_SHARD_CHANGED","shard_changed","suspend_time","ping","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","addFeature","disableRtx","isVersionLessThan","enableOpusRed","supportsAudioRed","enableRemb","enableTcc","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","_sysMessageHandler","_stropheConn","sendDiscoInfo","getStunAndTurnCredentials","_resetState","getFeaturesAndIdentities","identities","PING","_processDiscoInfoIdentities","errmsg","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","lastFailedRawMessage","getLastFailedMessage","_parseConnectionFailedMessage","identity","avModerationComponentAddress","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","processLobbyFeatures","f","fr","endsWith","_onPrivateMessage","exec","_onSystemMessage","foundIceServers","onReceiveStunAndTurnCredentials","parseDiscoInfo","attaching","anonymousdomain","configDomain","hostname","createRoom","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","pingDomain","getSessions","sessions","ev","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2p","p2pStunServers","stunServers","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","headersArr","trim","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","_callStatsUserName","_machineId","_p8","_storage","jitsiLocalStorage","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","amDid","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","argsTag","mapTag","objectTag","setTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","IE_PROTO","nativeObjectToString","reIsNative","RegExp","Buffer","Uint8Array","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isMasked","isFunction","baseKeys","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","LARGE_ARRAY_SIZE","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","rbuggyQSA","isIE","whitespace","contains","adown","bup","compareDocumentPosition","rcssescape","fcssescape","ch","asCodePoint","escapeSelector","sel","hasDuplicate","sortOrder","compare","uniqueSort","duplicates","preferredDoc","msMatchesSelector","Expr","outermostContext","documentIsHTML","dirruns","done","classCache","createCache","tokenCache","compilerCache","nonnativeSelectorCache","identifier","pseudos","rwhitespace","rtrim","rcomma","rcombinators","rdescend","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rquickExpr","rsibling","runescape","funescape","nonHex","high","unloadHandler","setDocument","inDisabledFieldset","addCombinator","disabled","dir","selectorError","seed","nid","newSelector","newContext","getElementById","getElementsByClassName","testContext","tokenize","toSelector","querySelectorAll","qsaError","tokens","compiled","relative","compile","select","cache","cacheLength","markFunction","createInputPseudo","createButtonPseudo","createDisabledPseudo","isDisabled","createPositionalPseudo","argument","matchIndexes","subWindow","defaultView","top","expr","elements","matchesSelector","createPseudo","className","preFilter","excess","unquoted","attrId","nodeNameSelector","expectedNodeName","pattern","operator","check","what","_argument","simple","forward","ofType","_context","xml","outerCache","nodeIndex","parent","useCache","diff","lastChild","pseudo","setFilters","not","input","matcher","unmatched","lang","elemLang","focus","activeElement","hasFocus","href","tabIndex","enabled","checked","selected","selectedIndex","empty","nextSibling","button","_matchIndexes","lt","gt","nth","radio","checkbox","file","image","submit","parseOnly","soFar","preFilters","cached","combinator","base","skip","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","temp","matcherOut","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","setMatchers","elementMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","matcherFromGroupMatchers","filters","access","chainable","emptyGet","bulk","_key","removeAttr","hooks","nType","prop","attrHooks","attrNames","rnothtmlwhite","val","isXML","lowercaseName","rfocusable","rclickable","removeProp","propFix","propHooks","tabindex","stripAndCollapse","winnow","qualifier","is","rneedsContext","rootjQuery","getClass","classesToArray","parseHTML","rsingleTag","ready","addClass","classes","cur","curValue","clazz","finalValue","removeClass","toggleClass","stateVal","classNames","hasClass","valueIsFunction","valHooks","option","one","optionSet","parseXML","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","getName","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","currentExecutingScript","relativeURL","loadCallback","errorCallback","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","getConnectionPluginDefinition","ConnectionPluginListenable","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","pingOptions","_usesWebsocket","_rawInputTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","_status","OPEN","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_maybeStartWSKeepAlive","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","url","fetch","responseShard","timeLeft","sendIQ2","sendBeacon","schedule","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","g","randomElement","randomHexDigit","randomAlphanumStr","SPEAKERS_AUDIO_LEVELS","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionEqualTo","DummyLocalStorage","configurable","writable","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","funcTag","genTag","reFlags","cloneableTags","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","overArg","getPrototype","objectCreate","isArrayLikeObject","assignValue","baseClone","isDeep","isFull","initCloneArray","copyArray","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","copySymbols","baseAssign","cloneFunc","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","props","arrayEach","subValue","arrayBuffer","newValue","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","SS_DEFAULT_FRAME_RATE","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxWidth","screen","maxHeight","getDisplayMedia","frameRate","cursor","errorDetails","errorName","errorMsg","errorStack","ENVIRONMENT","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","1","2","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","maxSizeLine","maxMessageSize","sctpPort","sctpMapLines","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","MAIN_THREAD_FINISH","MAIN_THREAD_INIT","MAIN_THREAD_NEW_DATA_ARRIVED","WORKER_LIBFLAC_READY","WORKER_BLOB_READY","RecordingAdapter","exportRecordedData","setMuted","setMicDevice","_getAudioStream","JitsiMeetJS","createLocalTracks","ParticipantConnectionStatus","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","initSDKConfig","connectionConfig","conferenceConfig","enableAnalytics","enableLocalRecording","enableNoiseCancellation","rtcstatsServer","enableTalkWhileMuted","enableNoAudioDetection","enableNoisyMicDetection","openBridgeChannel","hiddenDomain","e2eping","pingInterval","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","getFeatures","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","oldValue","isE2EEEnabled","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","_conferenceJoined","_enabled","_enabling","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","supportsInsertableStreams","testing","disableE2EE","isEnabled","initSessions","cleanup","setLocalParticipantProperty","_restartMediaSessions","_generateKey","updateKey","setKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","material","importKey","newKey","ratchet","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","isVideoTrack","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","supportsUnifiedPlan","enableUnifiedOnChrome","disableSimulcast","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","supportsRestartByTerminate","iceStarted","onnegotiationneeded","remoteDescription","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","getRemoteRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","owner","generateRecvonlySsrc","getConfiguredVideoCodec","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","localTrack","addTrack","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","remove","newFingerprint","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","removeRemoteTracks","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","active","low","scaleResolutionDownBy","standard","_findTransceiver","transceiver","getTransceivers","getTrackId","_getStreamEncodings","isSimulcastOn","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","getTrack","transceiverInit","getOriginalStream","sendEncodings","addTransceiver","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","localSSRCs","_addedStreams","setEncodings","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","every","AudioMixerEffect","mixAudio","_mixAudio","sourceLocalTrack","startEffect","_originalStream","_originalTrack","_audioMixer","SariskaMediaTransport","createAudioMixer","addMediaStream","_mixedMediaStream","_mixedMediaTrack","stopEffect","URL","createObjectURL","Blob","timerWorkerScript","ScreenshotCaptureEffect","_currentCanvas","_currentCanvasContext","getContext","_videoElement","_handleWorkerAction","_initScreenshotCapture","_streamWorker","Worker","desktopTrack","_streamHeight","_streamWidth","play","postMessage","storedCanvasContext","drawImage","getImageData","_storedImageData","timeMs","_handleScreenshot","_shouldProcessScreenshot","nbPixels","diffPixels","pixelmatch","createScreenshotCaptureEffect","MediaStreamTrack","downloadBlob","base64Url","download","click","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","nextTick","title","env","argv","versions","cwd","chdir","umask","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiConnection","ProxyConnectionService","JitsiStreamPresenterEffect","createRnnoiseProcessor","createVirtualBackgroundEffect","constants","recording","recordingConstants","sipVideoGW","VideoSIPGWConstants","transcriptionStatus","JitsiTranscriptionStatus","detection","DetectionEvents","JitsiMediaDevicesEvents","connectionQuality","ConnectionQualityEvents","E2ePingEvents","JitsiConferenceErrors","errorTypes","logLevels","JitsiMediaDevices","Settings","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","logObject","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","emitEvent","mStream","currentlyAvailableMediaDevices","_setRealDeviceIdFromDeviceList","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","sampleRate","vadProcessor","TrackVADEmitter","AudioMixer","getActiveAudioDevice","isMultipleAudioInputSupported","isCollectingLocalStats","LocalStatsCollector","isLocalStatsSupported","lineno","colno","setNetworkInfo","createAnalyticsEvent","hint","contentHint","precallTest","util","AuthUtil","VIRTUAL_BACKGROUND_TYPE","JitsiStreamBackgroundEffect","model","virtualBackground","backgroundType","_virtualImage","crossOrigin","virtualSource","_virtualVideo","autoplay","_model","_segmentationPixelCount","_onMaskFrameTimer","_outputCanvasElement","_inputVideoElement","_renderMask","runPostProcessing","_outputCanvasCtx","globalCompositeOperation","_segmentationMaskCanvas","_desktopShareDimensions","blurValue","runInference","_runInference","outputMemoryOffset","_getOutputMemoryOffset","background","HEAPF32","person","backgroundExp","exp","personExp","_segmentationMask","_segmentationMaskCtx","putImageData","desktopShareTrack","resizeSource","_maskFrameTimerWorker","imageData","inputMemoryOffset","_getInputMemoryOffset","jitsiLocalTrack","firstVideoTrack","ImageData","onloadeddata","captureStream","models","segmentationDimensions","model96","model144","tflite","wasmCheck","simd","createTFLiteSIMDModule","createTFLiteModule","modelBufferOffset","_getModelBufferMemoryOffset","modelResponse","ok","HEAPU8","_loadModel","loadModelFiles","RnnoiseProcessor","wasmInterface","_wasmInterface","_wasmPcmInput","_malloc","RNNOISE_SAMPLE_LENGTH","_wasmPcmOutput","_free","_wasmPcmInputF32Index","_rnnoise_create","_releaseWasmResources","_copyPCMSampleToWasmBuffer","pcmSample","_convertTo16BitPCM","f32Array","_rnnoise_destroy","getSampleLength","getRequiredPCMFrequency","_destroyed","calculateAudioFrameVAD","pcmFrame","pcmFrameLength","_rnnoise_process_frame","rnnoiseModule","rnnoiseWasmInit","mod","loadRnnoiseFile","AudioContext","webkitAudioContext","interval","intervalId","intervalMilis","suspend","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","animateLevel","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","getVideoType","isWebRTCTrackMuted","isLocalAudioTrack","getStreamId","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","procNodeSampleRate","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","_vadSampleSize","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","vadScore","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","AudioContextImpl","E2E_RTT_CHANGED","internals","firstOptions","reviver","protoAction","scan","nodes","SyntaxError","__proto__","safeParse","ignoreError","AbstractAudioContextAdapter","_sampleRate","_stream","_replaceMic","newStream","newSource","loadLocalRecordingAssets","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","u","validate","Instance","Module","WebAssembly","of","Uint32Array","Uint16Array","A","instantiateStreaming","feature","Memory","_eventEmitter","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","IDENTITY_UPDATED","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","subtle","deriveBits","encode","keyBytes","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","category","rooms","externalFeatures","_addChatRoom","_removeChatRoom","CAPS","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","removeFromPresence","children","addOrReplaceInPresence","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","_identities","_features","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","msCrypto","rnds8","rng","byteToHex","buf","bth","rnds","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","mimeType","ondataavailable","dataEvent","removeTrack","recorderToRemove","revokeObjectURL","getRecordingResults","getFileType","freeze","IDLE","STARTING","RECORDING","STOPPING","FAILED","OggAdapter","_initPromise","_initialize","_mediaRecorder","onstop","_recordedData","shouldEnable","_saveMediaData","WavAdapter","_wavBuffers","_wavLength","_exportMonoWAV","_isInitialized","_createWavHeader","dataLength","view","writeUTFBytes","setUint32","setUint16","channelLeft","buffers","setUint8","inputBuffers","sampleCount","bufferCount","setInt16","floatTo16BitPCM","lng","FlacAdapter","_onWorkerMessage","_encoder","_stopPromiseResolver","command","_loadWebWorker","_initWorkerPromiseResolver","bps","exception1","exception2","highPrecisionTime","timing","navigationStart","SessionEventType","SESSION_STARTED","SEGMENT_STARTED","SEGMENT_ENDED","sessionManager","_loadMetadata","dataStr","dataObject","Bourne","_sessionsMetadata","_saveMetadata","createSession","sessionToken","sessionTokens","thisSession","newSessionInfo","segments","getSegments","removeSession","_constructSegments","beginSegment","getCurrentSegmentIndex","endSegment","sessionStartTime","currentSegment","commit","gapBefore","lastSegment","duration","currentEvent","jwt","parseJwt","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","ua","eventManager","JitsiConferenceEventManager","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","isVideoMutedByFocus","mutedVideoByFocusActor","wasStopped","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","handleSubtitles","enableVirtualBackground","localTracksDuration","LocalTracksDuration","resourceCreator","setupXMPPListeners","codecSettings","disabledCodec","enforcePreferredCodec","jvbCodec","p2pCodec","codecSelection","CodecSelection","_statsCurrentId","statisticsId","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","E2ePing","setupRTCListeners","receiveVideoController","ReceiveVideoController","sendVideoController","SendVideoController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","supportsVADDetection","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","vadNoiseDetection","VADNoiseDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","getPreferredCodec","replaceParticipant","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addCommandListener","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_getInitialLocalTracks","isStartAudioMuted","isStartVideoMuted","_setConference","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeTagName","getFromPresence","_addLocalTrackAsUnmute","addAsUnmutePromises","_removeLocalTrackAsMute","removeAsMutePromises","getRole","isHidden","lock","lockRoom","unlock","selectParticipant","selectParticipants","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","setAffiliation","revokeOwner","isMyself","isMembersOnly","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","muteMediaType","onMemberJoined","nick","statsID","botType","fullJid","isReplaceParticipant","JitsiParticipant","setRole","setBotType","setFeatures","setIsReplacing","_updateFeatures","_maybeStartOrStopP2P","_onMucJoined","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","getBotType","mediaSessions","removePromises","removedTracks","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","setIsReplaced","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","peerConnection","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onConferenceRestarted","restartInProgress","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","hasFeature","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setReceiverConstraints","videoConstraints","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","meetingId","perf","toggleE2EE","setEnabled","isLobbySupported","getLobby","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","isAVModerationSupported","getAVModeration","enableAVModeration","disableAVModeration","avModerationApprove","approve","getLocalUser","pastMessage","translationLanguage","transcriptMessageID","message_id","participantName","newTranscriptMessage","language","transcript","is_interim","stability","finalText","final","stable","unstable","startLocalRecording","recordingController","RecordingController","registerEvents","stopLocalRecording","switchFormat","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","setParticipantPropertyListener","recorderSession","AuthenticationEvents","txt","myJid","ts","updated","dominant","previous","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","_onByteSentStatsReceived","isEngine","RTCRtpTransceiver","isTwa","matchMedia","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","setCodecPreferences","RTCRtpReceiver","getCapabilities","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","supportsRTTStatistics","RTCRtpSender","createEncodedStreams","createEncodedVideoStreams","ReadableStream","chromium","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","92","93","versionName","94","vendor","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","localCandidateType","candidateType","remoteCandidateType","networkType","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","remoteSource","localVideoTracks","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","isReplacing","isReplaced","_jid","_id","_conference","_role","_hidden","_statsID","_connectionStatus","_properties","_identity","_isReplacing","_isReplaced","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","newRole","newIsReplacing","newIsReplaced","newFeatures","_botType","newBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","operation","receiverStreams","createEncodedAudioStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","oldToken","retry","minDelay","LastRequestTracker","_lastSuccess","_lastFailedMessage","xmppConnection","originalRawInput","rawMessage","ConnectionPlugin","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","_addPingExecutionTimestamp","_lastServerCheck","pingIntervals","maxInterval","previousTS","currentInterval","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","onMuteVideo","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","avModeration","AVModeration","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","xns","presenceUpdateTime","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","att","phone","pin","processNode","var","focusFeatures","tagHandlers","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","grantIQ","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","addToPresence","matchingNodes","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","addVideoInfoToPresence","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","_xmpp","_mainRoom","_momderationEnabledByType","_whitelistAudio","_whitelistVideo","jidToWhitelist","newWhitelists","whitelists","fireEventApprovedJids","oldList","approved","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","startMuted","successTime","me","v2Res","v2Err","v1Res","v1Err","iceservers","dict","credential","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","idle","priorityQueue","_compareTasks","sequence","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getPeerMediaInfo","getSSRCOwner","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","_getCodecMimeType","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","selectedCodec","remoteParticipants","remote","peerMediaInfo","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","previousSpeakers","endpoint","jsonObject","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_stopStreamEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","successCallback","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","stat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","receivers","remoteTrackIds","getReceivers","_setVideoType","setMute","getSynchronizationSources","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","currentCodec","findTrackById","onaddtrack","onremovetrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","addStream","_removeStream","removeStream","doesBelong","defaultCodec","isMediaStreamInPc","findSenderByKind","getSenders","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","toUnifiedPlan","localVideoTrack","videoSender","preference","degradationPreference","planBScreenSharing","presenterEnabled","scaleFactor","layer","currentDescription","mungeRemoteDescription","newHeight","encodingsEnabledState","ldStreamIndex","interToneGap","rtpSender","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","_processLocalSSRCsMap","handleFailure","capabilities","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","localEndpointId","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","msidLine","generatedMsid","sessionDesc","audioMLine","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","kSimulcastFormats","layers","targetRN","getTarget","millisSinceStart","videoQualitySettings","simulcastFormat","targetHeight","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","reloadClient","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","_rtc","startLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","p2pSession","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","INITIAL_STATE","startedTime","camera","FINAL_STATE","calculateLocalTrackDuration","newDuration","newLocalTracksDuration","createLocalTracksDurationEvent","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","jitsiConnection","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","execute","makePrecallTest","getTokenAuthUrl","urlPattern","roleUpgrade","createNetworkInfoEvent","_started","_streamsToMix","_streamMSSArray","_mixedMSD","createMediaStreamDestination","streamMSS","img1","img2","isPixelData","defaultOptions","a32","b32","identical","diffMask","drawGrayPixel","alpha","maxDelta","delta","colorDelta","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","BYTES_PER_ELEMENT","img","x1","y1","x0","y0","x2","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","rgb2q","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","_throwError","Timeout","clearFn","_clearFn","scope","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","enableConferenceFlag","order","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","webkitGetUserMedia","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","Event","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","srcElement","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","adapter","commonShim","browserShim","adapterFactory"],"mappings":"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","file":"sariska-media-transport.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SariskaMediaTransport\"] = factory();\n\telse\n\t\troot[\"SariskaMediaTransport\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 180);\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n\n\nexport const SUBTITLES_RECEIVED = 'conference.subtitles.received';\n\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","export default Object.getPrototypeOf;\n","import arr from \"./arr.js\";\n\nexport default arr.slice;\n","import arr from \"./arr.js\";\n\n// Support: IE 11+\n// IE doesn't have Array#flat; provide a fallback.\nexport default arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n","import class2type from \"./class2type.js\";\n\nexport default class2type.hasOwnProperty;\n","import hasOwn from \"./hasOwn.js\";\n\nexport default hasOwn.toString;\n","import fnToString from \"./fnToString.js\";\n\nexport default fnToString.call( Object );\n","import document from '../var/document.js';\n\nvar preservedScriptAttributes = {\n\ttype: true,\n\tsrc: true,\n\tnonce: true,\n\tnoModule: true\n};\n\nfunction DOMEval( code, node, doc ) {\n\tdoc = doc || document;\n\n\tvar i,\n\t\tscript = doc.createElement( \"script\" );\n\n\tscript.text = code;\n\tif ( node ) {\n\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\tif ( node[ i ] ) {\n\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t}\n\t\t}\n\t}\n\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n}\n\nexport default DOMEval;\n","import arr from \"./var/arr.js\";\nimport getProto from \"./var/getProto.js\";\nimport slice from \"./var/slice.js\";\nimport flat from \"./var/flat.js\";\nimport push from \"./var/push.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport class2type from \"./var/class2type.js\";\nimport toString from \"./var/toString.js\";\nimport hasOwn from \"./var/hasOwn.js\";\nimport fnToString from \"./var/fnToString.js\";\nimport ObjectFunctionString from \"./var/ObjectFunctionString.js\";\nimport support from \"./var/support.js\";\nimport isWindow from \"./var/isWindow.js\";\nimport DOMEval from \"./core/DOMEval.js\";\nimport toType from \"./core/toType.js\";\n\nvar version = \"@VERSION\",\n\n    rhtmlSuffix = /HTML$/i,\n\n    // Define a local copy of jQuery\n    jQuery = function( selector, context ) {\n\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // Need init if jQuery is called (just allow error to be thrown if not included)\n        return new jQuery.fn.init( selector, context );\n    };\n\njQuery.fn = jQuery.prototype = {\n\n    // The current version of jQuery being used\n    jquery: version,\n\n    constructor: jQuery,\n\n    // The default length of a jQuery object is 0\n    length: 0,\n\n    toArray: function() {\n        return slice.call( this );\n    },\n\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function( num ) {\n\n        // Return all the elements in a clean array\n        if ( num == null ) {\n            return slice.call( this );\n        }\n\n        // Return just the one element from the set\n        return num < 0 ? this[ num + this.length ] : this[ num ];\n    },\n\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function( elems ) {\n\n        // Build a new jQuery matched element set\n        var ret = jQuery.merge( this.constructor(), elems );\n\n        // Add the old object onto the stack (as a reference)\n        ret.prevObject = this;\n\n        // Return the newly-formed element set\n        return ret;\n    },\n\n    // Execute a callback for every element in the matched set.\n    each: function( callback ) {\n        return jQuery.each( this, callback );\n    },\n\n    map: function( callback ) {\n        return this.pushStack( jQuery.map( this, function( elem, i ) {\n            return callback.call( elem, i, elem );\n        } ) );\n    },\n\n    slice: function() {\n        return this.pushStack( slice.apply( this, arguments ) );\n    },\n\n    first: function() {\n        return this.eq( 0 );\n    },\n\n    last: function() {\n        return this.eq( -1 );\n    },\n\n    even: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return ( i + 1 ) % 2;\n        } ) );\n    },\n\n    odd: function() {\n        return this.pushStack( jQuery.grep( this, function( _elem, i ) {\n            return i % 2;\n        } ) );\n    },\n\n    eq: function( i ) {\n        var len = this.length,\n            j = +i + ( i < 0 ? len : 0 );\n        return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n    },\n\n    end: function() {\n        return this.prevObject || this.constructor();\n    }\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[ 0 ] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if ( typeof target === \"boolean\" ) {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[ i ] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if ( typeof target !== \"object\" && typeof target !== \"function\" ) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if ( i === length ) {\n        target = this;\n        i--;\n    }\n\n    for ( ; i < length; i++ ) {\n\n        // Only deal with non-null/undefined values\n        if ( ( options = arguments[ i ] ) != null ) {\n\n            // Extend the base object\n            for ( name in options ) {\n                copy = options[ name ];\n\n                // Prevent Object.prototype pollution\n                // Prevent never-ending loop\n                if ( name === \"__proto__\" || target === copy ) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n                    ( copyIsArray = Array.isArray( copy ) ) ) ) {\n                    src = target[ name ];\n\n                    // Ensure proper type for the source value\n                    if ( copyIsArray && !Array.isArray( src ) ) {\n                        clone = [];\n                    } else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n                        clone = {};\n                    } else {\n                        clone = src;\n                    }\n                    copyIsArray = false;\n\n                    // Never move original objects, clone them\n                    target[ name ] = jQuery.extend( deep, clone, copy );\n\n                // Don't bring in undefined values\n                } else if ( copy !== undefined ) {\n                    target[ name ] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n};\n\njQuery.extend( {\n\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n\n    error: function( msg ) {\n        throw new Error( msg );\n    },\n\n    noop: function() {},\n\n    isPlainObject: function( obj ) {\n        var proto, Ctor;\n\n        // Detect obvious negatives\n        // Use toString instead of jQuery.type to catch host objects\n        if ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n            return false;\n        }\n\n        proto = getProto( obj );\n\n        // Objects with no prototype (e.g., `Object.create( null )`) are plain\n        if ( !proto ) {\n            return true;\n        }\n\n        // Objects with prototype are plain iff they were constructed by a global Object function\n        Ctor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n        return typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n    },\n\n    isEmptyObject: function( obj ) {\n        var name;\n\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n    },\n\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function( code, options, doc ) {\n        DOMEval( code, { nonce: options && options.nonce }, doc );\n    },\n\n    each: function( obj, callback ) {\n        var length, i = 0;\n\n        if ( isArrayLike( obj ) ) {\n            length = obj.length;\n            for ( ; i < length; i++ ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        } else {\n            for ( i in obj ) {\n                if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n                    break;\n                }\n            }\n        }\n\n        return obj;\n    },\n\n\n    // Retrieve the text value of an array of DOM nodes\n    text: function( elem ) {\n        var node,\n            ret = \"\",\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if ( !nodeType ) {\n\n            // If no nodeType, this is expected to be an array\n            while ( ( node = elem[ i++ ] ) ) {\n\n                // Do not traverse comment nodes\n                ret += jQuery.text( node );\n            }\n        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n            return elem.textContent;\n        } else if ( nodeType === 3 || nodeType === 4 ) {\n            return elem.nodeValue;\n        }\n\n        // Do not include comment or processing instruction nodes\n\n        return ret;\n    },\n\n\n    // results is for internal usage only\n    makeArray: function( arr, results ) {\n        var ret = results || [];\n\n        if ( arr != null ) {\n            if ( isArrayLike( Object( arr ) ) ) {\n                jQuery.merge( ret,\n                    typeof arr === \"string\" ?\n                        [ arr ] : arr\n                );\n            } else {\n                push.call( ret, arr );\n            }\n        }\n\n        return ret;\n    },\n\n    inArray: function( elem, arr, i ) {\n        return arr == null ? -1 : indexOf.call( arr, elem, i );\n    },\n\n    isXMLDoc: function( elem ) {\n        var namespace = elem.namespaceURI,\n            docElem = ( elem.ownerDocument || elem ).documentElement;\n\n        // Assume HTML when documentElement doesn't yet exist, such as inside\n        // document fragments.\n        return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n    },\n\n    merge: function( first, second ) {\n        var len = +second.length,\n            j = 0,\n            i = first.length;\n\n        for ( ; j < len; j++ ) {\n            first[ i++ ] = second[ j ];\n        }\n\n        first.length = i;\n\n        return first;\n    },\n\n    grep: function( elems, callback, invert ) {\n        var callbackInverse,\n            matches = [],\n            i = 0,\n            length = elems.length,\n            callbackExpect = !invert;\n\n        // Go through the array, only saving the items\n        // that pass the validator function\n        for ( ; i < length; i++ ) {\n            callbackInverse = !callback( elems[ i ], i );\n            if ( callbackInverse !== callbackExpect ) {\n                matches.push( elems[ i ] );\n            }\n        }\n\n        return matches;\n    },\n\n    // arg is for internal usage only\n    map: function( elems, callback, arg ) {\n        var length, value,\n            i = 0,\n            ret = [];\n\n        // Go through the array, translating each of the items to their new values\n        if ( isArrayLike( elems ) ) {\n            length = elems.length;\n            for ( ; i < length; i++ ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n\n        // Go through every key on the object,\n        } else {\n            for ( i in elems ) {\n                value = callback( elems[ i ], i, arg );\n\n                if ( value != null ) {\n                    ret.push( value );\n                }\n            }\n        }\n\n        // Flatten any nested arrays\n        return flat( ret );\n    },\n\n    // A global GUID counter for objects\n    guid: 1,\n\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n    jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n    function( _i, name ) {\n        class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    } );\n\nfunction isArrayLike( obj ) {\n\n    var length = !!obj && obj.length,\n        type = toType( obj );\n\n    if ( typeof obj === \"function\" || isWindow( obj ) ) {\n        return false;\n    }\n\n    return type === \"array\" || length === 0 ||\n        typeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nexport default jQuery;\n","export default function isWindow( obj ) {\n\treturn obj != null && obj === obj.window;\n}\n","// All support tests are defined in their respective modules.\nexport default {};\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    console.log(eventName, properties);\n    this.analytics.sendEvent(eventName, properties);\n};\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global module */\n/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // The default video type assumed by the bridge.\n        this._videoType = VideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoint);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            try {\n                this._channel.sendVideoTypeMessage(this._videoType);\n            } catch (error) {\n                logError(error, 'VideoTypeMessage', this._videoType);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            iceConfig.encodedInsertableStreams = true;\n            iceConfig.forceEncodedAudioInsertableStreams = true; // legacy, to be removed in M88.\n            iceConfig.forceEncodedVideoInsertableStreams = true; // legacy, to be removed in M88.\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            iceConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string, NONE: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * No local video source.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = VideoType;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/* global module */\n/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing,\n    name }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}&room=${name}`;\n    }\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard,\n        name\n    });\n}\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token, roomName) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            name: roomName,\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        // $(window).on('beforeunload unload', ev => {\n        //     this.disconnect(ev).catch(() => {\n        //         // ignore errors in order to not brake the unload.\n        //     });\n        // });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        // Disable RTX on Firefox 83 and older versions because of\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(84)))) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n        });\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        // check for shard name in identities\n        identities.forEach(i => {\n            if (i.type === 'shard') {\n                this.options.deploymentInfo.shard = i.name;\n            }\n        });\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${roomName}@${options.customDomain\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        }\n\n        return true;\n    }\n}\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","export default window.document;\n","export default [];\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","function nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\n\nexport default nodeName;\n","import document from \"./document.js\";\n\nexport default document.documentElement;\n","import arr from \"./arr.js\";\n\nexport default arr.pop;\n","// https://www.w3.org/TR/css3-selectors/#whitespace\nexport default \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n","import document from \"./document.js\";\n\nexport default document.documentMode;\n","import isIE from '../var/isIE.js';\nimport whitespace from \"./var/whitespace.js\";\n\nvar rbuggyQSA = isIE && new RegExp(\n\n\t// Support: IE 9 - 11+\n\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\":enabled|:disabled|\" +\n\n\t// Support: IE 11+\n\t// IE 11 doesn't find elements on a `[name='']` query in some cases.\n\t// Adding a temporary attribute to the document before the selection works\n\t// around the issue.\n\t\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\twhitespace + \"*(?:''|\\\"\\\")\"\n\n);\n\nexport default rbuggyQSA;\n","import jQuery from '../core.js';\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\tbup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\tadown.contains ?\n\t\t\tadown.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n","import jQuery from '../core.js';\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n","import arr from \"./arr.js\";\n\nexport default arr.sort;\n","import jQuery from '../core.js';\nimport document from '../var/document.js';\nimport sort from '../var/sort.js';\n\nlet hasDuplicate;\n\n// Document order sorting\nfunction sortOrder(a, b) {\n\n    // Flag for duplicate removal\n    if (a === b) {\n        hasDuplicate = true;\n\n        return 0;\n    }\n\n    // Sort on method existence if only one input has compareDocumentPosition\n    let compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n    if (compare) {\n        return compare;\n    }\n\n    // Calculate position if both inputs belong to the same document\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    compare = (a.ownerDocument || a) == (b.ownerDocument || b)\n        ? a.compareDocumentPosition(b)\n\n    // Otherwise we know they are disconnected\n        : 1;\n\n    // Disconnected nodes\n    if (compare & 1) {\n\n        // Choose the first element that is related to the document\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (a == document || a.ownerDocument == document\n\t\t\t&& jQuery.contains(document, a)) {\n            return -1;\n        }\n\n        // Support: IE 11+\n        // IE sometimes throws a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        if (b == document || b.ownerDocument == document\n\t\t\t&& jQuery.contains(document, b)) {\n            return 1;\n        }\n\n        // Maintain original order\n        return 0;\n    }\n\n    return compare & 4 ? -1 : 1;\n}\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function(results) {\n    let elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n    hasDuplicate = false;\n\n    sort.call(results, sortOrder);\n\n    if (hasDuplicate) {\n        while (elem = results[i++]) {\n            if (elem === results[i]) {\n                j = duplicates.push(i);\n            }\n        }\n        while (j--) {\n            results.splice(duplicates[j], 1);\n        }\n    }\n\n    return results;\n};\n","import jQuery from \"./core.js\";\nimport nodeName from \"./core/nodeName.js\";\nimport document from \"./var/document.js\";\nimport documentElement from \"./var/documentElement.js\";\nimport indexOf from \"./var/indexOf.js\";\nimport pop from \"./var/pop.js\";\nimport push from \"./var/push.js\";\nimport whitespace from \"./selector/var/whitespace.js\";\nimport rbuggyQSA from \"./selector/rbuggyQSA.js\";\nimport isIE from \"./var/isIE.js\";\n\n// The following utils are attached directly to the jQuery object.\nimport \"./selector/contains.js\";\nimport \"./selector/escapeSelector.js\";\nimport \"./selector/uniqueSort.js\";\n\nvar preferredDoc = document,\n    matches = documentElement.matches || documentElement.msMatchesSelector;\n\n( function() {\n\nvar i,\n    Expr,\n    outermostContext,\n\n    // Local document vars\n    document,\n    documentElement,\n    documentIsHTML,\n\n    // Instance-specific data\n    expando = jQuery.expando,\n    dirruns = 0,\n    done = 0,\n    classCache = createCache(),\n    tokenCache = createCache(),\n    compilerCache = createCache(),\n    nonnativeSelectorCache = createCache(),\n\n    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n        \"loop|multiple|open|readonly|required|scoped\",\n\n    // Regular expressions\n\n    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n    // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n        // Operator (capture 2)\n        \"*([*^$|!~]?=)\" + whitespace +\n\n        // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n        \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n        whitespace + \"*\\\\]\",\n\n    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n        // 1. quoted (capture 3; capture 4 or capture 5)\n        \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n        // 2. simple (capture 6)\n        \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n        // 3. anything else (capture 2)\n        \".*\" +\n        \")\\\\)|)\",\n\n    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n    rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n    rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n    rcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n        whitespace + \"*\" ),\n    rdescend = new RegExp( whitespace + \"|>\" ),\n\n    rpseudo = new RegExp( pseudos ),\n    ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n    matchExpr = {\n        ID: new RegExp( \"^#(\" + identifier + \")\" ),\n        CLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n        TAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n        ATTR: new RegExp( \"^\" + attributes ),\n        PSEUDO: new RegExp( \"^\" + pseudos ),\n        CHILD: new RegExp(\n            \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n                whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n                whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n        bool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        needsContext: new RegExp( \"^\" + whitespace +\n            \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n            \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n    },\n\n    rinputs = /^(?:input|select|textarea|button)$/i,\n    rheader = /^h\\d$/i,\n\n    // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n    rsibling = /[+~]/,\n\n    // CSS escapes\n    // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n        \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n    funescape = function( escape, nonHex ) {\n        var high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n        if ( nonHex ) {\n\n            // Strip the backslash prefix from a non-hex escape sequence\n            return nonHex;\n        }\n\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        return high < 0 ?\n            String.fromCharCode( high + 0x10000 ) :\n            String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n    },\n\n    // Used for iframes; see `setDocument`.\n    // Support: IE 9 - 11+\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE.\n    unloadHandler = function() {\n        setDocument();\n    },\n\n    inDisabledFieldset = addCombinator(\n        function( elem ) {\n            return elem.disabled === true && nodeName( elem, \"fieldset\" );\n        },\n        { dir: \"parentNode\", next: \"legend\" }\n    );\n\nfunction selectorError( msg ) {\n    throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n}\n\nfunction find( selector, context, results, seed ) {\n    var m, i, elem, nid, match, groups, newSelector,\n        newContext = context && context.ownerDocument,\n\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n\n    results = results || [];\n\n    // Return early from calls with invalid selector or context\n    if ( typeof selector !== \"string\" || !selector ||\n        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n        return results;\n    }\n\n    // Try to shortcut find operations (as opposed to filters) in HTML documents\n    if ( !seed ) {\n        setDocument( context );\n        context = context || document;\n\n        if ( documentIsHTML ) {\n\n            // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n            // (excepting DocumentFragment context, where the methods don't exist)\n            if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n                // ID selector\n                if ( ( m = match[ 1 ] ) ) {\n\n                    // Document context\n                    if ( nodeType === 9 ) {\n                        if ( ( elem = context.getElementById( m ) ) ) {\n                            push.call( results, elem );\n                        }\n                        return results;\n\n                    // Element context\n                    } else {\n                        if ( newContext && ( elem = newContext.getElementById( m ) ) &&\n                            jQuery.contains( context, elem ) ) {\n\n                            push.call( results, elem );\n                            return results;\n                        }\n                    }\n\n                // Type selector\n                } else if ( match[ 2 ] ) {\n                    push.apply( results, context.getElementsByTagName( selector ) );\n                    return results;\n\n                // Class selector\n                } else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n                    push.apply( results, context.getElementsByClassName( m ) );\n                    return results;\n                }\n            }\n\n            // Take advantage of querySelectorAll\n            if ( !nonnativeSelectorCache[ selector + \" \" ] &&\n                ( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n                newSelector = selector;\n                newContext = context;\n\n                // qSA considers elements outside a scoping root when evaluating child or\n                // descendant combinators, which is not what we want.\n                // In such cases, we work around the behavior by prefixing every selector in the\n                // list with an ID selector referencing the scope context.\n                // The technique has to be used as well when a leading combinator is used\n                // as such selectors are not recognized by querySelectorAll.\n                // Thanks to Andrew Dupont for this technique.\n                if ( nodeType === 1 &&\n                    ( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n                    // Expand context for sibling selectors\n                    newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n                        context;\n\n                    // Outside of IE, if we're not changing the context we can\n                    // use :scope instead of an ID.\n                    if ( newContext !== context || isIE ) {\n\n                        // Capture the context ID, setting it first if necessary\n                        if ( ( nid = context.getAttribute( \"id\" ) ) ) {\n                            nid = jQuery.escapeSelector( nid );\n                        } else {\n                            context.setAttribute( \"id\", ( nid = expando ) );\n                        }\n                    }\n\n                    // Prefix every selector in the list\n                    groups = tokenize( selector );\n                    i = groups.length;\n                    while ( i-- ) {\n                        groups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n                            toSelector( groups[ i ] );\n                    }\n                    newSelector = groups.join( \",\" );\n                }\n\n                try {\n                    push.apply( results,\n                        newContext.querySelectorAll( newSelector )\n                    );\n                    return results;\n                } catch ( qsaError ) {\n                    nonnativeSelectorCache( selector, true );\n                } finally {\n                    if ( nid === expando ) {\n                        context.removeAttribute( \"id\" );\n                    }\n                }\n            }\n        }\n    }\n\n    // All others\n    return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *  deleting the oldest entry\n */\nfunction createCache() {\n    var keys = [];\n\n    function cache( key, value ) {\n\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n            // Only keep the most recent entries\n            delete cache[ keys.shift() ];\n        }\n        return ( cache[ key + \" \" ] = value );\n    }\n    return cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n    fn[ expando ] = true;\n    return fn;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n    return function( elem ) {\n        return nodeName( elem, \"input\" ) && elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n    return function( elem ) {\n        return ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n            elem.type === type;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n    return function( elem ) {\n\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ( \"form\" in elem ) {\n\n            // Check for inherited disabledness on relevant non-disabled elements:\n            // * listed form-associated elements in a disabled fieldset\n            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n            // * option elements in a disabled optgroup\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n            // All such elements have a \"form\" property.\n            if ( elem.parentNode && elem.disabled === false ) {\n\n                // Option elements defer to a parent optgroup if present\n                if ( \"label\" in elem ) {\n                    if ( \"label\" in elem.parentNode ) {\n                        return elem.parentNode.disabled === disabled;\n                    } else {\n                        return elem.disabled === disabled;\n                    }\n                }\n\n                // Support: IE 6 - 11+\n                // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n                return elem.isDisabled === disabled ||\n\n                    // Where there is no isDisabled, check manually\n                    elem.isDisabled !== !disabled &&\n                        inDisabledFieldset( elem ) === disabled;\n            }\n\n            return elem.disabled === disabled;\n\n        // Try to winnow out elements that can't be disabled before trusting the disabled property.\n        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n        // even exist on them, let alone have a boolean value.\n        } else if ( \"label\" in elem ) {\n            return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n    };\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n    return markFunction( function( argument ) {\n        argument = +argument;\n        return markFunction( function( seed, matches ) {\n            var j,\n                matchIndexes = fn( [], seed.length, argument ),\n                i = matchIndexes.length;\n\n            // Match elements found at the specified indexes\n            while ( i-- ) {\n                if ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n                    seed[ j ] = !( matches[ j ] = seed[ j ] );\n                }\n            }\n        } );\n    } );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n    return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n */\nfunction setDocument( node ) {\n    var subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n    // Return early if doc is invalid or already selected\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( doc == document || doc.nodeType !== 9 ) {\n        return;\n    }\n\n    // Update global variables\n    document = doc;\n    documentElement = document.documentElement;\n    documentIsHTML = !jQuery.isXMLDoc( document );\n\n    // Support: IE 9 - 11+\n    // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n    // Support: IE 11+\n    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n    // two documents; shallow comparisons work.\n    // eslint-disable-next-line eqeqeq\n    if ( isIE && preferredDoc != document &&\n        ( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n        subWindow.addEventListener( \"unload\", unloadHandler );\n    }\n}\n\nfind.matches = function( expr, elements ) {\n    return find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n    setDocument( elem );\n\n    if ( documentIsHTML &&\n        !nonnativeSelectorCache[ expr + \" \" ] &&\n        ( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n        try {\n            return matches.call( elem, expr );\n        } catch ( e ) {\n            nonnativeSelectorCache( expr, true );\n        }\n    }\n\n    return find( expr, document, null, [ elem ] ).length > 0;\n};\n\nExpr = jQuery.expr = {\n\n    // Can be adjusted by the user\n    cacheLength: 50,\n\n    createPseudo: markFunction,\n\n    match: matchExpr,\n\n    find: {\n        ID: function( id, context ) {\n            if ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n                var elem = context.getElementById( id );\n                return elem ? [ elem ] : [];\n            }\n        },\n\n        TAG: function( tag, context ) {\n            if ( typeof context.getElementsByTagName !== \"undefined\" ) {\n                return context.getElementsByTagName( tag );\n\n                // DocumentFragment nodes don't have gEBTN\n            } else {\n                return context.querySelectorAll( tag );\n            }\n        },\n\n        CLASS: function( className, context ) {\n            if ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n                return context.getElementsByClassName( className );\n            }\n        }\n    },\n\n    relative: {\n        \">\": { dir: \"parentNode\", first: true },\n        \" \": { dir: \"parentNode\" },\n        \"+\": { dir: \"previousSibling\", first: true },\n        \"~\": { dir: \"previousSibling\" }\n    },\n\n    preFilter: {\n        ATTR: function( match ) {\n            match[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n            // Move the given value to match[3] whether quoted or unquoted\n            match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n                .replace( runescape, funescape );\n\n            if ( match[ 2 ] === \"~=\" ) {\n                match[ 3 ] = \" \" + match[ 3 ] + \" \";\n            }\n\n            return match.slice( 0, 4 );\n        },\n\n        CHILD: function( match ) {\n\n            /* matches from matchExpr[\"CHILD\"]\n                1 type (only|nth|...)\n                2 what (child|of-type)\n                3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                4 xn-component of xn+y argument ([+-]?\\d*n|)\n                5 sign of xn-component\n                6 x of xn-component\n                7 sign of y-component\n                8 y of y-component\n            */\n            match[ 1 ] = match[ 1 ].toLowerCase();\n\n            if ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n                // nth-* requires argument\n                if ( !match[ 3 ] ) {\n                    selectorError( match[ 0 ] );\n                }\n\n                // numeric x and y parameters for Expr.filter.CHILD\n                // remember that false/true cast respectively to 0/1\n                match[ 4 ] = +( match[ 4 ] ?\n                    match[ 5 ] + ( match[ 6 ] || 1 ) :\n                    2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n                );\n                match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n            // other types prohibit arguments\n            } else if ( match[ 3 ] ) {\n                selectorError( match[ 0 ] );\n            }\n\n            return match;\n        },\n\n        PSEUDO: function( match ) {\n            var excess,\n                unquoted = !match[ 6 ] && match[ 2 ];\n\n            if ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n                return null;\n            }\n\n            // Accept quoted arguments as-is\n            if ( match[ 3 ] ) {\n                match[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n            // Strip excess characters from unquoted arguments\n            } else if ( unquoted && rpseudo.test( unquoted ) &&\n\n                // Get excess from tokenize (recursively)\n                ( excess = tokenize( unquoted, true ) ) &&\n\n                // advance to the next closing parenthesis\n                ( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n                // excess is a negative index\n                match[ 0 ] = match[ 0 ].slice( 0, excess );\n                match[ 2 ] = unquoted.slice( 0, excess );\n            }\n\n            // Return only captures needed by the pseudo filter method (type and argument)\n            return match.slice( 0, 3 );\n        }\n    },\n\n    filter: {\n        ID: function( id ) {\n            var attrId = id.replace( runescape, funescape );\n            return function( elem ) {\n                return elem.getAttribute( \"id\" ) === attrId;\n            };\n        },\n\n        TAG: function( nodeNameSelector ) {\n            var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n            return nodeNameSelector === \"*\" ?\n\n                function() {\n                    return true;\n                } :\n\n                function( elem ) {\n                    return nodeName( elem, expectedNodeName );\n                };\n        },\n\n        CLASS: function( className ) {\n            var pattern = classCache[ className + \" \" ];\n\n            return pattern ||\n                ( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n                    \"(\" + whitespace + \"|$)\" ) ) &&\n                classCache( className, function( elem ) {\n                    return pattern.test(\n                        typeof elem.className === \"string\" && elem.className ||\n                            typeof elem.getAttribute !== \"undefined\" &&\n                                elem.getAttribute( \"class\" ) ||\n                            \"\"\n                    );\n                } );\n        },\n\n        ATTR: function( name, operator, check ) {\n            return function( elem ) {\n                var result = jQuery.attr( elem, name );\n\n                if ( result == null ) {\n                    return operator === \"!=\";\n                }\n                if ( !operator ) {\n                    return true;\n                }\n\n                result += \"\";\n\n                if ( operator === \"=\" ) {\n                    return result === check;\n                }\n                if ( operator === \"!=\" ) {\n                    return result !== check;\n                }\n                if ( operator === \"^=\" ) {\n                    return check && result.indexOf( check ) === 0;\n                }\n                if ( operator === \"*=\" ) {\n                    return check && result.indexOf( check ) > -1;\n                }\n                if ( operator === \"$=\" ) {\n                    return check && result.slice( -check.length ) === check;\n                }\n                if ( operator === \"~=\" ) {\n                    return ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n                        .indexOf( check ) > -1;\n                }\n                if ( operator === \"|=\" ) {\n                    return result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n                }\n\n                return false;\n            };\n        },\n\n        CHILD: function( type, what, _argument, first, last ) {\n            var simple = type.slice( 0, 3 ) !== \"nth\",\n                forward = type.slice( -4 ) !== \"last\",\n                ofType = what === \"of-type\";\n\n            return first === 1 && last === 0 ?\n\n                // Shortcut for :nth-*(n)\n                function( elem ) {\n                    return !!elem.parentNode;\n                } :\n\n                function( elem, _context, xml ) {\n                    var cache, outerCache, node, nodeIndex, start,\n                        dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                        parent = elem.parentNode,\n                        name = ofType && elem.nodeName.toLowerCase(),\n                        useCache = !xml && !ofType,\n                        diff = false;\n\n                    if ( parent ) {\n\n                        // :(first|last|only)-(child|of-type)\n                        if ( simple ) {\n                            while ( dir ) {\n                                node = elem;\n                                while ( ( node = node[ dir ] ) ) {\n                                    if ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) {\n\n                                        return false;\n                                    }\n                                }\n\n                                // Reverse direction for :only-* (if we haven't yet done so)\n                                start = dir = type === \"only\" && !start && \"nextSibling\";\n                            }\n                            return true;\n                        }\n\n                        start = [ forward ? parent.firstChild : parent.lastChild ];\n\n                        // non-xml :nth-child(...) stores cache data on `parent`\n                        if ( forward && useCache ) {\n\n                            // Seek `elem` from a previously-cached index\n                            outerCache = parent[ expando ] || ( parent[ expando ] = {} );\n                            cache = outerCache[ type ] || [];\n                            nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                            diff = nodeIndex && cache[ 2 ];\n                            node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n                            while ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n                                // Fallback to seeking `elem` from the start\n                                ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                // When found, cache indexes on `parent` and break\n                                if ( node.nodeType === 1 && ++diff && node === elem ) {\n                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];\n                                    break;\n                                }\n                            }\n\n                        } else {\n\n                            // Use previously-cached element index if available\n                            if ( useCache ) {\n                                outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n                                cache = outerCache[ type ] || [];\n                                nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n                                diff = nodeIndex;\n                            }\n\n                            // xml :nth-child(...)\n                            // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                            if ( diff === false ) {\n\n                                // Use the same loop as above to seek `elem` from the start\n                                while ( ( node = ++nodeIndex && node && node[ dir ] ||\n                                    ( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n                                    if ( ( ofType ?\n                                        nodeName( node, name ) :\n                                        node.nodeType === 1 ) &&\n                                        ++diff ) {\n\n                                        // Cache the index of each encountered element\n                                        if ( useCache ) {\n                                            outerCache = node[ expando ] ||\n                                                ( node[ expando ] = {} );\n                                            outerCache[ type ] = [ dirruns, diff ];\n                                        }\n\n                                        if ( node === elem ) {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Incorporate the offset, then check against cycle size\n                        diff -= last;\n                        return diff === first || ( diff % first === 0 && diff / first >= 0 );\n                    }\n                };\n        },\n\n        PSEUDO: function( pseudo, argument ) {\n\n            // pseudo-class names are case-insensitive\n            // https://www.w3.org/TR/selectors/#pseudo-classes\n            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n            // Remember that setFilters inherits from pseudos\n            var args,\n                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n                    selectorError( \"unsupported pseudo: \" + pseudo );\n\n            // The user may use createPseudo to indicate that\n            // arguments are needed to create the filter function\n            // just as jQuery does\n            if ( fn[ expando ] ) {\n                return fn( argument );\n            }\n\n            // But maintain support for old signatures\n            if ( fn.length > 1 ) {\n                args = [ pseudo, pseudo, \"\", argument ];\n                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n                    markFunction( function( seed, matches ) {\n                        var idx,\n                            matched = fn( seed, argument ),\n                            i = matched.length;\n                        while ( i-- ) {\n                            idx = indexOf.call( seed, matched[ i ] );\n                            seed[ idx ] = !( matches[ idx ] = matched[ i ] );\n                        }\n                    } ) :\n                    function( elem ) {\n                        return fn( elem, 0, args );\n                    };\n            }\n\n            return fn;\n        }\n    },\n\n    pseudos: {\n\n        // Potentially complex pseudos\n        not: markFunction( function( selector ) {\n\n            // Trim the selector passed to compile\n            // to avoid treating leading and trailing\n            // spaces as combinators\n            var input = [],\n                results = [],\n                matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n            return matcher[ expando ] ?\n                markFunction( function( seed, matches, _context, xml ) {\n                    var elem,\n                        unmatched = matcher( seed, null, xml, [] ),\n                        i = seed.length;\n\n                    // Match elements unmatched by `matcher`\n                    while ( i-- ) {\n                        if ( ( elem = unmatched[ i ] ) ) {\n                            seed[ i ] = !( matches[ i ] = elem );\n                        }\n                    }\n                } ) :\n                function( elem, _context, xml ) {\n                    input[ 0 ] = elem;\n                    matcher( input, null, xml, results );\n\n                    // Don't keep the element (issue #299)\n                    input[ 0 ] = null;\n                    return !results.pop();\n                };\n        } ),\n\n        has: markFunction( function( selector ) {\n            return function( elem ) {\n                return find( selector, elem ).length > 0;\n            };\n        } ),\n\n        contains: markFunction( function( text ) {\n            text = text.replace( runescape, funescape );\n            return function( elem ) {\n                return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n            };\n        } ),\n\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // https://www.w3.org/TR/selectors/#lang-pseudo\n        lang: markFunction( function( lang ) {\n\n            // lang value must be a valid identifier\n            if ( !ridentifier.test( lang || \"\" ) ) {\n                selectorError( \"unsupported lang: \" + lang );\n            }\n            lang = lang.replace( runescape, funescape ).toLowerCase();\n            return function( elem ) {\n                var elemLang;\n                do {\n                    if ( ( elemLang = documentIsHTML ?\n                        elem.lang :\n                        elem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n                        elemLang = elemLang.toLowerCase();\n                        return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n                    }\n                } while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n                return false;\n            };\n        } ),\n\n        // Miscellaneous\n        target: function( elem ) {\n            var hash = window.location && window.location.hash;\n            return hash && hash.slice( 1 ) === elem.id;\n        },\n\n        root: function( elem ) {\n            return elem === documentElement;\n        },\n\n        focus: function( elem ) {\n            return elem === document.activeElement &&\n                document.hasFocus() &&\n                !!( elem.type || elem.href || ~elem.tabIndex );\n        },\n\n        // Boolean properties\n        enabled: createDisabledPseudo( false ),\n        disabled: createDisabledPseudo( true ),\n\n        checked: function( elem ) {\n\n            // In CSS3, :checked should return both checked and selected elements\n            // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            return ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n                ( nodeName( elem, \"option\" ) && !!elem.selected );\n        },\n\n        selected: function( elem ) {\n\n            // Support: IE <=11+\n            // Accessing the selectedIndex property\n            // forces the browser to treat the default option as\n            // selected when in an optgroup.\n            if ( isIE && elem.parentNode ) {\n                // eslint-disable-next-line no-unused-expressions\n                elem.parentNode.selectedIndex;\n            }\n\n            return elem.selected === true;\n        },\n\n        // Contents\n        empty: function( elem ) {\n\n            // https://www.w3.org/TR/selectors/#empty-pseudo\n            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n            //   but not by others (comment: 8; processing instruction: 7; etc.)\n            // nodeType < 6 works because attributes (2) do not appear as children\n            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                if ( elem.nodeType < 6 ) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        parent: function( elem ) {\n            return !Expr.pseudos.empty( elem );\n        },\n\n        // Element/input types\n        header: function( elem ) {\n            return rheader.test( elem.nodeName );\n        },\n\n        input: function( elem ) {\n            return rinputs.test( elem.nodeName );\n        },\n\n        button: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n                nodeName( elem, \"button\" );\n        },\n\n        text: function( elem ) {\n            return nodeName( elem, \"input\" ) && elem.type === \"text\";\n        },\n\n        // Position-in-collection\n        first: createPositionalPseudo( function() {\n            return [ 0 ];\n        } ),\n\n        last: createPositionalPseudo( function( _matchIndexes, length ) {\n            return [ length - 1 ];\n        } ),\n\n        eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n            return [ argument < 0 ? argument + length : argument ];\n        } ),\n\n        even: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 0;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        odd: createPositionalPseudo( function( matchIndexes, length ) {\n            var i = 1;\n            for ( ; i < length; i += 2 ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        lt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i;\n\n            if ( argument < 0 ) {\n                i = argument + length;\n            } else if ( argument > length ) {\n                i = length;\n            } else {\n                i = argument;\n            }\n\n            for ( ; --i >= 0; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } ),\n\n        gt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n            var i = argument < 0 ? argument + length : argument;\n            for ( ; ++i < length; ) {\n                matchIndexes.push( i );\n            }\n            return matchIndexes;\n        } )\n    }\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n    Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n    Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n    var matched, match, tokens, type,\n        soFar, groups, preFilters,\n        cached = tokenCache[ selector + \" \" ];\n\n    if ( cached ) {\n        return parseOnly ? 0 : cached.slice( 0 );\n    }\n\n    soFar = selector;\n    groups = [];\n    preFilters = Expr.preFilter;\n\n    while ( soFar ) {\n\n        // Comma and first run\n        if ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n            if ( match ) {\n\n                // Don't consume trailing commas as valid\n                soFar = soFar.slice( match[ 0 ].length ) || soFar;\n            }\n            groups.push( ( tokens = [] ) );\n        }\n\n        matched = false;\n\n        // Combinators\n        if ( ( match = rcombinators.exec( soFar ) ) ) {\n            matched = match.shift();\n            tokens.push( {\n                value: matched,\n\n                // Cast descendant combinators to space\n                type: match[ 0 ].replace( rtrim, \" \" )\n            } );\n            soFar = soFar.slice( matched.length );\n        }\n\n        // Filters\n        for ( type in Expr.filter ) {\n            if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n                ( match = preFilters[ type ]( match ) ) ) ) {\n                matched = match.shift();\n                tokens.push( {\n                    value: matched,\n                    type: type,\n                    matches: match\n                } );\n                soFar = soFar.slice( matched.length );\n            }\n        }\n\n        if ( !matched ) {\n            break;\n        }\n    }\n\n    // Return the length of the invalid excess\n    // if we're just parsing\n    // Otherwise, throw an error or return tokens\n    if ( parseOnly ) {\n        return soFar.length;\n    }\n\n    return soFar ?\n        selectorError( selector ) :\n\n        // Cache the tokens\n        tokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n    var i = 0,\n        len = tokens.length,\n        selector = \"\";\n    for ( ; i < len; i++ ) {\n        selector += tokens[ i ].value;\n    }\n    return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n    var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === \"parentNode\",\n        doneName = done++;\n\n    return combinator.first ?\n\n        // Check against closest ancestor/preceding element\n        function( elem, context, xml ) {\n            while ( ( elem = elem[ dir ] ) ) {\n                if ( elem.nodeType === 1 || checkNonElements ) {\n                    return matcher( elem, context, xml );\n                }\n            }\n            return false;\n        } :\n\n        // Check against all ancestor/preceding elements\n        function( elem, context, xml ) {\n            var oldCache, outerCache,\n                newCache = [ dirruns, doneName ];\n\n            // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n            if ( xml ) {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        if ( matcher( elem, context, xml ) ) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                while ( ( elem = elem[ dir ] ) ) {\n                    if ( elem.nodeType === 1 || checkNonElements ) {\n                        outerCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n                        if ( skip && nodeName( elem, skip ) ) {\n                            elem = elem[ dir ] || elem;\n                        } else if ( ( oldCache = outerCache[ key ] ) &&\n                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n                            // Assign to newCache so results back-propagate to previous elements\n                            return ( newCache[ 2 ] = oldCache[ 2 ] );\n                        } else {\n\n                            // Reuse newcache so results back-propagate to previous elements\n                            outerCache[ key ] = newCache;\n\n                            // A match means we're done; a fail means we have to keep checking\n                            if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n}\n\nfunction elementMatcher( matchers ) {\n    return matchers.length > 1 ?\n        function( elem, context, xml ) {\n            var i = matchers.length;\n            while ( i-- ) {\n                if ( !matchers[ i ]( elem, context, xml ) ) {\n                    return false;\n                }\n            }\n            return true;\n        } :\n        matchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n    var i = 0,\n        len = contexts.length;\n    for ( ; i < len; i++ ) {\n        find( selector, contexts[ i ], results );\n    }\n    return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n    var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n\n    for ( ; i < len; i++ ) {\n        if ( ( elem = unmatched[ i ] ) ) {\n            if ( !filter || filter( elem, context, xml ) ) {\n                newUnmatched.push( elem );\n                if ( mapped ) {\n                    map.push( i );\n                }\n            }\n        }\n    }\n\n    return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n    if ( postFilter && !postFilter[ expando ] ) {\n        postFilter = setMatcher( postFilter );\n    }\n    if ( postFinder && !postFinder[ expando ] ) {\n        postFinder = setMatcher( postFinder, postSelector );\n    }\n    return markFunction( function( seed, results, context, xml ) {\n        var temp, i, elem, matcherOut,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n\n            // Get initial elements from seed or context\n            elems = seed ||\n                multipleContexts( selector || \"*\",\n                    context.nodeType ? [ context ] : context, [] ),\n\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n            matcherIn = preFilter && ( seed || !selector ) ?\n                condense( elems, preMap, preFilter, context, xml ) :\n                elems;\n\n        if ( matcher ) {\n\n            // If we have a postFinder, or filtered seed, or non-seed postFilter\n            // or preexisting results,\n            matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n                // ...intermediate processing is necessary\n                [] :\n\n                // ...otherwise use results directly\n                results;\n\n            // Find primary matches\n            matcher( matcherIn, matcherOut, context, xml );\n        } else {\n            matcherOut = matcherIn;\n        }\n\n        // Apply postFilter\n        if ( postFilter ) {\n            temp = condense( matcherOut, postMap );\n            postFilter( temp, [], context, xml );\n\n            // Un-match failing elements by moving them back to matcherIn\n            i = temp.length;\n            while ( i-- ) {\n                if ( ( elem = temp[ i ] ) ) {\n                    matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n                }\n            }\n        }\n\n        if ( seed ) {\n            if ( postFinder || preFilter ) {\n                if ( postFinder ) {\n\n                    // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                    temp = [];\n                    i = matcherOut.length;\n                    while ( i-- ) {\n                        if ( ( elem = matcherOut[ i ] ) ) {\n\n                            // Restore matcherIn since elem is not yet a final match\n                            temp.push( ( matcherIn[ i ] = elem ) );\n                        }\n                    }\n                    postFinder( null, ( matcherOut = [] ), temp, xml );\n                }\n\n                // Move matched elements from seed to results to keep them synchronized\n                i = matcherOut.length;\n                while ( i-- ) {\n                    if ( ( elem = matcherOut[ i ] ) &&\n                        ( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n                        seed[ temp ] = !( results[ temp ] = elem );\n                    }\n                }\n            }\n\n        // Add elements to results, through postFinder if defined\n        } else {\n            matcherOut = condense(\n                matcherOut === results ?\n                    matcherOut.splice( preexisting, matcherOut.length ) :\n                    matcherOut\n            );\n            if ( postFinder ) {\n                postFinder( null, results, matcherOut, xml );\n            } else {\n                push.apply( results, matcherOut );\n            }\n        }\n    } );\n}\n\nfunction matcherFromTokens( tokens ) {\n    var checkContext, matcher, j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[ tokens[ 0 ].type ],\n        implicitRelative = leadingRelative || Expr.relative[ \" \" ],\n        i = leadingRelative ? 1 : 0,\n\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator( function( elem ) {\n            return elem === checkContext;\n        }, implicitRelative, true ),\n        matchAnyContext = addCombinator( function( elem ) {\n            return indexOf.call( checkContext, elem ) > -1;\n        }, implicitRelative, true ),\n        matchers = [ function( elem, context, xml ) {\n            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n                ( checkContext = context ).nodeType ?\n                    matchContext( elem, context, xml ) :\n                    matchAnyContext( elem, context, xml ) );\n\n            // Avoid hanging onto element (issue #299)\n            checkContext = null;\n            return ret;\n        } ];\n\n    for ( ; i < len; i++ ) {\n        if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n            matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n        } else {\n            matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n            // Return special upon seeing a positional matcher\n            if ( matcher[ expando ] ) {\n\n                // Find the next relative operator (if any) for proper handling\n                j = ++i;\n                for ( ; j < len; j++ ) {\n                    if ( Expr.relative[ tokens[ j ].type ] ) {\n                        break;\n                    }\n                }\n                return setMatcher(\n                    i > 1 && elementMatcher( matchers ),\n                    i > 1 && toSelector(\n\n                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n                        tokens.slice( 0, i - 1 )\n                            .concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n                    ).replace( rtrim, \"$1\" ),\n                    matcher,\n                    i < j && matcherFromTokens( tokens.slice( i, j ) ),\n                    j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n                    j < len && toSelector( tokens )\n                );\n            }\n            matchers.push( matcher );\n        }\n    }\n\n    return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n    var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function( seed, context, xml, results, outermost ) {\n            var elem, j, matcher,\n                matchedCount = 0,\n                i = \"0\",\n                unmatched = seed && [],\n                setMatched = [],\n                contextBackup = outermostContext,\n\n                // We must always have either seed elements or outermost context\n                elems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n                // Use integer dirruns iff this is the outermost matcher\n                dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 );\n\n            if ( outermost ) {\n\n                // Support: IE 11+\n                // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                // two documents; shallow comparisons work.\n                // eslint-disable-next-line eqeqeq\n                outermostContext = context == document || context || outermost;\n            }\n\n            // Add elements passing elementMatchers directly to results\n            for ( ; ( elem = elems[ i ] ) != null; i++ ) {\n                if ( byElement && elem ) {\n                    j = 0;\n\n                    // Support: IE 11+\n                    // IE sometimes throws a \"Permission denied\" error when strict-comparing\n                    // two documents; shallow comparisons work.\n                    // eslint-disable-next-line eqeqeq\n                    if ( !context && elem.ownerDocument != document ) {\n                        setDocument( elem );\n                        xml = !documentIsHTML;\n                    }\n                    while ( ( matcher = elementMatchers[ j++ ] ) ) {\n                        if ( matcher( elem, context || document, xml ) ) {\n                            push.call( results, elem );\n                            break;\n                        }\n                    }\n                    if ( outermost ) {\n                        dirruns = dirrunsUnique;\n                    }\n                }\n\n                // Track unmatched elements for set filters\n                if ( bySet ) {\n\n                    // They will have gone through all possible matchers\n                    if ( ( elem = !matcher && elem ) ) {\n                        matchedCount--;\n                    }\n\n                    // Lengthen the array for every element, matched or not\n                    if ( seed ) {\n                        unmatched.push( elem );\n                    }\n                }\n            }\n\n            // `i` is now the count of elements visited above, and adding it to `matchedCount`\n            // makes the latter nonnegative.\n            matchedCount += i;\n\n            // Apply set filters to unmatched elements\n            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n            // no element matchers and no seed.\n            // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n            // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n            // numerically zero.\n            if ( bySet && i !== matchedCount ) {\n                j = 0;\n                while ( ( matcher = setMatchers[ j++ ] ) ) {\n                    matcher( unmatched, setMatched, context, xml );\n                }\n\n                if ( seed ) {\n\n                    // Reintegrate element matches to eliminate the need for sorting\n                    if ( matchedCount > 0 ) {\n                        while ( i-- ) {\n                            if ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n                                setMatched[ i ] = pop.call( results );\n                            }\n                        }\n                    }\n\n                    // Discard index placeholder values to get only actual matches\n                    setMatched = condense( setMatched );\n                }\n\n                // Add matches to results\n                push.apply( results, setMatched );\n\n                // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                if ( outermost && !seed && setMatched.length > 0 &&\n                    ( matchedCount + setMatchers.length ) > 1 ) {\n\n                    jQuery.uniqueSort( results );\n                }\n            }\n\n            // Override manipulation of globals by nested matchers\n            if ( outermost ) {\n                dirruns = dirrunsUnique;\n                outermostContext = contextBackup;\n            }\n\n            return unmatched;\n        };\n\n    return bySet ?\n        markFunction( superMatcher ) :\n        superMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n    var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[ selector + \" \" ];\n\n    if ( !cached ) {\n\n        // Generate a function of recursive functions that can be used to check each element\n        if ( !match ) {\n            match = tokenize( selector );\n        }\n        i = match.length;\n        while ( i-- ) {\n            cached = matcherFromTokens( match[ i ] );\n            if ( cached[ expando ] ) {\n                setMatchers.push( cached );\n            } else {\n                elementMatchers.push( cached );\n            }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache( selector,\n            matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n        // Save selector and tokenization\n        cached.selector = selector;\n    }\n    return cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n    var i, tokens, token, type, find,\n        compiled = typeof selector === \"function\" && selector,\n        match = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n    results = results || [];\n\n    // Try to minimize operations if there is only one selector in the list and no seed\n    // (the latter of which guarantees us context)\n    if ( match.length === 1 ) {\n\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[ 0 ] = match[ 0 ].slice( 0 );\n        if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n                context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n            context = ( Expr.find.ID(\n                token.matches[ 0 ].replace( runescape, funescape ),\n                context\n            ) || [] )[ 0 ];\n            if ( !context ) {\n                return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n            } else if ( compiled ) {\n                context = context.parentNode;\n            }\n\n            selector = selector.slice( tokens.shift().value.length );\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n        while ( i-- ) {\n            token = tokens[ i ];\n\n            // Abort if we hit a combinator\n            if ( Expr.relative[ ( type = token.type ) ] ) {\n                break;\n            }\n            if ( ( find = Expr.find[ type ] ) ) {\n\n                // Search, expanding context for leading sibling combinators\n                if ( ( seed = find(\n                    token.matches[ 0 ].replace( runescape, funescape ),\n                    rsibling.test( tokens[ 0 ].type ) &&\n                        testContext( context.parentNode ) || context\n                ) ) ) {\n\n                    // If seed is empty or no tokens remain, we can return early\n                    tokens.splice( i, 1 );\n                    selector = seed.length && toSelector( tokens );\n                    if ( !selector ) {\n                        push.apply( results, seed );\n                        return results;\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n\n    // Compile and execute a filtering function if one is not provided\n    // Provide `match` to avoid retokenization if we modified the selector above\n    ( compiled || compile( selector, match ) )(\n        seed,\n        context,\n        !documentIsHTML,\n        results,\n        !context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n    );\n    return results;\n}\n\n// Initialize against the default document\nsetDocument();\n\njQuery.find = find;\n\n} )();\n","import jQuery from '../core.js';\nimport toType from './toType.js';\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function(elems, fn, key, value, chainable, emptyGet, raw) {\n    let i = 0,\n        len = elems.length,\n        bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === 'object') {\n        chainable = true;\n        for (i in key) {\n            access(elems, fn, i, key[i], true, emptyGet, raw);\n        }\n\n        // Sets one value\n    } else if (value !== undefined) {\n        chainable = true;\n\n        if (typeof value !== 'function') {\n            raw = true;\n        }\n\n        if (bulk) {\n\n            // Bulk operations run against the entire set\n            if (raw) {\n                fn.call(elems, value);\n                fn = null;\n\n                // ...except when executing function values\n            } else {\n                bulk = fn;\n                fn = function(elem, _key, value) {\n                    return bulk.call(jQuery(elem), value);\n                };\n            }\n        }\n\n        if (fn) {\n            for (; i < len; i++) {\n                fn(\n\t\t\t\t\telems[i], key, raw\n\t\t\t\t\t    ? value\n\t\t\t\t\t    : value.call(elems[i], i, fn(elems[i], key))\n                );\n            }\n        }\n    }\n\n    if (chainable) {\n        return elems;\n    }\n\n    // Gets\n    if (bulk) {\n        return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n};\n\nexport default access;\n","// Only count HTML whitespace\n// Other whitespace should count in values\n// https://infra.spec.whatwg.org/#ascii-whitespace\nexport default ( /[^\\x20\\t\\r\\n\\f]+/g );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport nodeName from \"../core/nodeName.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = elem.getAttribute( name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Support: IE <=11+\n// An input loses its value after becoming a radio\nif ( isIE ) {\n\tjQuery.attrHooks.type = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( value === \"radio\" && nodeName( elem, \"input\" ) ) {\n\t\t\t\tvar val = elem.value;\n\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\tif ( val ) {\n\t\t\t\t\telem.value = val;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tjQuery.attrHooks[ name ] = {\n\t\tget: function( elem ) {\n\t\t\tvar ret,\n\t\t\t\tisXML = jQuery.isXMLDoc( elem ),\n\t\t\t\tlowercaseName = name.toLowerCase();\n\n\t\t\tif ( !isXML ) {\n\t\t\t\tret = elem.getAttribute( name ) != null ?\n\t\t\t\t\tlowercaseName :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( value === false ) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t} else {\n\t\t\t\telem.setAttribute( name, name );\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n} );\n","import jQuery from \"../core.js\";\nimport access from \"../core/access.js\";\nimport isIE from \"../var/isIE.js\";\n\nimport \"../selector.js\";\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = elem.getAttribute( \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\n\t\t\t\t\t// href-less anchor's `tabIndex` property value is `0` and\n\t\t\t\t\t// the `tabindex` attribute value: `null`. We want `-1`.\n\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11+\n// Accessing the selectedIndex property forces the browser to respect\n// setting selected on the option. The getter ensures a default option\n// is selected when in an optgroup. ESLint rule \"no-unused-expressions\"\n// is disabled for this code since it considers such accessions noop.\nif ( isIE ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n","import rnothtmlwhite from '../var/rnothtmlwhite.js';\n\n// Strip and collapse whitespace according to HTML spec\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nfunction stripAndCollapse( value ) {\n\tvar tokens = value.match( rnothtmlwhite ) || [];\n\treturn tokens.join( \" \" );\n}\n\nexport default stripAndCollapse;\n","// rsingleTag matches a string consisting of a single HTML element with no attributes\n// and captures the element's name\nexport default ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n","import jQuery from \"../../core.js\";\n\nimport \"../../selector.js\";\n\nexport default jQuery.expr.match.needsContext;\n","import jQuery from \"../core.js\";\nimport indexOf from \"../var/indexOf.js\";\nimport rneedsContext from \"./var/rneedsContext.js\";\n\nimport \"../selector.js\";\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( typeof qualifier === \"function\" ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n","// Initialize a jQuery object\nimport jQuery from '../core.js';\nimport document from '../var/document.js';\n\nimport rsingleTag from './var/rsingleTag.js';\n\nimport '../traversing/findFilter.js';\n\n// A central reference to the root jQuery(document)\nlet rootjQuery,\n\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n    // Strict HTML recognition (#11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n    init = jQuery.fn.init = function(selector, context, root) {\n        let elem, match;\n\n        // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n        if (!selector) {\n            return this;\n        }\n\n        // Method init() accepts an alternate rootjQuery\n        // so migrate can support jQuery.sub (gh-2101)\n        root = root || rootjQuery;\n\n        // Handle HTML strings\n        if (typeof selector === 'string') {\n            if (selector[0] === '<'\n\t\t\t\t&& selector[selector.length - 1] === '>'\n\t\t\t\t&& selector.length >= 3) {\n\n                // Assume that strings that start and end with <> are HTML and skip the regex check\n                match = [ null, selector, null ];\n\n            } else {\n                match = rquickExpr.exec(selector);\n            }\n\n            // Match html or make sure no context is specified for #id\n            if (match && (match[1] || !context)) {\n\n                // HANDLE: $(html) -> $(array)\n                if (match[1]) {\n                    context = context instanceof jQuery ? context[0] : context;\n\n                    // Option to run scripts is true for back-compat\n                    // Intentionally let the error be thrown if parseHTML is not present\n                    jQuery.merge(this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[1],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n                    ));\n\n                    // HANDLE: $(html, props)\n                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n                        for (match in context) {\n\n                            // Properties of context are called as methods if possible\n                            if (typeof this[match] === 'function') {\n                                this[match](context[match]);\n\n                                // ...and otherwise set as attributes\n                            } else {\n                                this.attr(match, context[match]);\n                            }\n                        }\n                    }\n\n                    return this;\n\n                    // HANDLE: $(#id)\n                }\n                elem = document.getElementById(match[2]);\n\n                if (elem) {\n\n                    // Inject the element directly into the jQuery object\n                    this[0] = elem;\n                    this.length = 1;\n                }\n\n                return this;\n\n\n                // HANDLE: $(expr, $(...))\n            } else if (!context || context.jquery) {\n                return (context || root).find(selector);\n\n                // HANDLE: $(expr, context)\n                // (which is just equivalent to: $(context).find(expr)\n            }\n\n            return this.constructor(context).find(selector);\n\n\n            // HANDLE: $(DOMElement)\n        } else if (selector.nodeType) {\n            this[0] = selector;\n            this.length = 1;\n\n            return this;\n\n            // HANDLE: $(function)\n            // Shortcut for document ready\n        } else if (typeof selector === 'function') {\n            return root.ready !== undefined\n                ? root.ready(selector)\n\n            // Execute immediately if ready is not present\n                : selector(jQuery);\n        }\n\n        return jQuery.makeArray(selector, this);\n    };\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery(document);\n","import jQuery from \"../core.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport rnothtmlwhite from \"../var/rnothtmlwhite.js\";\n\nimport \"../core/init.js\";\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tif ( typeof value === \"function\" ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\t// Toggle individual class names\n\t\t\ti = 0;\n\t\t\tself = jQuery( this );\n\t\t\tclassNames = classesToArray( value );\n\n\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t// Check each className given, space separated list\n\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\tself.removeClass( className );\n\t\t\t\t} else {\n\t\t\t\t\tself.addClass( className );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n","import jQuery from \"../core.js\";\nimport isIE from \"../var/isIE.js\";\nimport stripAndCollapse from \"../core/stripAndCollapse.js\";\nimport nodeName from \"../core/nodeName.js\";\n\nimport \"../core/init.js\";\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = typeof value === \"function\";\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( option.selected &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery( option ).val(), values ) > -1\n\t\t\t\t\t) ) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\nif ( isIE ) {\n\tjQuery.valHooks.option = {\n\t\tget: function( elem ) {\n\n\t\t\tvar val = elem.getAttribute( \"value\" );\n\t\t\treturn val != null ?\n\t\t\t\tval :\n\n\t\t\t\t// Support: IE <=10 - 11+\n\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t}\n\t};\n}\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n} );\n","import jQuery from './core.js';\n\nimport \"./attributes/attr.js\";\nimport \"./attributes/prop.js\";\nimport \"./attributes/classes.js\";\nimport \"./attributes/val.js\";\n\n// Return jQuery for attributes-only inclusion\nexport default jQuery;\n","import jQuery from '../core.js';\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11+\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n","import jQuery from \"./core.js\";\nimport access from \"./core/access.js\";\nimport \"./core/init.js\";\n\n\njQuery.fn.extend( {\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t}\n} );\n\n\n\nexport default jQuery;\n","import jQuery from './core.js';\n\nimport './selector.js';\nimport './attributes.js';\nimport './core/parseXML.js';\nimport './exports/global.js';\nimport './manipulation.js';\n\n\nexport default jQuery;\n","import arr from \"./arr.js\";\n\nexport default arr.push;\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","// [[Class]] -> type pairs\nexport default {};\n","import arr from \"./arr.js\";\n\nexport default arr.indexOf;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\nexport const CHROME = 'chrome';\nexport const OPERA = 'opera';\nexport const FIREFOX = 'firefox';\nexport const INTERNET_EXPLORER = 'iexplorer';\nexport const SAFARI = 'safari';\nexport const NWJS = 'nwjs';\nexport const ELECTRON = 'electron';\nexport const REACT_NATIVE = 'react-native';\nexport const UNKNOWN = 'unknown';","import Bowser from 'bowser';\nimport { CHROME, OPERA, FIREFOX, INTERNET_EXPLORER, SAFARI, NWJS, ELECTRON, REACT_NATIVE, UNKNOWN } from './browsers';\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\n\nconst bowserNameToJitsiName = {\n  'Chrome': CHROME,\n  'Chromium': CHROME,\n  'Opera': OPERA,\n  'Firefox': FIREFOX,\n  'Internet Explorer': INTERNET_EXPLORER,\n  'Safari': SAFARI\n};\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\n\nfunction _detectChromiumBased() {\n  const userAgent = navigator.userAgent;\n  const browserInfo = {\n    name: UNKNOWN,\n    version: undefined\n  };\n\n  if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n    // Edge is currenly supported only on desktop and android.\n    if (userAgent.match(/Edg(A?)/)) {\n      // Compare the underlying chromium version.\n      const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n      if (Number.parseInt(version, 10) > 72) {\n        browserInfo.name = CHROME;\n        browserInfo.version = version;\n      }\n    } else {\n      browserInfo.name = CHROME;\n      browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n    }\n  }\n\n  return browserInfo;\n}\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\n\n\nfunction _detectElectron() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/Electron/)) {\n    const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n    return {\n      name: ELECTRON,\n      version\n    };\n  }\n}\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\n\n\nfunction _detectNWJS() {\n  const userAgent = navigator.userAgent;\n\n  if (userAgent.match(/JitsiMeetNW/)) {\n    const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n    return {\n      name: NWJS,\n      version\n    };\n  }\n}\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\n\n\nfunction _detectReactNative() {\n  const match = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n  let version; // If we're remote debugging a React Native app, it may be treated as\n  // Chrome. Check navigator.product as well and always return some version\n  // even if we can't get the real one.\n\n  if (match || navigator.product === 'ReactNative') {\n    let name;\n\n    if (match && match.length > 2) {\n      name = match[1];\n      version = match[2];\n    }\n\n    name || (name = 'react-native');\n    version || (version = 'unknown');\n    return {\n      name: REACT_NATIVE,\n      version\n    };\n  }\n}\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\n\n\nfunction _detect(bowser) {\n  let browserInfo;\n  const detectors = [_detectReactNative, _detectElectron, _detectNWJS]; // Try all browser detectors\n\n  for (let i = 0; i < detectors.length; i++) {\n    browserInfo = detectors[i]();\n\n    if (browserInfo) {\n      return browserInfo;\n    }\n  }\n\n  const name = bowser.getBrowserName();\n\n  if (name in bowserNameToJitsiName) {\n    return {\n      name: bowserNameToJitsiName[name],\n      version: bowser.getBrowserVersion()\n    };\n  } // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n\n\n  browserInfo = _detectChromiumBased();\n\n  if (browserInfo) {\n    return browserInfo;\n  }\n\n  return {\n    name: UNKNOWN,\n    version: undefined\n  };\n}\n/**\n * Implements browser detection.\n */\n\n\nexport default class BrowserDetection {\n  /**\n   * Creates new BrowserDetection instance.\n   *\n   * @param {Object} [browserInfo] - Information about the browser.\n   * @param {string} browserInfo.name - The name of the browser.\n   * @param {string} browserInfo.version - The version of the browser.\n   */\n  constructor(browserInfo) {\n    let name, version;\n    this._bowser = Bowser.getParser(navigator.userAgent);\n\n    if (typeof browserInfo === 'undefined') {\n      const detectedBrowserInfo = _detect(this._bowser);\n\n      name = detectedBrowserInfo.name;\n      version = detectedBrowserInfo.version;\n    } else if (browserInfo.name in bowserNameToJitsiName) {\n      name = bowserNameToJitsiName[browserInfo.name];\n      version = browserInfo.version;\n    } else {\n      name = UNKNOWN;\n      version = undefined;\n    }\n\n    this._name = name;\n    this._version = version;\n  }\n  /**\n   * Gets current browser name.\n   * @returns {string}\n   */\n\n\n  getName() {\n    return this._name;\n  }\n  /**\n   * Checks if current browser is Chrome.\n   * @returns {boolean}\n   */\n\n\n  isChrome() {\n    return this._name === CHROME;\n  }\n  /**\n   * Checks if current browser is Opera.\n   * @returns {boolean}\n   */\n\n\n  isOpera() {\n    return this._name === OPERA;\n  }\n  /**\n   * Checks if current browser is Firefox.\n   * @returns {boolean}\n   */\n\n\n  isFirefox() {\n    return this._name === FIREFOX;\n  }\n  /**\n   * Checks if current browser is Internet Explorer.\n   * @returns {boolean}\n   */\n\n\n  isIExplorer() {\n    return this._name === INTERNET_EXPLORER;\n  }\n  /**\n   * Checks if current browser is Safari.\n   * @returns {boolean}\n   */\n\n\n  isSafari() {\n    return this._name === SAFARI;\n  }\n  /**\n   * Checks if current environment is NWJS.\n   * @returns {boolean}\n   */\n\n\n  isNWJS() {\n    return this._name === NWJS;\n  }\n  /**\n   * Checks if current environment is Electron.\n   * @returns {boolean}\n   */\n\n\n  isElectron() {\n    return this._name === ELECTRON;\n  }\n  /**\n   * Checks if current environment is React Native.\n   * @returns {boolean}\n   */\n\n\n  isReactNative() {\n    return this._name === REACT_NATIVE;\n  }\n  /**\n   * Returns the version of the current browser.\n   * @returns {string}\n   */\n\n\n  getVersion() {\n    return this._version;\n  }\n  /**\n   * Check if the parsed browser matches the passed condition.\n   *\n   * @param {Object} checkTree - It's one or two layered object, which can include a\n   * platform or an OS on the first layer and should have browsers specs on the\n   * bottom layer.\n   * Eg. { chrome: '>71.1.0' }\n   *     { windows: { chrome: '<70.2' } }\n   * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n   * conditions, false if not and undefined when the browser is not defined in the\n   * checktree object or when the current browser's version is unknown.\n   * @private\n   */\n\n\n  _checkCondition(checkTree) {\n    if (this._version) {\n      return this._bowser.satisfies(checkTree);\n    }\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * greater than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionGreaterThan(version) {\n    return this._checkCondition({\n      [this._name]: `>${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * lower than the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   */\n\n\n  isVersionLessThan(version) {\n    return this._checkCondition({\n      [this._name]: `<${version}`\n    });\n  }\n  /**\n   * Compares the passed version with the current browser version.\n   *\n   * @param {*} version - The version to compare with. Anything different\n   * than string will be converted to string.\n   * @returns {boolean|undefined} - Returns true if the current version is\n   * equal to the passed version and false otherwise. Returns undefined if\n   * the current browser version is unknown.\n   * A loose-equality operator is used here so that it matches the sub-versions as well.\n   */\n\n\n  isVersionEqualTo(version) {\n    return this._checkCondition({\n      [this._name]: `~${version}`\n    });\n  }\n\n}","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventEmitter from 'events';\n/**\n * Dummy implementation of Storage interface.\n */\n\nclass DummyLocalStorage extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_storage\", {});\n  }\n\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n  clear() {\n    this._storage = {};\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return Object.keys(this._storage).length;\n  }\n  /**\n   * Will return that key's value associated to the passed key name.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {*} - The key value.\n   */\n\n\n  getItem(keyName) {\n    return this._storage[keyName];\n  }\n  /**\n   * When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   *\n   * @param {string} keyName - The key name.\n   * @param {*} keyValue - The key value.\n   * @returns {void}\n   */\n\n\n  setItem(keyName, keyValue) {\n    this._storage[keyName] = keyValue;\n  }\n  /**\n   * When passed a key name, will remove that key from the storage.\n   *\n   * @param {string} keyName - The key name.\n   * @returns {void}\n   */\n\n\n  removeItem(keyName) {\n    delete this._storage[keyName];\n  }\n  /**\n   * When passed a number n, this method will return the name of the nth key in the storage.\n   *\n   * @param {number} idx - The index of the key.\n   * @returns {string} - The nth key name.\n   */\n\n\n  key(n) {\n    const keys = Object.keys(this._storage);\n\n    if (keys.length <= n) {\n      return undefined;\n    }\n\n    return keys[n];\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    return JSON.stringify(this._storage);\n  }\n\n}\n/**\n * Wrapper class for browser's local storage object.\n */\n\n\nclass JitsiLocalStorage extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Storage} storage browser's local storage object.\n   */\n  constructor() {\n    super();\n\n    try {\n      this._storage = window.localStorage;\n      this._localStorageDisabled = false;\n    } catch (ignore) {// localStorage throws an exception.\n    }\n\n    if (!this._storage) {\n      // Handles the case when window.localStorage is undefined or throws an exception.\n      console.warn('Local storage is disabled.');\n      this._storage = new DummyLocalStorage();\n      this._localStorageDisabled = true;\n    }\n  }\n  /**\n   * Returns true if window.localStorage is disabled and false otherwise.\n   *\n   * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n   */\n\n\n  isLocalStorageDisabled() {\n    return this._localStorageDisabled;\n  }\n  /**\n   * Empties all keys out of the storage.\n   *\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._storage.clear();\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the number of data items stored in the Storage object.\n   *\n   * @returns {number} - The number of data items stored in the Storage object.\n   */\n\n\n  get length() {\n    return this._storage.length;\n  }\n  /**\n   * Returns that passed key's value.\n   * @param {string} keyName the name of the key you want to retrieve\n   * the value of.\n   * @returns {String|null} the value of the key. If the key does not exist,\n   * null is returned.\n   */\n\n\n  getItem(keyName) {\n    return this._storage.getItem(keyName);\n  }\n  /**\n   * Adds a key to the storage, or update key's value if it already exists.\n   * @param {string} keyName - the name of the key you want to create/update.\n   * @param {string} keyValue - the value you want to give the key you are\n   * creating/updating.\n   * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n   */\n\n\n  setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n    this._storage.setItem(keyName, keyValue);\n\n    if (!dontEmitChangedEvent) {\n      this.emit('changed');\n    }\n  }\n  /**\n   * Remove a key from the storage.\n   * @param {string} keyName the name of the key you want to remove.\n   */\n\n\n  removeItem(keyName) {\n    this._storage.removeItem(keyName);\n\n    this.emit('changed');\n  }\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater\n   * than or equal to the number of key/value pairs in the object.\n   *\n   * @param {number} i - The index of the key in the list.\n   * @returns {string}\n   */\n\n\n  key(i) {\n    return this._storage.key(i);\n  }\n  /**\n   * Serializes the content of the storage.\n   *\n   * @returns {string} - The serialized content.\n   */\n\n\n  serialize() {\n    if (this.isLocalStorageDisabled()) {\n      return this._storage.serialize();\n    }\n\n    const length = this._storage.length;\n    const localStorageContent = {};\n\n    for (let i = 0; i < length; i++) {\n      const key = this._storage.key(i);\n\n      localStorageContent[key] = this._storage.getItem(key);\n    }\n\n    return JSON.stringify(localStorageContent);\n  }\n\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    }\n};\n\nexport default ScreenObtainer;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1],\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","/**\n * Types of messages that are passed between the main thread and the WebWorker\n * ({@code flacEncodeWorker})\n */\n\n// Messages sent by the main thread\n\n/**\n * Message type that signals the termination of encoding,\n * after which no new audio bits should be sent to the\n * WebWorker.\n */\nexport const MAIN_THREAD_FINISH = 'MAIN_THREAD_FINISH';\n\n/**\n * Message type that carries initial parameters for\n * the WebWorker.\n */\nexport const MAIN_THREAD_INIT = 'MAIN_THREAD_INIT';\n\n/**\n * Message type that carries the newly received raw audio bits\n * for the WebWorker to encode.\n */\nexport const MAIN_THREAD_NEW_DATA_ARRIVED = 'MAIN_THREAD_NEW_DATA_ARRIVED';\n\n// Messages sent by the WebWorker\n\n/**\n * Message type that signals libflac is ready to receive audio bits.\n */\nexport const WORKER_LIBFLAC_READY = 'WORKER_LIBFLAC_READY';\n\n/**\n * Message type that carries the encoded FLAC file as a Blob.\n */\nexport const WORKER_BLOB_READY = 'WORKER_BLOB_READY';\n\n// Messages sent by either the main thread or the WebWorker\n\n/**\n * Debug messages.\n */\nexport const DEBUG = 'DEBUG';\n","import SariskaMediaTransport from '../../../SariskaMediaTransport';\n\n/**\n * Base class for recording backends.\n */\nexport class RecordingAdapter {\n\n    /**\n     * Starts recording.\n     *\n     * @param {string} micDeviceId - The microphone to record on.\n     * @returns {Promise}\n     */\n    start(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Stops recording.\n     *\n     * @returns {Promise}\n     */\n    stop() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Export the recorded and encoded audio file.\n     *\n     * @returns {Promise<Object>}\n     */\n    exportRecordedData() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mutes or unmutes the current recording.\n     *\n     * @param {boolean} muted - Whether to mute or to unmute.\n     * @returns {Promise}\n     */\n    setMuted(/* eslint-disable no-unused-vars */\n            muted/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {Promise}\n     */\n    setMicDevice(/* eslint-disable no-unused-vars */\n            micDeviceId/* eslint-enable no-unused-vars */) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Helper method for getting an audio {@code MediaStream}. Use this instead\n     * of calling browser APIs directly.\n     *\n     * @protected\n     * @param {number} micDeviceId - The ID of the current audio device.\n     * @returns {Promise}\n     */\n    _getAudioStream(micDeviceId) {\n        return JitsiMeetJS.createLocalTracks({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(result => {\n            if (result.length !== 1) {\n                throw new Error('Unexpected number of streams '\n                    + 'from createLocalTracks.');\n            }\n            const mediaStream = result[0].stream;\n\n            if (mediaStream === undefined) {\n                throw new Error('Failed to create local track.');\n            }\n\n            return mediaStream;\n        });\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","// enable/disable different features by changing this configuration file\nexport const initSDKConfig = {\n    disableAudioLevels: true,\n    // useIPv6 - boolean property\n    // disableSimulcast: true //boolean property. Enables/disables simulcast.\n    // enableWindowOnErrorHandler - boolean property (default false). Enables/disables attaching global onerror handler (window.onerror).\n    // disableThirdPartyRequests - if true - callstats will be disabled and the callstats API won't be included.\n    // enableAnalyticsLogging - boolean property (default false). Enables/disables analytics logging.\n    // externalStorage - Object that implements the Storage interface. If specified this object will be used for storing data instead of localStorage.\n    // callStatsCustomScriptUrl - (optional) custom url to access callstats client script\n    // disableRtx - (optional) boolean property (default to false). Enables/disable the use of RTX.\n    // disabledCodec - the mime type of the code that should not be negotiated on the peerconnection.\n    // preferredCodec the mime type of the codec that needs to be made the preferred codec for the connection.\n};\n\nexport const connectionConfig = {\n    hosts: {\n        domain: 'sariska.io',\n        muc: 'muc.sariska.io'\n    },\n    serviceUrl: 'wss://api.sariska.io/api/v1/media/websocket',\n    clientNode: 'https://www.sariska.io',\n    // enableLipSync - (optional) boolean property which enables the lipsync feature. Currently works only in Chrome and is disabled by default.\n};\n\nexport const conferenceConfig = {\n    enableAnalytics: true,\n    enableLocalRecording: true,\n    enableNoiseCancellation: true,\n    rtcstatsServer: \"\",\n    enableTalkWhileMuted: true,\n    enableNoAudioDetection: true, \n    enableNoisyMicDetection: true,\n    openBridgeChannel: 'websocket', //- Enables/disables bridge channel. Values can be \"datachannel\", \"websocket\", true (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false (don't open any channel). NOTE: we recommend to set that option to true\n    // recordingType - the type of recording to be used\n    // callStatsID - callstats credentials\n    // callStatsSecret - callstats credentials\n    // enableTalkWhileMuted - boolean property. Enables/disables talk while muted detection, by default the value is false/disabled.\n    // ignoreStartMuted - ignores start muted events coming from jicofo.\n    // startSilent - enables silent mode, will mark audio as inactive will not send/receive audio\n    // confID - Used for statistics to identify conference, if tenants are supported will contain tenant and the non lower case variant for the room name.\n    // siteID - (optional) Used for statistics to identify the site where the user is coming from, if tenants are supported it will contain a unique identifier for that tenant. If not provided, the value will be infered from confID\n    // statisticsId - The id to be used as stats instead of default callStatsUsername.\n    // statisticsDisplayName - The display name to be used for stats, used for callstats.\n    // focusUserJid - The real JID of focus participant - can be overridden here\n    // enableNoAudioDetection\n    // enableNoisyMicDetection\n    // enableRemb\n    // enableTcc\n    // useRoomAsSharedDocumentName\n    // channelLastN\n    // startBitrate\n    // stereo\n    // forceJVB121Ratio - \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people conference should be moved to the JVB instead of P2P. The decision is made on the responder side, after ICE succeeds on the P2P connection.\n     hiddenDomain: \"recorder.sariska.io\",\n    // startAudioMuted\n    // startVideoMuted\n    // enableLayerSuspension - if set to 'true', we will cap the video send bitrate when we are told we have not been selected by any endpoints (and therefore the non-thumbnail streams are not in use).\n    // deploymentInfo\n    // shard\n    // userRegion\n    // rttMonitor\n    // enabled\n    // initialDelay\n    // getStatsInterval\n    // analyticsInterval\n    // stunServers\n    e2eping:{\n        pingInterval: -1,\n     // analyticsInterval: 60000,\n    },\n    // pingInterval\n    // abTesting - A/B testing related options\n    // enableSuspendVideoTest\n    // testing\n    // capScreenshareBitrate\n    // p2pTestMode\n    // octo\n    // probability\n\n    p2p: {\n        // Enables peer to peer mode. When enabled the system will try to\n        // establish a direct connection when there are exactly 2 participants\n        // in the room. If that succeeds the conference will stop sending data\n        // through the JVB and use the peer to peer connection instead. When a\n        // 3rd participant joins the conference will be moved back to the JVB\n        // connection.\n        enabled: false,\n\n        // The STUN servers that will be used in the peer to peer connections\n        // stunServers: [\n        //    { urls: 'stun.l.google.com:19302' }\n        //]\n\n        // Sets the ICE transport policy for the p2p connection. At the time\n        // of this writing the list of possible values are 'all' and 'relay',\n        // but that is subject to change in the future. The enum is defined in\n        // the WebRTC standard:\n        // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.\n        // If not set, the effective value is 'all'.\n        // iceTransportPolicy: 'all',\n\n        // Provides a way to set the video codec preference on the p2p connection. Acceptable\n        // codec values are 'VP8', 'VP9' and 'H264'.\n        // preferredCodec: 'H264',\n\n        // Provides a way to prevent a video codec from being negotiated on the p2p connection.\n        // disabledCodec: '',\n\n\n        // How long we're going to wait, before going back to P2P after the 3rd\n        // participant has left the conference (to filter out page reload).\n        // backToP2PDelay: 5\n    }\n};\n\n\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, Olm */\n\nimport base64js from 'base64-js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\n\nimport E2EEContext from './E2EEContext';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        this._conferenceJoined = false;\n        this._enabled = false;\n        this._key = undefined;\n        this._enabling = undefined;\n\n        this._e2eeCtx = new E2EEContext();\n        this._olmAdapter = new OlmAdapter(conference);\n\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n\n        // Participant join / leave operations. Used for key advancement / rotation.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents.CONFERENCE_JOINED,\n            () => {\n                this._conferenceJoined = true;\n            });\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.OLM_ID_KEY_READY,\n            this._onOlmIdKeyReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\n            this._onParticipantE2EEChannelReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        return browser.supportsInsertableStreams()\n            && OlmAdapter.isSupported()\n            && !(config.testing && config.testing.disableE2EE);\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this._enabled = enabled;\n\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            for (const participant of this.conference.getParticipants()) {\n                this._e2eeCtx.cleanup(participant.getId());\n            }\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Publushes our own Olmn id key in presence.\n     * @private\n     */\n    _onOlmIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this._enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this._e2eeCtx.cleanup(id);\n\n        if (this._enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this._e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this._enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n\n                this._rotateKey();\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SignalingLayerImpl from './SignalingLayerImpl';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC standard.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (!this.isP2P && browser.isChromiumBased() && options.enableUnifiedOnChrome));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`${this} onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info(`${this} Sending session-accept`, accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info(`${this} Sending transport-accept: `, transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info(`${this} Sending 'transport-reject'`, transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the maximum bitrates on the local video track. Bitrate values from\n     * videoQuality settings in config.js will be used for configuring the sender.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderMaxBitrates() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setMaxBitRate();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the degradation preference on the video sender. This setting determines if\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoDegradationPreference() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setSenderVideoDegradationPreference();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info(`${this} Sending session-terminate`, sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(`${this} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {Promise<JitsiRemoteTrack>} Promise that resolves with the tracks that are removed or error if the\n     * operation fails.\n     */\n    removeRemoteStreamsOnLeave(id) {\n        let remoteTracks = [];\n\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                remoteTracks = this.peerconnection.removeRemoteTracks(id);\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                        resolve(remoteTracks);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(`${this} ${logPrefix} - OK`);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${this} ${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n\n                        // The current direction of the transceiver for p2p will depend on whether a local sources is\n                        // added or not. It will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n\n                        // Jvb connections will have direction set to 'sendonly' when the remote ssrc is present.\n                        } else {\n                            // Change the direction to \"inactive\" always for jvb connection.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv' only for p2p connections. For jvb connections, a new\n            // m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack && newTrack.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // FIXME set all sender parameters in one go?\n                            // Set the degradation preference on the new video sender.\n                            return this.peerconnection.setSenderVideoDegradationPreference()\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\n                                .then(() => this.peerconnection.setMaxBitRate());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Apply the video constraints, max bitrates and degradation preference on\n                // the video sender if needed.\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\n                    return this.setSenderMaxBitrates()\n                        .then(() => this.setSenderVideoDegradationPreference())\n                        .then(() => this.setSenderVideoConstraint());\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info(`${this} Sending source-remove`, remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info(`${this} Sending source-add`, add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     * @param videoBitrates - the bitrates to be configured on the video senders for\n     * different resolutions both in unicast and simulcast mode.\n     */\n    constructor(peerconnection, videoBitrates) {\n        this.pc = peerconnection;\n        this.videoBitrates = videoBitrates.VP8 || videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: this.videoBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    _findTransceiver(mediaType, localTrack = null) {\n        let transceiver = null;\n\n        // Check if the local track has been removed from the peerconnection already.\n        const trackRemoved = !localTrack\n            || (localTrack\n                && browser.doesVideoMuteByStreamRemove()\n                && localTrack.isVideoTrack()\n                && localTrack.isMuted());\n\n        if (trackRemoved) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver?.track?.kind === mediaType);\n        } else if (localTrack) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.sender?.track?.id === localTrack.getTrackId());\n        }\n\n        return transceiver;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n        const transceiver = this._findTransceiver(mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`${this.pc} Adding ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n     * Obtains the current local video track's height constraints based on the\n     * initial stream encodings configuration on the sender and the resolution\n     * of the current local track added to the peerconnection.\n     * @param {MediaStreamTrack} localTrack local video track\n     * @returns {Array[number]} an array containing the resolution heights of\n     * simulcast streams configured on the video sender.\n     */\n    getLocalStreamHeightConstraints(localTrack) {\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\n        if (browser.isReactNative()) {\n            return null;\n        }\n\n        const localVideoHeightConstraints = [];\n\n        // Firefox doesn't return the height of the desktop track, assume a min. height of 720.\n        const { height = 720 } = localTrack.getSettings();\n\n        for (const encoding of this.localStreamEncodingsConfig) {\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\n        }\n\n        return localVideoHeightConstraints;\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this._findTransceiver(mediaType, localTrack);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`${this.pc} Removing ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(null);\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n\n            // Ignore cases when the track is replaced while the device is in a muted state,like\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\n            // do not have a mediastream attached. Replace track will be called again when the device is\n            // unmuted and the track will be replaced on the peerconnection then.\n            if (!stream) {\n                this.pc.localTracks.delete(oldTrack.rtcId);\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                return Promise.resolve();\n            }\n\n            const transceiver = this._findTransceiver(mediaType, oldTrack);\n            const track = newTrack.getTrack();\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                });\n        } else if (oldTrack && !newTrack) {\n            return this.removeTrackMute(oldTrack)\n                .then(() => {\n                    const mediaType = oldTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType);\n\n                    // Change the direction on the transceiver to 'recvonly' so that a 'removetrack'\n                    // is fired on the associated media stream on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.RECVONLY;\n                    }\n\n                    // Remove the old track from the list of local tracks.\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                });\n        } else if (newTrack && !oldTrack) {\n            return this.addTrackUnmute(newTrack)\n                .then(() => {\n                    const mediaType = newTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType, newTrack);\n\n                    // Change the direction on the transceiver back to 'sendrecv' so that a 'track'\n                    // event is fired on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.SENDRECV;\n                    }\n\n                    // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                    // for the newly added track using SDP munging which happens during the renegotiation.\n                    const promise = browser.usesSdpMungingForSimulcast()\n                        ? Promise.resolve()\n                        : this.setEncodings(newTrack);\n\n                    return promise\n                        .then(() => {\n                            // Add the new track to the list of local tracks.\n                            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n                        });\n                });\n        }\n\n        logger.info(`${this.pc} TPCUtils.replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this._findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","// @flow\n\nimport SariskaMediaTransport from '../../../SariskaMediaTransport';\n/**\n * Class Implementing the effect interface expected by a JitsiLocalTrack.\n * The AudioMixerEffect, as the name implies, mixes two JitsiLocalTracks containing a audio track. First track is\n * provided at the moment of creation, second is provided through the effect interface.\n */\nexport class AudioMixerEffect {\n    /**\n     * JitsiLocalTrack that is going to be mixed into the track that uses this effect.\n     */\n    _mixAudio: Object;\n\n    /**\n     * MediaStream resulted from mixing.\n     */\n    _mixedMediaStream: Object;\n\n    /**\n     * MediaStreamTrack obtained from mixed stream.\n     */\n    _mixedMediaTrack: Object;\n\n    /**\n     * Original MediaStream from the JitsiLocalTrack that uses this effect.\n     */\n    _originalStream: Object;\n\n    /**\n     * MediaStreamTrack obtained from the original MediaStream.\n     */\n    _originalTrack: Object;\n\n    /**\n     * lib-jitsi-meet AudioMixer.\n     */\n    _audioMixer: Object;\n\n    /**\n     * Creates AudioMixerEffect.\n     *\n     * @param {JitsiLocalTrack} mixAudio - JitsiLocalTrack which will be mixed with the original track.\n     */\n    constructor(mixAudio: Object) {\n        if (mixAudio.getType() !== \"audio\") {\n            throw new Error('AudioMixerEffect only supports audio JitsiLocalTracks; effect will not work!');\n        }\n\n        this._mixAudio = mixAudio;\n    }\n\n    /**\n     * Checks if the JitsiLocalTrack supports this effect.\n     *\n     * @param {JitsiLocalTrack} sourceLocalTrack - Track to which the effect will be applied.\n     * @returns {boolean} - Returns true if this effect can run on the specified track, false otherwise.\n     */\n    isEnabled(sourceLocalTrack: Object) {\n        // Both JitsiLocalTracks need to be audio i.e. contain an audio MediaStreamTrack\n        return sourceLocalTrack.isAudioTrack() && this._mixAudio.isAudioTrack();\n    }\n\n    /**\n     * Effect interface called by source JitsiLocalTrack, At this point a WebAudio ChannelMergerNode is created\n     * and and the two associated MediaStreams are connected to it; the resulting mixed MediaStream is returned.\n     *\n     * @param {MediaStream} audioStream - Audio stream which will be mixed with _mixAudio.\n     * @returns {MediaStream} - MediaStream containing both audio tracks mixed together.\n     */\n    startEffect(audioStream: MediaStream) {\n        this._originalStream = audioStream;\n        this._originalTrack = audioStream.getTracks()[0];\n\n        this._audioMixer = SariskaMediaTransport.createAudioMixer();\n        this._audioMixer.addMediaStream(this._mixAudio.getOriginalStream());\n        this._audioMixer.addMediaStream(this._originalStream);\n\n        this._mixedMediaStream = this._audioMixer.start();\n        this._mixedMediaTrack = this._mixedMediaStream.getTracks()[0];\n\n        // Sync the resulting mixed track enabled state with that of the track using the effect.\n        this.setMuted(!this._originalTrack.enabled);\n        this._originalTrack.enabled = true;\n\n        return this._mixedMediaStream;\n    }\n\n    /**\n     * Reset the AudioMixer stopping it in the process.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        // Match state of the original track with that of the mixer track, not doing so can\n        // result in an inconsistent state e.g. redux state is muted yet track is enabled.\n        this._originalTrack.enabled = this._mixedMediaTrack.enabled;\n        this._audioMixer.reset();\n    }\n\n    /**\n     * Change the muted state of the effect.\n     *\n     * @param {boolean} muted - Should effect be muted or not.\n     * @returns {void}\n     */\n    setMuted(muted: boolean) {\n        this._mixedMediaTrack.enabled = !muted;\n    }\n\n    /**\n     * Check whether or not this effect is muted.\n     *\n     * @returns {boolean}\n     */\n    isMuted() {\n        return !this._mixedMediaTrack.enabled;\n    }\n}\n","// @flow\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id\n * property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript\n    = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\n/**\n * Number of pixels that signal if two images should be considered different.\n */\nexport const PIXEL_LOWER_BOUND = 100000;\n\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 30000;\n\n/**\n * SET_INTERVAL constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_INTERVAL,\n *      timeMs: 33\n * }\n */\nexport const SET_INTERVAL = 1;\n\n/**\n * CLEAR_INTERVAL constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_INTERVAL\n * }\n */\nexport const CLEAR_INTERVAL = 2;\n\n/**\n * INTERVAL_TIMEOUT constant is used as response and it is set in the id property.\n *\n * {\n *      id: INTERVAL_TIMEOUT\n * }\n */\nexport const INTERVAL_TIMEOUT = 3;\n","// @flow\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    SET_INTERVAL\n} from './constants';\n\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_INTERVAL}: {\n            timer = setInterval(() => {\n                postMessage({ id: ${INTERVAL_TIMEOUT} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_INTERVAL}: {\n            if (timer) {\n                clearInterval(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport pixelmatch from 'pixelmatch';\n\n\nimport {\n    CLEAR_INTERVAL,\n    INTERVAL_TIMEOUT,\n    PIXEL_LOWER_BOUND,\n    POLL_INTERVAL,\n    SET_INTERVAL\n} from './constants';\nimport { timerWorkerScript } from './worker';\n\ndeclare var interfaceConfig: Object;\n\n/**\n * Effect that wraps {@code MediaStream} adding periodic screenshot captures.\n * Manipulates the original desktop stream and performs custom processing operations, if implemented.\n */\nexport default class ScreenshotCaptureEffect {\n     callback: Function;\n    _currentCanvas: HTMLCanvasElement;\n    _currentCanvasContext: CanvasRenderingContext2D;\n    _videoElement: HTMLVideoElement;\n    _handleWorkerAction: Function;\n    _initScreenshotCapture: Function;\n    _streamWorker: Worker;\n    _streamHeight: any;\n    _streamWidth: any;\n    _storedImageData: Uint8ClampedArray;\n\n    /**\n     * Initializes a new {@code ScreenshotCaptureEffect} instance.\n     *\n     */\n    constructor(callback: Function) {\n        this.callback = callback;\n        this._currentCanvas = document.createElement('canvas');\n        this._currentCanvasContext = this._currentCanvas.getContext('2d');\n        this._videoElement = document.createElement('video');\n\n        // Bind handlers such that they access the same instance.\n        this._handleWorkerAction = this._handleWorkerAction.bind(this);\n        this._initScreenshotCapture = this._initScreenshotCapture.bind(this);\n        this._streamWorker = new Worker(timerWorkerScript, { name: 'Screenshot capture worker' });\n        this._streamWorker.onmessage = this._handleWorkerAction;\n    }\n\n    /**\n     * Starts the screenshot capture event on a loop.\n     *\n     * @param {MediaStream} stream - The desktop stream from which screenshots are to be sent.\n     * @param {string} videoType - The type of the media stream.\n     * @returns {Promise} - Promise that resolves once effect has started or rejects if the\n     * videoType parameter is not desktop.\n     */\n    startEffect(stream: MediaStream, videoType: string) {\n        return new Promise<void>((resolve, reject) => {\n            if (videoType !== 'desktop') {\n                reject();\n            }\n            const desktopTrack = stream.getVideoTracks()[0];\n            const { height, width }\n                = desktopTrack.getSettings() ?? desktopTrack.getConstraints();\n\n            this._streamHeight = height;\n            this._streamWidth = width;\n            this._currentCanvas.height = parseInt(height, 10);\n            this._currentCanvas.width = parseInt(width, 10);\n            this._videoElement.height = parseInt(height, 10);\n            this._videoElement.width = parseInt(width, 10);\n            this._videoElement.srcObject = stream;\n            this._videoElement.play();\n\n            // Store first capture for comparisons in {@code this._handleScreenshot}.\n            this._videoElement.addEventListener('loadeddata', this._initScreenshotCapture);\n            resolve();\n        });\n    }\n\n    /**\n     * Stops the ongoing {@code ScreenshotCaptureEffect} by clearing the {@code Worker} interval.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._streamWorker.postMessage({ id: CLEAR_INTERVAL });\n        this._videoElement.removeEventListener('loadeddata', this._initScreenshotCapture);\n    }\n\n    /**\n     * Method that is called as soon as the first frame of the video loads from stream.\n     * The method is used to store the {@code ImageData} object from the first frames\n     * in order to use it for future comparisons based on which we can process only certain\n     * screenshots.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initScreenshotCapture() {\n        const storedCanvas = document.createElement('canvas');\n        const storedCanvasContext = storedCanvas.getContext('2d');\n\n        storedCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = storedCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n\n        this._storedImageData = data;\n        this._streamWorker.postMessage({\n            id: SET_INTERVAL,\n            timeMs: POLL_INTERVAL\n        });\n    }\n\n    /**\n     * Handler of the {@code EventHandler} message that calls the appropriate method based on the parameter's id.\n     *\n     * @private\n     * @param {EventHandler} message - Message received from the Worker.\n     * @returns {void}\n     */\n    _handleWorkerAction(message: Object) {\n        return message.data.id === INTERVAL_TIMEOUT && this._handleScreenshot();\n    }\n\n    /**\n     * Method that decides whether an image should be processed based on a preset pixel lower bound.\n     *\n     * @private\n     * @param {integer} nbPixels - The number of pixels of the candidate image.\n     * @returns {boolean} - Whether the image should be processed or not.\n     */\n    _shouldProcessScreenshot(nbPixels: number) {\n        return nbPixels >= PIXEL_LOWER_BOUND;\n    }\n\n    /**\n     * Screenshot handler.\n     *\n     * @private\n     * @returns {void}\n     */\n    _handleScreenshot() {\n        this._currentCanvasContext.drawImage(this._videoElement, 0, 0, this._streamWidth, this._streamHeight);\n        const { data } = this._currentCanvasContext.getImageData(0, 0, this._streamWidth, this._streamHeight);\n        const diffPixels = pixelmatch(data, this._storedImageData, null, this._streamWidth, this._streamHeight);\n\n        if (this._shouldProcessScreenshot(diffPixels)) {\n            this._storedImageData = data;\n            this.callback(this._currentCanvas);\n        }\n    }\n}\n","// @flow\n\nimport ScreenshotCaptureEffect from './ScreenshotCaptureEffect';\n\n/**\n * Creates a new instance of ScreenshotCaptureEffect.\n *\n * @param {Object | Function} stateful - The redux store, state, or\n * {@code getState} function.\n * @returns {Promise<ScreenshotCaptureEffect>}\n */\nexport function createScreenshotCaptureEffect(callback: Function) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        return Promise.reject(new Error('ScreenshotCaptureEffect not supported!'));\n    }\n\n    return Promise.resolve(new ScreenshotCaptureEffect(callback));\n}\n","/**\n * Force download of Blob in browser by faking an <a> tag.\n *\n * @param {Blob} blob - Base64 URL.\n * @param {string} fileName - The filename to appear in the download dialog.\n * @returns {void}\n */\nexport function downloadBlob(blob, fileName = 'recording.ogg') {\n    const base64Url = window.URL.createObjectURL(blob);\n\n    // fake a anchor tag\n    const a = document.createElement('a');\n\n    a.style = 'display: none';\n    a.href = base64Url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* global __filename */\nimport './dom/jquery.js';\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as createAnalyticsEvent from './modules/util/createAnalyticsEvent';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport {initSDKConfig} from './config';\nimport {AudioMixerEffect, createPresenterEffect, createRnnoiseProcessor, createScreenshotCaptureEffect, createVirtualBackgroundEffect} from \"./modules/stream-effects\";\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.SariskaMediaTransport === 'object'\n            ? Object.assign({}, window.SariskaMediaTransport, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n    effects: {\n        AudioMixerEffect,\n        JitsiStreamPresenterEffect,\n        createRnnoiseProcessor,\n        createScreenshotCaptureEffect,\n        createVirtualBackgroundEffect\n    },\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    initialize(options = {}) {\n        this.init(options); \n    },\n    init(options = {}) {\n        options = {...initSDKConfig, ...options};\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'sariska-media-transport',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        Statistics.sendAnalytics(\n            createAnalyticsEvent.createNetworkInfoEvent({\n                isOnline: action.isOnline\n        }));\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export const VIRTUAL_BACKGROUND_TYPE = {\n    IMAGE: 'image',\n    DESKTOP_SHARE: 'desktop-share',\n    BLUR: 'blur',\n    NONE: 'none'\n};","\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. timeMs property must\n * also be set. request.data example:\n *\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n */\nexport const SET_TIMEOUT = 1;\n\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * {\n *      id: CLEAR_TIMEOUT\n * }\n */\nexport const CLEAR_TIMEOUT = 2;\n\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * {\n *      id: TIMEOUT_TICK\n * }\n */\nexport const TIMEOUT_TICK = 3;\n\n/**\n * The following code is needed as string to create a URL from a Blob.\n * The URL is then passed to a WebWorker. Reason for this is to enable\n * use of setInterval that is not throttled when tab is inactive.\n */\nconst code = `\n    var timer;\n\n    onmessage = function(request) {\n        switch (request.data.id) {\n        case ${SET_TIMEOUT}: {\n            timer = setTimeout(() => {\n                postMessage({ id: ${TIMEOUT_TICK} });\n            }, request.data.timeMs);\n            break;\n        }\n        case ${CLEAR_TIMEOUT}: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n        }\n    };\n`;\n\nexport const timerWorkerScript = URL.createObjectURL(new Blob([ code ], { type: 'application/javascript' }));\n","// @flow\n\nimport { VIRTUAL_BACKGROUND_TYPE } from './constants';\n\nimport {\n    CLEAR_TIMEOUT,\n    TIMEOUT_TICK,\n    SET_TIMEOUT,\n    timerWorkerScript\n} from './TimerWorker';\n\n/**\n * Represents a modified MediaStream that adds effects to video background.\n * <tt>JitsiStreamBackgroundEffect</tt> does the processing of the original\n * video stream.\n */\nexport default class JitsiStreamBackgroundEffect {\n    _model: Object;\n    _options: Object;\n    _desktopShareDimensions: Object;\n    _segmentationPixelCount: number;\n    _inputVideoElement: HTMLVideoElement;\n    _onMaskFrameTimer: Function;\n    _maskFrameTimerWorker: Worker;\n    _outputCanvasElement: HTMLCanvasElement;\n    _outputCanvasCtx: Object;\n    _segmentationMaskCtx: Object;\n    _segmentationMask: Object;\n    _segmentationMaskCanvas: Object;\n    _renderMask: Function;\n    _virtualImage: HTMLImageElement;\n    _virtualVideo: HTMLVideoElement;\n    isEnabled: Function;\n    startEffect: Function;\n    stopEffect: Function;\n\n    /**\n     * Represents a modified video MediaStream track.\n     *\n     * @class\n     * @param {Object} model - Meet model.\n     * @param {Object} options - Segmentation dimensions.\n     */\n    constructor(model: Object, options: Object) {\n        this._options = options;\n\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._virtualImage = document.createElement('img');\n            this._virtualImage.crossOrigin = 'anonymous';\n            this._virtualImage.src = this._options.virtualBackground.virtualSource;\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._virtualVideo = document.createElement('video');\n            this._virtualVideo.autoplay = true;\n            this._virtualVideo.srcObject = this._options?.virtualBackground?.virtualSource?.stream;\n        }\n        this._model = model;\n        this._segmentationPixelCount = this._options.width * this._options.height;\n\n        // Bind event handler so it is only bound once for every instance.\n        this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);\n\n        // Workaround for FF issue https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n        this._outputCanvasElement = document.createElement('canvas');\n        this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement = document.createElement('video');\n    }\n\n    /**\n     * EventHandler onmessage for the maskFrameTimerWorker WebWorker.\n     *\n     * @private\n     * @param {EventHandler} response - The onmessage EventHandler parameter.\n     * @returns {void}\n     */\n    _onMaskFrameTimer(response: Object) {\n        if (response.data.id === TIMEOUT_TICK) {\n            this._renderMask();\n        }\n    }\n\n    /**\n     * Represents the run post processing.\n     *\n     * @returns {void}\n     */\n    runPostProcessing() {\n        this._outputCanvasCtx.globalCompositeOperation = 'copy';\n\n        // Draw segmentation mask.\n        //\n\n        // Smooth out the edges.\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.filter = 'blur(4px)';\n        } else {\n            this._outputCanvasCtx.filter = 'blur(8px)';\n        }\n\n        this._outputCanvasCtx.drawImage(\n            this._segmentationMaskCanvas,\n            0,\n            0,\n            this._options.width,\n            this._options.height,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height\n        );\n        this._outputCanvasCtx.globalCompositeOperation = 'source-in';\n        this._outputCanvasCtx.filter = 'none';\n\n        // Draw the foreground video.\n        //\n\n        this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n\n        // Draw the background.\n        //\n\n        this._outputCanvasCtx.globalCompositeOperation = 'destination-over';\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.IMAGE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualImage,\n                0,\n                0,\n                this._inputVideoElement.width,\n                this._inputVideoElement.height\n            );\n        }\n        if (this._options.virtualBackground.backgroundType === VIRTUAL_BACKGROUND_TYPE.DESKTOP_SHARE) {\n            this._outputCanvasCtx.drawImage(\n                this._virtualVideo,\n                0,\n                0,\n                this._desktopShareDimensions.width,\n                this._desktopShareDimensions.height\n            );\n        } else {\n            this._outputCanvasCtx.filter = `blur(${this._options.virtualBackground.blurValue}px)`;\n            this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);\n        }\n    }\n\n    /**\n     * Represents the run Tensorflow Interference.\n     *\n     * @returns {void}\n     */\n    runInference() {\n        this._model._runInference();\n        const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            const background = this._model.HEAPF32[outputMemoryOffset + (i * 2)];\n            const person = this._model.HEAPF32[outputMemoryOffset + (i * 2) + 1];\n            const shift = Math.max(background, person);\n            const backgroundExp = Math.exp(background - shift);\n            const personExp = Math.exp(person - shift);\n\n            // Sets only the alpha component of each pixel.\n            this._segmentationMask.data[(i * 4) + 3] = (255 * personExp) / (backgroundExp + personExp);\n        }\n        this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);\n    }\n\n    /**\n     * Loop function to render the background mask.\n     *\n     * @private\n     * @returns {void}\n     */\n    _renderMask() {\n        const desktopShareTrack = this._options?.virtualBackground?.virtualSource?.track;\n\n        if (desktopShareTrack) {\n            this._desktopShareDimensions = desktopShareTrack.getSettings ? desktopShareTrack.getSettings()\n                : desktopShareTrack.getConstraints();\n        }\n        this.resizeSource();\n        this.runInference();\n        this.runPostProcessing();\n\n        this._maskFrameTimerWorker.postMessage({\n            id: SET_TIMEOUT,\n            timeMs: 1000 / 30\n        });\n    }\n\n    /**\n     * Represents the resize source process.\n     *\n     * @returns {void}\n     */\n    resizeSource() {\n        this._segmentationMaskCtx.drawImage(\n            this._inputVideoElement,\n            0,\n            0,\n            this._inputVideoElement.width,\n            this._inputVideoElement.height,\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n\n        const imageData = this._segmentationMaskCtx.getImageData(\n            0,\n            0,\n            this._options.width,\n            this._options.height\n        );\n        const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;\n\n        for (let i = 0; i < this._segmentationPixelCount; i++) {\n            this._model.HEAPF32[inputMemoryOffset + (i * 3)] = imageData.data[i * 4] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 1] = imageData.data[(i * 4) + 1] / 255;\n            this._model.HEAPF32[inputMemoryOffset + (i * 3) + 2] = imageData.data[(i * 4) + 2] / 255;\n        }\n    }\n\n    /**\n     * Checks if the local track supports this effect.\n     *\n     * @param {JitsiLocalTrack} jitsiLocalTrack - Track to apply effect.\n     * @returns {boolean} - Returns true if this effect can run on the specified track\n     * false otherwise.\n     */\n    isEnabled(jitsiLocalTrack: Object) {\n        return jitsiLocalTrack.isVideoTrack() && jitsiLocalTrack.videoType === 'camera';\n    }\n\n    /**\n     * Starts loop to capture video frame and render the segmentation mask.\n     *\n     * @param {MediaStream} stream - Stream to be used for processing.\n     * @returns {MediaStream} - The stream with the applied effect.\n     */\n    startEffect(stream: MediaStream) {\n        this._maskFrameTimerWorker = new Worker(timerWorkerScript, { name: 'Blur effect worker' });\n        this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;\n        const firstVideoTrack = stream.getVideoTracks()[0];\n        const { height, frameRate, width }\n            = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();\n\n        this._segmentationMask = new ImageData(this._options.width, this._options.height);\n        this._segmentationMaskCanvas = document.createElement('canvas');\n        this._segmentationMaskCanvas.width = this._options.width;\n        this._segmentationMaskCanvas.height = this._options.height;\n        this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');\n\n        this._outputCanvasElement.width = parseInt(width, 10);\n        this._outputCanvasElement.height = parseInt(height, 10);\n        this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');\n        this._inputVideoElement.width = parseInt(width, 10);\n        this._inputVideoElement.height = parseInt(height, 10);\n        this._inputVideoElement.autoplay = true;\n        this._inputVideoElement.srcObject = stream;\n        this._inputVideoElement.onloadeddata = () => {\n            this._maskFrameTimerWorker.postMessage({\n                id: SET_TIMEOUT,\n                timeMs: 1000 / 30\n            });\n        };\n\n        return this._outputCanvasElement.captureStream(parseInt(frameRate, 10));\n    }\n\n    /**\n     * Stops the capture and render loop.\n     *\n     * @returns {void}\n     */\n    stopEffect() {\n        this._maskFrameTimerWorker.postMessage({\n            id: CLEAR_TIMEOUT\n        });\n\n        this._maskFrameTimerWorker.terminate();\n    }\n}\n","// @flow\n\nimport * as wasmCheck from 'wasm-check';\nimport JitsiStreamBackgroundEffect from './JitsiStreamBackgroundEffect';\nimport { ScriptUtil } from '../../util/ScriptUtil';\n\nconst models = {\n    model96: 'https://sdk.sariska.io/segm_lite_v681.tflite',\n    model144: 'https://sdk.sariska.io/segm_full_v679.tflite'\n};\n\nconst segmentationDimensions = {\n    model96: {\n        height: 96,\n        width: 160\n    },\n    model144: {\n        height: 144,\n        width: 256\n    }\n};\n\n/**\n * Creates a new instance of JitsiStreamBackgroundEffect. This loads the Meet background model that is used to\n * extract person segmentation.\n *\n * @param {Object} virtualBackground - The virtual object that contains the background image source and\n * the isVirtualBackground flag that indicates if virtual image is activated.\n * @returns {Promise<JitsiStreamBackgroundEffect>}\n */\nexport async function createVirtualBackgroundEffect(virtualBackground: Object) {\n    if (!MediaStreamTrack.prototype.getSettings && !MediaStreamTrack.prototype.getConstraints) {\n        throw new Error('JitsiStreamBackgroundEffect not supported!');\n    }\n    let tflite;\n\n    if (wasmCheck.feature.simd) {\n        tflite = await createTFLiteSIMDModule();\n    } else {\n        tflite = await createTFLiteModule();\n    }\n\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    const modelResponse = await fetch(wasmCheck.feature.simd ? models.model144 : models.model96);\n\n    if (!modelResponse.ok) {\n        throw new Error('Failed to download tflite model!');\n    }\n\n    const model = await modelResponse.arrayBuffer();\n\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n    tflite._loadModel(model.byteLength);\n\n    const options = {\n        ...wasmCheck.feature.simd ? segmentationDimensions.model144 : segmentationDimensions.model96,\n        virtualBackground\n    };\n\n    return new JitsiStreamBackgroundEffect(tflite, options);\n}\n\nexport async function loadModelFiles() {\n    ScriptUtil.loadScript('https://sdk.sariska.io/tflite');\n    ScriptUtil.loadScript('https://sdk.sariska.io/tflite-simd');\n}\n\n\n","// @flow\n\n/**\n * Constant. Rnnoise default sample size, samples of different size won't work.\n */\nexport const RNNOISE_SAMPLE_LENGTH: number = 480;\n\n/**\n *  Constant. Rnnoise only takes inputs of 480 PCM float32 samples thus 480*4.\n */\nconst RNNOISE_BUFFER_SIZE: number = RNNOISE_SAMPLE_LENGTH * 4;\n\n/**\n *  Constant. Rnnoise only takes operates on 44.1Khz float 32 little endian PCM.\n */\nconst PCM_FREQUENCY: number = 44100;\n\n/**\n * Represents an adaptor for the rnnoise library compiled to webassembly. The class takes care of webassembly\n * memory management and exposes rnnoise functionality such as PCM audio denoising and VAD (voice activity\n * detection) scores.\n */\nexport default class RnnoiseProcessor {\n    /**\n     * Rnnoise context object needed to perform the audio processing.\n     */\n    _context: ?Object;\n\n    /**\n     * State flag, check if the instance was destroyed.\n     */\n    _destroyed: boolean = false;\n\n    /**\n     * WASM interface through which calls to rnnoise are made.\n     */\n    _wasmInterface: Object;\n\n    /**\n     * WASM dynamic memory buffer used as input for rnnoise processing method.\n     */\n    _wasmPcmInput: Object;\n\n    /**\n     * The Float32Array index representing the start point in the wasm heap of the _wasmPcmInput buffer.\n     */\n    _wasmPcmInputF32Index: number;\n\n    /**\n     * WASM dynamic memory buffer used as output for rnnoise processing method.\n     */\n    _wasmPcmOutput: Object;\n\n    /**\n     * Constructor.\n     *\n     * @class\n     * @param {Object} wasmInterface - WebAssembly module interface that exposes rnnoise functionality.\n     */\n    constructor(wasmInterface: Object) {\n        // Considering that we deal with dynamic allocated memory employ exception safety strong guarantee\n        // i.e. in case of exception there are no side effects.\n        try {\n            this._wasmInterface = wasmInterface;\n\n            // For VAD score purposes only allocate the buffers once and reuse them\n            this._wasmPcmInput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmInput) {\n                throw Error('Failed to create wasm input memory buffer!');\n            }\n\n            this._wasmPcmOutput = this._wasmInterface._malloc(RNNOISE_BUFFER_SIZE);\n\n            if (!this._wasmPcmOutput) {\n                wasmInterface._free(this._wasmPcmInput);\n                throw Error('Failed to create wasm output memory buffer!');\n            }\n\n            // The HEAPF32.set function requires an index relative to a Float32 array view of the wasm memory model\n            // which is an array of bytes. This means we have to divide it by the size of a float to get the index\n            // relative to a Float32 Array.\n            this._wasmPcmInputF32Index = this._wasmPcmInput / 4;\n\n            this._context = this._wasmInterface._rnnoise_create();\n        } catch (error) {\n            // release can be called even if not all the components were initialized.\n            this._releaseWasmResources();\n            throw error;\n        }\n    }\n\n    /**\n     * Copy the input PCM Audio Sample to the wasm input buffer.\n     *\n     * @param {Float32Array} pcmSample - Array containing 16 bit format PCM sample stored in 32 Floats .\n     * @returns {void}\n     */\n    _copyPCMSampleToWasmBuffer(pcmSample: Float32Array) {\n        this._wasmInterface.HEAPF32.set(pcmSample, this._wasmPcmInputF32Index);\n    }\n\n    /**\n     * Convert 32 bit Float PCM samples to 16 bit Float PCM samples and store them in 32 bit Floats.\n     *\n     * @param {Float32Array} f32Array - Array containing 32 bit PCM samples.\n     * @returns {void}\n     */\n    _convertTo16BitPCM(f32Array: Float32Array) {\n        for (const [ index, value ] of f32Array.entries()) {\n            f32Array[index] = value * 0x7fff;\n        }\n    }\n\n    /**\n     * Release resources associated with the wasm context. If something goes downhill here\n     * i.e. Exception is thrown, there is nothing much we can do.\n     *\n     * @returns {void}\n     */\n    _releaseWasmResources() {\n        // For VAD score purposes only allocate the buffers once and reuse them\n        if (this._wasmPcmInput) {\n            this._wasmInterface._free(this._wasmPcmInput);\n            this._wasmPcmInput = null;\n        }\n\n        if (this._wasmPcmOutput) {\n            this._wasmInterface._free(this._wasmPcmOutput);\n            this._wasmPcmOutput = null;\n        }\n\n        if (this._context) {\n            this._wasmInterface._rnnoise_destroy(this._context);\n            this._context = null;\n        }\n    }\n\n    /**\n     * Rnnoise can only operate on a certain PCM array size.\n     *\n     * @returns {number} - The PCM sample array size as required by rnnoise.\n     */\n    getSampleLength() {\n        return RNNOISE_SAMPLE_LENGTH;\n    }\n\n    /**\n     * Rnnoise can only operate on a certain format of PCM sample namely float 32 44.1Kz.\n     *\n     * @returns {number} - PCM sample frequency as required by rnnoise.\n     */\n    getRequiredPCMFrequency() {\n        return PCM_FREQUENCY;\n    }\n\n    /**\n     * Release any resources required by the rnnoise context this needs to be called\n     * before destroying any context that uses the processor.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        // Attempting to release a non initialized processor, do nothing.\n        if (this._destroyed) {\n            return;\n        }\n\n        this._releaseWasmResources();\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Calculate the Voice Activity Detection for a raw Float32 PCM sample Array.\n     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.\n     *\n     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples.\n     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .\n     */\n    calculateAudioFrameVAD(pcmFrame: Float32Array) {\n        if (this._destroyed) {\n            throw new Error('RnnoiseProcessor instance is destroyed, please create another one!');\n        }\n\n        const pcmFrameLength = pcmFrame.length;\n\n        if (pcmFrameLength !== RNNOISE_SAMPLE_LENGTH) {\n            throw new Error(`Rnnoise can only process PCM frames of 480 samples! Input sample was:${pcmFrameLength}`);\n        }\n\n        this._convertTo16BitPCM(pcmFrame);\n        this._copyPCMSampleToWasmBuffer(pcmFrame);\n\n        return this._wasmInterface._rnnoise_process_frame(this._context, this._wasmPcmOutput, this._wasmPcmInput);\n    }\n}\n","// @flow\n\n// Script expects to find rnnoise webassembly binary in the same public path root, otherwise it won't load\n// During the build phase this needs to be taken care of manually\nimport RnnoiseProcessor from './RnnoiseProcessor';\nimport { ScriptUtil } from '../../util/ScriptUtil';\n\nexport { RNNOISE_SAMPLE_LENGTH } from './RnnoiseProcessor';\nexport type { RnnoiseProcessor };\n\nlet rnnoiseModule;\n\n/**\n * Creates a new instance of RnnoiseProcessor.\n *\n * @returns {Promise<RnnoiseProcessor>}\n */\nexport function createRnnoiseProcessor() {\n    if (!rnnoiseModule) {\n        rnnoiseModule = rnnoiseWasmInit();\n    }\n    return rnnoiseModule.then(mod => new RnnoiseProcessor(mod));\n}\n\nexport function loadRnnoiseFile() {\n    ScriptUtil.loadScript('https://sdk.sariska.io/index.js');\n}\n","import class2type from \"./class2type.js\";\n\nexport default class2type.toString;\n","import class2type from '../var/class2type.js';\nimport toString from '../var/toString.js';\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\treturn typeof obj === \"object\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n\nexport default toType;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Base class for {@code AudioContext}-based recording adapters.\n */\nexport class AbstractAudioContextAdapter extends RecordingAdapter {\n    /**\n     * The {@code AudioContext} instance.\n     */\n    _audioContext = null;\n\n    /**\n     * The {@code ScriptProcessorNode} instance.\n     */\n    _audioProcessingNode = null;\n\n    /**\n     * The {@code MediaStreamAudioSourceNode} instance.\n     */\n    _audioSource = null;\n\n    /**\n     * The {@code MediaStream} instance, representing the current audio device.\n     */\n    _stream = null;\n\n    /**\n     * Sample rate.\n     */\n    _sampleRate = 44100;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n\n        // sampleRate is browser and OS dependent.\n        // Setting sampleRate explicitly is in the specs but not implemented\n        // by browsers.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/\n        //    AudioContext#Browser_compatibility\n        // And https://bugs.chromium.org/p/chromium/issues/detail?id=432248\n\n        this._audioContext = new AudioContext();\n        this._sampleRate = this._audioContext.sampleRate;\n        logger.log(`Current sampleRate ${this._sampleRate}.`);\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @protected\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @param {Function} callback - Callback function to\n     * handle AudioProcessingEvents.\n     * @returns {Promise}\n     */\n    _initializeAudioContext(micDeviceId, callback) {\n        if (typeof callback !== 'function') {\n            return Promise.reject('a callback function is required.');\n        }\n\n        return this._getAudioStream(micDeviceId)\n        .then(stream => {\n            this._stream = stream;\n            this._audioSource\n                = this._audioContext.createMediaStreamSource(stream);\n            this._audioProcessingNode\n                = this._audioContext.createScriptProcessor(4096, 1, 1);\n            this._audioProcessingNode.onaudioprocess = callback;\n            logger.debug('AudioContext is set up.');\n        })\n        .catch(err => {\n            logger.error(`Error calling getUserMedia(): ${err}`);\n\n            return Promise.reject(err);\n        });\n    }\n\n    /**\n     * Connects the nodes in the {@code AudioContext} to start the flow of\n     * audio data.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the {@code AudioContext}.\n     *\n     * @protected\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = undefined;\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Replaces the current microphone MediaStream.\n     *\n     * @protected\n     * @param {string} micDeviceId - New microphone ID.\n     * @returns {Promise}\n     */\n    _replaceMic(micDeviceId) {\n        if (this._audioContext && this._audioProcessingNode) {\n            return this._getAudioStream(micDeviceId).then(newStream => {\n                const newSource = this._audioContext\n                    .createMediaStreamSource(newStream);\n\n                this._audioSource.disconnect();\n                newSource.connect(this._audioProcessingNode);\n                this._stream = newStream;\n                this._audioSource = newSource;\n            });\n        }\n\n        return Promise.resolve();\n    }\n}\n","export * from './controller';\nexport function loadLocalRecordingAssets () {\n\t\n}","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","export * from './SessionManager';\n","\"use strict\";function e(e,r){if(!s)return!1;const n=e.buffer;let u=g.get(n);if(null==u){if((u=t.validate(n))&&r)try{new t.Instance(new t.Module(n)).exports[0]()}catch(e){u=!1}g.set(n,u)}return u}const t=WebAssembly,r=(...e)=>Uint8Array.of(0,97,115,109,1,0,0,0,...e),n=(...e)=>Uint32Array.of(1836278016,1,...e),u=(...e)=>n(1610679297,33751040,...e,40239360,259),i=(...e)=>r(1,4,1,96,0,0,3,2,1,0,...e,11,0,10,4,110,97,109,101,2,3,1,0,0),o=(...e)=>Uint16Array.of(24832,28019,1,0,1025,24577,0,515,1,...e),a=(...e)=>o(...e,2842,4096,28164,28001,357,260,256,560,259,0),s=\"object\"==typeof t,f=e=>s&&\"function\"==typeof e,g=new WeakMap,l=n(1610679553,58589440,117440770,805372165,101318656,1107297281,268438272,1835101700,17039717,36700416,259),c=o(773,1,2561,269,11,65,65,65,3068,2816,2560,28164,28001,613,259,0),p=n(1610679297,33751040,134873089,100664833,185276736),y=r(2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1,0,8,4,110,97,109,101,2,1,0),b=Uint16Array.of(24832,28019,1,0,1537,24577,512,32639,515,1,2058,1537,16640,16640,2816,2560,28164,28001,613,259,0),m=a(3082,2561,17152,0,0,252),A=a(2058,1537,16640,49152),d=u(101318657,301990913,268438272,1835101700,17039717),U=i(5,4,1,3,1,1,10,7,1,5,0,254,3,0),x=u(84344833,6357249,17369600,4259847,186257917,1845758464),w=i(10,7,1,5,0,208,112,26);module.exports={support:(t=1)=>s&&e(Uint32Array.of(1836278016,t)),get supportStreaming(){return f(t.instantiateStreaming)},feature:{get bigInt(){return e(l,!0)},get bulk(){return e(c)},get exceptions(){return e(p)},get mutableGlobal(){return e(y)},get multiValue(){return e(b)},get saturateConversions(){return e(m)},get signExtensions(){return e(A)},get tailCall(){return e(d)},get threads(){return e(U)},get simd(){return e(x)},get references(){return e(w)},get typeReflection(){return f(t.Memory.type)},get funcReferences(){return f(t.Function)}}};","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    var start = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return bytesToUuid(rnds);\n}\n\nexport default v4;","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport {\n    FlacAdapter,\n    OggAdapter,\n    WavAdapter,\n    downloadBlob\n} from '../recording';\nimport { sessionManager } from '../session';\n\n/**\n * XMPP command for signaling the start of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_START = 'localRecStart';\n\n/**\n * XMPP command for signaling the stop of local recording to all clients.\n * Should be sent by the moderator only.\n */\nconst COMMAND_STOP = 'localRecStop';\n\n/**\n * One-time command used to trigger the moderator to resend the commands.\n * This is a workaround for newly-joined clients to receive remote presence.\n */\nconst COMMAND_PING = 'localRecPing';\n\n/**\n * One-time command sent upon receiving a {@code COMMAND_PING}.\n * Only the moderator sends this command.\n * This command does not carry any information itself, but rather forces the\n * XMPP server to resend the remote presence.\n */\nconst COMMAND_PONG = 'localRecPong';\n\n/**\n * Participant property key for local recording stats.\n */\nconst PROPERTY_STATS = 'localRecStats';\n\n/**\n * Supported recording formats.\n */\nconst RECORDING_FORMATS = new Set([ 'flac', 'wav', 'ogg' ]);\n\n/**\n * Default recording format.\n */\nconst DEFAULT_RECORDING_FORMAT = 'flac';\n\n/**\n * States of the {@code RecordingController}.\n */\nconst ControllerState = Object.freeze({\n    /**\n     * Idle (not recording).\n     */\n    IDLE: Symbol('IDLE'),\n\n    /**\n     * Starting.\n     */\n    STARTING: Symbol('STARTING'),\n\n    /**\n     * Engaged (recording).\n     */\n    RECORDING: Symbol('RECORDING'),\n\n    /**\n     * Stopping.\n     */\n    STOPPING: Symbol('STOPPING'),\n\n    /**\n     * Failed, due to error during starting / stopping process.\n     */\n    FAILED: Symbol('FAILED')\n});\n\n/**\n * Type of the stats reported by each participant (client).\n */\ntype RecordingStats = {\n\n    /**\n     * Current local recording session token used by the participant.\n     */\n    currentSessionToken: number,\n\n    /**\n     * Whether local recording is engaged on the participant's device.\n     */\n    isRecording: boolean,\n\n    /**\n     * Total recorded bytes. (Reserved for future use.)\n     */\n    recordedBytes: number,\n\n    /**\n     * Total recording duration. (Reserved for future use.)\n     */\n    recordedLength: number\n}\n\n/**\n * The component responsible for the coordination of local recording, across\n * multiple participants.\n * Current implementation requires that there is only one moderator in a room.\n */\nexport default class RecordingController {\n\n    /**\n     * For each recording session, there is a separate @{code RecordingAdapter}\n     * instance so that encoded bits from the previous sessions can still be\n     * retrieved after they ended.\n     *\n     * @private\n     */\n    _adapters = {};\n\n    /**\n     * The {@code JitsiConference} instance.\n     *\n     * @private\n     */\n    _conference: * = null;\n\n    /**\n     * Current recording session token.\n     * Session token is a number generated by the moderator, to ensure every\n     * client is in the same recording state.\n     *\n     * @private\n     */\n    _currentSessionToken: number = -1;\n\n    /**\n     * Current state of {@code RecordingController}.\n     *\n     * @private\n     */\n    _state = ControllerState.IDLE;\n\n    /**\n     * Whether or not the audio is muted in the UI. This is stored as internal\n     * state of {@code RecordingController} because we might have recording\n     * sessions that start muted.\n     */\n    _isMuted = false;\n\n    /**\n     * The ID of the active microphone.\n     *\n     * @private\n     */\n    _micDeviceId = 'default';\n\n    /**\n     * Current recording format. This will be in effect from the next\n     * recording session, i.e., if this value is changed during an on-going\n     * recording session, that on-going session will not use the new format.\n     *\n     * @private\n     */\n    _format = DEFAULT_RECORDING_FORMAT;\n\n    /**\n     * Whether or not the {@code RecordingController} has registered for\n     * XMPP events. Prevents initialization from happening multiple times.\n     *\n     * @private\n     */\n    _registered = false;\n\n    /**\n     * FIXME: callback function for the {@code RecordingController} to notify\n     * UI it wants to display a notice. Keeps {@code RecordingController}\n     * decoupled from UI.\n     */\n    _onNotify: ?(messageKey: string, messageParams?: Object) => void;\n\n    /**\n     * FIXME: callback function for the {@code RecordingController} to notify\n     * UI it wants to display a warning. Keeps {@code RecordingController}\n     * decoupled from UI.\n     */\n    _onWarning: ?(messageKey: string, messageParams?: Object) => void;\n\n    /**\n     * FIXME: callback function for the {@code RecordingController} to notify\n     * UI that the local recording state has changed.\n     */\n    _onStateChanged: ?(boolean) => void;\n\n    /**\n     * Constructor.\n     *\n     * @returns {void}\n     */\n    constructor() {\n        this.registerEvents = this.registerEvents.bind(this);\n        this.getParticipantsStats = this.getParticipantsStats.bind(this);\n        this._onStartCommand = this._onStartCommand.bind(this);\n        this._onStopCommand = this._onStopCommand.bind(this);\n        this._onPingCommand = this._onPingCommand.bind(this);\n        this._doStartRecording = this._doStartRecording.bind(this);\n        this._doStopRecording = this._doStopRecording.bind(this);\n        this._updateStats = this._updateStats.bind(this);\n        this._switchToNewSession = this._switchToNewSession.bind(this);\n    }\n\n    registerEvents: () => void;\n\n    /**\n     * Registers listeners for XMPP events.\n     *\n     * @param {JitsiConference} conference - A {@code JitsiConference} instance.\n     * @returns {void}\n     */\n    registerEvents(conference: Object) {\n        if (!this._registered) {\n            this._conference = conference;\n            if (this._conference) {\n                this._conference\n                    .addCommandListener(COMMAND_STOP, this._onStopCommand);\n                this._conference\n                    .addCommandListener(COMMAND_START, this._onStartCommand);\n                this._conference\n                    .addCommandListener(COMMAND_PING, this._onPingCommand);\n                this._registered = true;\n            }\n            if (!this._conference.isModerator()) {\n                this._conference.sendCommandOnce(COMMAND_PING, {});\n            }\n        }\n    }\n\n    /**\n     * Sets the event handler for {@code onStateChanged}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onStateChanged(delegate: Function) {\n        this._onStateChanged = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onNotify}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onNotify(delegate: Function) {\n        this._onNotify = delegate;\n    }\n\n    /**\n     * Sets the event handler for {@code onWarning}.\n     *\n     * @param {Function} delegate - The event handler.\n     * @returns {void}\n     */\n    set onWarning(delegate: Function) {\n        this._onWarning = delegate;\n    }\n\n    /**\n     * Signals the participants to start local recording.\n     *\n     * @returns {void}\n     */\n    startRecording(format: string) {\n        this.registerEvents();\n        this.switchFormat(format);\n        if (this._conference && this._conference.isModerator()) {\n            this._conference.removeCommand(COMMAND_STOP);\n            this._conference.sendCommand(COMMAND_START, {\n                attributes: {\n                    sessionToken: this._getRandomToken(),\n                    format: this._format\n                }\n            });\n        } else if (this._onWarning) {\n            this._onWarning('localRecording.messages.notModerator');\n        }\n    }\n\n    /**\n     * Signals the participants to stop local recording.\n     *\n     * @returns {void}\n     */\n    stopRecording() {\n        if (this._conference) {\n            if (this._conference.isModerator()) {\n                this._conference.removeCommand(COMMAND_START);\n                this._conference.sendCommand(COMMAND_STOP, {\n                    attributes: {\n                        sessionToken: this._currentSessionToken\n                    }\n                });\n            } else if (this._onWarning) {\n                this._onWarning('localRecording.messages.notModerator');\n            }\n        }\n    }\n\n    /**\n     * Triggers the download of recorded data.\n     * Browser only.\n     *\n     * @param {number} sessionToken - The token of the session to download.\n     * @returns {void}\n     */\n    downloadRecordedData(sessionToken: number) {\n        if (this._adapters[sessionToken]) {\n            this._adapters[sessionToken].exportRecordedData()\n                .then(args => {\n                    const { data, format } = args;\n\n                    const filename = `session_${sessionToken}`\n                        + `_${this._conference.myUserId()}.${format}`;\n\n                    downloadBlob(data, filename);\n                })\n                .catch(error => {\n                    logger.error('Failed to download audio for'\n                        + ` session ${sessionToken}. Error: ${error}`);\n                });\n        } else {\n            logger.error(`Invalid session token for download ${sessionToken}`);\n        }\n    }\n\n    /**\n     * Changes the current microphone.\n     *\n     * @param {string} micDeviceId - The new microphone device ID.\n     * @returns {void}\n     */\n    setMicDevice(micDeviceId: string) {\n        if (micDeviceId !== this._micDeviceId) {\n            this._micDeviceId = String(micDeviceId);\n\n            if (this._state === ControllerState.RECORDING) {\n                // sessionManager.endSegment(this._currentSessionToken);\n                logger.log('Before switching microphone...');\n                this._adapters[this._currentSessionToken]\n                    .setMicDevice(this._micDeviceId)\n                    .then(() => {\n                        logger.log('Finished switching microphone.');\n\n                        // sessionManager.beginSegment(this._currentSesoken);\n                    })\n                    .catch(() => {\n                        logger.error('Failed to switch microphone');\n                    });\n            }\n            logger.log(`Switch microphone to ${this._micDeviceId}`);\n        }\n    }\n\n    /**\n     * Mute or unmute audio. When muted, the ongoing local recording should\n     * produce silence.\n     *\n     * @param {boolean} muted - If the audio should be muted.\n     * @returns {void}\n     */\n    setMuted(muted: boolean) {\n        this._isMuted = Boolean(muted);\n\n        if (this._state === ControllerState.RECORDING) {\n            this._adapters[this._currentSessionToken].setMuted(this._isMuted);\n        }\n    }\n\n    /**\n     * Switches the recording format.\n     *\n     * @param {string} newFormat - The new format.\n     * @returns {void}\n     */\n    switchFormat(newFormat: string) {\n        if (!RECORDING_FORMATS.has(newFormat)) {\n            logger.log(`Unknown format ${newFormat}. Ignoring...`);\n\n            return;\n        }\n        this._format = newFormat;\n        logger.log(`Recording format switched to ${newFormat}`);\n\n        // the new format will be used in the next recording session\n    }\n\n    /**\n     * Returns the local recording stats.\n     *\n     * @returns {RecordingStats}\n     */\n    getLocalStats(): RecordingStats {\n        return {\n            currentSessionToken: this._currentSessionToken,\n            isRecording: this._state === ControllerState.RECORDING,\n            recordedBytes: 0,\n            recordedLength: 0\n        };\n    }\n\n    getParticipantsStats: () => *;\n\n    /**\n     * Returns the remote participants' local recording stats.\n     *\n     * @returns {*}\n     */\n    getParticipantsStats() {\n        const members\n            = this._conference.getParticipants()\n            .map(member => {\n                return {\n                    id: member.getId(),\n                    displayName: member.getDisplayName(),\n                    recordingStats:\n                        Bourne.parse(member.getProperty(PROPERTY_STATS) || '{}'),\n                    isSelf: false\n                };\n            });\n\n        // transform into a dictionary for consistent ordering\n        const result = {};\n\n        for (let i = 0; i < members.length; ++i) {\n            result[members[i].id] = members[i];\n        }\n        const localId = this._conference.myUserId();\n\n        result[localId] = {\n            id: localId,\n            displayName: 'localRecording.me',\n            recordingStats: this.getLocalStats(),\n            isSelf: true\n        };\n\n        return result;\n    }\n\n    _changeState: (Symbol) => void;\n\n    /**\n     * Changes the current state of {@code RecordingController}.\n     *\n     * @private\n     * @param {Symbol} newState - The new state.\n     * @returns {void}\n     */\n    _changeState(newState: Symbol) {\n        if (this._state !== newState) {\n            logger.log(`state change: ${this._state.toString()} -> `\n                + `${newState.toString()}`);\n            this._state = newState;\n        }\n    }\n\n    _updateStats: () => void;\n\n    /**\n     * Sends out updates about the local recording stats via XMPP.\n     *\n     * @private\n     * @returns {void}\n     */\n    _updateStats() {\n        if (this._conference) {\n            this._conference.setLocalParticipantProperty(PROPERTY_STATS,\n                JSON.stringify(this.getLocalStats()));\n        }\n    }\n\n    _onStartCommand: (*) => void;\n\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStartCommand(value) {\n        const { sessionToken, format } = value.attributes;\n\n        if (this._state === ControllerState.IDLE) {\n            this._changeState(ControllerState.STARTING);\n            this._switchToNewSession(sessionToken, format);\n            this._doStartRecording();\n        } else if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken !== sessionToken) {\n            // There is local recording going on, but not for the same session.\n            // This means the current state might be out-of-sync with the\n            // moderator's, so we need to restart the recording.\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording().then(() => {\n                this._changeState(ControllerState.STARTING);\n                this._switchToNewSession(sessionToken, format);\n                this._doStartRecording();\n            });\n        }\n    }\n\n    _onStopCommand: (*) => void;\n\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @param {*} value - The event args.\n     * @returns {void}\n     */\n    _onStopCommand(value) {\n        if (this._state === ControllerState.RECORDING\n            && this._currentSessionToken === value.attributes.sessionToken) {\n            this._changeState(ControllerState.STOPPING);\n            this._doStopRecording();\n        }\n    }\n\n    _onPingCommand: () => void;\n\n    /**\n     * Callback function for XMPP event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onPingCommand() {\n        if (this._conference.isModerator()) {\n            logger.log('Received ping, sending pong.');\n            this._conference.sendCommandOnce(COMMAND_PONG, {});\n        }\n    }\n\n    /**\n     * Generates a token that can be used to distinguish each local recording\n     * session.\n     *\n     * @returns {number}\n     */\n    _getRandomToken() {\n        return Math.floor(Math.random() * 100000000) + 1;\n    }\n\n    _doStartRecording: () => void;\n\n    /**\n     * Starts the recording locally.\n     *\n     * @private\n     * @returns {void}\n     */\n    _doStartRecording() {\n        if (this._state === ControllerState.STARTING) {\n            const delegate = this._adapters[this._currentSessionToken];\n\n            delegate.start(this._micDeviceId)\n            .then(() => {\n                this._changeState(ControllerState.RECORDING);\n                sessionManager.beginSegment(this._currentSessionToken);\n                logger.log('Local recording engaged.');\n\n                if (this._onNotify) {\n                    this._onNotify('localRecording.messages.engaged');\n                }\n                if (this._onStateChanged) {\n                    this._onStateChanged(true);\n                }\n\n                delegate.setMuted(this._isMuted);\n                this._updateStats();\n            })\n            .catch(err => {\n                logger.error('Failed to start local recording.', err);\n            });\n        }\n\n    }\n\n    _doStopRecording: () => Promise<void>;\n\n    /**\n     * Stops the recording locally.\n     *\n     * @private\n     * @returns {Promise<void>}\n     */\n    _doStopRecording() {\n        if (this._state === ControllerState.STOPPING) {\n            const token = this._currentSessionToken;\n\n            return this._adapters[this._currentSessionToken]\n                .stop()\n                .then(() => {\n                    this._changeState(ControllerState.IDLE);\n                    sessionManager.endSegment(this._currentSessionToken);\n                    logger.log('Local recording unengaged.');\n                    this.downloadRecordedData(token);\n\n                    const messageKey\n                        = this._conference.isModerator()\n                            ? 'localRecording.messages.finishedModerator'\n                            : 'localRecording.messages.finished';\n                    const messageParams = {\n                        token\n                    };\n\n                    if (this._onNotify) {\n                        this._onNotify(messageKey, messageParams);\n                    }\n                    if (this._onStateChanged) {\n                        this._onStateChanged(false);\n                    }\n                    this._updateStats();\n                })\n                .catch(err => {\n                    logger.error('Failed to stop local recording.', err);\n                });\n        }\n\n        /* eslint-disable */\n        return (Promise.resolve(): Promise<void>);\n        // FIXME: better ways to satisfy flow and ESLint at the same time?\n        /* eslint-enable */\n\n    }\n\n    _switchToNewSession: (string, string) => void;\n\n    /**\n     * Switches to a new local recording session.\n     *\n     * @param {string} sessionToken - The session Token.\n     * @param {string} format - The recording format for the session.\n     * @returns {void}\n     */\n    _switchToNewSession(sessionToken, format) {\n        this._format = format;\n        this._currentSessionToken = sessionToken;\n        logger.log(`New session: ${this._currentSessionToken}, `\n            + `format: ${this._format}`);\n        this._adapters[sessionToken]\n             = this._createRecordingAdapter();\n        sessionManager.createSession(sessionToken, this._format);\n    }\n\n    /**\n     * Creates a recording adapter according to the current recording format.\n     *\n     * @private\n     * @returns {RecordingAdapter}\n     */\n    _createRecordingAdapter() {\n        logger.debug('[RecordingController] creating recording'\n            + ` adapter for ${this._format} format.`);\n\n        switch (this._format) {\n        case 'ogg':\n            return new OggAdapter();\n        case 'flac':\n            return new FlacAdapter();\n        case 'wav':\n            return new WavAdapter();\n        default:\n            throw new Error(`Unknown format: ${this._format}`);\n        }\n    }\n}","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { RecordingAdapter } from './RecordingAdapter';\n\n/**\n * Recording adapter that uses {@code MediaRecorder} (default browser encoding\n * with Opus codec).\n */\nexport class OggAdapter extends RecordingAdapter {\n\n    /**\n     * Instance of MediaRecorder.\n     * @private\n     */\n    _mediaRecorder = null;\n\n    /**\n     * Initialization promise.\n     * @private\n     */\n    _initPromise = null;\n\n    /**\n     * The recorded audio file.\n     * @private\n     */\n    _recordedData = null;\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() =>\n            new Promise(resolve => {\n                this._mediaRecorder.start();\n                resolve();\n            })\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        return new Promise(\n            resolve => {\n                this._mediaRecorder.onstop = () => resolve();\n                this._mediaRecorder.stop();\n            }\n        );\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._recordedData !== null) {\n            return Promise.resolve({\n                data: this._recordedData,\n                format: 'ogg'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._mediaRecorder) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, error) => {\n            this._getAudioStream(micDeviceId)\n            .then(stream => {\n                this._stream = stream;\n                this._mediaRecorder = new MediaRecorder(stream);\n                this._mediaRecorder.ondataavailable\n                    = e => this._saveMediaData(e.data);\n                resolve();\n            })\n            .catch(err => {\n                logger.error(`Error calling getUserMedia(): ${err}`);\n                error();\n            });\n        });\n    }\n\n    /**\n     * Callback for storing the encoded data.\n     *\n     * @private\n     * @param {Blob} data - Encoded data.\n     * @returns {void}\n     */\n    _saveMediaData(data) {\n        this._recordedData = data;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport { AbstractAudioContextAdapter } from './AbstractAudioContextAdapter';\n\nconst WAV_BITS_PER_SAMPLE = 16;\n\n/**\n * Recording adapter for raw WAVE format.\n */\nexport class WavAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Length of the WAVE file, in number of samples.\n     */\n    _wavLength = 0;\n\n    /**\n     * The {@code ArrayBuffer}s that stores the PCM bits.\n     */\n    _wavBuffers = [];\n\n    /**\n     * Whether or not the {@code WavAdapter} is in a ready state.\n     */\n    _isInitialized = false;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._wavBuffers = [];\n            this._wavLength = 0;\n\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._data = this._exportMonoWAV(this._wavBuffers, this._wavLength);\n        this._audioProcessingNode = null;\n        this._audioSource = null;\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'wav'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Creates a WAVE file header.\n     *\n     * @private\n     * @param {number} dataLength - Length of the payload (PCM data), in bytes.\n     * @returns {Uint8Array}\n     */\n    _createWavHeader(dataLength) {\n        // adapted from\n        // https://github.com/mmig/speech-to-flac/blob/master/encoder.js\n\n        // ref: http://soundfile.sapp.org/doc/WaveFormat/\n\n        // create our WAVE file header\n        const buffer = new ArrayBuffer(44);\n        const view = new DataView(buffer);\n\n        // RIFF chunk descriptor\n        writeUTFBytes(view, 0, 'RIFF');\n\n        // set file size at the end\n        writeUTFBytes(view, 8, 'WAVE');\n\n        // FMT sub-chunk\n        writeUTFBytes(view, 12, 'fmt ');\n        view.setUint32(16, 16, true);\n        view.setUint16(20, 1, true);\n\n        // NumChannels\n        view.setUint16(22, 1, true);\n\n        // SampleRate\n        view.setUint32(24, this._sampleRate, true);\n\n        // ByteRate\n        view.setUint32(28,\n            Number(this._sampleRate) * 1 * WAV_BITS_PER_SAMPLE / 8, true);\n\n        // BlockAlign\n        view.setUint16(32, 1 * Number(WAV_BITS_PER_SAMPLE) / 8, true);\n\n        view.setUint16(34, WAV_BITS_PER_SAMPLE, true);\n\n        // data sub-chunk\n        writeUTFBytes(view, 36, 'data');\n\n        // file length\n        view.setUint32(4, 32 + dataLength, true);\n\n        // data chunk length\n        view.setUint32(40, dataLength, true);\n\n        return new Uint8Array(buffer);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._isInitialized) {\n            return Promise.resolve();\n        }\n\n        return this._initializeAudioContext(micDeviceId, this._onAudioProcess)\n            .then(() => {\n                this._isInitialized = true;\n            });\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/\n        //      AudioBuffer/getChannelData\n        // The returned value is an Float32Array.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        // Need to copy the Float32Array:\n        // unlike passing to WebWorker, this data is passed by reference,\n        // so we need to copy it, otherwise the resulting audio file will be\n        // just repeating the last segment.\n        this._wavBuffers.push(new Float32Array(channelLeft));\n        this._wavLength += channelLeft.length;\n    }\n\n    /**\n     * Combines buffers and export to a wav file.\n     *\n     * @private\n     * @param {Float32Array[]} buffers - The stored buffers.\n     * @param {number} length - Total length (number of samples).\n     * @returns {Blob}\n     */\n    _exportMonoWAV(buffers, length) {\n        const dataLength = length * 2; // each sample = 16 bit = 2 bytes\n        const buffer = new ArrayBuffer(44 + dataLength);\n        const view = new DataView(buffer);\n\n        // copy WAV header data into the array buffer\n        const header = this._createWavHeader(dataLength);\n        const len = header.length;\n\n        for (let i = 0; i < len; ++i) {\n            view.setUint8(i, header[i]);\n        }\n\n        // write audio data\n        floatTo16BitPCM(view, 44, buffers);\n\n        return new Blob([ view ], { type: 'audio/wav' });\n    }\n}\n\n\n/**\n * Helper function. Writes a UTF string to memory\n * using big endianness. Required by WAVE headers.\n *\n * @param {ArrayBuffer} view - The view to memory.\n * @param {number} offset - Offset.\n * @param {string} string - The string to be written.\n * @returns {void}\n */\nfunction writeUTFBytes(view, offset, string) {\n    const lng = string.length;\n\n    // convert to big endianness\n    for (let i = 0; i < lng; ++i) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n}\n\n/**\n * Helper function for converting Float32Array to Int16Array.\n *\n * @param {DataView} output - View to the output buffer.\n * @param {number} offset - The offset in output buffer to write from.\n * @param {Float32Array[]} inputBuffers - The input buffers.\n * @returns {void}\n */\nfunction floatTo16BitPCM(output, offset, inputBuffers) {\n\n    let i, j;\n    let input, s, sampleCount;\n    const bufferCount = inputBuffers.length;\n    let o = offset;\n\n    for (i = 0; i < bufferCount; ++i) {\n        input = inputBuffers[i];\n        sampleCount = input.length;\n        for (j = 0; j < sampleCount; ++j, o += 2) {\n            s = Math.max(-1, Math.min(1, input[j]));\n            output.setInt16(o, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\nimport { AbstractAudioContextAdapter } from '../AbstractAudioContextAdapter';\n\nimport {\n    DEBUG,\n    MAIN_THREAD_FINISH,\n    MAIN_THREAD_INIT,\n    MAIN_THREAD_NEW_DATA_ARRIVED,\n    WORKER_BLOB_READY,\n    WORKER_LIBFLAC_READY\n} from './messageTypes';\n\n\n/**\n * Recording adapter that uses libflac.js in the background.\n */\nexport class FlacAdapter extends AbstractAudioContextAdapter {\n\n    /**\n     * Instance of WebWorker (flacEncodeWorker).\n     */\n    _encoder = null;\n\n    /**\n     * Resolve function of the Promise returned by {@code stop()}.\n     * This is called after the WebWorker sends back {@code WORKER_BLOB_READY}.\n     */\n    _stopPromiseResolver = null;\n\n    /**\n     * Resolve function of the Promise that initializes the flacEncodeWorker.\n     */\n    _initWorkerPromiseResolver = null;\n\n    /**\n     * Initialization promise.\n     */\n    _initPromise = null;\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        super();\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n        this._onWorkerMessage = this._onWorkerMessage.bind(this);\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#start()}.\n     *\n     * @inheritdoc\n     */\n    start(micDeviceId) {\n        if (!this._initPromise) {\n            this._initPromise = this._initialize(micDeviceId);\n        }\n\n        return this._initPromise.then(() => {\n            this._connectAudioGraph();\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#stop()}.\n     *\n     * @inheritdoc\n     */\n    stop() {\n        if (!this._encoder) {\n            logger.error('Attempting to stop but has nothing to stop.');\n\n            return Promise.reject();\n        }\n\n        return new Promise(resolve => {\n            this._initPromise = null;\n            this._disconnectAudioGraph();\n            this._stopPromiseResolver = resolve;\n            this._encoder.postMessage({\n                command: MAIN_THREAD_FINISH\n            });\n        });\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#exportRecordedData()}.\n     *\n     * @inheritdoc\n     */\n    exportRecordedData() {\n        if (this._data !== null) {\n            return Promise.resolve({\n                data: this._data,\n                format: 'flac'\n            });\n        }\n\n        return Promise.reject('No audio data recorded.');\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMuted()}.\n     *\n     * @inheritdoc\n     */\n    setMuted(muted) {\n        const shouldEnable = !muted;\n\n        if (!this._stream) {\n            return Promise.resolve();\n        }\n\n        const track = this._stream.getAudioTracks()[0];\n\n        if (!track) {\n            logger.error('Cannot mute/unmute. Track not found!');\n\n            return Promise.resolve();\n        }\n\n        if (track.enabled !== shouldEnable) {\n            track.enabled = shouldEnable;\n            logger.log(muted ? 'Mute' : 'Unmute');\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Implements {@link RecordingAdapter#setMicDevice()}.\n     *\n     * @inheritdoc\n     */\n    setMicDevice(micDeviceId) {\n        return this._replaceMic(micDeviceId);\n    }\n\n    /**\n     * Initialize the adapter.\n     *\n     * @private\n     * @param {string} micDeviceId - The current microphone device ID.\n     * @returns {Promise}\n     */\n    _initialize(micDeviceId) {\n        if (this._encoder !== null) {\n            return Promise.resolve();\n        }\n\n        const promiseInitWorker = new Promise((resolve, reject) => {\n            try {\n                this._loadWebWorker();\n            } catch (e) {\n                reject();\n            }\n\n            // Save the Promise's resolver to resolve it later.\n            // This Promise is only resolved in _onWorkerMessage when we\n            // receive WORKER_LIBFLAC_READY from the WebWorker.\n            this._initWorkerPromiseResolver = resolve;\n\n            // set up listener for messages from the WebWorker\n            this._encoder.onmessage = this._onWorkerMessage;\n\n            this._encoder.postMessage({\n                command: MAIN_THREAD_INIT,\n                config: {\n                    sampleRate: this._sampleRate,\n                    bps: 16\n                }\n            });\n        });\n\n        // Arrow function is used here because we want AudioContext to be\n        // initialized only **after** promiseInitWorker is resolved.\n        return promiseInitWorker\n            .then(() =>\n                this._initializeAudioContext(\n                    micDeviceId,\n                    this._onAudioProcess\n                ));\n    }\n\n    /**\n     * Callback function for handling AudioProcessingEvents.\n     *\n     * @private\n     * @param {AudioProcessingEvent} e - The event containing the raw PCM.\n     * @returns {void}\n     */\n    _onAudioProcess(e) {\n        // Delegates to the WebWorker to do the encoding.\n        // The return of getChannelData() is a Float32Array,\n        // each element representing one sample.\n        const channelLeft = e.inputBuffer.getChannelData(0);\n\n        this._encoder.postMessage({\n            command: MAIN_THREAD_NEW_DATA_ARRIVED,\n            buf: channelLeft\n        });\n    }\n\n    /**\n     * Handler for messages from flacEncodeWorker.\n     *\n     * @private\n     * @param {MessageEvent} e - The event sent by the WebWorker.\n     * @returns {void}\n     */\n    _onWorkerMessage(e) {\n        switch (e.data.command) {\n        case WORKER_BLOB_READY:\n            // Received a Blob representing an encoded FLAC file.\n            this._data = e.data.buf;\n            if (this._stopPromiseResolver !== null) {\n                this._stopPromiseResolver();\n                this._stopPromiseResolver = null;\n                this._encoder.terminate();\n                this._encoder = null;\n            }\n            break;\n        case DEBUG:\n            logger.log(e.data);\n            break;\n        case WORKER_LIBFLAC_READY:\n            logger.log('libflac is ready.');\n            this._initWorkerPromiseResolver();\n            break;\n        default:\n            logger.error(\n                `Unknown event\n                from encoder (WebWorker): \"${e.data.command}\"!`);\n            break;\n        }\n    }\n\n    /**\n     * Loads the WebWorker.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadWebWorker() {\n        // FIXME: Workaround for different file names in development/\n        // production environments.\n        // We cannot import flacEncodeWorker as a webpack module,\n        // because it is in a different bundle and should be lazy-loaded\n        // only when flac recording is in use.\n        try {\n            // try load the minified version first\n            this._encoder = new Worker('https://sdk.sariska.io/flacEncodeWorker.min.js', { name: 'FLAC encoder worker' });\n        } catch (exception1) {\n            // if failed, try unminified version\n            try {\n                this._encoder = new Worker('https://sdk.sariska.io/flacEncodeWorker.js', { name: 'FLAC encoder worker' });\n            } catch (exception2) {\n                throw new Error('Failed to load flacEncodeWorker.');\n            }\n        }\n    }\n}\n","/* @flow */\n\nimport Bourne from '@hapi/bourne';\nimport { jitsiLocalStorage } from '@jitsi/js-utils';\n\nimport { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\n/**\n * Gets high precision system time.\n *\n * @returns {number}\n */\nfunction highPrecisionTime(): number {\n    return window.performance\n        && window.performance.now\n        && window.performance.timing\n        && window.performance.timing.navigationStart\n        ? window.performance.now() + window.performance.timing.navigationStart\n        : Date.now();\n}\n\n// Have to use string literal here, instead of Symbols,\n// because these values need to be JSON-serializible.\n\n/**\n * Types of SessionEvents.\n */\nconst SessionEventType = Object.freeze({\n    /**\n     * Start of local recording session. This is recorded when the\n     * {@code RecordingController} receives the signal to start local recording,\n     * before the actual adapter is engaged.\n     */\n    SESSION_STARTED: 'SESSION_STARTED',\n\n    /**\n     * Start of a continuous segment. This is recorded when the adapter is\n     * engaged. Can happen multiple times in a local recording session,\n     * due to browser reloads or switching of recording device.\n     */\n    SEGMENT_STARTED: 'SEGMENT_STARTED',\n\n    /**\n     * End of a continuous segment. This is recorded when the adapter unengages.\n     */\n    SEGMENT_ENDED: 'SEGMENT_ENDED'\n});\n\n/**\n * Represents an event during a local recording session.\n * The event can be either that the adapter started recording, or stopped\n * recording.\n */\ntype SessionEvent = {\n\n    /**\n     * The type of the event.\n     * Should be one of the values in {@code SessionEventType}.\n     */\n    type: string,\n\n    /**\n     * The timestamp of the event.\n     */\n    timestamp: number\n};\n\n/**\n * Representation of the metadata of a segment.\n */\ntype SegmentInfo = {\n\n    /**\n     * The length of gap before this segment, in milliseconds.\n     * mull if unknown.\n     */\n    gapBefore?: ?number,\n\n    /**\n     * The duration of this segment, in milliseconds.\n     * null if unknown or the segment is not finished.\n     */\n    duration?: ?number,\n\n    /**\n     * The start time, in milliseconds.\n     */\n    start?: ?number,\n\n    /**\n     * The end time, in milliseconds.\n     * null if unknown, the segment is not finished, or the recording is\n     * interrupted (e.g. browser reload).\n     */\n    end?: ?number\n};\n\n/**\n * Representation of metadata of a local recording session.\n */\ntype SessionInfo = {\n\n    /**\n     * The session token.\n     */\n    sessionToken: string,\n\n    /**\n     * The start time of the session.\n     */\n    start: ?number,\n\n    /**\n     * The recording format.\n     */\n    format: string,\n\n    /**\n     * Array of segments in the session.\n     */\n    segments: SegmentInfo[]\n}\n\n/**\n * {@code localStorage} key.\n */\nconst LOCAL_STORAGE_KEY = 'localRecordingMetadataVersion1';\n\n/**\n * SessionManager manages the metadata of each segment during each local\n * recording session.\n *\n * A segment is a continuous portion of recording done using the same adapter\n * on the same microphone device.\n *\n * Browser refreshes, switching of microphone will cause new segments to be\n * created.\n *\n * A recording session can consist of one or more segments.\n */\nclass SessionManager {\n\n    /**\n     * The metadata.\n     */\n    _sessionsMetadata = {\n    };\n\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this._loadMetadata();\n    }\n\n    /**\n     * Loads metadata from localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _loadMetadata() {\n        const dataStr = jitsiLocalStorage.getItem(LOCAL_STORAGE_KEY);\n\n        if (dataStr !== null) {\n            try {\n                const dataObject = Bourne.parse(dataStr);\n\n                this._sessionsMetadata = dataObject;\n            } catch (e) {\n                logger.warn('Failed to parse localStorage item.');\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Persists metadata to localStorage.\n     *\n     * @private\n     * @returns {void}\n     */\n    _saveMetadata() {\n        jitsiLocalStorage.setItem(LOCAL_STORAGE_KEY,\n            JSON.stringify(this._sessionsMetadata));\n    }\n\n    /**\n     * Creates a session if not exists.\n     *\n     * @param {string} sessionToken - The local recording session token.\n     * @param {string} format - The local recording format.\n     * @returns {void}\n     */\n    createSession(sessionToken: string, format: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            this._sessionsMetadata[sessionToken] = {\n                format,\n                events: []\n            };\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SESSION_STARTED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        } else {\n            logger.warn(`Session ${sessionToken} already exists`);\n        }\n    }\n\n    /**\n     * Gets all the Sessions.\n     *\n     * @returns {SessionInfo[]}\n     */\n    getSessions(): SessionInfo[] {\n        const sessionTokens = Object.keys(this._sessionsMetadata);\n        const output = [];\n\n        for (let i = 0; i < sessionTokens.length; ++i) {\n            const thisSession = this._sessionsMetadata[sessionTokens[i]];\n            const newSessionInfo: SessionInfo = {\n                start: thisSession.events[0].timestamp,\n                format: thisSession.format,\n                sessionToken: sessionTokens[i],\n                segments: this.getSegments(sessionTokens[i])\n            };\n\n            output.push(newSessionInfo);\n        }\n\n        output.sort((a, b) => (a.start || 0) - (b.start || 0));\n\n        return output;\n    }\n\n    /**\n     * Removes session metadata.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    removeSession(sessionToken: string) {\n        delete this._sessionsMetadata[sessionToken];\n        this._saveMetadata();\n    }\n\n    /**\n     * Get segments of a given Session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {SegmentInfo[]}\n     */\n    getSegments(sessionToken: string): SegmentInfo[] {\n        const thisSession = this._sessionsMetadata[sessionToken];\n\n        if (thisSession) {\n            return this._constructSegments(thisSession.events);\n        }\n\n        return [];\n    }\n\n    /**\n     * Marks the start of a new segment.\n     * This should be invoked by {@code RecordingAdapter}s when they need to\n     * start asynchronous operations (such as switching tracks) that interrupts\n     * recording.\n     *\n     * @param {string} sessionToken - The token of the session to start a new\n     * segment in.\n     * @returns {number} - Current segment index.\n     */\n    beginSegment(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to add segments to nonexistent'\n                + ` session ${sessionToken}`);\n\n            return -1;\n        }\n        this._sessionsMetadata[sessionToken].events.push({\n            type: SessionEventType.SEGMENT_STARTED,\n            timestamp: highPrecisionTime()\n        });\n        this._saveMetadata();\n\n        return this.getSegments(sessionToken).length - 1;\n    }\n\n    /**\n     * Gets the current segment index. Starting from 0 for the first\n     * segment.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {number}\n     */\n    getCurrentSegmentIndex(sessionToken: string): number {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            return -1;\n        }\n        const segments = this.getSegments(sessionToken);\n\n        if (segments.length === 0) {\n            return -1;\n        }\n\n        const lastSegment = segments[segments.length - 1];\n\n        if (lastSegment.end) {\n            // last segment is already ended\n            return -1;\n        }\n\n        return segments.length - 1;\n    }\n\n    /**\n     * Marks the end of the last segment in a session.\n     *\n     * @param {string} sessionToken - The session token.\n     * @returns {void}\n     */\n    endSegment(sessionToken: string) {\n        if (this._sessionsMetadata[sessionToken] === undefined) {\n            logger.warn('Attempting to end a segment in nonexistent'\n                + ` session ${sessionToken}`);\n        } else {\n            this._sessionsMetadata[sessionToken].events.push({\n                type: SessionEventType.SEGMENT_ENDED,\n                timestamp: highPrecisionTime()\n            });\n            this._saveMetadata();\n        }\n    }\n\n    /**\n     * Constructs an array of {@code SegmentInfo} from an array of\n     * {@code SessionEvent}s.\n     *\n     * @private\n     * @param {SessionEvent[]} events - The array of {@code SessionEvent}s.\n     * @returns {SegmentInfo[]}\n     */\n    _constructSegments(events: SessionEvent[]): SegmentInfo[] {\n        if (events.length === 0) {\n            return [];\n        }\n\n        const output = [];\n        let sessionStartTime = null;\n        let currentSegment: SegmentInfo = {};\n\n        /**\n         * Helper function for adding a new {@code SegmentInfo} object to the\n         * output.\n         *\n         * @returns {void}\n         */\n        function commit() {\n            if (currentSegment.gapBefore === undefined\n                || currentSegment.gapBefore === null) {\n                if (output.length > 0 && output[output.length - 1].end) {\n                    const lastSegment = output[output.length - 1];\n\n                    if (currentSegment.start && lastSegment.end) {\n                        currentSegment.gapBefore = currentSegment.start\n                            - lastSegment.end;\n                    } else {\n                        currentSegment.gapBefore = null;\n                    }\n                } else if (sessionStartTime !== null && output.length === 0) {\n                    currentSegment.gapBefore = currentSegment.start\n                        ? currentSegment.start - sessionStartTime\n                        : null;\n                } else {\n                    currentSegment.gapBefore = null;\n                }\n            }\n            currentSegment.duration = currentSegment.end && currentSegment.start\n                ? currentSegment.end - currentSegment.start\n                : null;\n            output.push(currentSegment);\n            currentSegment = {};\n        }\n\n        for (let i = 0; i < events.length; ++i) {\n            const currentEvent = events[i];\n\n            switch (currentEvent.type) {\n            case SessionEventType.SESSION_STARTED:\n                if (sessionStartTime === null) {\n                    sessionStartTime = currentEvent.timestamp;\n                } else {\n                    logger.warn('Unexpected SESSION_STARTED event.'\n                        , currentEvent);\n                }\n                break;\n            case SessionEventType.SEGMENT_STARTED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    currentSegment.start = currentEvent.timestamp;\n                } else {\n                    commit();\n                    currentSegment.start = currentEvent.timestamp;\n                }\n                break;\n\n            case SessionEventType.SEGMENT_ENDED:\n                if (currentSegment.start === undefined\n                    || currentSegment.start === null) {\n                    logger.warn('Unexpected SEGMENT_ENDED event', currentEvent);\n                } else {\n                    currentSegment.end = currentEvent.timestamp;\n                    commit();\n                }\n                break;\n\n            default:\n                logger.warn('Unexpected error during _constructSegments');\n                break;\n            }\n        }\n        if (currentSegment.start) {\n            commit();\n        }\n\n        return output;\n    }\n\n}\n\n/**\n * Global singleton of {@code SessionManager}.\n */\nexport const sessionManager = new SessionManager();\n\n// For debug only. To remove later.\nwindow.sessionManager = sessionManager;\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\nimport {connectionConfig, conferenceConfig} from './config';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(token, options={}) {\n    options = {...connectionConfig, ...options};\n\n    this.token = token;\n    const jwt = this.parseJwt(token);\n    this.name = jwt ? jwt.room : null;\n    this.user = jwt.context.user;\n    this.options = options;\n    this.xmpp = new XMPP(options, token, this.name);\n    this.token = token;\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\nJitsiConnection.prototype.parseJwt = function (token) {\n    try {\n        return JSON.parse(atob(token.split('.')[1]));\n    }\n    catch (e) {\n        return null;\n    }\n};\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(options={}) {\n    options = {...conferenceConfig, ...options};\n    const name  = this.name;\n    return new JitsiConference({\n        name,\n        config: this.options,\n        connection: this,\n        user: this.user\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport LocalTracksDuration from './modules/statistics/LocalTracksDuration';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\nimport {conferenceDefaultOptions} from './config';\nimport {RecordingController} from \"./modules/local-recording\";\nimport {loadModelFiles} from \"./modules/stream-effects/virtual-background\";\nimport {loadRnnoiseFile} from \"./modules/stream-effects/rnnoise\";\nimport {loadLocalRecordingAssets} from \"./modules/local-recording\";\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.user = options.user;\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryprtion is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    this.handleSubtitles();\n\n    if (options.enableLocalRecording) {\n        this.enableLocalRecording();\n    }\n\n    if (options.enableNoiseCancellation) {\n        this.enableVirtualBackground();\n    }\n\n    if (options.enableVirtualBackground) {\n        this.enableVirtualBackground();\n    }\n\n    this.localTracksDuration = new LocalTracksDuration(this);\n\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid) {\n    return Strophe.getNodeFromJid(jid);\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        const videoType = track.isMuted() ? VideoType.NONE : track.getVideoType();\n\n        this.rtc.setVideoType(videoType);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    return this.getLocalTracks()\n        .filter(track => (track.getType() === MediaType.AUDIO && !this.isStartAudioMuted())\n        || (track.getType() === MediaType.VIDEO && !this.isStartVideoMuted()));\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n\n            // Send 'VideoTypeMessage' on the bridge channel for the new track.\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the JitsiConference level\n                this._setupNewTrack(newTrack);\n                newTrack.isVideoTrack() && this.rtc.setVideoType(newTrack.getVideoType());\n            } else {\n                oldTrack && oldTrack.isVideoTrack() && this.rtc.setVideoType(VideoType.NONE);\n            }\n\n            if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        const videoTypeTagName = 'videoType';\n\n        // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (newTrack.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            this.sendCommand(videoTypeTagName, { value: newTrack.videoType });\n        }\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this.rtc.setVideoType(track.getVideoType());\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this.rtc.setVideoType(VideoType.NONE);\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    // Remove the ssrcs from the remote description.\n    const mediaSessions = this._getMediaSessions();\n    const removePromises = [];\n\n    for (const session of mediaSessions) {\n        removePromises.push(session.removeRemoteStreamsOnLeave(id));\n    }\n\n    Promise.allSettled(removePromises)\n        .then(results => {\n            let removedTracks = [];\n\n            results.map(result => result.value).forEach(value => {\n                if (value) {\n                    removedTracks = removedTracks.concat(value);\n                }\n            });\n\n            removedTracks.forEach(track => {\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n            });\n\n            // There can be no participant in case the member that left is focus.\n            if (participant) {\n                this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n            }\n\n            this._maybeStartOrStopP2P(true /* triggered by user left event */);\n            this._maybeClearSITimeout();\n        });\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.restartInProgress = true;\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled() || this.isP2PTestModeEnabled() || browser.isFirefox() || browser.isWebKitBased()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this.stopP2PSession();\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n/**\n * Gets the local user when joined\n */\nJitsiConference.prototype.getLocalUser = function() {\n    if (this.user) {\n        return this.user;\n    }\n};\n\nJitsiConference.prototype.handleSubtitles = function() {\n    \n    let pastMessage = {};\n    const JSON_TYPE_TRANSCRIPTION_RESULT = 'transcription-result';\n    const JSON_TYPE_TRANSLATION_RESULT = 'translation-result';\n    const P_NAME_REQUESTING_TRANSCRIPTION = 'requestingTranscription';\n    const P_NAME_TRANSLATION_LANGUAGE = 'translation_language';\n\n    this.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant, json) => {\n\n        if (!(json && (json.type === JSON_TYPE_TRANSCRIPTION_RESULT || json.type === JSON_TYPE_TRANSLATION_RESULT))) {\n            return;\n        }\n\n        const translationLanguage = this.getLocalParticipantProperty(\"translation_language\");\n\n        try {\n\n            const transcriptMessageID = json.message_id;\n            const participantName = json.participant.name;\n\n            let newTranscriptMessage = { transcriptMessageID };\n\n            if (json.type === JSON_TYPE_TRANSLATION_RESULT && json.language === translationLanguage) {\n\n                newTranscriptMessage[\"final\"] = json.text;\n                newTranscriptMessage[\"participantName\"] = participantName;\n\n            } else if (json.type === JSON_TYPE_TRANSCRIPTION_RESULT  && !translationLanguage) {\n                // Displays interim and final results without any translation if\n                // translations are disabled.\n\n                const { text } = json.transcript[0];\n\n                // We update the previous transcript message with the same\n                // message ID or adds a new transcript message if it does not\n                // exist in the map.\n\n                if (pastMessage.transcriptMessageID === transcriptMessageID) {\n                   newTranscriptMessage = pastMessage;\n                }  else {\n                   newTranscriptMessage[\"participantName\"] = participantName;\n                }\n\n                // If this is final result, update the state as a final result\n                // and start a count down to remove the subtitle from the state\n                if (!json.is_interim) {\n                    newTranscriptMessage[\"final\"] = text;\n\n                } else if (json.stability > 0.85) {\n                    // If the message has a high stability, we can update the\n                    // stable field of the state and remove the previously\n                    // unstable results\n                    newTranscriptMessage[\"stable\"] = text;\n                    newTranscriptMessage[\"unstable\"] = undefined;\n\n                } else {\n                    // Otherwise, this result has an unstable result, which we\n                    // add to the state. The unstable result will be appended\n                    // after the stable part.\n                    newTranscriptMessage[\"unstable\"] = text;\n                }\n\n            }\n\n            let finalText = \"\";\n\n            if (newTranscriptMessage.final) {\n                finalText = newTranscriptMessage.final;\n            } else {\n                const stable = newTranscriptMessage.stable || '';\n                const unstable = newTranscriptMessage.unstable || '';\n                finalText = stable + unstable;\n            }\n\n            pastMessage = newTranscriptMessage;\n\n            this.emitter.emit(JitsiConferenceEvents.SUBTITLES_RECEIVED, newTranscriptMessage.transcriptMessageID, newTranscriptMessage.participantName, finalText);\n        } catch (error) {\n            logger.error('Error occurred while updating transcriptions\\n', error);\n        }\n    });\n}\n\n// local recording\n\nJitsiConference.prototype.enableLocalRecording = function() {\n    loadLocalRecordingAssets();\n}\n\nJitsiConference.prototype.startLocalRecording = function(format) {\n   this.recordingController = new RecordingController()\n   this.recordingController.registerEvents(this);\n   this.recordingController.startRecording(format);\n}\n\nJitsiConference.prototype.stopLocalRecording = function() {\n   this.recordingController.stopRecording();\n}\n\nJitsiConference.prototype.switchFormat = function() {\n   this.recordingController.switchFormat(format);\n}\n\nJitsiConference.prototype.setMuted = function(muted) {\n   this.recordingController.setMuted(muted);\n}\n\nJitsiConference.prototype.setMicDevice = function(micDeviceId) {\n   this.recordingController.setMicDevice(micDeviceId);\n}\n\n//enable virtual background\n\nJitsiConference.prototype.enableVirtualBackground = function(micDeviceId) {\n   loadModelFiles();\n}\n\n// noiseCancellation\nJitsiConference.prototype.enableNoiseCancellation = function(micDeviceId) {\n   loadRnnoiseFile();\n}\n\n\n\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && typeof window.RTCRtpTransceiver.setCodecPreferences !== 'undefined'\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && (window.RTCRtpSender.prototype.createEncodedStreams\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {String} newIsReplacing - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     */\n    constructor() {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"sriska-media-transport\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}sriska-media-transport.e2ee-worker.js`;\n        const workerBlob\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n        const blobUrl = window.URL.createObjectURL(workerBlob);\n\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\n        this._worker.onerror = e => logger.onerror(e);\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        let receiverStreams;\n\n        if (receiver.createEncodedStreams) {\n            receiverStreams = receiver.createEncodedStreams();\n        } else {\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\n                : receiver.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'decode',\n            readableStream: receiverStreams.readable || receiverStreams.readableStream,\n            writableStream: receiverStreams.writable || receiverStreams.writableStream,\n            participantId\n        }, [ receiverStreams.readable || receiverStreams.readableStream,\n            receiverStreams.writable || receiverStreams.writableStream ]);\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        let senderStreams;\n\n        if (sender.createEncodedStreams) {\n            senderStreams = sender.createEncodedStreams();\n        } else {\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\n                : sender.createEncodedAudioStreams();\n        }\n\n        this._worker.postMessage({\n            operation: 'encode',\n            readableStream: senderStreams.readable || senderStreams.readableStream,\n            writableStream: senderStreams.writable || senderStreams.writableStream,\n            participantId\n        }, [ senderStreams.readable || senderStreams.readableStream,\n            senderStreams.writable || senderStreams.writableStream ]);\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            participantId,\n            key,\n            keyIndex\n        });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._momderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._momderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const newWhitelists = obj.whitelists;\n\n        if (newWhitelists) {\n            const fireEventApprovedJids = (mediaType, oldList, newList) => {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, mediaType, jid));\n            };\n\n            if (newWhitelists[MediaType.AUDIO]) {\n                fireEventApprovedJids(MediaType.AUDIO, this._whitelistAudio, newWhitelists[MediaType.AUDIO]);\n            }\n\n            if (newWhitelists[MediaType.VIDEO]) {\n                fireEventApprovedJids(MediaType.VIDEO, this._whitelistVideo, newWhitelists[MediaType.VIDEO]);\n            }\n        } else if (obj.enabled !== undefined && this._momderationEnabledByType[obj.mediaType] !== obj.enabled) {\n            this._momderationEnabledByType[obj.mediaType] = obj.enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, obj.enabled, obj.mediaType, obj.actor);\n        } else if (obj.approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, obj.mediaType);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(iceConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global __filename */\n\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        // Do not prefer VP9 on Firefox because of the following bug.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\n        if (browser.isFirefox() && this.jvbPreferredCodec === CodecMimeType.VP9) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const codec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = codec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session.signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n                if (peerMediaInfo && peerMediaInfo.codecType && peerMediaInfo.codecType !== codec) {\n                    selectedCodec = peerMediaInfo.codecType;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\nconst DESKTOP_SHARE_RATE = 500000;\nconst HD_BITRATE = 2500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\n\n    // The standard video bitrates are used in Unified plan when switching\n    // between camera/desktop tracks on the same sender.\n    const standardVideoBitrates = {\n        low: LD_BITRATE,\n        standard: SD_BITRATE,\n        high: HD_BITRATE\n    };\n\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\n        ? this.options.videoQuality.maxBitratesVideo\n        : standardVideoBitrates;\n\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender.\n     */\n    this.senderVideoMaxHeight = null;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.videoBitrates[currentCodec.toUpperCase()] || this.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},type=${mediaType}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            media.push(session.media.find(m => m.type === mediaType));\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the\n        // SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference || this._usesTransceiverCodecPreferences) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    for (const mLine of parsedSdp.media) {\n        if (this.codecPreference.enable && mLine.type === this.codecPreference.mediaType) {\n            SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n            // Strip the high profile H264 codecs on mobile clients for p2p connection.\n            // High profile codecs give better quality at the expense of higher load which\n            // we do not want on mobile clients.\n            // Jicofo offers only the baseline code for the jvb connection.\n            // TODO - add check for mobile browsers once js-utils provides that check.\n            if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n            }\n\n            // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n            // as soon as the browser switches to VP9.\n            if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n                const bitrates = this.videoBitrates.VP9 || this.videoBitrates;\n                const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n                const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n                // Use only the HD bitrate for now as there is no API available yet for configuring\n                // the bitrates on the individual SVC layers.\n                mLine.bandwidth = [ {\n                    type: 'AS',\n                    limit\n                } ];\n            } else {\n                // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n                // This is needed on react native clients as react-native-webrtc returns the\n                // SDP that the application passed instead of returning the SDP off the native side.\n                // This line automatically gets cleared on web on every renegotiation.\n                mLine.bandwidth = undefined;\n            }\n        } else if (mLine.type === this.codecPreference.mediaType) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    if (this._usesUnifiedPlan) {\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // In all other cases, i.e., plan-b and unified plan bridge case, use addStream API to\n        // add the track to the peerconnection.\n        // TODO - addTransceiver doesn't generate a MSID for the stream, which is needed for signaling\n        // the ssrc to Jicofo. Switch to using UUID as MSID when addTransceiver is used in Unified plan\n        // JVB connection case as well.\n        const webrtcStream = track.getOriginalStream();\n\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`${this} Adding track=${track} as unmute`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n\n            // renegotiate when SDP is used for simulcast munging\n            .then(() => this.isSimulcastOn() && browser.usesSdpMungingForSimulcast());\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge the order of the codecs based on the preferences set through config.js\n    localSdp = this._mungeCodecOrder(localSdp);\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sets the degradation preference on the video sender. This setting determines if\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\n * to 'maintain-resolution' when a desktop track is being shared instead.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\n    if (!this.peerconnection.getSenders) {\n        logger.debug(`${this} Browser does not support RTCRtpSender`);\n\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n    const preference = localVideoTrack.videoType === VideoType.CAMERA\n        ? DEGRADATION_PREFERENCE_CAMERA\n        : this.options.capScreenshareBitrate && !this._usesUnifiedPlan\n\n            // Prefer resolution for low fps share.\n            ? DEGRADATION_PREFERENCE_DESKTOP\n\n            // Prefer frame-rate for high fps share.\n            : DEGRADATION_PREFERENCE_CAMERA;\n\n    logger.info(`${this} Setting a degradation preference [preference=${preference},track=${localVideoTrack}`);\n    parameters.degradationPreference = preference;\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\n    // For VP9, max bitrate is configured by setting b=AS value in SDP. Browsers do\n    // not yet support setting max bitrates for individual VP9 SVC layers.\n    if (this.getConfiguredVideoCodec() === CodecMimeType.VP9 || !window.RTCRtpSender) {\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack) {\n        return Promise.resolve();\n    }\n\n    const videoType = localVideoTrack.videoType;\n    const planBScreenSharing = !this._usesUnifiedPlan && videoType === VideoType.DESKTOP;\n\n    // Apply the maxbitrates on the video track when one of the conditions is met.\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\n    // 3. The client is running in Unified plan mode.\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\n        || (planBScreenSharing && this.options.capScreenshareBitrate)\n        || this._usesUnifiedPlan)) {\n        return Promise.resolve();\n    }\n\n    const presenterEnabled = localVideoTrack._originalStream\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!(parameters.encodings && parameters.encodings.length)) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                let bitrate;\n\n                if (planBScreenSharing) {\n                    // On chromium, set a max bitrate of 500 Kbps for screenshare when capScreenshareBitrate\n                    // is enabled through config.js and presenter is not turned on.\n                    // FIXME the top 'isSimulcastOn' condition is confusing for screensharing, because\n                    // if capScreenshareBitrate option is enabled then the simulcast is turned off\n                    bitrate = this.options.capScreenshareBitrate\n                        ? presenterEnabled ? HD_BITRATE : DESKTOP_SHARE_RATE\n\n                        // Remove the bitrate config if not capScreenshareBitrate:\n                        // When switching from camera to desktop and videoQuality.maxBitratesVideo were set,\n                        // then the 'maxBitrate' setting must be cleared, because if simulcast is enabled for screen\n                        // and maxBitrates are set then Chrome will not send the screen stream (plan B).\n                        : undefined;\n                } else {\n                    bitrate = this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\n                }\n\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\n                parameters.encodings[encoding].maxBitrate = bitrate;\n            }\n        }\n    } else {\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\n        let bitrate = this.getTargetVideoBitrates()?.high;\n\n        if (videoType === VideoType.CAMERA) {\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\n            const scaleFactor = this.senderVideoMaxHeight\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\n                : 1;\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\n\n            if (encoding) {\n                logger.info(`${this} Setting max bitrate=${encoding.maxBitrate} bps on track=${localVideoTrack}`);\n                bitrate = encoding.maxBitrate;\n            }\n        }\n        parameters.encodings[0].maxBitrate = bitrate;\n    }\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n\n    // Munge the order of the codecs based on the preferences set through config.js\n    description = this._mungeCodecOrder(description);\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    // Need to explicitly check for null as 0 is falsy, but a valid value\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\n\n    this.senderVideoMaxHeight = newHeight;\n\n    // If layer suspension is disabled and sender constraint is not configured for the conference,\n    // resolve here so that the encodings stay enabled. This can happen in custom apps built using\n    // lib-jitsi-meet.\n    if (newHeight === null) {\n        return Promise.resolve();\n    }\n\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\n\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\n        this.encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\n            .map(height => height <= newHeight);\n\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\n\n        if (newHeight > 0 && ldStreamIndex !== -1) {\n            this.encodingsEnabledState[ldStreamIndex] = true;\n        }\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n    } else if (newHeight > 0) {\n        // Do not scale down the desktop tracks until SendVideoController is able to propagate the sender constraints\n        // only on the active media connection. Right now, the sender constraints received on the bridge channel\n        // are propagated on both the jvb and p2p connections in cases where they both are active at the same time.\n        parameters.encodings[0].scaleResolutionDownBy\n            = localVideoTrack.videoType === VideoType.DESKTOP || localVideoTrack.resolution <= newHeight\n                ? 1\n                : Math.floor(localVideoTrack.resolution / newHeight);\n        parameters.encodings[0].active = true;\n    } else {\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${newHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = newHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\n        // the send resolution changes.\n        if (this.isP2P || !this.isSimulcastOn()) {\n            return this.setMaxBitRate();\n        }\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Configure simulcast for camera tracks always and for desktop tracks only when\n            // the \"capScreenshareBitrate\" flag in config.js is disabled.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && !this._isSharingScreen()))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks always and for desktop tracks only when\n    // the \"capScreenshareBitrate\" flag in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && !this._isSharingScreen()))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const msid = mediaSection.ssrcs.find(s => s.attribute === 'msid');\n\n        if (!this.tpc.isP2P\n            && (!msid\n                || mediaSection.mLine?.direction === MediaDirection.RECVONLY\n                || mediaSection.mLine?.direction === MediaDirection.INACTIVE)) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing for p2p sources. Firefox doesn't produce a a=ssrc line\n        // with msid attribute.\n        } else if (this.tpc.isP2P && mediaSection.mLine?.direction === MediaDirection.SENDRECV) {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n                quality = 100 * this._localStats.bitrate.upload / target;\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n        const reloadClient = this._conference.restartInProgress && enableForcedReload;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` restartInProgress: ${this._conference.restartInProgress},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || reloadClient) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.ICE_FAILED);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n\n        // Set the degradation preference on the local video track.\n        mediaSession.setSenderVideoDegradationPreference();\n\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\n        mediaSession.setSenderMaxBitrates();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            if (speakerStatsToUpdate) {\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport Statistics from \"./statistics\";\n\n\nconst INITIAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\n\nlet FINAL_STATE = {\n    localTracksDuration: {\n        audio: {\n            startedTime: -1,\n            value: 0\n        },\n        video: {\n            camera: {\n                startedTime: -1,\n                value: 0\n            },\n            desktop: {\n                startedTime: -1,\n                value: 0\n            }\n        },\n        conference: {\n            startedTime: -1,\n            value: 0\n        }\n    }\n};\n\n\nfunction createLocalTracksDurationEvent(duration) {\n    const { audio, video, conference } = duration;\n    const { camera, desktop } = video;\n\n    return {\n        action: 'local.tracks.durations',\n        attributes: {\n            audio: audio.value,\n            camera: camera.value,\n            conference: conference.value,\n            desktop: desktop.value\n        }\n    };\n}\n\n\nfunction calculateLocalTrackDuration(state, conference) {\n\n    const now = Date.now();\n    const { localTracksDuration } = state;\n\n    const {\n        audio,\n        video\n    } = localTracksDuration;\n    const {\n        camera,\n        desktop\n    } = video;\n\n    const tracks = conference.getLocalTracks();\n    const audioTrack = tracks.find(track=>track.getType()===\"audio\");\n    const videoTrack = tracks.find(track=>track.getType()===\"video\");\n    const newDuration = { ...localTracksDuration };\n\n    if (!audioTrack || audioTrack.muted || !conference) {\n        newDuration.audio = {\n            startedTime: -1,\n            value: audio.value + (audio.startedTime === -1 ? 0 : now - audio.startedTime)\n        };\n    } else if (audio.startedTime === -1) {\n        newDuration.audio.startedTime = now;\n    }\n\n    if (!videoTrack || videoTrack.muted || !conference) {\n        newDuration.video = {\n            camera: {\n                startedTime: -1,\n                value: camera.value + (camera.startedTime === -1 ? 0 : now - camera.startedTime)\n            },\n            desktop: {\n                startedTime: -1,\n                value: desktop.value + (desktop.startedTime === -1 ? 0 : now - desktop.startedTime)\n            }\n        };\n    } else {\n        const { videoType } = videoTrack;\n\n        if (video[videoType].startedTime === -1) {\n            newDuration.video[videoType].startedTime = now;\n        }\n    }\n\n    return {\n        ...localTracksDuration,\n        ...newDuration\n    };\n}\n\n\nexport default class LocalTracksDuration {\n\n    constructor(conference) {\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_JOINED, ()=>{\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...calculateLocalTrackDuration(INITIAL_STATE, conference),\n                    conference: {\n                        startedTime: Date.now(),\n                        value: 0\n                    }\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_UPDATED, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                return;\n            }\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_ADDED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n        conference.addEventListener(JitsiConferenceEvents.TRACK_REMOVED, ()=>{\n\n            const { localTracksDuration } = FINAL_STATE;\n\n            if (localTracksDuration.conference.startedTime === -1) {\n                // We don't want to track the media duration if the conference is not joined yet because otherwise we won't\n                // be able to compare them with the conference duration (from conference join to conference will leave).\n                // Also, do not track media duration for presenter tracks.\n                return;\n            }\n\n            FINAL_STATE = {\n                localTracksDuration: {\n                    ...localTracksDuration,\n                    ...calculateLocalTrackDuration(FINAL_STATE, conference)\n                }\n            };\n        });\n\n\n\n        conference.addEventListener(JitsiConferenceEvents.CONFERENCE_LEFT, ()=>{\n            const { localTracksDuration } = FINAL_STATE;\n            const newLocalTracksDuration = {\n                ...calculateLocalTrackDuration(FINAL_STATE, conference),\n                conference: {\n                    startedTime: -1,\n                    value: Date.now() - localTracksDuration.conference.startedTime\n                }\n            };\n            Statistics.sendAnalytics(createLocalTracksDurationEvent(newLocalTracksDuration));\n        });\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {};\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript() {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript();\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","export function createNetworkInfoEvent({ isOnline, networkType, details }) {\n    const attributes = { isOnline };\n\n    // Do no include optional stuff or Amplitude handler will log warnings.\n    networkType && (attributes.networkType = networkType);\n    details && (attributes.details = details);\n\n    return {\n        action: 'network.info',\n        attributes\n    };\n}\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff ouput\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./SariskaMediaTransport').default;\n","import jQuery from \"../core.js\";\n\n(global => {\n    if (typeof global.$ === 'undefined') {\n        global.$ = jQuery;\n    }\n})(global || window || this); // eslint-disable-line no-invalid-this","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t} else if (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t\t}\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tif (this._connectionStatus !== strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t\t}\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\t\tthis._c._data = [];\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tthis._connectionStatus = status;\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (this._connectionStatus === strophe_js.Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}